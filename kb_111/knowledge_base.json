[
    {
        "question": "What is •?",
        "answer": "Anomalies in the relational model refer to inconsistencies or errors that can arise when working with relational databases, specifically in the context of data insertion, deletion, and modification. There are different types of anomalies that can occur in referencing and referenced relations which can be discussed as:\nThese anomalies can be categorized into three types:",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "How Are Anomalies Caused in DBMS?",
        "answer": "Anomalies in DBMS are caused by poor management of storing everything in the flat database, lack of normalization, data redundancy, and improper use of primary or foreign keys. These issues result in inconsistencies during insert, update, or delete operations, leading to data integrity problems. The three primary types of anomalies are:",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "What is Update anomalies:These anomalies occur when modifying data in a database and can result in inconsistencies or errors. For example, if a database contains information about employees and their salaries, updating an employee’s salary in one record but not in all related records could lead to incorrect calculations and reporting.?",
        "answer": "These anomalies can be removed with the process ofNormalization, which generally splits the database which results in reducing the anomalies in the database.\nSTUDENT Table\nTable 1\nSTUDENT_COURSE\nTable 2\nInsertion Anomaly:If a tuple is inserted in referencing relation and referencing attribute value is not present in referenced attribute, it will not allow insertion in referencing relation.\nOR\nAn insertion anomaly occurs when adding a new row to a table leads to inconsistencies.\nExample:If we try to insert a record into the STUDENT_COURSE table withSTUD_NO = 7, it will not be allowed because there is no correspondingSTUD_NO = 7in the STUDENT table.\nDeletion and Updation Anomaly:If a tuple is deleted or updated from referenced relation and the referenced attribute value is used by referencing attribute in referencing relation, it will not allow deleting the tuple from referenced relation.\nExample:If we want to update a record from STUDENT_COURSE with STUD_NO =1, We have to update it in both rows of the table. If we try to delete a record from the STUDENT table withSTUD_NO = 1, it will not be allowed because there are corresponding records in the STUDENT_COURSE table referencingSTUD_NO = 1. Deleting the record would violate theforeign keyconstraint, which ensures data consistency between the two tables.\nTo avoid this, the following can be used in query:",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "What is Removal of Anomalies?",
        "answer": "Anomalies in DBMS can be removed by applying normalization. Normalization involves organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner. By reducing data redundancy and ensuring data integrity, normalization helps to eliminate anomalies and improve the overall quality of the database\nAccording toE.F.Codd, who is the inventor of theRelational Database, the goals of Normalization include:",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "What is Third Normal Form (3NF): Removes transitive dependencies by ensuring non-key attributes depend only on the primary key.?",
        "answer": "By implementing these normalization steps, the database becomes more structured, reducing the likelihood of insertion, update, and deletion anomalies.\nRead more aboutNormal Forms in DBMS.",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Ensuring data integrity requires addressing anomalies such asinsertion,update, anddeletionproblems in the Relational Model. By effectively arranging data, normalization techniques offer a solution that guarantees consistency and dependability in relational databases.\nNormalization is the process of splitting the tables into smaller ones so as to remove anomalies in the database. It helps in reducingredundancyin the database.",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "Q.2: What are Anomalies in the Relational Model?",
        "answer": "Answer:\nAn anomaly is a fault that is present in the database which occurs because of the poor maintenance and poor storing of the data in the flat database. Normalization is the process of removing anomalies from the database.",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "Q.3: How Anomalies can be removed?",
        "answer": "Answer:\nAnomalies can be removed with the process of Normalization. Normalization involves organizing data into tables and applying rules to ensure data is stored in a consistent and efficient manner.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "anomalies-in-relational-model.txt"
    },
    {
        "question": "What is •?",
        "answer": "Prerequisite –Functional Dependencies\nThis article contains Armstrong’s Axioms and how Armstrong’s Axioms are used to decide about the functional dependency on the database. We will be also learning about the Secondary Rules and Armstrong Relations. We will learn each thing in detail. Before moving ahead, you must have a knowledge of Functional Dependency.",
        "source": "armstrongs-axioms-in-functional-dependency-in-dbms.txt"
    },
    {
        "question": "What is Armstrong Axioms?",
        "answer": "The term Armstrong Axioms refers to the sound and complete set of inference rules or axioms, introduced by William W. Armstrong, that is used to test the logical implication offunctional dependencies. If F is a set of functional dependencies then the closure of F, denoted as F+, is the set of all functional dependencies logically implied by F. Armstrong’s Axioms are a set of rules, that when applied repeatedly, generates a closure of functional dependencies.",
        "source": "armstrongs-axioms-in-functional-dependency-in-dbms.txt"
    },
    {
        "question": "What is Secondary Rules?",
        "answer": "These rules can be derived from the above axioms.",
        "source": "armstrongs-axioms-in-functional-dependency-in-dbms.txt"
    },
    {
        "question": "What is Armstrong Relation?",
        "answer": "Armstrong Relation can be stated as a relation that is able to satisfy all functional dependencies in the F+Closure. In the given set of dependencies, the size of the minimum Armstrong Relation is an exponential function of the number of attributes present in the dependency under consideration.",
        "source": "armstrongs-axioms-in-functional-dependency-in-dbms.txt"
    },
    {
        "question": "Why Armstrong Axioms Refer to the Sound and Complete?",
        "answer": "By sound, we mean that given a set of functional dependencies F specified on a relation schema R, any dependency that we can infer from F by using the primary rules of Armstrong axioms holds in every relation state r of R that satisfies the dependencies in F.By complete, we mean that using primary rules of Armstrong axioms repeatedly to infer dependencies until no more dependencies can be inferred results in the complete set of all possible dependencies that can be inferred from F.",
        "source": "armstrongs-axioms-in-functional-dependency-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "The Relational Model is a way of structuring data using relations, which are a collection of tuples that have the same attributes. Relational Algebra is a procedural query language that takes relations as input and returns relations as output. It uses a set of operators to manipulate and retrieve data from these relations. Here, we’ll explore the basic operators of Relational Algebra using the STUDENT_SPORTS, EMPLOYEE, and STUDENT relations from Table 1, Table 2, and Table 3, respectively.\nTable 1: STUDENT_SPORTS\nTable 2: EMPLOYEE\nTable 3: STUDENT",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 1. Selection operator (σ)?",
        "answer": "Selection operator is used to selecting tuples from a relation based on some condition. Syntax:\n```python\nσ(Cond)(Relation Name)\n```\nExtract students whose age is greater than 18 from STUDENT relation given in Table 3\n```python\nσ(AGE>18)(STUDENT)\n```\n[Note:SELECT operationdoes not show any result, the projection operator must be called before the selection operator to generate or project the result. So, the correct syntax to generate the result is:∏(σ(AGE>18)(STUDENT))]\nRESULT:",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 2. Projection Operator (∏)?",
        "answer": "Projection operator is used to project particular columns from a relation. Syntax:\n```python\n∏(Column 1,Column 2….Column n)(Relation Name)\n```\nExtract ROLL_NO and NAME from STUDENT relation given in Table 3\n```python\n∏(ROLL_NO,NAME)(STUDENT)\n```\nRESULT:\nNote:If the resultant relation after projection has duplicate rows, it will be removed. For Example∏(ADDRESS)(STUDENT) will remove one duplicate row with the value DELHI and return three rows.",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 3. Cross Product(X)?",
        "answer": "Cross product is used to join two relations. For every row of Relation1, each row of Relation2 is concatenated. If Relation1 has m tuples and and Relation2 has n tuples, cross product of Relation1 and Relation2 will have m X n tuples. Syntax:\n```python\nRelation1 X Relation2\n```\nTo apply Cross Product on STUDENT relation given in Table 1 and STUDENT_SPORTS relation given in Table 2,\n```python\nSTUDENT X STUDENT_SPORTS\n```\nRESULT:",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 4. Union (U)?",
        "answer": "Union on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible(These two relations should have the same number of attributes and corresponding attributes in two relations have the same domain). Union operator when applied on two relations R1 and R2 will give a relation with tuples that are either in R1 or in R2. The tuples which are in both R1 and R2 will appear only once in the result relation. Syntax:\n```python\nRelation1 U Relation2\n```\nFind the person who is either student or employees, we can use Union operators like:\n```python\nSTUDENT U EMPLOYEE\n```\nRESULT:",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 5. Minus (-) or Set Difference?",
        "answer": "Minus on two relations R1 and R2 can only be computed if R1 and R2 areunion compatible. Minus operator when applied on two relations as R1-R2 will give a relation with tuples that are in R1 but not in R2. Syntax:\n```python\nRelation1 - Relation2\n```\nFind the person who is a student but not an employee, we can use minus operator like:\n```python\nSTUDENT - EMPLOYEE\n```\nRESULT:",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is 6. Rename(ρ)?",
        "answer": "Rename operatoris used to giving another name to a relation. Syntax:\n```python\nρ(Relation2, Relation1)\n```\nTo rename STUDENT relation to STUDENT1, we can use rename operator like:\n```python\nρ(STUDENT1, STUDENT)\n```\nIf you want to create a relation STUDENT_NAMES with ROLL_NO and NAME from STUDENT, it can be done using rename operator as:\n```python\nρ(STUDENT_NAMES, ∏(ROLL_NO, NAME)(STUDENT))\n```",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is Equi Join?",
        "answer": "These operators provide more functionality for complex queries in relational databases.",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Relational Algebraprovides a fundamental toolkit for querying and manipulating relations in adatabase. It offers a set of operators that allow users to perform basic operations like selection, projection, union, and more. Understanding these operators is essential for working with relational databases and forms the basis for more advancedSQLoperations.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "basic-operators-in-relational-algebra-2.txt"
    },
    {
        "question": "What is •?",
        "answer": "While Third Normal Form (3NF) is generally sufficient for organizing relational databases, it may not completely eliminate redundancy. Redundancy can still occur if there’s a dependency X→X where X is not a candidate key. This issue is addressed by a stronger normal form known asBoyce-Codd Normal Form (BCNF).\nApplying the rules of 2NF and 3NF can help identify some redundancies caused by dependencies that violate candidate keys. However, even with these rules, certain dependencies may still lead to redundancy in 3NF. To overcome this limitation, BCNF was introduced by Codd in 1974 as a more robust solution.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Boyce-Codd Normal Form (BCNF)?",
        "answer": "Boyce-Codd Normal Form (BCNF) is a stricter version of Third Normal Form (3NF) that ensures a more simplified and efficient database design. It enforces that every non-trivial functional dependency must have a superkey on its left-hand side. This approach addresses potential issues with candidate keys and ensures the database is free from redundancy.\nBCNF eliminates redundancy more effectively than 3NF by strictly requiring that all functional dependencies originate from super-keys.\nBCNF is essential for gooddatabase schema designin higher-level systems where consistency and efficiency are important, particularly when there are many candidate keys (as one often finds with a delivery system).",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Rules for BCNF?",
        "answer": "Rule 1:The table should be in the 3rd Normal Form.\nRule 2:X should be a super-key for every functional dependency (FD) X−>Y in a given relation.\nNote:To test whether a relation is in BCNF, we identify all the determinants and make sure that they are candidate keys.\nTo determine the highest normal form of a given relation R with functional dependencies, the first step is to check whether the BCNF condition holds. If R is found to be in BCNF, it can be safely deduced that the relation is also in3NF,2NF,and1NF. The 1NF has the least restrictive constraint – it only requires a relation R to have atomic values in each tuple. The 2NF has a slightly more restrictive constraint.\nThe 3NF has a more restrictive constraint than the first two normal forms but is less restrictive than the BCNF. In this manner, the restriction increases as we traverse down the hierarchy.\nWe are going to discuss some basic examples which let you understand the properties of BCNF. We will discuss multiple examples here.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Example 1?",
        "answer": "Consider a relation R with attributes (student, teacher, subject).\n```python\nFD: { (student, Teacher) -> subject, (student, subject) -> Teacher, (Teacher) -> subject}\n```",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is For example, if we delete the student Tahira , we will also lose the information that N.Gupta teaches C. This issue occurs because the teacher is a determinant but not a candidate key.?",
        "answer": "R is divided into two relations R1(Teacher, Subject) and R2(Student, Teacher).\nFor more, refer toBCNF in DBMS.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "How to Satisfy BCNF?",
        "answer": "For satisfying this table in BCNF, we have to decompose it into further tables. Here is the full procedure through which we transform this table into BCNF. Let us first divide this main table into two tablesStu_BranchandStu_CourseTable.\nStu_Branch Table\nCandidate Key for this table:Stu_ID.\nStu_Course Table\nCandidate Key for this table:Stu_Course.\nStu_Enroll Table\nCandidate Key for this table:{Stu_ID, Stu_Course_No}.\nAfter decomposing into further tables, now it is in BCNF, as it is passing the condition of Super Key, that in functional dependency X−>Y, X is a Super Key.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Example 3?",
        "answer": "Find the highest normal form of a relation R(A, B, C, D, E) with FD set as:\n```python\n{ BC->D, AC->BE, B->E }\n```\nExplanation:",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Step-3:The relation R is in 1st normal form as a relational DBMS does not allow multi-valued or composite attributes.?",
        "answer": "The relation is in 2nd normal form because BC->D is in 2nd normal form (BC is not a proper subset of candidate key AC) and AC->BE is in 2nd normal form (AC is candidate key) and B->E is in 2nd normal form (B is not a proper subset of candidate key AC).\nThe relation isnotin 3rd normal form because in BC->D (neither BC is a super key nor D is a prime attribute) and in B->E (neither B is a super key nor E is a prime attribute) but to satisfy 3rd normal for, either LHS of an FD should be super key or RHS should be a prime attribute. So the highest normal form of relation will be the 2nd Normal form.\nNote:A prime attribute cannot be transitively dependent on a key in BCNF relation.\nConsider these functional dependencies of some relation R\n```python\nAB ->CC ->BAB ->B\n```\nFrom the above functional dependency, we get that the candidate key of R is AB and AC. A careful observation is required to conclude that the above dependency is a Transitive Dependency as the prime attribute B transitively depends on the key AB through C. Now, the first and the third FD are in BCNF as they both contain the candidate key (or simply KEY) on their left sides. The second dependency, however, is not in BCNF but is definitely in 3NF due to the presence of the prime attribute on the right side. So, the highest normal form of R is 3NF as all three FDs satisfy the necessary conditions to be in 3NF.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Example 3?",
        "answer": "For example consider relation R(A, B, C)\n```python\nA -> BC,B -> A\n```\nA and B both are super keys so the above relation is in BCNF.\nNote:BCNF decomposition may always not be possible withdependency preserving, however, it always satisfies thelossless joincondition. For example, relation R (V, W, X, Y, Z), with functional dependencies:\n```python\nV, W -> XY, Z -> XW -> Y\n```\nIt would not satisfy dependency preserving BCNF decomposition.\nNote:Redundancies are sometimes still present in a BCNF relation as it is not always possible to eliminate them completely.\nThere are also some higher-order normal forms, like the 4th Normal Form and the 5th Normal Form.\nFor more, refer to the4th and 5th Normal Forms.",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In conclusion, we can say that Boyce-Codd Normal Form (BCNF) is very much essential as far asdatabase normalizationare concerned which help us in doing normalizing beyond the limits of 3NF. By making sure allfunctional dependenciesdepend on super-keys, this is how BCNF helps us avoid redundancy and update anomalies. This makes the BCNF a highly desirable property and helps in achieving Data Integrity which is number one concern for any Database Designer.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "boyce-codd-normal-form-bcnf.txt"
    },
    {
        "question": "What is •?",
        "answer": "Managing a large set of functional dependencies can result in unnecessary computational overhead. This is where the canonical cover becomes useful. The canonical cover of a set of functional dependencies F is a simplified version of F that retains the same closure as the original set, ensuring no redundancy.\nAn attribute in a functional dependency is considered extraneous if it can be removed without altering the closure of the set of functional dependencies.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Canonical Cover?",
        "answer": "A canonical cover is a set of functional dependencies that is equivalent to a given set of functional dependencies but is minimal in terms of the number of dependencies. Canonical Cover of functional dependency is also called minimal set of functional dependency or irreducible form of functional dependency. The process of finding the canonical cover of a set of functional dependencies involves the following steps:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 2: Eliminate Extraneous Attributes?",
        "answer": "An attribute is extraneous if removing it does not change the closure of the functional dependency set. There are two scenarios:\nExtraneous Attributes on the Left-Hand Side:\nFor X→Y, check if any attribute in X can be removed without affecting the closure.\nTo check:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is If the closure remains unchanged, A is extraneous.?",
        "answer": "Extraneous Attributes on the Right-Hand Side:\nFor X→Y, check if any attribute in Y can be removed without affecting the closure.\nTo check:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 3: Decompose Functional Dependencies?",
        "answer": "If the right-hand side of a functional dependency has multiple attributes (e.g., X→AB), decompose it into multiple functional dependencies, each with a single attribute on the right-hand side.\nExample:\nX→AB becomes X→A and X→B.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 4: Check for Redundant Dependencies?",
        "answer": "A functional dependency FD in F is redundant if it can be removed without changing the closure of F.\nTo check:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 5: Verify the Final Canonical Cover?",
        "answer": "Ensure that each functional dependency is in its simplest form:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is The right-hand side contains only one attribute.?",
        "answer": "Check that the closure of the canonical cover is the same as the closure of the original set F.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Example 1?",
        "answer": "Consider a set of Functional dependencies: 𝐹={𝐴→𝐵𝐶,𝐵→𝐶,𝐴𝐵→𝐶}. Here are the steps to find the canonical cover –",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 1: Combine Functional Dependencies with the Same Left-Hand Side?",
        "answer": "No two functional dependencies in F have the same left-hand side, so no changes are needed at this stage.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 3: Decompose Functional Dependencies?",
        "answer": "All functional dependencies in F={A→B,A→C,B→C} have single attributes on the right-hand side, so no decomposition is needed.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 5: Final Canonical Cover?",
        "answer": "The final canonical cover is:\nFc={A→B,B→C}.\nThis is the simplified set of functional dependencies that has the same closure as the original set F.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Example 2?",
        "answer": "Given F = { A → BC, B → C, A → B, AB → C }",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 3 Minimization:No redundant dependencies remain.?",
        "answer": "Hence, the canonical cover is Fc = { A → B, B → C }",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Example 3?",
        "answer": "Given F = { A → BC, CD → E, B → D, E → A }",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 3 Minimization:No dependencies are redundant.?",
        "answer": "Hence, the canonical cover is F = { A → BC, CD → E, B → D, E → A }.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "How to Check Whether a Set of FDs F Canonically Covers Another Set of FDs G?",
        "answer": "To verify whether a set of functional dependencies (F) canonically covers another set of functional dependencies (G), follow these steps:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 1: Compute the Closure of Each Set?",
        "answer": "Compute the closure of F:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Use the attributes and dependencies in F to determine all the attribute sets that can be functionally determined.?",
        "answer": "Compute the closure of G:",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 2: Compare the Closures?",
        "answer": "For F to canonically cover G, the following conditions must hold:\nThe closure of F must be equivalent to the closure of G. That is, for every functional dependency in G, it must be derivable from F and vice versa.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 3: Derive Dependencies in G from F?",
        "answer": "For each functional dependency in G (e.g., X→Y):\nCompute X+(closure of X) under F.\nVerify that Y⊆X+.\nIf this is true for all functional dependencies in G, F covers G.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 4: Derive Dependencies in F from G?",
        "answer": "To ensure F and G are equivalent:\nFor each dependency in FF (e.g., X→Y):",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Check that Y⊆X+.?",
        "answer": "If all dependencies in F can be derived from G, the two sets are equivalent.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Step 5: Verify Minimality (Optional)?",
        "answer": "If F is already minimal (e.g., no extraneous attributes or redundant dependencies), and it satisfies the above steps, then F is a canonical cover of G.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Example?",
        "answer": "Let F={A→B,B→C} and G={A→BC}.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is F can be derived from G: A→B and B→C are derivable from A→BC.?",
        "answer": "Since F and G have the same closure and F is minimal, F canonically covers G.",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Using a canonical cover for a set of functional dependencies is essential for optimizing database management systems. It simplifies and minimizes the dependencies while preserving their properties, reducing computational overhead, and improving efficiency. By reducing, eliminating, and minimizing dependencies, the canonical cover creates a minimal, unique, and accurate representation of the original set. It helps to reduce data redundancy, improves query performance, and makes database maintenance easier.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "canonical-cover-of-functional-dependencies-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "This article is an extension ofCommonly asked DBMS interview questions | Set 1.",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "What is Q1. There is a table where only one row is fully repeated. Write a Query to find the Repeated row?",
        "answer": "In the above table, we can find duplicate rows using the below query.\n```python\nSELECT name, section FROM tblGROUP BY name, sectionHAVING COUNT(*) > 1\n```",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "Q2. Query to find 2nd highest salary of an employee?",
        "answer": "```python\nSELECT max(salary) FROM EMPLOYEES WHERE salary IN(SELECT salary FROM EMPLOYEEs MINUS SELECT max(salary)FROM EMPLOYEES);\n```\nOR\n```python\nSELECT max(salary) FROM EMPLOYEES WHEREsalary <> (SELECT max(salary) FROM EMPLOYEES);\n```",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "Q3. Consider the following Employee table. How many rows are there in the result of the following query?",
        "answer": "How many rows are there in the result of the following query?\n```python\nSELECT E.IDFROM  Employee EWHERE  EXISTS  (SELECT E2.salaryFROM Employee E2WHERE E2.DeptName = 'CS'AND   E.salary > E2.salary)\n```\nFollowing 5 rows will be the result of the query as 3000 is the minimum salary of CS Employees and all these rows are greater than 30000. 2 4 5 6 7",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "What is Q4. Write a trigger to update Emp table such that, If an updation is done in Dep table then salary of all employees of that department should be incremented by some amount (updation)?",
        "answer": "Assuming Table name are Dept and Emp, trigger can be written as follows:\n```python\nCREATE OR REPLACE TRIGGER update_trigAFTER UPDATE ON DeptFOR EACH ROWDECLARECURSOR emp_cur IS SELECT * FROM Emp;BEGINFOR i IN emp_cur LOOPIF i.dept_no = :NEW.dept_no THENDBMS_OUTPUT.PUT_LINE(i.emp_no);  --  for printing thoseUPDATE Emp                      -- emp number which areSET sal = i.sal + 100           -- updatedWHERE emp_no = i.emp_no;END IF;END LOOP;END;\n```",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "What is Q5. There is a table which contains two columns Student and Marks, you need to find all the students, whose marks are greater than average marks i.e. list of above-average students.?",
        "answer": "```python\nSELECT student, marksFROM tableWHERE marks > SELECT AVG(marks) from table;\n```",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "What is Q6. Name the Employee who has the third-highest salary using sub queries.?",
        "answer": "```python\nSELECT Emp1.NameFROM Employee Emp1WHERE 2 = (SELECT COUNT(DISTINCT(Emp2.Salary))FROM Employee Emp2WHERE Emp2.Salary > Emp1.Salary)\n```\nLogic:Number of people with a salary higher than this person will be 2.",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "Q7. Why we cannot use WHERE clause with aggregate functions like HAVING ?",
        "answer": "The difference between the having and where clause in SQL is that the where clause canNOT be used with aggregates, but the having clause can.\nNote:It is not a predefined rule but by and large you’ll see that in a good number of the SQL queries, we use WHERE prior to GROUP BY and HAVING after GROUP BY. The Where clause acts as a pre filter where as Having as a post filter. The where clause works on row’s data, not on aggregated data.\nLet us consider below table ‘Marks’.\n```python\nSELECT Student, sum(Score) AS totalFROM Marks\n```\nThis would select data row by row basis. The having clause works on aggregated data. For example, the output of the below query\n```python\nSELECT Student, sum(score) AS total FROM Marks\n```\nWhen we apply to have in above query, we get\n```python\nSELECT Student, sum(score) AS totalFROM Marks having total > 70\n```",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "Q10. What is embedded and dynamic SQL?",
        "answer": "Static or Embedded SQL:",
        "source": "commonly-asked-dbms-interview-questions-set-2.txt"
    },
    {
        "question": "What are the advantages of DBMS over traditional file-based systems?",
        "answer": "Database management systems were developed to handle the following difficulties of typical File-processing systems supported by conventional operating systems.1. Data redundancy and inconsistency2. Difficulty in accessing data3. Data isolation – multiple files and formats4. Integrity problems5. Atomicity of updates6. Concurrent access by multiple users7. Security problems",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "Why is the use of DBMS recommended? Explain by listing some of its major advantages?",
        "answer": "Some of the major advantages of DBMS are as follows:",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is What is Join?An SQL Join is used to combine data from two or more tables, based on a common field between them. For example, consider the following two tables.?",
        "answer": "Table –Student Table\nTable –StudentCourse TableCourseIDEnrollNo1100021000310001100221003Following is a join query that shows the names of students enrolled in different courseIDs.SELECT StudentCourse.CourseID, Student.StudentNameFROM StudentCourseINNER JOIN StudentON StudentCourse.EnrollNo = Student.EnrollNoORDER BY StudentCourse.CourseID;The above query would produce the following result.CourseIDStudentName1geek11geek32geek13geek19. What is Identity?Identity (or AutoNumber) is a column that automatically generates numeric values. A start and increment value can be set, but most DBA leave these at 1. A GUID column also generates numbers; the value of this cannot be controlled. Identity/GUID columns do not need to be indexed.10.What is a view in SQL? How to create a view?Aviewis a virtual table based on the result-set of an SQL statement. We can create it using create view syntax.CREATE VIEW view_name ASSELECT column_name(s)FROM table_nameWHERE condition11.What are the uses of view?1. Views can represent a subset of the data contained in a table; consequently, a view can limit the degree of exposure of the underlying tables to the outer world: a given user may have permission to query the view, while denied access to the rest of the base table.2. Views can join and simplify multiple tables into a single virtual table.3. Views can act as aggregated tables, where the database engine aggregates data (sum, average, etc.) and presents the calculated results as part of the data.4. Views can hide the complexity of data.5. Views take very little space to store; the database contains only the definition of a view, not a copy of all the data which it presents.6. Depending on the SQL engine used, views can provide extra security.12. What is a Trigger?A Trigger is a code associated with insert, update or delete operations. The code is executed automatically whenever the associated query is executed on a table. Triggers can be useful to maintain integrity in the database.13. What is a stored procedure?A stored procedure is like a function that contains a set of operations compiled together. It contains a set of operations that are commonly used in an application to do some common database tasks.14. What is the difference between Trigger and Stored Procedure?Unlike Stored Procedures, Triggers cannot be called directly. They can only be associated with queries.15. What is a transaction? What are ACID properties?A Database Transaction is a set of database operations that must be treated as a whole, which means either all operations are executed or none of them. An example can be a bank transaction from one account to another account. Either both debit and credit operations must be executed or none of them. ACID(Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably.16. What are indexes?A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and the use of more storage space to maintain the extra copy of data. Data can be stored only in one order on a disk. To support faster access according to different values, faster search like binary search for different values is desired, For this purpose, indexes are created on tables. These indexes need extra space on the disk, but they allow faster search according to different frequently searched values.17. What are clustered and non-clustered Indexes?Clustered indexes are the index according to which data is physically stored on a disk. Therefore, only one clustered index can be created on a given database table.Non-clustered indexes don’t define the physical ordering of data, but logical ordering. Typically, a tree is created whose leaf point to disk records. B-Tree or B+ tree are used for this purpose.18. What is Denormalization?Denormalization is a database optimization technique in which we add redundant data to one or more tables.19. What is CLAUSE in SQL?A clause in SQL is a part of a query that lets you filter or customize how you want your data to be queried to you.20. What is a Live Lock?Livelock situation can be defined as when two or more processes continually repeat the same interaction in response to changes in the other processes without doing any useful work These processes are not in the waiting state, and they are running concurrently. This is different from a deadlock because in a deadlock all processes are in the waiting state.21. What is QBE?Query-by-example represents a visual/graphical approach for accessing information in a database through the use of query templates called skeleton tables. It is used by entering example values directly into a query template to represent what is to be achieved. QBE is used by many database systems for personal computers. QBE is a very powerful facility that gives the user the capability to access the information a user wants without the knowledge of any programming language. Queries in QBE are expressed by skeleton tables. QBE has two distinct features:QBE has the two-dimensional syntax: Queries look like tables.22. Why are cursors necessary in embedded SQL?A cursor is an object used to store the output of a query for row-by-row processing by the application programs. SQL statements operate on a set of data and return a set of data. On other hand, host language programs operate on a row at a time. The cursors are used to navigate through a set of rows returned by an embedded SQL SELECT statement. A cursor can be compared to a pointer.23. What is the purpose of normalization in DBMS?Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places).Purpose of normalization:It is used to remove duplicate data and database anomalies from the relational table.Normalization helps to reduce redundancy and complexity by examining new data types used in the table.It is helpful to divide the large database table into smaller tables and link them using relationships.It avoids duplicate data or no repeating groups into a table.It reduces the chances for anomalies to occur in a database.24. What is the difference between a database schema and a database state?The collection of information stored in a database at a particular moment in time is called database state while the overall design of the database is called the database schema.25. What is the purpose of SQL?SQL stands for Structured Query Language whose main purpose is to interact with the relational databases in the form of inserting, deleting and updating/modifying the data in the database.26. Explain the concepts of a Primary key and Foreign Key.Primary Key is used to uniquely identify the records in a database table while Foreign Key is mainly used to link two or more tables together, as this is a particular field(s) in one of the database tables which are the primary key of some other table.Example: There are 2 tables – Employee and Department. Both have one common field/column as ‘ID’ where ID is the primary key of the Employee table while this is the foreign key for the Department table.27.What are the main differences between Primary key and Unique Key?Given below are few differences:The main difference between the Primary key and the Unique key is that the Primary key can never have a null value while the Unique key may consist of a null value.In each table, there can be only one primary key while there can be more than one unique key in a table.28. What is the concept of sub-query in terms of SQL?Sub-query is basically the query that is included inside some other query and can also be called an inner query which is found inside the outer query.29. What is the use of the DROP command and what are the differences between DROP, TRUNCATE and DELETE commands?DROP command is a DDL command which is used to drop/delete the existing table, database, index, or view from the database.The major difference between DROP, TRUNCATE and DELETE commands are:DROP and TRUNCATE commands are the DDL commands which are used to delete tables from the database.And when we make use of a DROP command, the tables get deleted permanently all the privileges and indexes that are related to the table also get deleted. This operation cannot be rolled back and so should be used only when necessary.However in case of TRUNCATE, only the data stored in a table is deleted and the structure of the table is preserved and you can re-insert data by the use of“INSERT INTO clause”.It can be rolled back until the commit has been made.DELETE command, on the other hand, is a DML Command which is used to delete rows from the table and this can be rolled back, however its considered slower  than truncate. Using the delete command, we can delete 1 or more specific rows from the table.30. What is the main difference between UNION and UNION ALL?UNION and UNION ALL are used to join the data from 2 or more tables but UNION removes duplicate rows and picks the rows which are distinct after combining the data from the tables whereas UNION ALL does not remove the duplicate rows, it just picks all the data from the tables.31. What is Correlated Subquery in DBMS?A Subquery is also known as a nested query i.e. a query written inside some query. When a Subquery is executed for each of the rows of the outer query then it is termed as a Correlated Subquery.An example of Non-Correlated Subquery is:SELECT * from EMP WHERE ‘RIYA’ IN (SELECT Name from DEPT WHERE EMP.EMPID=DEPT.EMPID);Here, the inner query is not executed for each of the rows of the outer query.32.  Explain Entity, Entity Type, and Entity Set in DBMS?The entity is an object, place, or thing which has its independent existence in the real world and about which data can be stored in a database. For Example, any person, book, etc.Entity Type is a collection of entities that have the same attributes. For Example, the STUDENT table contains rows in which each row is an entity holding the attributes like name, age, and id of the students, hence STUDENT is an Entity Type that holds the entities having the same attributes.Entity Set is a collection of entities of the same type. For Example, A collection of the employees of a firm.33. What are the different levels of abstraction in the DBMS?There are 3 levels of data abstraction in the DBMS.They include:Physical Level: This is the lowest level of the data abstraction which states how the data is stored in the database.Logical Level: This is the next level of the data abstraction which states the type of the data and the relationship among the data that is stored in the database.View Level: This is the highest level in the data abstraction which shows/states only a part of the database.34 . What integrity rules exist in the DBMS?There are two major integrity rules that exist in the DBMS.Entity Integrity:This states a very important rule that the value of a Primary key can never have a NULL value.Referential Integrity:This rule is related to the Foreign key which states that either the value of a Foreign key is a NULL value or it should be the primary key of any other relation.35. What is E-R model in the DBMS?E-R model is known as an Entity-Relationship model in the DBMS which is based on the concept of the Entities and the relationship that exists among these entities.36. What is a functional dependency in the DBMS?This is basically a constraint that is useful in describing the relationship among the different attributes in a relation.Example: If there is some relation ‘R1’ which has 2 attributes as Y and Z then the functional dependency among these 2 attributes can be shown as Y->Z which states that Z is functionally dependent on Y.37. What is 1NF in the DBMS?1NF is known as the First Normal Form.This is the easiest form of the normalization process which states that the domain of an attribute should have only atomic values. The objective of this is to remove the duplicate columns that are present in the table.38.  What is 2NF in the DBMS?2NF is the Second Normal Form.Any table is said to have in the 2NF if it satisfies the following 2 conditions:A table is in the 1NF.Each non-prime attribute of a table is said to be functionally dependent in totality on the primary key.39.  What is 3NF in the DBMS?3NF is the Third Normal Form.Any table is said to have in the 3NF if it satisfies the following 2 conditions:A table is in the 2NF.Each non-prime attribute of a table is said to be non-transitively dependent on every key of the table.40.  What is BCNF in the DBMS?BCNF is the Boyce Codd Normal Form which is stricter than the 3NF.Any table is said to have in the BCNF if it satisfies the following 2 conditions:A table is in the 3NF.For each of the functional dependencies X->Y that exists, X is the super key of a table.41. What is a CLAUSE in terms of SQL?This is used with the SQL queries to fetch specific data as per the requirements on the basis of the conditions that are put in the SQL. This is very helpful in picking the selective records from the complete set of records.For Example, There is a query that has a WHERE condition or the query with the HAVING clause.42.How can you get the alternate records from the table in the SQL?If you want to fetch the odd numbers then the following query can be used:SELECT EmpId from (SELECT rowno,EmpId from Emp) WHERE mod(rowno,2)=1;If you want to fetch the even numbers, then the following query can be used:SELECT EmpId from (SELECT rowno,EmpId from Emp) WHERE mod(rowno,2)=0;43.  How is the pattern matching done in the SQL?Answer: With the help of the LIKE operator, pattern matching is possible in the SQL.’%’ is used with the LIKE operator when it matches with the 0 or more characters, and ‘_’ is used to match the one particular character.Example:SELECT * from Emp WHERE name like ‘b%’;SELECT * from Emp WHERE name like ‘hans_’;44. What is a join in the SQL?A Join is one of the SQL statements which is used to join the data or the rows from 2 or more tables on the basis of a common field/column among them.45. What are the different types of joins in SQL?There are 4 types of SQL Joins:Inner Join: This type of join is used to fetch the data among the tables which are common in both tables.Left Join: This returns all the rows from the table which is on the left side of the join but only the matching rows from the table which is on the right side of the join.Right Join: This returns all the rows from the table which is on the right side of the join but only the matching rows from the table which is on the left side of the join.Full Join: This returns the rows from all the tables on which the join condition has been put and the rows which do not match hold null values.46. Explain the Stored Procedure.A Stored Procedure is a group of SQL statements in the form of a function that has some unique name and is stored in relational database management systems(RDBMS) and can be accessed whenever required.47. What is RDBMS?RDBMS is the Relational Database Management System which contains data in the form of the tables and data is accessed on the basis of the common fields among the tables.48. What are the different types of relationships in the DBMS?A Relationship in DBMS depicts an association between the tables.Different types of relationships are:One-to-One: This basically states that there should be a one-to-one relationship between the tables i.e. there should be one record in both the tables.One-to-Many: This states that there can be many relationships for one i.e. a primary key table hold only one record which can have many, one, or none records in the related table.Many-to-Many: This states that both the tables can be related to many other tables.49. What do you mean by Entity type extension?Compilation of similar entity types into one particular type which is grouped together as an entity set is known as entity type extension.50. What is conceptual design in dbms?Conceptual design is the first stage in the database design process. The goal at this stage is to design a database that is independent of database software and physical details. The output of this process is a conceptual data model that describes the main data entities, attributes, relationships, and constraints of a given problem domain.51. Differentiate between logical database design and physical database design. Show how this separation leads to data independence.ParametersLogical Database DesignPhysical Database DesignTaskMaps or transforms the conceptual schema (or an ER schema) from the high-level data model into a relational database schema.The specifications for the stored database in terms of physical storage structures, record placement, and indexes are designed.Choice of criteriaThe mapping can proceed in two stages:System-independent mapping but data model-dependentTailoring the schemas to a specific DBMSThe following criteria are often used to guide the choice of physical database design options:Response TimeSpace UtilizationTransaction ThroughputResultDDL statements in the language of the chosen DBMS that specify the conceptual and external level schemas of the database system. But if the DDL statements include some physical design parameters, a complete DDL specification must wait until after the physical  database design phase is completed.An initial determination of storage structures and the access paths for the database files. This corresponds to defining the internal schema in terms of Data Storage Definition Language.The database design is divided into several phases. The logical database design and physical database design are two of them. This separation is generally based on the concept of the three-level architecture of DBMS, which provides data independence. Therefore, we can say that this separation leads to data independence because the output of the logical database design is the conceptual and external level schemas of the database system which is independent of the output of the physical database design that is an internal schema.52. What are temporary tables? When are they useful?Temporary tables exist solely for a particular session, or whose data persists for the duration of the transaction. The temporary tables are generally used to support specialized rollups or specific application processing requirements. Unlike a permanent table, space is not allocated to a temporary table when it is created. Space will be dynamically allocated for the table as rows are inserted. The CREATE GLOBAL TEMPORARY TABLE command is used to create a temporary table in Oracle.53. Explain different types of failures that occur in theOracle database.Types of Failures –In the Oracle database following types of failures can occur:Statement Failure·Bad data typeInsufficient spaceInsufficient Privileges(e.g., object privileges to a role)User Process FailureThe user performed an abnormal disconnectThe user’s session was abnormally terminatedThe user’s program raised an address exceptionUser ErrorThe user drops a tableUser damages data by modificationInstance FailureMedia FailureThe user drops a tableUser damages data by modificationAlert LogsRecords informational and error messagesAll Instance startups and shutdowns are recorded in the log54. What is the main goal of RAID technology?RAIDstands forRedundantArray ofInexpensive (or sometimes “Independent”)Disks.RAID is a method of combining several hard disk drives into one logical unit (two or more disks grouped together to appear as a single device to the host system). RAID technology was developed to address the fault-tolerance and performance limitations of conventional disk storage. It can offer fault tolerance and higher throughput levels than a single hard drive or group of independent hard drives. While arrays were once considered complex and relatively specialized storage solutions, today they are easy to use and essential for a broad spectrum of client/server applications.CommentMore infoAdvertise with usNext ArticleCommonly asked DBMS Interview Questions | Set 2GeeksforGeeksImproveArticle Tags :DBMSInterview QuestionsInterview-Questions\nTable –StudentCourse Table\nFollowing is a join query that shows the names of students enrolled in different courseIDs.SELECT StudentCourse.CourseID, Student.StudentNameFROM StudentCourseINNER JOIN StudentON StudentCourse.EnrollNo = Student.EnrollNoORDER BY StudentCourse.CourseID;The above query would produce the following result.CourseIDStudentName1geek11geek32geek13geek19. What is Identity?Identity (or AutoNumber) is a column that automatically generates numeric values. A start and increment value can be set, but most DBA leave these at 1. A GUID column also generates numbers; the value of this cannot be controlled. Identity/GUID columns do not need to be indexed.10.What is a view in SQL? How to create a view?Aviewis a virtual table based on the result-set of an SQL statement. We can create it using create view syntax.CREATE VIEW view_name ASSELECT column_name(s)FROM table_nameWHERE condition11.What are the uses of view?1. Views can represent a subset of the data contained in a table; consequently, a view can limit the degree of exposure of the underlying tables to the outer world: a given user may have permission to query the view, while denied access to the rest of the base table.2. Views can join and simplify multiple tables into a single virtual table.3. Views can act as aggregated tables, where the database engine aggregates data (sum, average, etc.) and presents the calculated results as part of the data.4. Views can hide the complexity of data.5. Views take very little space to store; the database contains only the definition of a view, not a copy of all the data which it presents.6. Depending on the SQL engine used, views can provide extra security.12. What is a Trigger?A Trigger is a code associated with insert, update or delete operations. The code is executed automatically whenever the associated query is executed on a table. Triggers can be useful to maintain integrity in the database.13. What is a stored procedure?A stored procedure is like a function that contains a set of operations compiled together. It contains a set of operations that are commonly used in an application to do some common database tasks.14. What is the difference between Trigger and Stored Procedure?Unlike Stored Procedures, Triggers cannot be called directly. They can only be associated with queries.15. What is a transaction? What are ACID properties?A Database Transaction is a set of database operations that must be treated as a whole, which means either all operations are executed or none of them. An example can be a bank transaction from one account to another account. Either both debit and credit operations must be executed or none of them. ACID(Atomicity, Consistency, Isolation, Durability) is a set of properties that guarantee that database transactions are processed reliably.16. What are indexes?A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and the use of more storage space to maintain the extra copy of data. Data can be stored only in one order on a disk. To support faster access according to different values, faster search like binary search for different values is desired, For this purpose, indexes are created on tables. These indexes need extra space on the disk, but they allow faster search according to different frequently searched values.17. What are clustered and non-clustered Indexes?Clustered indexes are the index according to which data is physically stored on a disk. Therefore, only one clustered index can be created on a given database table.Non-clustered indexes don’t define the physical ordering of data, but logical ordering. Typically, a tree is created whose leaf point to disk records. B-Tree or B+ tree are used for this purpose.18. What is Denormalization?Denormalization is a database optimization technique in which we add redundant data to one or more tables.19. What is CLAUSE in SQL?A clause in SQL is a part of a query that lets you filter or customize how you want your data to be queried to you.20. What is a Live Lock?Livelock situation can be defined as when two or more processes continually repeat the same interaction in response to changes in the other processes without doing any useful work These processes are not in the waiting state, and they are running concurrently. This is different from a deadlock because in a deadlock all processes are in the waiting state.21. What is QBE?Query-by-example represents a visual/graphical approach for accessing information in a database through the use of query templates called skeleton tables. It is used by entering example values directly into a query template to represent what is to be achieved. QBE is used by many database systems for personal computers. QBE is a very powerful facility that gives the user the capability to access the information a user wants without the knowledge of any programming language. Queries in QBE are expressed by skeleton tables. QBE has two distinct features:QBE has the two-dimensional syntax: Queries look like tables.22. Why are cursors necessary in embedded SQL?A cursor is an object used to store the output of a query for row-by-row processing by the application programs. SQL statements operate on a set of data and return a set of data. On other hand, host language programs operate on a row at a time. The cursors are used to navigate through a set of rows returned by an embedded SQL SELECT statement. A cursor can be compared to a pointer.23. What is the purpose of normalization in DBMS?Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places).Purpose of normalization:It is used to remove duplicate data and database anomalies from the relational table.Normalization helps to reduce redundancy and complexity by examining new data types used in the table.It is helpful to divide the large database table into smaller tables and link them using relationships.It avoids duplicate data or no repeating groups into a table.It reduces the chances for anomalies to occur in a database.24. What is the difference between a database schema and a database state?The collection of information stored in a database at a particular moment in time is called database state while the overall design of the database is called the database schema.25. What is the purpose of SQL?SQL stands for Structured Query Language whose main purpose is to interact with the relational databases in the form of inserting, deleting and updating/modifying the data in the database.26. Explain the concepts of a Primary key and Foreign Key.Primary Key is used to uniquely identify the records in a database table while Foreign Key is mainly used to link two or more tables together, as this is a particular field(s) in one of the database tables which are the primary key of some other table.Example: There are 2 tables – Employee and Department. Both have one common field/column as ‘ID’ where ID is the primary key of the Employee table while this is the foreign key for the Department table.27.What are the main differences between Primary key and Unique Key?Given below are few differences:The main difference between the Primary key and the Unique key is that the Primary key can never have a null value while the Unique key may consist of a null value.In each table, there can be only one primary key while there can be more than one unique key in a table.28. What is the concept of sub-query in terms of SQL?Sub-query is basically the query that is included inside some other query and can also be called an inner query which is found inside the outer query.29. What is the use of the DROP command and what are the differences between DROP, TRUNCATE and DELETE commands?DROP command is a DDL command which is used to drop/delete the existing table, database, index, or view from the database.The major difference between DROP, TRUNCATE and DELETE commands are:DROP and TRUNCATE commands are the DDL commands which are used to delete tables from the database.And when we make use of a DROP command, the tables get deleted permanently all the privileges and indexes that are related to the table also get deleted. This operation cannot be rolled back and so should be used only when necessary.However in case of TRUNCATE, only the data stored in a table is deleted and the structure of the table is preserved and you can re-insert data by the use of“INSERT INTO clause”.It can be rolled back until the commit has been made.DELETE command, on the other hand, is a DML Command which is used to delete rows from the table and this can be rolled back, however its considered slower  than truncate. Using the delete command, we can delete 1 or more specific rows from the table.30. What is the main difference between UNION and UNION ALL?UNION and UNION ALL are used to join the data from 2 or more tables but UNION removes duplicate rows and picks the rows which are distinct after combining the data from the tables whereas UNION ALL does not remove the duplicate rows, it just picks all the data from the tables.31. What is Correlated Subquery in DBMS?A Subquery is also known as a nested query i.e. a query written inside some query. When a Subquery is executed for each of the rows of the outer query then it is termed as a Correlated Subquery.An example of Non-Correlated Subquery is:SELECT * from EMP WHERE ‘RIYA’ IN (SELECT Name from DEPT WHERE EMP.EMPID=DEPT.EMPID);Here, the inner query is not executed for each of the rows of the outer query.32.  Explain Entity, Entity Type, and Entity Set in DBMS?The entity is an object, place, or thing which has its independent existence in the real world and about which data can be stored in a database. For Example, any person, book, etc.Entity Type is a collection of entities that have the same attributes. For Example, the STUDENT table contains rows in which each row is an entity holding the attributes like name, age, and id of the students, hence STUDENT is an Entity Type that holds the entities having the same attributes.Entity Set is a collection of entities of the same type. For Example, A collection of the employees of a firm.33. What are the different levels of abstraction in the DBMS?There are 3 levels of data abstraction in the DBMS.They include:Physical Level: This is the lowest level of the data abstraction which states how the data is stored in the database.Logical Level: This is the next level of the data abstraction which states the type of the data and the relationship among the data that is stored in the database.View Level: This is the highest level in the data abstraction which shows/states only a part of the database.34 . What integrity rules exist in the DBMS?There are two major integrity rules that exist in the DBMS.Entity Integrity:This states a very important rule that the value of a Primary key can never have a NULL value.Referential Integrity:This rule is related to the Foreign key which states that either the value of a Foreign key is a NULL value or it should be the primary key of any other relation.35. What is E-R model in the DBMS?E-R model is known as an Entity-Relationship model in the DBMS which is based on the concept of the Entities and the relationship that exists among these entities.36. What is a functional dependency in the DBMS?This is basically a constraint that is useful in describing the relationship among the different attributes in a relation.Example: If there is some relation ‘R1’ which has 2 attributes as Y and Z then the functional dependency among these 2 attributes can be shown as Y->Z which states that Z is functionally dependent on Y.37. What is 1NF in the DBMS?1NF is known as the First Normal Form.This is the easiest form of the normalization process which states that the domain of an attribute should have only atomic values. The objective of this is to remove the duplicate columns that are present in the table.38.  What is 2NF in the DBMS?2NF is the Second Normal Form.Any table is said to have in the 2NF if it satisfies the following 2 conditions:A table is in the 1NF.Each non-prime attribute of a table is said to be functionally dependent in totality on the primary key.39.  What is 3NF in the DBMS?3NF is the Third Normal Form.Any table is said to have in the 3NF if it satisfies the following 2 conditions:A table is in the 2NF.Each non-prime attribute of a table is said to be non-transitively dependent on every key of the table.40.  What is BCNF in the DBMS?BCNF is the Boyce Codd Normal Form which is stricter than the 3NF.Any table is said to have in the BCNF if it satisfies the following 2 conditions:A table is in the 3NF.For each of the functional dependencies X->Y that exists, X is the super key of a table.41. What is a CLAUSE in terms of SQL?This is used with the SQL queries to fetch specific data as per the requirements on the basis of the conditions that are put in the SQL. This is very helpful in picking the selective records from the complete set of records.For Example, There is a query that has a WHERE condition or the query with the HAVING clause.42.How can you get the alternate records from the table in the SQL?If you want to fetch the odd numbers then the following query can be used:SELECT EmpId from (SELECT rowno,EmpId from Emp) WHERE mod(rowno,2)=1;If you want to fetch the even numbers, then the following query can be used:SELECT EmpId from (SELECT rowno,EmpId from Emp) WHERE mod(rowno,2)=0;43.  How is the pattern matching done in the SQL?Answer: With the help of the LIKE operator, pattern matching is possible in the SQL.’%’ is used with the LIKE operator when it matches with the 0 or more characters, and ‘_’ is used to match the one particular character.Example:SELECT * from Emp WHERE name like ‘b%’;SELECT * from Emp WHERE name like ‘hans_’;44. What is a join in the SQL?A Join is one of the SQL statements which is used to join the data or the rows from 2 or more tables on the basis of a common field/column among them.45. What are the different types of joins in SQL?There are 4 types of SQL Joins:Inner Join: This type of join is used to fetch the data among the tables which are common in both tables.Left Join: This returns all the rows from the table which is on the left side of the join but only the matching rows from the table which is on the right side of the join.Right Join: This returns all the rows from the table which is on the right side of the join but only the matching rows from the table which is on the left side of the join.Full Join: This returns the rows from all the tables on which the join condition has been put and the rows which do not match hold null values.46. Explain the Stored Procedure.A Stored Procedure is a group of SQL statements in the form of a function that has some unique name and is stored in relational database management systems(RDBMS) and can be accessed whenever required.47. What is RDBMS?RDBMS is the Relational Database Management System which contains data in the form of the tables and data is accessed on the basis of the common fields among the tables.48. What are the different types of relationships in the DBMS?A Relationship in DBMS depicts an association between the tables.Different types of relationships are:One-to-One: This basically states that there should be a one-to-one relationship between the tables i.e. there should be one record in both the tables.One-to-Many: This states that there can be many relationships for one i.e. a primary key table hold only one record which can have many, one, or none records in the related table.Many-to-Many: This states that both the tables can be related to many other tables.49. What do you mean by Entity type extension?Compilation of similar entity types into one particular type which is grouped together as an entity set is known as entity type extension.50. What is conceptual design in dbms?Conceptual design is the first stage in the database design process. The goal at this stage is to design a database that is independent of database software and physical details. The output of this process is a conceptual data model that describes the main data entities, attributes, relationships, and constraints of a given problem domain.51. Differentiate between logical database design and physical database design. Show how this separation leads to data independence.ParametersLogical Database DesignPhysical Database DesignTaskMaps or transforms the conceptual schema (or an ER schema) from the high-level data model into a relational database schema.The specifications for the stored database in terms of physical storage structures, record placement, and indexes are designed.Choice of criteriaThe mapping can proceed in two stages:System-independent mapping but data model-dependentTailoring the schemas to a specific DBMSThe following criteria are often used to guide the choice of physical database design options:Response TimeSpace UtilizationTransaction ThroughputResultDDL statements in the language of the chosen DBMS that specify the conceptual and external level schemas of the database system. But if the DDL statements include some physical design parameters, a complete DDL specification must wait until after the physical  database design phase is completed.An initial determination of storage structures and the access paths for the database files. This corresponds to defining the internal schema in terms of Data Storage Definition Language.The database design is divided into several phases. The logical database design and physical database design are two of them. This separation is generally based on the concept of the three-level architecture of DBMS, which provides data independence. Therefore, we can say that this separation leads to data independence because the output of the logical database design is the conceptual and external level schemas of the database system which is independent of the output of the physical database design that is an internal schema.52. What are temporary tables? When are they useful?Temporary tables exist solely for a particular session, or whose data persists for the duration of the transaction. The temporary tables are generally used to support specialized rollups or specific application processing requirements. Unlike a permanent table, space is not allocated to a temporary table when it is created. Space will be dynamically allocated for the table as rows are inserted. The CREATE GLOBAL TEMPORARY TABLE command is used to create a temporary table in Oracle.53. Explain different types of failures that occur in theOracle database.Types of Failures –In the Oracle database following types of failures can occur:Statement Failure·Bad data typeInsufficient spaceInsufficient Privileges(e.g., object privileges to a role)User Process FailureThe user performed an abnormal disconnectThe user’s session was abnormally terminatedThe user’s program raised an address exceptionUser ErrorThe user drops a tableUser damages data by modificationInstance FailureMedia FailureThe user drops a tableUser damages data by modificationAlert LogsRecords informational and error messagesAll Instance startups and shutdowns are recorded in the log54. What is the main goal of RAID technology?RAIDstands forRedundantArray ofInexpensive (or sometimes “Independent”)Disks.RAID is a method of combining several hard disk drives into one logical unit (two or more disks grouped together to appear as a single device to the host system). RAID technology was developed to address the fault-tolerance and performance limitations of conventional disk storage. It can offer fault tolerance and higher throughput levels than a single hard drive or group of independent hard drives. While arrays were once considered complex and relatively specialized storage solutions, today they are easy to use and essential for a broad spectrum of client/server applications.CommentMore infoAdvertise with usNext ArticleCommonly asked DBMS Interview Questions | Set 2GeeksforGeeksImproveArticle Tags :DBMSInterview QuestionsInterview-Questions\nFollowing is a join query that shows the names of students enrolled in different courseIDs.\n```python\nSELECT StudentCourse.CourseID, Student.StudentNameFROM StudentCourseINNER JOIN StudentON StudentCourse.EnrollNo = Student.EnrollNoORDER BY StudentCourse.CourseID;\n```\nThe above query would produce the following result.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is What is a view in SQL? How to create a view?Aviewis a virtual table based on the result-set of an SQL statement. We can create it using create view syntax.?",
        "answer": "```python\nCREATE VIEW view_name ASSELECT column_name(s)FROM table_nameWHERE condition\n```",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Denormalization?",
        "answer": "Denormalization is a database optimization technique in which we add redundant data to one or more tables.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is CLAUSE in SQL?",
        "answer": "A clause in SQL is a part of a query that lets you filter or customize how you want your data to be queried to you.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is a Live Lock?",
        "answer": "Livelock situation can be defined as when two or more processes continually repeat the same interaction in response to changes in the other processes without doing any useful work These processes are not in the waiting state, and they are running concurrently. This is different from a deadlock because in a deadlock all processes are in the waiting state.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is QBE?",
        "answer": "Query-by-example represents a visual/graphical approach for accessing information in a database through the use of query templates called skeleton tables. It is used by entering example values directly into a query template to represent what is to be achieved. QBE is used by many database systems for personal computers. QBE is a very powerful facility that gives the user the capability to access the information a user wants without the knowledge of any programming language. Queries in QBE are expressed by skeleton tables. QBE has two distinct features:\nQBE has the two-dimensional syntax: Queries look like tables.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "Why are cursors necessary in embedded SQL?",
        "answer": "A cursor is an object used to store the output of a query for row-by-row processing by the application programs. SQL statements operate on a set of data and return a set of data. On other hand, host language programs operate on a row at a time. The cursors are used to navigate through a set of rows returned by an embedded SQL SELECT statement. A cursor can be compared to a pointer.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the purpose of normalization in DBMS?",
        "answer": "Database normalization is the process of organizing the attributes of the database to reduce or eliminate data redundancy (having the same data but at different places).\nPurpose of normalization:\nIt is used to remove duplicate data and database anomalies from the relational table.\nNormalization helps to reduce redundancy and complexity by examining new data types used in the table.\nIt is helpful to divide the large database table into smaller tables and link them using relationships.\nIt avoids duplicate data or no repeating groups into a table.\nIt reduces the chances for anomalies to occur in a database.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the difference between a database schema and a database state?",
        "answer": "The collection of information stored in a database at a particular moment in time is called database state while the overall design of the database is called the database schema.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the purpose of SQL?",
        "answer": "SQL stands for Structured Query Language whose main purpose is to interact with the relational databases in the form of inserting, deleting and updating/modifying the data in the database.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Explain the concepts of a Primary key and Foreign Key.?",
        "answer": "Primary Key is used to uniquely identify the records in a database table while Foreign Key is mainly used to link two or more tables together, as this is a particular field(s) in one of the database tables which are the primary key of some other table.\nExample: There are 2 tables – Employee and Department. Both have one common field/column as ‘ID’ where ID is the primary key of the Employee table while this is the foreign key for the Department table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What are the main differences between Primary key and Unique Key?",
        "answer": "Given below are few differences:\nThe main difference between the Primary key and the Unique key is that the Primary key can never have a null value while the Unique key may consist of a null value.\nIn each table, there can be only one primary key while there can be more than one unique key in a table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the concept of sub-query in terms of SQL?",
        "answer": "Sub-query is basically the query that is included inside some other query and can also be called an inner query which is found inside the outer query.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the use of the DROP command and what are the differences between DROP, TRUNCATE and DELETE commands?",
        "answer": "DROP command is a DDL command which is used to drop/delete the existing table, database, index, or view from the database.\nThe major difference between DROP, TRUNCATE and DELETE commands are:\nDROP and TRUNCATE commands are the DDL commands which are used to delete tables from the database.\nAnd when we make use of a DROP command, the tables get deleted permanently all the privileges and indexes that are related to the table also get deleted. This operation cannot be rolled back and so should be used only when necessary.\nHowever in case of TRUNCATE, only the data stored in a table is deleted and the structure of the table is preserved and you can re-insert data by the use of“INSERT INTO clause”.It can be rolled back until the commit has been made.\nDELETE command, on the other hand, is a DML Command which is used to delete rows from the table and this can be rolled back, however its considered slower  than truncate. Using the delete command, we can delete 1 or more specific rows from the table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the main difference between UNION and UNION ALL?",
        "answer": "UNION and UNION ALL are used to join the data from 2 or more tables but UNION removes duplicate rows and picks the rows which are distinct after combining the data from the tables whereas UNION ALL does not remove the duplicate rows, it just picks all the data from the tables.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Correlated Subquery in DBMS?",
        "answer": "A Subquery is also known as a nested query i.e. a query written inside some query. When a Subquery is executed for each of the rows of the outer query then it is termed as a Correlated Subquery.\nAn example of Non-Correlated Subquery is:\nHere, the inner query is not executed for each of the rows of the outer query.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "Explain Entity, Entity Type, and Entity Set in DBMS?",
        "answer": "The entity is an object, place, or thing which has its independent existence in the real world and about which data can be stored in a database. For Example, any person, book, etc.\nEntity Type is a collection of entities that have the same attributes. For Example, the STUDENT table contains rows in which each row is an entity holding the attributes like name, age, and id of the students, hence STUDENT is an Entity Type that holds the entities having the same attributes.\nEntity Set is a collection of entities of the same type. For Example, A collection of the employees of a firm.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What are the different levels of abstraction in the DBMS?",
        "answer": "There are 3 levels of data abstraction in the DBMS.\nThey include:\nPhysical Level: This is the lowest level of the data abstraction which states how the data is stored in the database.\nLogical Level: This is the next level of the data abstraction which states the type of the data and the relationship among the data that is stored in the database.\nView Level: This is the highest level in the data abstraction which shows/states only a part of the database.\n34 . What integrity rules exist in the DBMS?\nThere are two major integrity rules that exist in the DBMS.\nEntity Integrity:This states a very important rule that the value of a Primary key can never have a NULL value.\nReferential Integrity:This rule is related to the Foreign key which states that either the value of a Foreign key is a NULL value or it should be the primary key of any other relation.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is E-R model in the DBMS?",
        "answer": "E-R model is known as an Entity-Relationship model in the DBMS which is based on the concept of the Entities and the relationship that exists among these entities.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is a functional dependency in the DBMS?",
        "answer": "This is basically a constraint that is useful in describing the relationship among the different attributes in a relation.\nExample: If there is some relation ‘R1’ which has 2 attributes as Y and Z then the functional dependency among these 2 attributes can be shown as Y->Z which states that Z is functionally dependent on Y.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is 1NF in the DBMS?",
        "answer": "1NF is known as the First Normal Form.\nThis is the easiest form of the normalization process which states that the domain of an attribute should have only atomic values. The objective of this is to remove the duplicate columns that are present in the table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is 2NF in the DBMS?",
        "answer": "2NF is the Second Normal Form.\nAny table is said to have in the 2NF if it satisfies the following 2 conditions:\nA table is in the 1NF.\nEach non-prime attribute of a table is said to be functionally dependent in totality on the primary key.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is 3NF in the DBMS?",
        "answer": "3NF is the Third Normal Form.\nAny table is said to have in the 3NF if it satisfies the following 2 conditions:\nA table is in the 2NF.\nEach non-prime attribute of a table is said to be non-transitively dependent on every key of the table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is BCNF in the DBMS?",
        "answer": "BCNF is the Boyce Codd Normal Form which is stricter than the 3NF.\nAny table is said to have in the BCNF if it satisfies the following 2 conditions:\nA table is in the 3NF.\nFor each of the functional dependencies X->Y that exists, X is the super key of a table.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is a CLAUSE in terms of SQL?",
        "answer": "This is used with the SQL queries to fetch specific data as per the requirements on the basis of the conditions that are put in the SQL. This is very helpful in picking the selective records from the complete set of records.\nFor Example, There is a query that has a WHERE condition or the query with the HAVING clause.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "How can you get the alternate records from the table in the SQL?",
        "answer": "If you want to fetch the odd numbers then the following query can be used:\nIf you want to fetch the even numbers, then the following query can be used:",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "How is the pattern matching done in the SQL?",
        "answer": "Answer: With the help of the LIKE operator, pattern matching is possible in the SQL.’%’ is used with the LIKE operator when it matches with the 0 or more characters, and ‘_’ is used to match the one particular character.\nExample:",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is a join in the SQL?",
        "answer": "A Join is one of the SQL statements which is used to join the data or the rows from 2 or more tables on the basis of a common field/column among them.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What are the different types of joins in SQL?",
        "answer": "There are 4 types of SQL Joins:\nInner Join: This type of join is used to fetch the data among the tables which are common in both tables.\nLeft Join: This returns all the rows from the table which is on the left side of the join but only the matching rows from the table which is on the right side of the join.\nRight Join: This returns all the rows from the table which is on the right side of the join but only the matching rows from the table which is on the left side of the join.\nFull Join: This returns the rows from all the tables on which the join condition has been put and the rows which do not match hold null values.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Explain the Stored Procedure.?",
        "answer": "A Stored Procedure is a group of SQL statements in the form of a function that has some unique name and is stored in relational database management systems(RDBMS) and can be accessed whenever required.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is RDBMS?",
        "answer": "RDBMS is the Relational Database Management System which contains data in the form of the tables and data is accessed on the basis of the common fields among the tables.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What are the different types of relationships in the DBMS?",
        "answer": "A Relationship in DBMS depicts an association between the tables.\nDifferent types of relationships are:\nOne-to-One: This basically states that there should be a one-to-one relationship between the tables i.e. there should be one record in both the tables.\nOne-to-Many: This states that there can be many relationships for one i.e. a primary key table hold only one record which can have many, one, or none records in the related table.\nMany-to-Many: This states that both the tables can be related to many other tables.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What do you mean by Entity type extension?",
        "answer": "Compilation of similar entity types into one particular type which is grouped together as an entity set is known as entity type extension.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is conceptual design in dbms?",
        "answer": "Conceptual design is the first stage in the database design process. The goal at this stage is to design a database that is independent of database software and physical details. The output of this process is a conceptual data model that describes the main data entities, attributes, relationships, and constraints of a given problem domain.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Differentiate between logical database design and physical database design. Show how this separation leads to data independence.?",
        "answer": "Maps or transforms the conceptual schema (or an ER schema) from the high-level data model into a relational database schema.\nThe specifications for the stored database in terms of physical storage structures, record placement, and indexes are designed.\nThe mapping can proceed in two stages:",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Tailoring the schemas to a specific DBMS?",
        "answer": "The following criteria are often used to guide the choice of physical database design options:",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is Transaction Throughput?",
        "answer": "DDL statements in the language of the chosen DBMS that specify the conceptual and external level schemas of the database system. But if the DDL statements include some physical design parameters, a complete DDL specification must wait until after the physical  database design phase is completed.\nAn initial determination of storage structures and the access paths for the database files. This corresponds to defining the internal schema in terms of Data Storage Definition Language.\nThe database design is divided into several phases. The logical database design and physical database design are two of them. This separation is generally based on the concept of the three-level architecture of DBMS, which provides data independence. Therefore, we can say that this separation leads to data independence because the output of the logical database design is the conceptual and external level schemas of the database system which is independent of the output of the physical database design that is an internal schema.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is the main goal of RAID technology?",
        "answer": "RAIDstands forRedundantArray ofInexpensive (or sometimes “Independent”)Disks.\nRAID is a method of combining several hard disk drives into one logical unit (two or more disks grouped together to appear as a single device to the host system). RAID technology was developed to address the fault-tolerance and performance limitations of conventional disk storage. It can offer fault tolerance and higher throughput levels than a single hard drive or group of independent hard drives. While arrays were once considered complex and relatively specialized storage solutions, today they are easy to use and essential for a broad spectrum of client/server applications.",
        "source": "commonly-asked-dbms-interview-questions.txt"
    },
    {
        "question": "What is •?",
        "answer": "In aDatabase Management System (DBMS),dependency-preserving decompositionrefers to the process of breaking down a complex database schema into simpler, smaller tables, such that all the functional dependencies of the original schema are still enforceable without needing to perform additional joins.\nThis approach is crucial for database normalization as it minimizes redundancy, prevents anomalies, and improves the efficiency of database queries. To achieve dependency-preserving decomposition, algorithms likelossless join decompositionanddependency-preserving decompositionare applied, ensuring that all original dependencies can be represented directly in the decomposed tables.\nExample:\nSuppose R is a relational schema and F is the set of functional dependencies on R. If R is decomposed into relations R1, R2, ………….…… Rn , each holding functional dependencies F1, F2, …….……… Fn respectively. We can say, F` = F1 U F2 U ………..… U Fn.\nNow this decomposition will be considered as dependency preserving decomposition if and only if-Every dependency in F is logically implied by F` i.e. F`+= F+It is obvious that F1 ⊆ F+, F2 ⊆ F+and so on.If we verify that F` is satisfied in R, we have verified that decomposition is dependency preserving decomposition i.e. F1 U F2 = F.\nLet’s say:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is f2​: FDs in R2?",
        "answer": "Now, there are three possible cases:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Result: The decomposition is dependency-preserving because we haven’t lost any FDs.?",
        "answer": "Original R:| StudentID | CourseID | Instructor |\nFunctional Dependencies F:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is R2(CourseID,Instructor): f2={CourseID→Instructor}?",
        "answer": "Here, f1∪f2=F.The decomposition is dependency-preserving.",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Result: The decomposition is not dependency-preserving, as we’ve lost some FDs.?",
        "answer": "Original R:| StudentID | CourseID | Instructor |\nFunctional Dependencies F:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is R2(CourseID,Instructor): f2={}?",
        "answer": "Here, f1∪f2⊂F.The FD CourseID→InstructorCourseID is missing.The decomposition is not dependency-preserving.",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Result: This case is technically possible but uncommon. These extra dependencies may not cause direct problems but could lead to inconsistencies or unexpected behavior.?",
        "answer": "Original R:| StudentID | CourseID | Instructor |\nFunctional Dependencies F:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is R2(CourseID,Instructor): f2={Instructor→CourseID}?",
        "answer": "Here, f1∪f2⊃F, as the FD Instructor→CourseID was added unnecessarily.The decomposition has extra dependencies, which could lead to confusion but doesn’t directly violate dependency preservation.",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Key Concepts of Dependency Preserving Decomposition in DBMS?",
        "answer": "The key concepts of dependency-preserving decomposition include:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Solution?",
        "answer": "R1(A, B, C) and R2(C, D)\nLet us find closure of F1 and F2To find closure of F1, consider all combination of ABC. i.e., find closure of A, B, C, AB, BC and ACNote ABC is not considered as it is always ABC\nclosure(A) = { A }  // Trivialclosure(B) = { B }  // Trivialclosure(C) = {C, A, D} but D can’t be in closure as D is not present R1.= {C, A}C–> A   // Removing C from right side as it is trivial attribute\nclosure(AB) = {A, B, C, D}= {A, B, C}AB –> C  // Removing AB from right side as these are trivial attributes\nclosure(BC) = {B, C, D, A}= {A, B, C}BC –> A  // Removing BC from right side as these are trivial attributes\nclosure(AC) = {A, C, D}NULL SET\nF1 {C–> A, AB –> C, BC –> A}.Similarly F2 { C–> D }\nIn the original Relation Dependency { AB –> C , C –> D , D –> A}.AB –> C is present in F1.C –> D is present in F2.D –> A is not preserved.\nF1 U F2 is a subset of F. Sogiven decomposition is not dependency preserving.",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "How Dependency Preserving Decomposition Enhances Database Efficiency?",
        "answer": "Dependency-preserving decomposition enhances database efficiency by:",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Simplifying Updates:Since data is more normalized, updates become simpler and more efficient, reducing the risk of inconsistencies.?",
        "answer": "Imp Note:The 1NF, 2NF, and 3NF are valid for dependency-preserving decomposition.",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is GATE Previous Year Question’s?",
        "answer": "GATE-CS-2001\nFor further details you can also refer to the Quiz of the previous year’s GATE Questions.https://www.geeksforgeeks.org/dbms-gq/database-design-normal-forms-gq/\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "data-base-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is •?",
        "answer": "Denormalization focuses on combining multiple tables to make queries execute quickly. It adds redundancies in the database though.  In this article, we’ll explore Denormalization and how it impacts database design. This method can help us to avoid costly joins in a relational database made during normalization.",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "What is Step 1: Unnormalized Table?",
        "answer": "This is the starting point where all the data is stored in a single table.\nWhat’s wrong with it?",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "What is Step 2: Normalized Structure?",
        "answer": "To eliminate redundancy and avoid anomalies, we split the data into smaller, related tables. This process is called normalization. Each table now focuses on a specific aspect, such as students, classes, or subjects.\nWhy is this better?",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "What is Step 3: Denormalized Table?",
        "answer": "In some cases, normalization can make querying complex and slow because you need to join multiple tables to get the required information. To optimize performance, we can denormalize the data by combining related tables into a single table.\nWhat’s happening here?",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "How is Denormalization Different From Normalization ?",
        "answer": "Normalizationand Denormalization both are the method which use in database but it works opposite to each other. One side normalization is used for reduce or removing the redundancy which means there will be no duplicate data or entries in the same table and also optimizes for data integrity and efficient storage, while Denormalization is used for add the redundancy into normalized table so that enhance the functionality and minimize the running time of database queries (likejoins operation) and optimizes for performance and query simplicity.\nIn a system that demands scalability, like that of any major tech company, we almost always use elements of both normalized and denormalized databases.",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Denormalization is the method which is used to add the redundancy so that execute the query quickly. It is used for decrease the number of tables so that execute the query quickly (like joins operation ). Denormalization improve the storage efficiency so that improve the query performance (like when read heavy systems ). Denormalization has many benefits in some situations but it requires management so that avoid data inconsistencies problems.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "denormalization-in-databases.txt"
    },
    {
        "question": "What is •?",
        "answer": "The Entity-Relationship (ER) Model is one of the primary components of Database Management Systems and is very important for designing the logical structure of databases. It helps define data, and the relationship between the data entities and it makes the system easier to visualize. This is the reason that the ER Model is commonly employed while designing the structure of relational databases. Through the use of the ER Model, hierarchies such as how data will be stored, accessed, or even managed can easily be constructed. In as much as discussing the usage of the ER Model such terms as Entity, Entity Set, and Entity Type need to be understood since they explain how data is classified and organized in a database.",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is Entity?",
        "answer": "An entity is anything real that has a defined and separate existence. It can be anything that can be described, named, or identified in separation from the rest of the items. This is vital in database design since entities are the fundamental components of information that are kept and controlled in a database. Each of these entities has attributes that help in describing the nature of the entity, distinguishing it from the other entities. For instance, a student, a car, and a bank account are all considered entities as each of them has a roll number, registration number, and account number that can identify them respectively.\nAn entity can be of two types :",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is Entity Type?",
        "answer": "Anentity typecan be defined as a framework or a class of entities which are the focal point of this research. It is smaller to a schematic diagram, which defines the properties of the objects of this class. Entity types assist in classifying the same kind of entities into one group, which comes in use when dealing with their properties and relations in the database. For example, for an entity type called Student, there will exist students and their respective attributes such as studentID, name and age. Entity types are essential parts of creating relations because they determine the values that will be inserted for each row in the table.\nExample :",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is Entity Set?",
        "answer": "An entity set is a comprehensive representation of all entities of the same type at a specific time. The use of an entity set helps to aggregate and thus manage similar entities withindatabases. The entities of the entity-set have common attributes for each entity, but the values of those attributes are different. Entity sets are important components in database structure because they illustrate how information is organized and put away in tables. For instance, a record of students in a “Student” table is by each student and the total record or collection would form an entity set. However, entity sets are not static because they have the potential to grow and shrink with the addition or removal of entities.\nExample :",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is The collection of all the entities in the relation of RDBMS is called an entity set.?",
        "answer": "Relation With Table :\nConsider a table student as follows :\nTable Name : Student\nEntity :Each row is an entity.\nExample :\nEntity Type :Each entity belongs to the student type. Hence, the type of entity here is a student.\nEntity Set :The complete data set of all entities is called entity set. For the above table, the records with student id 1, 2, 3, 4 are the entity set.",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is Difference Between Entity, Entity Set  and Entity Type?",
        "answer": "Entities can be tangible or intangible.\nDefines attributes shared by entities of that type.\nRepresents a snapshot of all entities at a given time.\nIt is identified uniquely through akey attribute.\nIt represents the structure of the table without data.\nIt can grow or shrink as entities are added or removed.\nExample:A student with ID 1.\nExample:“Student” table schema.\nExample:All records in the “Student” table.",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Being aware of the variance among entities, types, and entity sets is very crucial for modeling a database effectively using the ER Model. Entities are objects that exist in the real world and depict individuals, while entity types define those objects, and an entity set defines a collection of entities that exist at a given time. This classification of groups of data can be useful to design logically structured databases, which in turn lead to efficient retrieval and management.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "difference-between-entity-entity-set-and-entity-type.txt"
    },
    {
        "question": "What is •?",
        "answer": "An entity is a “thing” or “object” in the real world. An entity contains attributes, which describe that entity. So anything about which we store information is called an entity. Entities are recorded in the database and must be distinguishable, i.e., easily recognized from the group. In this article, we will see the difference between strong and weak entities.",
        "source": "difference-between-strong-and-weak-entity.txt"
    },
    {
        "question": "What is a Strong Entity?",
        "answer": "A strong entity is not dependent on any other entity in theschema. A strong entity will always have a primary key. Strong entities are represented by a single rectangle. The relationship of two strong entities is represented by a single diamond. Various strong entities, when combined together, create a strong entity set.",
        "source": "difference-between-strong-and-weak-entity.txt"
    },
    {
        "question": "What is a Weak Entity?",
        "answer": "A weak entity is dependent on a strong entity to ensure its existence. Unlike a strong entity, a weak entity does not have any primary key. It instead has a partial discriminator key. Aweak entityis represented by a double rectangle. The relation between one strong and one weak entity is represented by a double diamond. This relationship is also known as anidentifying relationship.\nIn ER models,strong entities can exist independently, whereasweak entities depend on strong entities.If you want to solidify your understanding of ER diagrams and entity relationships, theGATE CS Self-Paced Coursecovers database concepts in-depth, including practical exercises on ER modeling",
        "source": "difference-between-strong-and-weak-entity.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "It is important while designing a database to comprehend the difference between strong and weak entities. That is, strong entities have all the necessaryattributesfor their existence and have unique attributes while weak entities have at least one attribute that depends on the attributes of their related strong entities to form an identification. Its also facilitates help in placing these entities in the right category and defining them properly so that thedatabasecreated can have the best structure that fits and are efficient in making real-world scenarios.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "difference-between-strong-and-weak-entity.txt"
    },
    {
        "question": "What is •?",
        "answer": "Pre-Requisite:Functional Dependency,Finding Attribute Closure, and Candidate Keys using Functional Dependency\nFor understanding the equivalence of Functional Dependencies Sets (FD sets), the basic idea about Attribute Closure is given in this articleGiven a Relation with different FD sets for that relation, we have to find out whether one FD set is a subset of another or both are equal.",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "How To Find the Relationship Between Two Functional Dependency Sets?",
        "answer": "Let FD1 and FD2 be two FD sets for a relation R.",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is If 1 and 2 both are true, FD1=FD2.?",
        "answer": "All these three cases can be shown using the Venn diagram:\nEquivalence of Functional Dependency",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "Why We Need to Compare Functional Dependencies?",
        "answer": "Suppose in the designing process we convert theER diagramto a relational model and this task is given to two different engineers. Now those two engineers give two different sets of functional dependencies. So, being an administrator we need to ensure that we must have a good set of Functional Dependencies. To ensure this we require to study theequivalence of Functional Dependencies.",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is Sample Questions?",
        "answer": "Q.1 Let us take an example to show the relationship between two FD sets. A relation R(A,B,C,D) having two FD sets FD1 = {A->B, B->C, AB->D} and FD2 = {A->B, B->C, A->C, A->D}\nStep 1:Checking whether all FDs of FD1 are present in FD2",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is AB->D is present in set FD1 but not directly in FD2 but we will check whether we can derive it or not. For set FD2, (AB)+= {A, B, C, D}. It means that AB can functionally determine A, B, C, and D. So AB->D will also hold in set FD2.?",
        "answer": "As all FDs in set FD1 also hold in set FD2,FD2 ⊃ FD1is true.\nStep 2:Checking whether all FDs of FD2 are present in FD1",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is A->D is present in FD2 but not directly in FD1 but we will check whether we can derive it or not. For set FD1, (A)+= {A, B, C, D}. It means that A can functionally determine A, B, C, and D. SO A->D will also hold in set FD1.?",
        "answer": "As all FDs in set FD2 also hold in set FD1,FD1 ⊃ FD2is true.\nStep 3:As FD2 ⊃ FD1 and FD1 ⊃ FD2 both are trueFD2 =FD1is true. These two FD sets are semantically equivalent.\nQ.2 Let us take another example to show the relationship between two FD sets. A relation R2(A,B,C,D) having two FD sets FD1 = {A->B, B->C,A->C} and FD2 = {A->B, B->C, A->D}\nStep 1:Checking whether all FDs of FD1 are present in FD2",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is A->C is present in FD1 but not directly in FD2 but we will check whether we can derive it or not. For set FD2, (A)+= {A, B, C, D}. It means that A can functionally determine A, B, C, and D. SO A->C will also hold in set FD2.?",
        "answer": "As all FDs in set FD1 also hold in set FD2,FD2 ⊃ FD1is true.\nStep 2:Checking whether all FDs of FD2 are present in FD1",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is So A->D will not hold in FD1.?",
        "answer": "As all FDs in set FD2 do not hold in set FD1,FD2 ⊄ FD1.\nStep 3:In this case,FD2 ⊃ FD1andFD2 ⊄ FD1, these two FD sets are not semantically equivalent.\nFunctional Dependency is basically the relationship between the attributes of a table that are inter dependent on each other.",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "2. How can we conclude that two Functional dependencies are Equivalent?",
        "answer": "Answer:\nConsider two functional dependency F and G, If F+= G+, that is if all functional dependency of F is in G+and all functional dependency of G is in F+, then two Functional Dependency are equivalent.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "equivalence-of-functional-dependencies-sets.txt"
    },
    {
        "question": "What is •?",
        "answer": "Extended operators in relational algebra are operators that go beyond the basic set of relational algebra operations. They are also known as derived operators because they can be constructed from combinations of the fundamental operators. There are mainly three types of extended operators in Relational Algebra:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Divide(÷)?",
        "answer": "Extended Operators\nWe will be explaining these types using the following tables:\nTable R:\nA\nB\n1\nx\n2\ny\n3\nz\nTable S:\nB\nC\nx\n10\ny\n20\nw\n30",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Join?",
        "answer": "Joinoperators inDBMSare used to combine data from two or more tables based on a related column between them. These operators allow efficient data retrieval, making it easier to perform complex queries. The most common types of Join operators are Inner Join and Outer Join.",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is 1. Inner Join?",
        "answer": "Inner joinreturns rows when there is a match in both tables. If there is no match, the row is excluded from the result. It is the most frequently used join in relational databases and ensures that only matching records from both tables are included.\nInner joins can be categorized into more specific types based on how the join condition is defined:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Conditional Join(⋈θ):Conditional Joinor Theta Join is used when you want to join two or more relation based on some conditions. It supports various comparison operators, such as <, >, <=, >=, = and ≠.?",
        "answer": "Example:Join tables R and S based on a condition θ. For example, join where R.B = S.B and R.A > 1.\nR⋈R.B=S.B∧R.A>1S\nOutput Table:\nA\nR.B\nS.B\nC\n2\ny\ny\n20\nNote:The selection operator only selects the required tuples but does not display them. For display, the data projection operator is used.",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Equi Join:Equi Joinis a special case of conditional join where only equality condition holds between a pair of attributes. As values of two attributes will be equal in result of equijoin, only one attribute will be appeared in result.?",
        "answer": "Example:Join tables R and S where R.B = S.B.\nR ⋈R.B=S.BS\nOutput Table:\nA\nR.B\nS.B\nC\n1\nx\nx\n10\n2\ny\ny\n20",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Natural Join(⋈):ANatural Joinautomatically combines two tables based on matching column names and data type, eliminating duplicate columns and providing a seamless result set. While applying natural join on two relations, there is no need to write equality condition explicitly. Natural Join will also return the similar attributes only once as their value will be same in resulting relation.?",
        "answer": "Example:Join tables R and S on the common attribute B and eliminate duplicate columns.\nR ⋈ S\nOutput Table:\nA\nB\nC\n1\nx\n10\n2\ny\n20\nNatural Join is by default inner join because the tuples which does not satisfy the conditions of join does not appear in result set.",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is 2. Outer Join?",
        "answer": "TheOuter Joinreturns all records from one table and the matched records from the other table. If no match is found, the result will include NULL values for the non-matching columns. Outer joins can be further classified intoLeft Outer Join, Right Outer Join and Full Outer Join, based on which table’s records are prioritized in case of non-matching rows.",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Left Outer Join(⟕):A Left Outer Join in DBMS returns all records from the left table and the matching records from the right table. If there is no match in the right table, it still includes all rows from the left table with NULL values for the columns of the right table.?",
        "answer": "Left Outer Join\nExample:Join tables R and S on R.B = S.B and include all rows from R even if there is no match in S.\nR⟕S\nOutput Table:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Right Outer Join(⟖):A Right Outer Join retrieves all records from the right table and the matching records from the left table. If there is no match in the left table, the result will still include all rows from the right table, with NULL values for the left table’s columns. This join is particularly useful when you want to ensure all data from the right table is included, even if no corresponding records exist in the left table.?",
        "answer": "Right Outer Join\nExample:Join tables R and S on R.B = S.B and include all rows from S even if there is no match in R.\nR ⟖ S\nOutput Table:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Full Outer Join(⟗):A Full Outer Join returns all records when there is a match in either the left or right table. If there is no match, it includes all rows from both tables with NULL values for the missing side. This join is useful when you need to ensure that no data is lost from either table, making it ideal for combining datasets where all information should be preserved, regardless of whether a match exists.?",
        "answer": "Full Outer Join\nExample:Join tables R and S on R.B = S.B and include all rows from both tables, filling in NULLs where there is no match.\nR ⟗S\nOutput Table:\nA\nR.B\nS.B\nC\n1\nx\nx\n10\n2\ny\ny\n20\n3\nz\nNULL\nNULL\nNULL\nNULL\nw\n30",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Intersection (∩)?",
        "answer": "Intersection is an operator that returns the common records from two relations. It retrieves rows that appear in both tables, ensuring that only the matching data from both sets is included in the result. Intersection on two relations can only be computed if both relations areunion compatible.It means two relation should have same number of attributes and corresponding attributes in two relations have same domain. In simple words, both table should have same schema.\nExample:Assume R and S are as follows for intersection,\nTable R:\nA\nB\n1\nx\n2\ny\n3\nz\nTable S:\nA\nB\n1\nx\n2\ny\nBoth R and S have the same schema (A and B). The intersection of R and S returns rows that are present in both R and S.\nR ∩ S\nOutput Table:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Division (÷)?",
        "answer": "The Division operator is used to find records in one relation that are associated with all records in another relation. It is commonly used when we want to identify entities that satisfy certain conditions across multiple related data sets.\nThe Division operator (R ÷ S) can be applied if:",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is It returns the tuples from R that are associated with every tuple in S.?",
        "answer": "Example:Assume R and S are as follows for division,\nTable R:\nA\nB\n1\nx\n1\ny\n2\nx\n2\ny\n3\nz\nTable S:\nB\nx\ny\nThe division R ÷ S returns values of A that are associated with all values of B in S.\nR ÷ S\nOutput Table:\n1",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is Previous Year Gate Questions?",
        "answer": "GATE | GATE CS 2012 | Question 41\nGATE | GATE CS 2012 | Question 50\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "extended-operators-in-relational-algebra.txt"
    },
    {
        "question": "What is •?",
        "answer": "Normalization in database management is the process of organizing data to minimize redundancy and dependency, ensuring efficiency, consistency, and integrity. This involves structuring data into smaller, logically related tables and defining relationships between them to streamline data storage and retrieval.\nNormal Forms are a set of guidelines in database normalization that define how to structure data in tables to reduce redundancy and improve integrity. Each normal form builds on the previous one, progressively organizing data more efficiently.",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is Levels of Normalization?",
        "answer": "There are various levels of normalization. These are some of them:",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is Fifth Normal Form (5NF)?",
        "answer": "In this article, we will discuss the First Normal Form (1NF).",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is First Normal Form?",
        "answer": "If a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in the first normal form if it does not contain any composite ormulti-valued attribute. A relation is in first normal form if every attribute in that relation is single-valued attribute.\nA table is in 1 NF if:",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is Rules for First Normal Form (1NF) in DBMS?",
        "answer": "To follow the First Normal Form (1NF) in a database, these simple rules must be followed:",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is Example?",
        "answer": "Consider the below COURSES Relation :",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In Conclusion, First Normal Form (1NF) is a key idea in relationaldatabasearchitecture. It guarantees that data is organized to facilitate data processing, remove redundancy, and support data integrity. 1NF establishes the foundation for more complexnormalizationstrategies that further improve the correctness and efficiency of database systems by imposing atomic values and forbidding recurring groupings inside rows.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "first-normal-form-1nf.txt"
    },
    {
        "question": "What is •?",
        "answer": "Functional dependency and attribute closure are essential for maintaining data integrity and building effective, organized, and normalized databases.",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Functional Dependency?",
        "answer": "A functional dependency A->B in a relation holds if two tuples having the same value of attribute A must have the same value for attribute B. For Example, in relation to STUDENT shown in Table 1, Functional Dependencies\n```python\nSTUD_NO -> STUD_NAMEandSTUD_NO -> STUD_PHONEholdNote: A STUD_NO uniquely identifies a STUD_NAME and STUD_PHONE\n```\nbut\n```python\nSTUD_NAME->STUD_STATEdoes not holdNote :Two students can have same name (Like RAM in the below table) and hence same state\n```\nStudent Table\nHow to find Functional Dependencies for a Relation?\nFunctional Dependencies in a relation are dependent on the domain of the relation. Consider the STUDENT relation given in Table 1.",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Functional Dependency Set?",
        "answer": "Functional Dependency set or FD set of a relation is the set of all FDs present in the relation. For Example, FD set for relation STUDENT shown in table 1 is:\n```python\n{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY,\nSTUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }\n```",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Attribute Closure?",
        "answer": "Attribute closure of an attribute set can be defined as set of attributes which can be functionally determined from it.\nHow to find attribute closure of an attribute set?\nTo find attribute closure of an attribute set:",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Recursively add elements to the result set which can be functionally determined from the elements of the result set.?",
        "answer": "Using FD set of table 1,attribute closurecan be determined as:\n```python\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_STATE)+ = {STUD_STATE, STUD_COUNTRY}\n```",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is If no subset of this attribute set can functionally determine all attributes of the relation, the set will becandidate keyas well. For Example, using FD set of table 1?",
        "answer": "(STUD_NO, STUD_NAME)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE}\n(STUD_NO, STUD_NAME) will be super key but not candidate key because its subset (STUD_NO)+ is equal to all attributes of the relation. So, STUD_NO will be acandidate key.",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Prime and Non-Prime Attributes?",
        "answer": "Attributes which are parts of anycandidate keyof relation are called as prime attribute, others are non-prime attributes. For Example, STUD_NO in STUDENT relation is prime attribute, others are non-prime attribute.\nRead more aboutHow to Find Prime Attribute in DBMS?",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Tools like functional dependency and attribute closure are helpful when designing and optimizing databases. They are useful for:",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Q.1: Consider the relation scheme R = {E, F, G, H, I, J, K, L, M, N} and the set of functional dependencies {{E, F} -> {G}, {F} -> {I, J}, {E, H} -> {K, L}, K -> {M}, L -> {N} on R. What is the key for R? (GATE-CS-2014)?",
        "answer": "A. {E, F}B. {E, F, H}C. {E, F, H, K, L}D. {E}\nSolution:\nFinding attribute closure of all given options, we get:{E,F}+ = {EFGIJ}{E,F,H}+ = {EFHGIJKLMN}{E,F,H,K,L}+ = {{EFHGIJKLMN}{E}+ = {E}{EFH}+ and {EFHKL}+ results in set of all attributes, but EFH is minimal. So it will be candidate key. So correct option is (B).",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "Q.2:How to check whether an FD can be derived from a given FD set?",
        "answer": "Solution:\nTo check whether an FD A->B can be derived from an FD set F,",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Q.3: In a schema with attributes A, B, C, D and E following set of functional dependencies are given{A -> B, A -> C, CD -> E, B -> D, E -> A}Which of the following functional dependencies is NOT implied by the above set? (GATE IT 2005)?",
        "answer": "A. CD -> ACB. BD -> CDC. BC -> CDD. AC -> BC\nSolution:\nUsing FD set given in question,(CD)+ = {CDEAB} which means CD -> AC also holds true.(BD)+ = {BD} which means BD -> CD can’t hold true. So this FD is no implied in FD set. So (B) is the required option.Others can be checked in the same way.",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is Q.4: Consider a relation scheme R = (A, B, C, D, E, H) on which the following functional dependencies hold: {A–>B, BC–> D, E–>C, D–>A}. What are the candidate keys of R? [GATE 2005]?",
        "answer": "(a) AE, BE(b) AE, BE, DE(c) AEH, BEH, BCH(d) AEH, BEH, DEH\nSolution:\n(AE)+ = {ABECD} which is not set of all attributes. So AE is not a candidate key. Hence option A and B are wrong.(AEH)+ = {ABCDEH}(BEH)+ = {BEHCDA}(BCH)+ = {BCHDA} which is not set of all attributes. So BCH is not a candidate key. Hence option C is wrong.So correct answer is D.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "functional-dependency-and-attribute-closure.txt"
    },
    {
        "question": "What is •?",
        "answer": "Using the ER model for bigger data creates a lot of complexity while designing a database model, So in order to minimize the complexity Generalization, Specialization, and Aggregation were introduced in the ER model. These were used for data abstraction. In which an abstraction mechanism is used to hide details of a set of objects. In this article we will cover the concept of Generalization, Specialization, and Aggregation with example.",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is Generalization?",
        "answer": "Generalization is the process of extracting common properties from a set of entities and creating a generalized entity from it. It is a bottom-up approach in which two or more entities can be generalized to a higher-level entity if they have some attributes in common. For Example, STUDENT and FACULTY can be generalized to a higher-level entity called PERSON as shown in Figure 1. In this case, common attributes like P_NAME, and P_ADD become part of a higherentity(PERSON), and specializedattributeslike S_FEE become part of a specialized entity (STUDENT).\nGeneralization is also called as ‘ Bottom-up approach”.\nGeneralization",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is Specialization?",
        "answer": "In specialization, an entity is divided into sub-entities based on its characteristics. It is a top-down approach where the higher-level entity is specialized into two or more lower-levelentities. For Example, an EMPLOYEE entity in an Employee management system can be specialized into DEVELOPER, TESTER, etc. as shown in Figure 2. In this case, common attributes like E_NAME, E_SAL, etc. become part of a higher entity (EMPLOYEE), and specialized attributes like TES_TYPE become part of a specialized entity (TESTER).\nSpecialization is also called as ” Top-Down approch”.\nSpecialization\nInheritance:It is an important feature of generalization and specialization",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is Aggregation?",
        "answer": "An ER diagram is not capable of representing the relationship between an entity and a relationship which may be required in some scenarios. In those cases, a relationship with its corresponding entities is aggregated into a higher-level entity. Aggregation is an abstraction through which we can represent relationships as higher-level entity sets.\nFor Example, an Employee working on a project may require some machinery. So, REQUIRE relationship is needed between the relationship WORKS_FOR and entity MACHINERY. Using aggregation, WORKS_FOR relationship with its entities EMPLOYEE and PROJECT is aggregated into a single entity and relationship REQUIRE is created between the aggregated entity and MACHINERY.\nAggregation",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is Representing Aggregation Via Schema?",
        "answer": "To represent aggregation, create a schema containing the following:",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is Descriptive attribute, if exists?",
        "answer": "Dreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "generalization-specialization-and-aggregation-in-er-model.txt"
    },
    {
        "question": "What is •?",
        "answer": "In SQL, grouping and aggregating data are essential techniques for analyzing datasets. When dealing with large volumes of data, we often need to summarize or categorize it into meaningful groups. The combination of theGROUP BYclause and aggregate functions likeCOUNT(),SUM(),AVG(),MIN(), andMAX()makes it easy to perform such tasks.\nIn this article, we will explain how togroupandaggregatedata inSQLto make our queries more efficient and insightful.",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is Grouping and Aggregating Data?",
        "answer": "Grouping Data: TheGROUP BYclause in SQL is used to arrangeidentical datainto groups based ononeormore columns. Once data is grouped, aggregate functions can be used to summarize the information within those groups.\nAggregating Data: Aggregate functions perform calculations onmultiple rowsof data and return a single result. Commonaggregate functionsincludeCOUNT(),SUM(),AVG(),MIN(), andMAX(). These help us get summaries liketotals,averages, andcountsfor different categories or groups\nSyntax:\nSELECT column1, column2, …, AGGREGATE_FUNCTION(column3)FROM table_nameWHERE conditionGROUP BY column1, column2, …HAVING conditionORDER BY column1;",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is Example 1: Grouping Data and Counting Occurrences?",
        "answer": "Let’s consider theSales_Ordertable in aSalesdatabase. This table stores information aboutsales orders, including theclient number,order date, and order status.TheSales_Ordertable contains details about orders made byclients, including theirorder status.\nSales_Order Table\nLet’s say we want to count how many orders are still “In Process” for each client. To do this, we use theCOUNT()function along withGROUP BY\nQuery:\n```python\nSELECT CLIENTNO, COUNT(ORDERSTATUS)AS Order_In_Processfrom Sales_Order WHEREORDERSTATUS='In Process' GROUP BY CLIENTNO;\n```\nOutput:\nExplanation:\nIn this case, we grouped the data byCLIENTNOand counted how many orders are in the “In Process” status for each client. From this output, we can easily see that clientsC00001andC00006each have one order that is still “In Process“.",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is Example 2: Summing Values in Groups?",
        "answer": "Now, let’s move to another table calledOrdered. This table containssales datafor different places, where each sale is associated with alocationand a price.  TheOrderedtablestores data onproducts sold, including thelocationandpriceofeach item sold.\nORDERED Table\nLet’s say we want to calculate the total revenue from sales in different places. we will use theSUM()function along with theGROUP BYclauseto calculate thetotal sales price for each place.\nQuery:\n```python\nSELECT place, SUM(price) AS Total_RevenueFROM OrderedGROUP BY place;\n```\nOutput:",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is Example 3: Using Multiple Aggregate Functions?",
        "answer": "SQL allows us to use multipleaggregate functionsin a single query. This can provide a more comprehensive view of your data. In this example, we will use theAVG(),MAX(), andMIN()functions to calculate theaverage,maximum, andminimum pricefor sales in each place.\nQuery:\n```python\nSELECT place,AVG(price) AS Avg_Price,MAX(price) AS Max_Price,MIN(price) AS Min_PriceFROM OrderedGROUP BY place;\n```\nOutput:",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Groupingandaggregatingdata inSQLare powerful techniques for summarizinglarge datasets. By using theGROUP BYclausealong with aggregate functions likeCOUNT(),SUM(),AVG(),MIN(), andMAX(), we can efficientlyanalyzeandsummarizeour data in meaningful ways. With this knowledge, we can start writing more efficient SQL queries, performing complex analyses, and gaining deeper insights from our datasets.",
        "source": "how-to-group-and-aggregate-data-using-sql.txt"
    },
    {
        "question": "What is •?",
        "answer": "Two of the highest levels of database normalization are the fourth normal form (4NF) and the fifth normal form (5NF). Multivalued dependencies are handled by 4NF, whereas join dependencies are handled by 5NF.\nIf two or more independent relations are kept in a single relation or we can say multivalue dependency occurs when the presence of one or more rows in a table implies the presence of one or more other rows in that same table. Put another way, two attributes (or columns) in a table are independent of one another, but both depend on a third attribute. Amultivalued dependencyalways requires at least three attributes because it consists of at least two attributes that are dependent on a third.\nFor a dependency A -> B, if for a single value of A, multiple values of B exist, then the table may have a multi-valued dependency. The table should have at least 3 attributes and B and C should be independent for A ->> B multivalued dependency.\nExample:\n```python\nPerson->-> mobile,Person ->-> food_likes\n```\nThis is read as “person multi determines mobile” and “person multi determines food_likes.”Note that a functional dependency is a special case of multivalued dependency. In a functional dependency X -> Y, every x determines exactly one y, never more than one.",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Fourth Normal Form (4NF)?",
        "answer": "The Fourth Normal Form (4NF) is a level of database normalization where there are no non-trivial multivalued dependencies other than a candidate key. It builds on the first three normal forms (1NF, 2NF, and 3NF) and theBoyce-Codd Normal Form (BCNF). It states that, in addition to a database meeting the requirements of BCNF, it must not contain more than one multivalued dependency.",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Properties?",
        "answer": "A relation R is in 4NF if and only if the following conditions are satisfied:\n```python",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is It should be in the Boyce-Codd Normal Form (BCNF).2. The table should not have any Multi-valued Dependency.?",
        "answer": "```\nA table with a multivalued dependency violates the normalization standard of the Fourth Normal Form (4NF) because it creates unnecessary redundancies and can contribute to inconsistent data. To bring this up to 4NF, it is necessary to break this information into two tables.\nExample:Consider the database table of a class that has two relations R1 contains student ID(SID) and student name (SNAME) and R2 contains course id(CID) and course name (CNAME).\nTable R1\nTable R2\nWhen their cross-product is done it resulted in multivalued dependencies.\nTable R1 X R2\nMultivalued dependencies (MVD) are:\n```python\nSID->->CID; SID->->CNAME; SNAME->->CNAME\n```",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Join Dependency?",
        "answer": "Join decomposition is a further generalization of Multivalued dependencies. If the join of R1 and R2 over C is equal to relation R then we can say that a join dependency (JD) exists, where R1 and R2 are the decomposition R1(A, B, C) and R2(C, D) of a given relations R (A, B, C, D). Alternatively, R1 and R2 are a lossless decomposition of R. A JD ⋈ {R1, R2, …, Rn} is said to hold over a relation R if R1, R2, ….., Rn is a lossless-join decomposition. The *(A, B, C, D), (C, D) will be a JD of R if the join of joins attribute is equal to the relation R. Here, *(R1, R2, R3) is used to indicate that relation R1, R2, R3 and so on are a JD of R. Let R is a relation schema R1, R2, R3……..Rn be the decomposition of R. r( R ) is said to satisfy join dependency if and only if\nJoint Dependency\nExample:\nTable R1\n```python\nCompany->->Product\n```\nTable R2\n```python\nAgent->->Company\n```\nTable R3\n```python\nAgent->->Product\n```\nTable R1⋈R2⋈R3\n```python\nAgent->->Product\n```",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Fifth Normal Form/Projected Normal Form (5NF)?",
        "answer": "A relation R is inFifth Normal Formif and only if everyone joins dependency in R is implied by the candidate keys of R. A relation decomposed into two relations must havelossless joinProperty, which ensures that no spurious or extra tuples are generated when relations are reunited through a natural join.",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Properties?",
        "answer": "A relation R is in 5NF if and only if it satisfies the following conditions:\n```python",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is R should be already in 4NF.2. It cannot be further non loss decomposed (join dependency).?",
        "answer": "```\nExample –Consider the above schema, with a case as “if a company makes a product and an agent is an agent for that company, then he always sells that product for the company”. Under these circumstances, the ACP table is shown as:\nTable ACP\nThe relation ACP is again decomposed into 3 relations. Now, the natural Join of all three relations will be shown as:\nTable R1\nTable R2\nTable R3\nThe result of the Natural Join of R1 and R3 over ‘Company’ and then theNatural Joinof R13 and R2 over ‘Agent’and ‘Product’ will beTable ACP.\nHence, in this example, all the redundancies are eliminated, and the decomposition of ACP is a lossless join decomposition. Therefore, the relation is in 5NF as it does not violate the property oflossless join.",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is Normalizing to 4NF and 5NF might result in more complicateddatabasestructures and slower query speed, but it can also increase data accuracy, dependability, and simplicity.?",
        "answer": "A relation is in 5NF if it satisfies the properties of 4NF and has a lossless join and does not having any join dependency.",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "Q.2: What is the 6th Normal Form?",
        "answer": "Answer:\nWhenever the temporal data vary so much just for avoiding the undesired duplication, it is termed as 6th Normal Form.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "introduction-of-4th-and-5th-normal-form-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "Normalization is an important process in database design that helps improve the database’s efficiency, consistency, and accuracy. It makes it easier to manage and maintain the data and ensures that the database is adaptable to changing business needs.",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "Why do we need Normalization?",
        "answer": "The primary objective for normalizing the relations is to eliminate the below anomalies. Failure to reduce anomalies results in data redundancy, which may threaten data integrity and cause additional issues as the database increases. Normalization consists of a set of procedures that assist you in developing an effective database structure.",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is Updation anomalies:Updation anomalies occur when modifying data in a database and can result in inconsistencies or errors. For example, if a database contains information about employees and their salaries, updating an employee’s salary in one record but not in all related records could lead to incorrect calculations and reporting.?",
        "answer": "Read more aboutAnomalies in Relational Model.\nBefore Normalization: The table is prone to redundancy and anomalies (insertion, update, and deletion).After Normalization: The data is divided into logical tables to ensure consistency, avoid redundancy and remove anomalies making the database efficient and reliable.",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is Prerequisites for Understanding Database Normalization?",
        "answer": "In database normalization, we mainly put only tightly related information together. To find the closeness, we need to find which attributes are dependent on each other.  To understand dependencies, we need to learn the below concepts.\nKeysare like unique identifiers in a table. For example, in a table of students, the student ID is a key because it uniquely identifies each student. Without keys, it would be hard to tell one record apart from another, especially if some information (like names) is the same. Keys ensure that data is not duplicated and that every record can be uniquely accessed.\nFunctional dependencyhelps define the relationships between data in a table. For example, if you know a student’s ID, you can find their name, age, and class. This relationship shows how one piece of data (like the student ID) determines other pieces of data in the same table. Functional dependency helps us understand these rules and connections, which are crucial for organizing data properly.\nOnce we figure out dependencies, we split tables to make sure that only closely related data is together in a table. When we split tables, we need to ensure that we do not loose information. For this, we need to learn the below concepts.\nDependency Preserving DecompositionLossless Decomposition in DBMS",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is Normal Forms in DBMS?",
        "answer": "Normal Forms\nDescription of Normal Forms\nFirst Normal Form (1NF)\nA relation is infirst normal formif every attribute in that relation is single-valued attribute.\nSecond Normal Form (2NF)\nA relation that is in First Normal Form and every non-primary-key attribute is fully functionally dependent on the primary key, then the relation is inSecond Normal Form (2NF).\nThird Normal Form (3NF)\nA relation is in thethird normal form, if there is no transitive dependency for non-prime attributes as well as it is in the second normal form. A relation is in 3NF if at least one of the following conditions holds in every non-trivial function dependency X –> Y.",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is Y is a prime attribute (each element of Y is part of some candidate key).?",
        "answer": "Boyce-Codd Normal Form (BCNF)\nFor BCNF the relation should satisfy the below conditions",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is X should be a super-key for every functional dependency (FD) X−>Y in a given relation.?",
        "answer": "Fourth Normal Form (4NF)\nA relation R is in4NFif and only if the following conditions are satisfied:",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is The table should not have any Multi-valued Dependency.?",
        "answer": "Fifth Normal Form (5NF)\nA relation R is in5NFif and only if it satisfies the following conditions:",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is It cannot be further non loss decomposed (join dependency).?",
        "answer": "Read more aboutNormal Forms in DBMS.",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Database normalization is a key concept in organizing data efficiently within a database. By reducing redundancy, ensuring data consistency, and breaking data into well-structured tables, normalization enhances the accuracy, scalability, and maintainability of a database. It simplifies data updates, improves integrity, and supports flexible querying, making it an essential practice for designing reliable and efficient database systems.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "introduction-of-database-normalization.txt"
    },
    {
        "question": "What is •?",
        "answer": "ADatabase Management System (DBMS)is a software solution designed to efficientlymanage,organize, andretrieve datain a structured manner. It serves as a critical component inmodern computing,enablingorganizations tostore,manipulate, and secure their data effectively. From small applications to enterprise systems, DBMS plays a vital role in supportingdata-driven decision-makingand operational efficiency.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is a DBMS?",
        "answer": "ADBMSis a system that allows users tocreate,modify, and query databases while ensuringdata integrity,security, and efficient data access. Unliketraditional file systems, DBMS minimizesdata redundancy, prevents inconsistencies, and simplifies data management with features like concurrent access andbackup mechanisms. It organizes data intotables,views,schemas, and reports, providing a structured approach to data management.\nA university database can store and manage student information, faculty records, and administrative data, allowing seamless retrieval, insertion, and deletion of information as required.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is Types of DBMS?",
        "answer": "There are several types of Database Management Systems (DBMS), each tailored to different data structures, scalability requirements, and application needs. The most common types are as follows:",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 1. Relational Database Management System (RDBMS)?",
        "answer": "RDBMSorganizes data into tables (relations) composed of rows and columns. It uses primary keys to uniquely identify rows and foreign keys to establish relationships between tables. Queries are written inSQL (Structured Query Language), which allows for efficient data manipulation and retrieval.\nExamples:MySQL, Oracle, Microsoft SQL Server and Postgre SQL.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 2. NoSQL DBMS?",
        "answer": "NoSQL systemsare designed to handlelarge-scale dataand provide high performance for scenarios whererelational modelsmight be restrictive. They store data in various non-relational formats, such askey-value pairs,documents,graphs, orcolumns. These flexible data models enable rapid scaling and are well-suited for unstructured or semi-structured data.\nExamples: MongoDB, Cassandra, DynamoDB and Redis.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 3. Object-Oriented DBMS (OODBMS)?",
        "answer": "OODBMSintegrates object-oriented programming concepts into thedatabase environment, allowing data to be stored as objects. This approach supports complex data types and relationships, making it ideal for applications requiring advanced data modeling andreal-world simulations.\nExamples: ObjectDB, db4o.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is Database Languages?",
        "answer": "Database languages are specialized sets ofcommandsandinstructionsused to define, manipulate, and control data within a database. Each language type plays a distinct role in database management, ensuring efficientstorage,retrieval, and security of data. The primary database languages include:",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 1. Data Definition Language (DDL)?",
        "answer": "DDLis the short name for Data Definition Language, which deals with database schemas and descriptions, of how the data should reside in the database.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 2. Data Manipulation Language (DML)?",
        "answer": "DMLfocuses on manipulating the data stored in the database, enabling users to retrieve, add, update, and delete data.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 3. Data Control Language (DCL)?",
        "answer": "DCLcommands manage access permissions, ensuring data security by controlling who can perform certain actions on the database.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 4. Transaction Control Language (TCL)?",
        "answer": "TCLcommands oversee transactional data to maintain consistency, reliability, and atomicity.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 5. Data Query Language (DQL)?",
        "answer": "DQLis a subset of DML, specifically focused on data retrieval.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is Paradigm Shift from File System to DBMS?",
        "answer": "Before the advent ofmodern Database Management Systems(DBMS), data was managed using basic file systems onhard drives. While this approach allowed users tostore,retrieve, andupdate filesas needed, it came with numerous challenges.\nA typical example can be seen in a file-baseduniversity management system, where data was stored in separate sections such as Departments, Academics, Results, Accounts, and Hostels. Certain information like student names and phone numbers was repeated acrossmultiple files, leading to the following issues:",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 1. Redundancy of data?",
        "answer": "When the same data exists in multiple places, any update must bemanually repeated everywhere. For instance, if a student changes their phone number, it must be updated across all sections. Failure to do so leads tounnecessary duplicationand wasted storage.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 2. Inconsistency of Data?",
        "answer": "Data is said to be inconsistent if multiple copies of the same data do not match each other. If the Phone number is different in Accounts Section and Academics Section, it will be inconsistent. Inconsistency may be because of typing errors or not updating all copies of the same data.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 3. Complex Data Access?",
        "answer": "A user should know the exact location of the file to access data, so the process is very cumbersome and tedious. If the user wants to search the student hostel allotment number of a student from 10000 unsorted students’ records, how difficult it can be.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 4. Lack of Security?",
        "answer": "File systems provided limited control over who could access certain data. A student who gained access to a file with grades might easily alter it without proper authorization, compromising data integrity.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 5. No Concurrent Access?",
        "answer": "File systems were not designed for multiple users working at the same time. If one user was editing a file, others had to wait, which hindered collaboration and slowed down workflows.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is 6. No Backup and Recovery?",
        "answer": "File systems lacked built-in mechanisms for creating backups or recovering data after a loss. If a file was accidentally deleted or corrupted, there was no easy way to restore it, potentially causing permanent data loss.",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "ADatabase Management System(DBMS) is an essential tool for efficientlymanaging,organizing, andretrieving large volumesof data across various industries. Its ability to handle data securely, ensureintegrity, supportconcurrent access, and provide backup and recovery options makes it indispensable for moderndata-driven applications. While DBMSs come withcomplexitiesandcosts, their benefits in terms of data management and security far outweigh thechallenges, making them acrucial component in any data-centric environment\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "introduction-of-dbms-database-management-system-set-1.txt"
    },
    {
        "question": "What is •?",
        "answer": "The Entity Relationship Model is a model for identifying entities (like student, car or company) to be represented in the database and representation of how those entities are related. The ER data model specifies enterprise schema that represents the overall logical structure of a database graphically.\nWe typically follow the below steps for designing a database for an application.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Symbols Used in ER Model?",
        "answer": "ER Model is used to model the logical view of the system from a data perspective which consists of these symbols:",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Double Rectangle:Double rectangle represents a weak entity.?",
        "answer": "Symbols used in ER Diagram",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Components of ER Diagram?",
        "answer": "ER Model consists of Entities, Attributes, and Relationships among Entities in a Database System.\nComponents of ER Diagram",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is What is an Entity?",
        "answer": "An Entity may be an object with a physical existence: a particular person, car, house, or employee or it may be an object with a conceptual existence – a company, a job, or a university course.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is What is an Entity Set?",
        "answer": "An entity refers to an individual object of an entity type, and the collection of all entities of a particular type is called an entity set. For example, E1 is an entity that belongs to the entity type “Student,” and the group of all students forms the entity set. In the ER diagram below, the entity type is represented as:\nEntity Set\nWe can represent the entity set in ER Diagram but can’t represent entity in ER Diagram because entity is row and column in the relation and ER Diagram is graphical representation of data.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Types of Entity?",
        "answer": "There are two types of entity:",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 1. Strong Entity?",
        "answer": "AStrong Entityis a type of entity that has a key Attribute. Strong Entity does not depend on other Entity in the Schema. It has a primary key, that helps in identifying it uniquely, and it is represented by a rectangle. These are called Strong Entity Types.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 2. Weak Entity?",
        "answer": "An Entity type has a key attribute that uniquely identifies each entity in the entity set. But some entity type exists for which key attributes can’t be defined. These are calledWeak Entity types.\nFor Example,A company may store the information of dependents (Parents, Children, Spouse) of an Employee. But the dependents can’t exist without the employee. So dependent will be aWeak Entity Typeand Employee will be identifying entity type for dependent, which means it isStrong Entity Type.\nA weak entity type is represented by a double rectangle. The participation of weak entity types is always total. The relationship between the weak entity type and its identifying strong entity type is called identifying relationship and it is represented by a double diamond.\nStrong Entity and Weak Entity",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is What are Attributes?",
        "answer": "Attributesare the properties that define the entity type. For example, Roll_No, Name, DOB, Age, Address, and Mobile_No are the attributes that define entity type Student. In ER diagram, the attribute is represented by an oval.\nAttribute",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 1. Key Attribute?",
        "answer": "The attribute whichuniquely identifies each entityin the entity set is called the key attribute. For example, Roll_No will be unique for each student. In ER diagram, the key attribute is represented by an oval with underlying lines.\nKey Attribute",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 2. Composite Attribute?",
        "answer": "An attributecomposed of many other attributesis called a composite attribute. For example, the Address attribute of the student Entity type consists of Street, City, State, and Country. In ER diagram, the composite attribute is represented by an oval comprising of ovals.\nComposite Attribute",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 3. Multivalued Attribute?",
        "answer": "An attribute consisting of more than one value for a given entity. For example, Phone_No (can be more than one for a given student). In ER diagram, a multivalued attribute is represented by a double oval.\nMultivalued Attribute",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is 4. Derived Attribute?",
        "answer": "An attribute that can be derived from other attributes of the entity type is known as a derived attribute. e.g.; Age (can be derived from DOB). In ER diagram, the derived attribute is represented by a dashed oval.\nDerived Attribute\nThe Complete Entity Type Student with its Attributes can be represented as:\nEntity and Attributes",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Relationship Type and Relationship Set?",
        "answer": "A Relationship Type represents the association between entity types. For example, ‘Enrolled in’ is a relationship type that exists between entity type Student and Course. In ER diagram, the relationship type is represented by a diamond and connecting the entities with lines.\nEntity-Relationship Set\nA set of relationships of the same type is known as arelationship set. The following relationship set depicts S1 as enrolled in C2, S2 as enrolled in C1, and S3 as registered in C3.\nRelationship Set",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Degree of a Relationship Set?",
        "answer": "The number of different entity sets participating in a relationship set is called thedegree of a relationship set.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is What is Cardinality?",
        "answer": "The maximum number of times an entity of an entity set participates in a relationship set is known ascardinality. Cardinality can be of different types:",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is One-to-One:When each entity in each entity set can take part only once in the relationship, the cardinality is one-to-one. Let us assume that a male can marry one female and a female can marry one male. So the relationship will be one-to-one.?",
        "answer": "One to One Cardinality\nUsing Sets, it can be represented as:\nSet Representation of One-to-One",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is One-to-Many:In one-to-many mapping as well where each entity can be related to more than one entity. Let us assume that one surgeon department can accommodate many doctors. So the Cardinality will be 1 to M. It means one department has many Doctors.?",
        "answer": "one to many cardinality\nUsing sets, one-to-many cardinality can be represented as:\nSet Representation of One-to-Many",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Many-to-One:When entities in one entity set can take part only once in the relationship set and entities in other entity sets can take part more than once in the relationship set, cardinality is many to one. Let us assume that a student can take only one course but one course can be taken by many students. So the cardinality will be n to 1. It means that for one course there can be n students but for one student, there will be only one course.?",
        "answer": "many to one cardinality\nUsing Sets, it can be represented as:\nSet Representation of Many-to-One\nIn this case, each student is taking only 1 course but 1 course has been taken by many students.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Many-to-Many:When entities in all entity sets can take part more than once in the relationship cardinality is many to many. Let us assume that a student can take more than one course and one course can be taken by many students. So the relationship will be many to many.?",
        "answer": "many to many cardinality\nUsing Sets, it can be represented as:\nMany-to-Many Set Representation\nIn this example, student S1 is enrolled in C1 and C3 and Course C3 is enrolled by S1, S3, and S4. So it is many-to-many relationships.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Participation Constraint?",
        "answer": "Participation Constraintis applied to the entity participating in the relationship set.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Partial Participation:The entity in the entity set may or may NOT participate in the relationship. If some courses are not enrolled by any of the students, the participation in the course will be partial.?",
        "answer": "The diagram depicts the ‘Enrolled in’ relationship set with Student Entity set having total participation and Course Entity set having partial participation.\nTotal Participation and Partial Participation\nUsing Set, it can be represented as,\nSet representation of Total Participation and Partial Participation\nEvery student in the Student Entity set participates in a relationship but there exists a course C4 that is not taking part in the relationship.",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is Review the diagram make sure it is clear and effectively conveys the relationships between the entities.?",
        "answer": "Dreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "introduction-of-er-model.txt"
    },
    {
        "question": "What is •?",
        "answer": "Relational Algebra is a formal language used to query and manipulate relational databases, consisting of a set of operations like selection, projection, union, and join.  It provides a mathematical framework for querying databases, ensuring efficient data retrieval and manipulation. Relational algebra serves as the mathematical foundation for query SQL.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Enables complex queries, like joins and nested queries, that are critical for working with large datasets.?",
        "answer": "Key Concepts in Relational Algebra:",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Operators in Relational Algebra?",
        "answer": "Relational algebra consists of various operators that help us fetch and manipulate data from relational tables in the database to perform certain operations on relational data. The fundamental operators in relational algebra, such as selection, projection, and join, are essential for querying and transforming data efficiently within a relational database.\nOperators in Relational Algebra",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Basic Operators?",
        "answer": "Basic operatorsare fundamental operations that includeselection (σ),projection (π),union (U),set difference (−),Cartesian product (×), andrename (ρ). These operators are used to manipulate and retrieve data from relational databases.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Selection(σ):Selection Operationis basically used to filter out rows from a given table based on certain given condition. It basically allows you to retrieve only those rows that match the condition as per condition passed duringSQL Query.?",
        "answer": "Example:\nConsider the relationRas follows:\nFor the above relation,\nσ(c>3)(R)will select the tuples which have c more than 3.\nOutput Table:\nNote:The selection operator only selects the required tuples but does not display them. For display, the data projection operator is used.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Projection(π):While Selection operation works on rows, similarly projection operation of relational algebra works on columns. It basically allows you to pick specific columns from a given relational table based on the given condition and ignoring all the other remaining columns.?",
        "answer": "Example:Suppose we want columns B and C from Relation R.\nπ(B,C)(R)will show following columns.\nNote:By Default, projection removes duplicate data.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Union(U):Union Operator is basically used to combine the results of two queries into a single result. The only condition is that both queries must return same number of columns with samedata types. Union operation in relational algebra is the same as union operation inset theory.?",
        "answer": "Example:Consider the following table of Students having different optional subjects in their course.\nFRENCH\nGERMAN\nFor the above relations, the query:\nπ(Student_Name)(FRENCH) U π(Student_Name)(GERMAN)\nwill give usoutput table:\nNote:The only constraint in the union of two relations is that both relations must have the same set of Attributes.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Set Difference(-):Set difference basically provides the rows that are present in one table, but not in another tables. Set Difference in relational algebra is the sameset difference operationas in set theory.?",
        "answer": "Example:From the above table of FRENCH and GERMAN, Set Difference is used as follows:\nπ(Student_Name)(FRENCH) – π(Student_Name)(GERMAN)\nNote:The only constraint in the Set Difference between two relations is that both relations must have the same set of Attributes.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Rename(ρ):Rename operator basically allows you to give a temporary name to a specific relational table or to its columns. It is very useful when we want to avoid ambiguity, especially in complex Queries. Rename is a unary operation used for renaming attributes of a relation.?",
        "answer": "TableR:\nρ(D/B)Rwill rename the attribute ‘B’ of the relation by ‘D”.\nOutput Table:",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Cross Product(X):Cartesian product Operator combines every row of one table with every row of another table, producing all the possible combination. It’s mostly used as a precursor to more complex operation like joins.?",
        "answer": "Example:Cross-product between two relations. Let’s say A and B, so the cross product between A X B will result in all the attributes of A followed by each attribute of B. Each record of A will pair with every record of B.\nRelationA:\nRelationB:\nRelationA X B:\nNote:If A has ‘n’ tuples and B has ‘m’ tuples then A X B will have ‘n*m’ tuples.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Derived Operators?",
        "answer": "Derived operatorsare built using basic operators and include operations like join, intersection, and division. These operators help perform more complex queries by combining basic operations to meet specific data retrieval needs.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Join Operators: Join operations in relational algebra combine data from two or more relations based on a related attribute, allowing for more complex queries and data retrieval.?",
        "answer": "Types of Joins in Relational Algebra:\n(a) Inner JoinAn inner join combines rows from two relations based on a matching condition and only returns rows where there is a match in both relations. If a record in one relation doesn’t have a corresponding match in the other, it is excluded from the result. This is the most common type of join.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Natural Join: A natural join automatically combines relations based on columns with the same name and type, removing duplicate columns in the result. It’s a more efficient way of joining.Example:JoiningStudentsandEnrollmentswhereStudentIDis common in both, and the result contains only unique columns.?",
        "answer": "(b) Outer JoinAn outer join returns all rows from one relation, and the matching rows from the other relation. If there is no match, the result will still include all rows from the outer relation withNULLvalues in the columns from the unmatched relation.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Full Outer Join: A full outer join returns all rows when there is a match in either the left or right relation. If a row from one relation does not have a match in the other,NULLvalues are included for the missing side.Example:JoiningCustomersandOrdersusing a full outer join will return all customers and orders, even if there’s no corresponding order for a customer or no customer for an order.?",
        "answer": "Learn more about Joinshere.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Set Intersection(∩) :Set Intersectionbasically allows to fetches only those rows of data that are common between two sets of relational tables. Set Intersection in relational algebra is the same set intersection operation in set theory.?",
        "answer": "Example:Consider the following table of Students having different optional subjects in their course.\nRelationFRENCH:\nRelationGERMAN:\nFrom the above table of FRENCH and GERMAN, the Set Intersection is used as follows:\nπ(Student_Name)(FRENCH ∩ π(Student_Name)(GERMAN)\nOutput Table:\nNote:The only constraint in the Set Difference between two relations is that both relations must have the same set of Attributes.",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Division (÷):Division is used to find tuples in one relation that are related to all tuples in another relation. It’s typically used for “for all” queries.?",
        "answer": "Example:We have two tables\nStudent_Course (Dividend Table):\nStudent_ID\nCourse_ID\n101\nC1\n101\nC2\n102\nC1\n103\nC1\n103\nC2\nCourse (Divisor Table):\nCourse_ID\nC1\nC2\nQuery is to find students who are enrolled in all courses listed in the Course table. In this case, students must be enrolled in both C1 and C2.\nStudent_Course(Student_ID, Course_ID)÷Course(Course_ID)\nOutput Table:\nStudent_ID\n101\n103",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Relational Calculus?",
        "answer": "Relational calculusis a non-procedural query language used in the context of relational algebra. It focuses on what data to retrieve, rather than how to retrieve it, making it different from relational algebra, which is procedural. In relational calculus, queries are expressed using logical formulas that describe the desired result, without specifying the exact steps to get there.\nThere are two types of Relational Calculus",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is Domain Relational Calculus(DRC)?",
        "answer": "Following are the Previous Year’s Gate Questions\nGATE | GATE CS 2012 | Question 50GATE | GATE CS 2012 | Question 41\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "introduction-of-relational-algebra-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "TheRelational Modelis a fundamental concept in Database Management Systems (DBMS) that organizes data into tables, also known as relations. This model simplifies data storage, retrieval, and management by using rows and columns.Codd’s Rules, introduced by Dr. Edgar F. Codd, define the principles a database must follow to qualify as a true relational database.\nThese rules ensure data consistency, integrity, and ease of access, making them essential for efficient database design and management. Its other key features are as follows:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Relational Model?",
        "answer": "Relational Model is a key concept in Database Management Systems (DBMS) that organizes data in a structured and efficient way. It represents data and their relationships using tables. Each table has multiple columns, each with a unique name. These tables are also called relations. The relational model is widely used because it simplifies database management and ensures data accuracy.\nIt primarily uses SQL (Structured Query Language) to manage and query data stored in tables with predefined relationships. SQL is widely used because it offers a consistent and efficient way to interact with relational databases. NoSQL databases, although not part of the relational model, are often used as an alternative for managing unstructured or semi-structured data. They provide greater flexibility and scalability, making them ideal for large, fast-growing applications. However, relational databases with SQL remain popular for applications requiring strong consistency and complex queries.\nSome of the most well-known Relational database includeMySQL, PostgreSQL, MariaDB, Microsoft SQL Server, and Oracle Database.",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Terminologies?",
        "answer": "Relations (Tables):It is the basic structure in which data is stored. Each relation is made up of rows and columns.Example:The table above namedStudent, is a relation. It stores data about students using rows and columns.\nRelational Schema:Schema represents the structure of a relation.Example:Relational Schema of STUDENT relation can be represented as STUDENT(StudentID, Name,  Age, Course).\nRelational Instance:The set of values present in a relationship at a particular instance of time is known as a relational instance as shown in Table .\nAttribute:Each relation is defined in terms of some properties, each of which is known as an attribute. or Each column shows an attribute of the data.Example: StudentID,Name,Age, andCourseare the attributes in this table.\nThe domain of an attribute:The possible values an attribute can take in a relation is called its domain.Example:The domain of theAgecolumn is valid ages like 21, 22, 23 etc.The domain of theCoursecolumn includes valid courses like “Computer Science,” “Mathematics,” and “Physics.”\nTuple:Each row of a relation is known as a tuple.Example:STUDENT relation has 4 tuples.\nCardinality:Cardinality refers to the number of distinct values in a column compared to the total number of rows in a table.Example:TheAgecolumn has 3 distinct values: 21, 22 and 23.\nDegree (Arity):The degree of relation refers to total number of attribute a relation has. It is also known as Arity.Example:The degree of this table is4because it has 4 columns:StudentID, Name, AgeandCourse.\nPrimary Key:The primary key is an attribute or a set of attributes that help to uniquely identify the tuples(records) in the relational table.\nNULL values:Values of some attribute for some tuples may be unknown, missing, or undefined which are represented by NULL. Two NULL values in a relationship are considered different from each other.\nSTUDENT TABLEImagine aStudentTable in a database:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Relational Model can be represented as shown below?",
        "answer": "```python\nSTUDENT (StudNo, Sname, Special)ENROLLMENT (StudNo, Subcode, marks)SUBJECT (Subcode, Subname, Maxmarks, Faccode)FACULTY (Faccode, Fname, Dept)\n```\nRead more aboutRelational Model.",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is RDBMS Vendors?",
        "answer": "There are several vendors that offer Relational Database Management Systems (RDBMS). Here are some of the most popular ones:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Relational Algebra?",
        "answer": "It is a procedural Language. It consists of a set of operators that can be performed on relations.Relational Algebraforms the basis for many other high-level data sub-languages likeSQLandQBE.Relational algebra has mainly 9 types of operators.",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is UNION (U):A and B are two relations. It displays total values (Attributes) in both relations. It avoids duplicate values in both relations. U symbol can be used.?",
        "answer": "Syntax:\nA UNION B (or) A U B\nExample:\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A UNION B = {clerk, manager, salesman, president}\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is INTERSECTION (∩):A and B are two relations. It displays common elements in both relations. “∩” symbol can be used.?",
        "answer": "Syntax:\nA INTERSECT B (or) A ∩ B\nExample:\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A INTERSECT B = { clerk, manager}\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is DIFFERENCE (─):A and B are two relations. It displays elements in relation A not in relation B.?",
        "answer": "Syntax:\nA MINUS B (OR) A ─ B\nExample:\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A MINUS B = {salesman}\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is CARTESIAN PRODUCT(X):A and B are two relations. It has a new relation consisting of all pair wises combinations of all elements in A and B. The relation A has “m” elements and relation B has “n” elements, then the resultant relation will be “ m * n “.?",
        "answer": "Syntax:\nA TIMES B (OR) A X B\nExample:\n```python\nA = { clerk, manager, salesman}B = { president, clerk, manager}A TIMES B = { (clerk, president),(clerk, clerk),(clerk, manager),(manager, president), (manager, clerk),(manager, manager),(salesman, president),(salesman, clerk), (salesman, manager) }\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is SELECTION (σ):Selection operation chooses the subset of tuples from the relation that satisfies the given condition.?",
        "answer": "In general SELECT operation is denoted by\n(σ)θ(R)\n(σ)(Sigma): SELECT operator\nθ: Selection condition\nR: Relation or relational algebra expression.\nIn general the select condition is a Boolean condition (i.e. an expression using logical connective) of terms that have the form attribute1 OP attribute2 where OP is the comparison operators <,>,=,>= etc.Syntax:\nσcondition(relation name)",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is PROJECTION (π):It displays some specified columns in a relation. “π” operator can be used to select some specified columns in a relation. It selects tuples that satisfy the given predicate from a relation. It displays some specified columns by using some conditions.?",
        "answer": "Syntax:\nπ(col1,col2…) Relation Name\nExample:\n```python\nπ(sno, sname, total)MARKS\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is DIVIDE (÷):It divides the tuple from one relation to another relation?",
        "answer": "Syntax:\nA DIVIDE B (OR) A ÷ B\nExample:\n```python\nA = { clerk, manager, salesman}B = { clerk, manager}A DIVIDE B = {salesman}\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is RENAME(ρ):It gives another name to the relation.?",
        "answer": "Syntax:\nρ(OLD RELATION, NEW RELATION)\nExample:\n```python\nρ(STUDENT, MARKS)It changes the “student” relation to “Marks” relation.It also renames the specified column.It changes the old-column name to new-column name.\n```",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Advantages of Relational Algebra?",
        "answer": "Relational Algebra is a formal language used to specify queries to retrieve data from a relational database. It has several advantages that make it a popular choice for managing and manipulating data.Here are some of the advantages of Relational Algebra:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Disadvantages of Relational Algebra?",
        "answer": "While Relational Algebra has many advantages, it also has some limitations and disadvantages that should be considered when using it.Here are some of the disadvantages of Relational Algebra:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Lack of Integration:Relational Algebra is often used in conjunction with other programming languages and tools, which can create integration challenges. It may require additional programming effort to integrate Relational Algebra with other systems and tools.?",
        "answer": "Relational Algebra is a powerful and useful tool for managing and manipulating data in relational databases, it has some limitations and disadvantages that should be carefully considered when using it.",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Codd’s Twelve Rules of Relational Database?",
        "answer": "Codd rules were proposed by E.F. Codd which should be satisfied by therelational model. Codd’s Rules are basically used to check whether DBMS has the quality to becomeRelational Database Management System (RDBMS).These rules set basic guidelines to ensure data is stored and managed in a clear, consistent, and reliable way.  But, it is rare to find that any product has fulfilled all the rules of Codd.\nThey generally follow the 8-9 rules of Codd. E.F. Codd has proposed 13 rules which are popularly known as Codd’s 12 rules. These rules are stated as follows:",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Rule 12: Non-Subversion Rule- Low-levelaccess to data should not be able to bypass the integrity rule to change data.?",
        "answer": "Codd’s Rules\nGATE Question-2012",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "The relational model evolved by E.F. Codd, brought a revolution in handling data because it showed how data could be stored in two-dimensional tables for easier manipulation and interaction. Codd designed twelve rules that would set guidelines to maintain integrity, consistency, and scalability in the RDBMS. Few commercial products follow these rules entirely; however, these are something core to database design. Relational databases are still the most widely used for their ease, simplicity, and power of querying. As technology has evolved, Codd’s principles remain guiding factors in developing scalable, secure, efficient systems of data management and are a core ingredient of modern database solutions.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "introduction-of-relational-model-and-codd-rules-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "The original relation and relation reconstructed from joining decomposed relations must contain the same number of tuples if the number is increased or decreased then it is Lossy Join decomposition.\nLossless join decomposition ensures that never get the situation where spurious tuples are generated in relation, for every value on the join attributes there will be a unique tuple in one of the relations.",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "What is Lossless Decomposition?",
        "answer": "Lossless join decomposition is a decomposition of a relation R into relations R1, and R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancy from databases while preserving the original data.\nIn other words by lossless decomposition, it becomes feasible to reconstruct the relation R from decomposed tables R1 and R2  by using Joins.\nOnly1NF,2NF,3NF,andBCNFare valid for lossless join decomposition.\nIn Lossless Decomposition, we select the common attribute and the criteria for selecting a common attribute is that the common attribute must be a candidate key or super key in either relation R1, R2, or both.\nDecomposition of a relation R into R1 and R2 is a lossless-join decomposition if at least one of the following functional dependencies is in F+ (Closure of functional dependencies)",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "What is Example of Lossless Decomposition?",
        "answer": "— Employee (Employee_Id, Ename, Salary, Department_Id, Dname)\nCan be decomposed using lossless decomposition as,\n— Employee_desc (Employee_Id, Ename, Salary, Department_Id)— Department_desc (Department_Id, Dname)Alternatively the lossy decomposition would be as joining these tables is not possible so not possible to get back original data.\n– Employee_desc (Employee_Id, Ename, Salary)– Department_desc (Department_Id, Dname)\n```python\nR1 ∩ R2 → R1ORR1 ∩ R2 → R2\n```\nIn adatabase management system (DBMS), a lossless decomposition is a process of decomposing a relation schema into multiple relations in such a way that it preserves the information contained in the original relation. Specifically, a lossless decomposition is one in which the original relation can be reconstructed by joining the decomposed relations.\nTo achieve lossless decomposition, a set of conditions known as Armstrong’s axioms can be used. These conditions ensure that the decomposed relations will retain all the information present in the original relation. Specifically, the two most important axioms for lossless decomposition are the reflexivity and the decomposition axiom.\nThe reflexivity axiom states that if a set of attributes is a subset of another set of attributes, then the larger set of attributes can be inferred from the smaller set. The decomposition axiom states that if a relation R can be decomposed into two relations R1 and R2, then the original relation R can be reconstructed by taking the natural join of R1 and R2.\nThere are several algorithms available for performing lossless decomposition in DBMS, such as theBCNF (Boyce-Codd Normal Form)decomposition and the3NF (Third Normal Form)decomposition. These algorithms use a set of rules to decompose a relation into multiple relations while ensuring that the original relation can be reconstructed without any loss of information.",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In Conclusion, a lossless decomposition is an important concept in DBMS that ensures that the original relation can be reconstructed from the decomposed relations without any loss of information. The use of Armstrong’s axioms and decomposition algorithms such as BCNF and 3NF can help achieve lossless decomposition in practice.",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "What is Q.1:Let R (A, B, C, D) be a relational schema with the following functional dependencies?",
        "answer": "```python\nA → B, B → C,C → D and D → B.The decomposition of R into(A, B), (B, C), (B, D)\n```\n(A)gives a lossless join, and is dependency preserving(B)gives a lossless join, but is not dependency preserving(C)does not give a lossless join, but is dependency preserving(D)does not give a lossless join and is not dependency preserving\nRefer tothisfor a solution.",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "Q.2:R(A,B,C,D) is a relation. Which of the following does not have a lossless join, dependency preserving BCNF decomposition?",
        "answer": "(A) A->B, B->CD(B) A->B, B->C, C->D(C) AB->C, C->AD(D) A ->BCD\nRefer tothisfor a solution.\nBelow is the Quiz of previous year GATE Questionshttps://www.geeksforgeeks.org/dbms-gq/database-design-normal-forms-gq/\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "lossless-decomposition-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "Decomposition of a relation is done when a relation in arelational modelis not in appropriate normal form. Relation R is decomposed into two or more relations if decomposition islosslessjoin as well asdependency preserving.",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Lossless Join Decomposition?",
        "answer": "If we decompose a relation R into relations R1 and R2,\n```python\nDecomposition is lossy if R1 ⋈ R2 ⊃ RDecomposition is lossless if R1 ⋈ R2 = R\n```\nTo check for lossless join decomposition using the FD set, the following conditions must hold:",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is The Union of Attributes of R1 and R2 must be equal to the attribute of R. Each attribute of R must be either in R1 or in R2.?",
        "answer": "```python\nAtt(R1) U Att(R2) = Att(R)\n```",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is The intersection of Attributes of R1 and R2 must not be NULL.?",
        "answer": "```python\nAtt(R1) ∩ Att(R2) ≠ Φ\n```",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is The common attribute must be a key for at least one relation (R1 or R2)?",
        "answer": "```python\nAtt(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)\n```\nFor Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is a lossless join decomposition as:",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is Dependency Preserving Decomposition?",
        "answer": "If we decompose a relation R into relations R1 and R2, All dependencies of R either must be a part of R1 or R2 or must be derivable from a combination offunctional dependencyof R1 and R2. For Example, A relation R (A, B, C, D) with FD set{A->BC} is decomposed into R1(ABC) and R2(AD) which is dependency preserving because FD A->BC is a part of R1(ABC).",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is GATE Question?",
        "answer": "Consider a schema R(A, B, C, D) and functional dependencies A->B and C->D. Then the decomposition of R into R1(AB) and R2(CD) is [GATE-CS-2001]\n(A) dependency preserving and lossless join\n(B) lossless join but not dependency preserving\n(C) dependency preserving but not lossless join\n(D) not dependency preserving and not lossless join\nAnswer:\nFor lossless join decomposition, these three conditions must hold:\n```python\nAtt(R1) U Att(R2) = ABCD = Att(R)Att(R1) ∩ Att(R2) = Φ, which violates thecondition of lossless join decomposition.Hence the decomposition is not lossless.\n```\nFor dependency preserving decomposition, A->B can be ensured in R1(AB) and C->D can be ensured in R2(CD). Hence it is dependency preserving decomposition. So, the correct option isC.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "lossless-join-and-dependency-preserving-decomposition.txt"
    },
    {
        "question": "What is •?",
        "answer": "Converting an Entity-Relationship (ER) diagram to a Relational Model is a crucial step in database design. The ER model represents the conceptual structure of a database, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL. In this article, we will explore how to convert an ER diagram to a Relational Model for different scenarios, including binary relationships with various cardinalities and participation constraints.\nCase 1:  Binary Relationship with 1:1 cardinality with total participation of an entity\nA person has 0 or 1 passport number and Passport is always owned by 1 person. So it is 1:1cardinalitywith full participation constraint from Passport.\nFirst Convert each entity and relationship to tables.Person table corresponds to Person Entity with key as Per-Id. Similarly Passport table corresponds to Passport Entity with key as Pass-No. Has Table represents relationship between Person and Passport (Which person has which passport). So it will take attribute Per-Id from Person and Pass-No from Passport.\nTable 1\nAs we can see from Table 1, each Per-Id and Pass-No has only one entry in  Has Table. So we can merge all three tables into 1 with attributes shown in Table 2. Each Per-Id will be unique and not null. So it will be the key. Pass-No can’t be key because for some person, it can be NULL.\nTable 2\nCase 2: Binary Relationship with 1:1 cardinality and partial participation of both entities\nA male marries 0 or 1 female and vice versa as well. So it is 1:1 cardinality with partial participation constraint from both. First Convert each entity and relationship to tables.  Male table corresponds to Male Entity with key as M-Id. Similarly Female table corresponds to Female Entity with key as F-Id. Marry Table represents relationship between Male and Female (Which Male marries which female). So it will take attribute M-Id from Male and F-Id from Female.\nTable 3\nAs we can see from Table 3, some males and some females do not marry. If we merge 3 tables into 1, for some M-Id, F-Id will be NULL. So there is no attribute which is always not NULL. So we can’t merge all three tables into 1. We can convert into 2 tables. In table 4, M-Id who are married will have F-Id associated. For others, it will be NULL. Table 5 will have information of all females.Primary Keyshave been underlined.\nTable 4\nTable 5\nNote:Binary relationship with 1:1 cardinality will have 2 table if partial participation of both entities in the relationship. If atleast 1 entity has total participation, number of tables required will be 1.\nCase 3: Binary Relationship with n: 1 cardinality\nIn this scenario, every student can enroll only in one elective course but for an elective course there can be more than one student. First Convert each entity and relationship to tables.  Student table corresponds to Student Entity with key as S-Id. Similarly Elective_Course table corresponds to Elective_Course Entity with key as E-Id. Enrolls Table represents relationship between Student and Elective_Course (Which student enrolls in which course). So it will take attribute S-Id from Student and E-Id from Elective_Course.\nTable 6\nAs we can see from Table 6, S-Id is not repeating in Enrolls Table. So it can be considered as a key of Enrolls table. Both Student and Enrolls Table’s key is same. We can merge it as a single table. The resultant tables are shown in Table 7 and Table 8. Primary Keys have been underlined.\nTable 7\nTable 8\nCase 4: Binary Relationship with m: n cardinality\nIn this scenario, every student can enroll in more than 1 compulsory course and for a compulsory course there can be more than 1 student. First Convert each entity and relationship to tables.  Student table corresponds to Student Entity with key as S-Id. Similarly Compulsory_Courses table corresponds to Compulsory Courses Entity with key as C-Id. Enrolls Table represents relationship between Student and Compulsory_Courses (Which student enrolls in which course). So it will take attribute S-Id from Person and C-Id from Compulsory_Courses.\nTable 9\nAs we can see from Table 9, S-Id and C-Id both are repeating in Enrolls Table. But its combination is unique; so it can be considered as a key of Enrolls table. All tables’ keys are different, these can’t be merged.  Primary Keys of all tables have been underlined.\nCase 5: Binary Relationship with weak entity\nIn this scenario, an employee can have many dependents and one dependent can depend on one employee. A dependent does not have any existence without an employee (e.g; you as a child can be dependent of your father in his company). So it will be a weak entity and its participation will always be total. Weak Entity does not have key of its own. So its key will be combination of key of its identifying entity (E-Id of Employee in this case) and its partial key (D-Name).\nFirst Convert each entity and relationship to tables.  Employee table corresponds to Employee Entity with key as E-Id. Similarly Dependents table corresponds to Dependent Entity with key as  D-Name and E-Id. Has Table represents relationship between Employee and Dependents (Which employee has which dependents). So it will take attribute E-Id from Employee and D-Name from Dependents.\nTable 10\nAs we can see from Table 10, E-Id, D-Name is key forHasas well as Dependents Table. So we can merge these two into 1. So the resultant tables are shown in Tables 11 and 12. Primary Keys of all tables have been underlined.\nTable 11",
        "source": "mapping-from-er-model-to-relational-model.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Converting anER diagramto a Relational Model is a crucial step in database design. The ER model represents the conceptual structure, while the Relational Model is a physical representation that can be directly implemented using a Relational Database Management System (RDBMS) like Oracle or MySQL. We’ve explored how to convert ER diagrams to Relational Models for different scenarios, including binary relationships with various cardinalities and participation constraints. We’ve covered five cases, highlighting key considerations and resulting table structures. By understanding these scenarios, database designers and developers can effectively translate conceptual ER models into physical Relational Models, ensuring successful database implementation using RDBMS. So, mapping from ER Model to Relational Model is a vital skill, and we hope this article has been helpful.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "mapping-from-er-model-to-relational-model.txt"
    },
    {
        "question": "What is •?",
        "answer": "Normal forms are the essential principles used to organize data efficiently and eliminate redundancy. They help to ensure that the database structure is logical, consistent and optimized for performance. By breaking down data into smaller, related tables and defining clear relationships between them, normal forms reduce duplication and improve data integrity. This process is crucial for creating databases that are easy to maintain, update, and query making them a fundamental concept for anyone working with databases.\nNormalization is the process of minimizing redundancy from a relation or set of relations. Redundancy in relation may cause insertion, deletion and update anomalies.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Normalization?",
        "answer": "Normalization is a systematic approach to organize data in a database to eliminate redundancy, avoid anomalies and ensure data consistency. The process involves breaking down large tables into smaller, well-structured ones and defining relationships between them. This not only reduces the chances of storing duplicate data but also improves the overall efficiency of the database.\nNormal Forms",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is A relation in BCNF is considered fully normalized.?",
        "answer": "By following a series of rules called normal forms (such as 1NF, 2NF, 3NF and BCNF) normalization ensures that the data is logically organized and maintains its integrity. For example, it prevents issues like inconsistent updates or deletion errors by ensuring that each piece of data has a single, clear location.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Reduced Redundancy:Eliminating duplicate data saves storage space and minimizes inconsistencies.?",
        "answer": "Note: A design that has a lower normal form than another design has more redundancy.\nNormal forms reduce duplicate data, make data more consistent and improve how a database works. However, too much normalization can make the database design and queries more complicated. It’s important to find a balance between keeping the database organized and easy to use.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Easier database maintenance:Normalization reduces the complexity of a database by breaking it down into smaller, more manageable tables, making it easier to add, modify, and delete data.?",
        "answer": "Overall, using normal forms in DBMS helps to improve data quality, increase database efficiency and simplify database design.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is First Normal Form?",
        "answer": "First Normal Form (1NF) ensures that each column in a table contains single, indivisible values, and each row is unique. A table violates 1NF if it has composite or multi-valued attributes, such as multiple phone numbers in one cell. 1NF simplifies data, making it consistent and easy to manage.\nRead more aboutFirst Normal Form.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Second Normal Form?",
        "answer": "A relation is in 2NF if it is in 1NF and any non-prime attribute (attributes which are not part of any candidate key) is not partially dependent on any proper subset of any candidate key of the table. In other words, we can say that, every non-prime attribute must be fully dependent on each candidate key.A functional dependency X->Y (where X and Y are set of attributes) is said to be inpartial dependency, if Y can be determined by any proper subset of X.\nRead more aboutSecond Normal Form.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Third Normal Form?",
        "answer": "A relation is in Third Normal Form (3NF) if it is already in Second Normal Form (2NF) and does not have transitive dependencies for non-prime attributes.Below mentioned is the basic condition that must be hold in the non-trivial functional dependency X -> Y:\n```python\nX is a super key.orY is a prime attribute (each element of Y is part of some candidate key).\n```\nRead more aboutThird Normal Form.\nQuestion:Find the highest normal form of a relation R(A,B,C,D,E) with FD set as {BC->D, AC->BE, B->E}\nStep 1:As we can see, (AC)+ ={A,C,B,E,D} but none of its subset can determine all attribute of relation, So AC will be candidate key. A or C can’t be derived from any other attribute of the relation, so there will be only 1 candidate key {AC}.\nStep 2:Prime attributes are those attributes that are part of candidate key {A, C} in this example and others will be non-prime {B, D, E} in this example.\nStep 3:The relation R is in 1st normal form as a relational DBMS does not allow multi-valued or composite attribute. The relation is in 2nd normal form because BC->D is in 2nd normal form (BC is not a proper subset of candidate key AC) and AC->BE is in 2nd normal form (AC is candidate key) and B->E is in 2nd normal form (B is not a proper subset of candidate key AC).\nThe relation is not in 3rd  normal form because in BC->D (neither BC is a super key nor D is a prime attribute) and in B->E (neither B is a super key nor E is a prime attribute) but to satisfy 3rd normal for, either LHS of an FD should be super key or RHS should be prime attribute. So the highest normal form of relation will be 2nd Normal form.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is BCNF?",
        "answer": "BCNF (Boyce-Codd Normal Form) is a advanced version of Third Normal Form where one column depends on another, unless the first column is a candidate key (a column or combination of columns that can uniquely identify a row). The basic condition for any relation to be in BCNF is that it must be in Third Normal Form.\nIn simpler words, if any column in the table determines another column’s value, the determining column must be unique (a candidate key). BCNF fixes any issues left by 3NF\nWe have to focus on some basic rules that are for BCNF:\n```python",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Table must be in Third Normal Form.2. In relation X->Y, X must be a super-key in a relation.?",
        "answer": "```\nRead more aboutBCNF.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Fourth Normal Form?",
        "answer": "Fourth Normal Form contains no non-trivial multivalued dependency except candidate key. The basic condition with Fourth Normal Form is that the relation must be in BCNF.\nThe basic rules are mentioned below.\n```python",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is It must be in BCNF.2. It does not have any multi-valued dependency.?",
        "answer": "```\nFor more, refer toFourth Normal Form in DBMS.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Fifth Normal Form?",
        "answer": "Fifth Normal Form is also called as Projected Normal Form. The basic conditions of Fifth Normal Form is mentioned below.\n```python\nRelation must be in Fourth Normal Form.The relation must not be further non loss decomposed.\n```\nFor more, refer toFifth Normal Form in DBMS.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In Conclusion, relational databases can be arranged according to a set of rules called normal forms indatabaseadministration (1NF, 2NF, 3NF, BCNF, 4NF, and 5NF), which reduce data redundancy and preserve data integrity. By resolving various kinds of data anomalies and dependencies, each subsequent normal form expands upon the one that came before it. The particular requirements and properties of the data being stored determine which normal form should be used; higher normal forms offer stricter data integrity but may also result in more complicated database structures.",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is GATE CS 2016 (Set 1), Question 31?",
        "answer": "Dreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "normal-forms-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "A relationship between two entities of the same entity set is called a recursive relationship or repeated relationship. Here the same entity set participates more than once in a relationship type with a different role for each instance.",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is To represent a recursive relationship in an ER diagram, we use a self-join, which is a join between a table and itself. In other words, we create a relationship between the same entity type. The self-join involves creating two instances of the same entity and connecting them with a relationship. One instance is considered the parent, and the other instance is considered the child.?",
        "answer": "We use cardinality constraints to specify the number of instances of the entity that can participate in the relationship. For example, in an organizational chart, an employee can have many subordinates, but each subordinate can only have one manager. This is represented as a one-to-many (1:N) relationship between the employee entity and itself.\nExample:\nLet us suppose that we have an employee table. A manager supervises a subordinate. Every employee can have a supervisor except the CEO and there can be at most one boss for each employee. One employee may be the boss of more than one employee.\nLet’s suppose that REPORTS_TO is a recursive relationship on the Employee entity type where each Employee plays two roles.",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is Subordinate?",
        "answer": "Here, “Supervisor” and “Subordinate” are referred to asrole names. The degree of theREPORTS_TOrelationship is 1 (i.e., a unary relationship",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is Themaximum cardinalityof theSupervisorrole is N, as an employee can manage many subordinates.?",
        "answer": "For the Subordinate role:",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is Themaximum cardinalityis 1, as a subordinate can have only one manager.?",
        "answer": "Note: In this case, neither of the participants has total participation since the minimum cardinality for both roles is 0. Therefore, the relationship is represented with asingle line(not a double line) in the ER diagram",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is Implementing a Recursive Relationship?",
        "answer": "To implement a recursive relationship, a foreign key of the employee’s manager number would be held in each employee record. A Sample table would look something like this:-\n```python\nEmp_entity( Emp_no,Emp_Fname, Emp_Lname, Emp_DOB, Emp_NI_Number, Manager_no);Manager no - (this is the employee no of the employee's manager)\n```\nExample:\n```python\nCREATE TABLE employee (id INT PRIMARY KEY,name VARCHAR(50),manager_id INT,FOREIGN KEY (manager_id) REFERENCES employee(id));\n```\nHere, the employee table has a foreign key column calledmanager_idthat references theidcolumn of the sameemployeetable. This allows you to create a recursive relationship where an employee can have a manager who is also an employee.",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is The CEO (employee 1 in this example) does not have a manager, hence theirManager_noisNULL.?",
        "answer": "Dreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "recursive-relationships-in-er-diagrams.txt"
    },
    {
        "question": "What is •?",
        "answer": "Normalization is a structural method whereby tables are broken down in a controlled manner with an aim of reducing data redundancy. It refers to the process of arranging the attributes and relations of a database in order to minimize data anomalies such as update, insert and delete anomalies. Normalization is usually a sequence of steps which are also called normal forms (NF).\nThe First Normal Form (1NF) and Second Normal Form (2NF) are very important towards the achievement of a normalized database. Where 1NF is centered on the removal of multiple values in an attribute, 2NF is associated with the issue ofpartial dependencies.",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is Second Normal Form?",
        "answer": "Second Normal Form (2NF) is based on the concept of fully functional dependency. It is a way to organize a database table so that it reduces redundancy and ensures data consistency. For a table to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single, indivisible values without any repeating groups. Additionally, the table should not have partial dependencies. In other words,\nA relation that is in First Normal Form and every non-prime attribute is fully functionally dependent on the candidate key, then the relation is in Second Normal Form (2NF).\nNote –If the proper subset of the candidate key determines a non-prime attribute, it is called  partial dependency. Thenormalizationof 1NF relations to 2NF involves theremoval of partial dependencies. If a partial dependency exists, we remove the partially dependent attribute(s) from the relation by placing them in a new relation along with a copy of their determinant. Consider the examples given below.\nExample-1:Consider the table below.",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is Therefore, Non-prime attribute COURSE_FEE is dependent on a proper subset of the candidate key, which is a partial dependency and so this relation is not in 2NF.?",
        "answer": "To convert the above relation to 2NF, we need to split the table into two tables such as : Table 1: STUD_NO, COURSE_NO Table 2: COURSE_NO, COURSE_FEE.\nNow, each table is in 2NF:",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is The Student-Course Table ensures there are no partial dependencies because it only relates students to courses.?",
        "answer": "NOTE:2NF tries to reduce the redundant data getting stored in memory. For instance, if there are 100 students taking C1 course, we don’t need to store its Fee as 1000 for all the 100 records, instead, once we can store it in the second table as the course fee for C1 is 1000.",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is Example-2:Consider following functional dependencies in relation  R (A,  B , C,  D )?",
        "answer": "```python\nAB -> C  [A and B together determine C]BC -> D  [B and C together determine D]\n```\nIn the above relation, AB is the only candidate key and there is no partial dependency, i.e., any proper subset of AB doesn’t determine any non-prime attribute.",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is Partial Dependency?",
        "answer": "A functional dependency denoted as X→Y where X and Y are an attribute set of a relation, is a partial dependency , if some attribute A∈X can be removed and the dependency still holds.\nFor example, if you have a functional dependency X→Y, where X is a composite candidate key (made of multiple columns), and you can remove one column from X, but the dependency still works, then it’s a partial dependency.\nLet’s say X={A,B} and A→Y still holds true even without B. This means Y doesn’t really depend on the full key {A,B}, but only on part of it (A). This is called a partial dependency. It often leads to redundancy and is something we fix when we normalize a table to Second Normal Form (2NF).\nRead more aboutPartial Dependency.",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In conclusion,Second Normal Form (2NF)helps make databases more organized by removing partial dependencies. It reduces duplicate data, prevents errors, and ensures data is stored accurately. Following 2NF makes it easier to manage, update, and retrieve information from your database.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "second-normal-form-2nf.txt"
    },
    {
        "question": "What is •?",
        "answer": "In SQL, theCROSS JOINis a unique join operation that returns theCartesian productof two or more tables. This means it matches each row from the left table with every row from the right table, resulting in a combination of all possible pairs of records.\nIn this article, we will learn the CROSS JOIN operation, itssyntax, andpractical examplesto clarify how and when to use it effectively.",
        "source": "sql-cross-join.txt"
    },
    {
        "question": "What is SQL CROSS JOIN?",
        "answer": "Cross Join in SQLproduces a result set that contains the cartesian product of two or more tables. Cross join is also called aCartesian Join. When CROSS JOIN is used with aWHERE clause, it behaves likeINNER JOIN, filtering the results based on specific conditions. CROSS JOIN is the best choice when we need to match each row of one table to every other row of another table. It is helpful in many applications where we need to obtain paired combinations of records.\nCross Join B/W Two Sets\nSyntax:\nSELECT*FROMtable1\nCROSS JOINtable2;",
        "source": "sql-cross-join.txt"
    },
    {
        "question": "What is Examples of SQL CROSS JOIN?",
        "answer": "Let’s look at some examples of CROSS JOIN statement inSQLto understand it’s working.\nIn this CROSS JOIN tutorial, we will use the following two tables in examples:\nTable 1- Customer\nTable 2- Orders\nTo create both these tables on your system, you can write the following code:",
        "source": "sql-cross-join.txt"
    },
    {
        "question": "What is Example 1: CROSS JOIN?",
        "answer": "In this example, we will use the CROSS JOIN command to match the data of the Customer and Orders table.\nQuery:\n```python\nSELECT*FROMCUSTOMERCROSS JOINORDERS;\n```\nOutput:\nCross Join\nAs we can see, whether the other table matches or not, the CROSS JOIN keyword returns all similar records from both tables. Therefore, if there are rows in “Customers” or “Orders” that do not match any entries in either table, those rows will also be listed.",
        "source": "sql-cross-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "The SQL CROSS JOIN is a powerful tool for generating all possible combinations of rows from two or more tables. It is particularly useful in scenarios where every record needs to be paired with every other record, such as in creating combinations or generating test data. However, it should be used with caution, especially with large datasets, as it can quickly result in huge result sets that could impact performance. By understanding when and how to use CROSS JOIN, you can harness its power to handle complex queries and generate diverse datasets for a wide range of applications.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-cross-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "InSQL, theFULL JOIN(orFULL OUTER JOIN) is a powerful technique used to combine records from two or more tables. Unlike an INNER JOIN, which only returns rows where there are matches in both tables, aFULL JOIN retrieves all rows from both tables, filling inNULLvalues where matches do not exist. In this article, We will learn aboutSQL FULL JOINby understanding various examples in detail.\nIn this article, we will delve into the concept of SQL FULL JOIN, understand its syntax, and explore practical examples to help you master its use in SQL queries.",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is When there is no match, the result will includeNULLsfor the columns of the table that do not have a matching row.?",
        "answer": "Tip: We can useFULL JOINto combine multiple tables, by sequentially performingFULL JOINon two tables at a time.\nSyntax:\n```python\nSELECT columnsFROM table1FULL JOIN table2ON table1.column = table2.column;\n```\nExplanation:",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is ON table1.column = table2.column: Defines the condition to match rows between the two tables.?",
        "answer": "This query retrieves all records from bothtable1andtable2, returning NULL where there are no matches.",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is Examples of SQL FULL JOIN?",
        "answer": "Let's look at some examples of the FULL JOIN in SQL and understand it's working.\nFirst, let's create a demo database and two tables on which we will perform theJOIN.",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is Example 1: Joining Multiple Tables with Full Join?",
        "answer": "We want to demonstrate how to useFULL JOINto combine two or more tables based on common columns. In this case, we will create two additional tables:AuthorsandPublishers, and join them with theBookstable using aFULL JOIN.\nQuery:\n```python\nSELECTb.BOOK_ID,b.BOOK_NAME,a.AUTHOR_NAME,p.PUBLISHER_NAMEFROMBooks bFULL JOIN Authors a ON b.BOOK_ID = a.AUTHOR_IDFULL JOIN Publishers p ON b.BOOK_ID = p.PUBLISHER_ID;\n```\nOutput:\nExplanation:\nIn this query, we usedFULL JOINto join three tables:Books,Authors, andPublishers. TheFULL JOINensures that all records from both tables are included, whether or not they match. Here, each book has a corresponding author and publisher. If any book didn't have an author or publisher, the result would still include that row withNULLin the respective columns.",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is Example 2: Full Join with WHERE Clause?",
        "answer": "Now, we want to filter the results from the above join based on a specific condition. We will select only books that have \"Sharma\" in the book name.\nQuery:\n```python\nSELECTb.BOOK_ID,b.BOOK_NAME,a.AUTHOR_NAME,p.PUBLISHER_NAMEFROMBooks bFULL JOIN Authors a ON b.BOOK_ID = a.AUTHOR_IDFULL JOIN Publishers p ON b.BOOK_ID = p.PUBLISHER_IDWHEREb.BOOK_NAME LIKE '%Sharma%';\n```\nOutput:\nExplanation:\nIn this example, theWHEREclause filters out all books that do not contain the word \"Sharma\" in their name. After applying the filter, only the record for \"RD SHARMA\" remains.",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "TheFULL JOINin SQL is an essential tool when you need to combine data from multiple tables while ensuring that no rows are omitted, even if there are no matches between the tables. It allows you to retrieve complete datasets, with NULL values indicating missing data from either side. Adding WHERE clauses allows for further refinement of the results, providing a flexible mechanism for managing data from multiple sources.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!\nG",
        "source": "sql-full-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "TheGROUP BYstatement in SQL is used fororganizingand summarizing data based on identical values in specified columns. By using the GROUP BY clause, users can apply aggregate functions likeSUM, COUNT, AVG, MIN, andMAXto each group, making it easier to perform detailed data analysis.\nIn this article, we will learn the SQL GROUP BY syntax, explore practical examples with single and multiple columns, and demonstrate advanced use cases with theHAVINGclause for conditional grouping. Whether you’re new toSQLor an experienced professional, this article will help you master the GROUP BY clause for efficient data querying.",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is GROUP BY Clause in SQL?",
        "answer": "TheGROUP BYstatement in SQL is used to arrange identical data into groups based on specified columns. If a particular column has the same values in multiple rows, theGROUP BYclause will group these rows together.",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Place condition in thehaving clause.?",
        "answer": "Syntax:\nSELECT column1, function_name(column2)\nFROM table_name\nGROUP BY column1, column2\nKey Terms",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Examples of GROUP BY in SQL?",
        "answer": "Let’s assume that we have two tablesEmployeeandStudentSample Table is as follows after adding two tables we will do some specific operations to learn about GROUP BY.\nEmployee Table:\n```python\nCREATE TABLE emp (emp_no INT PRIMARY KEY,name VARCHAR(50),sal DECIMAL(10,2),age INT);\n```\nInsert some random data into a table and then we will perform some operations in GROUP BY.\n```python\nINSERT INTO emp (emp_no, name, sal, age) VALUES(1, 'Aarav', 50000.00, 25),(2, 'Aditi', 60000.50, 30),(3, 'Aarav', 75000.75, 35),(4, 'Anjali', 45000.25, 28),(5, 'Chetan', 80000.00, 32),(6, 'Divya', 65000.00, 27),(7, 'Gaurav', 55000.50, 29),(8, 'Divya', 72000.75, 31),(9, 'Gaurav', 48000.25, 26),(10, 'Divya', 83000.00, 33);SELECT * from emp;\n```\nOutput:\nEmp TABLE\nStudent Table:\n```python\nCREATE TABLE student (name VARCHAR(50),year INT,subject VARCHAR(50));INSERT INTO student (name, year, subject) VALUES('Alice', 1, 'Mathematics'),('Bob', 2, 'English'),('Charlie', 3, 'Science'),('David', 1, 'Mathematics'),('Emily', 2, 'English'),('Frank', 3, 'Science');\n```\nOutput:\nStudent TABLE",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Example 1 : Group By Single Column?",
        "answer": "Group By single column means, placing all the rows with the same value of only that particular column in one group. Consider the query as shown below:\nQuery:\n```python\nSELECT name, SUM(sal) FROM empGROUP BY name;\n```\nOutput:\nOutput\nExplanations:\nAs you can see in the above output, the rows with duplicate NAMEs are grouped under the same NAME and their corresponding SALARY is the sum of the SALARY of duplicate rows. The SUM() function of SQL is used here to calculate the sum. The NAMES that are added are Aarav, Divya and Gaurav.",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Example 2 : Group By Multiple Columns?",
        "answer": "Group by multiple columns is say, for example,GROUP BY column1, column2. This means placing all the rows with the same values of columnscolumn 1andcolumn 2in one group. Consider the below query:\nQuery:\n```python\nSELECT SUBJECT, YEAR, Count(*)FROM StudentGROUP BY SUBJECT, YEAR;\n```\nOutput:\nOutput\nExplantions:\nAs we can see in the above output the students with both the same SUBJECT and YEAR are placed in the same group. And those whose only SUBJECT is the same but not YEAR belong to different groups. So here we have grouped the table according to two columns or more than one column. The Grouped subject and years are(English,2),(Mathematics,1)and(Science,3). The above mentioned all groups and years are repeatedtwice.",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is HAVING Clause in GROUP BY Clause?",
        "answer": "We know that theWHERE clauseis used to place conditions on columns but what if we want to place conditions on groups? This is where the HAVING clause comes into use. We can use theHAVING clauseto place conditions to decide which group will be part of the final result set. Also, we can not use aggregate functions like SUM(), COUNT(), etc. with the WHERE clause. So we have to use the HAVING clause if we want to use any of these functions in the conditions.\nSyntax:\nSELECT column1, function_name(column2)FROM table_nameWHERE conditionGROUP BY column1, column2HAVING conditionORDER BY column1, column2;\nKey Terms",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Example?",
        "answer": "```python\nSELECT NAME, SUM(sal) FROM EmpGROUP BY nameHAVING SUM(sal)>50000;\n```\nOutput:\nOutput\nExplanation:\nIn the result, only employees whose total salary (SUM(sal)) exceeds50,000are displayed. For example, ifAnjalihas a total salary less than50,000, she will be excluded from the output.",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "TheGROUP BYfunction inSQLorganizes identical data into groups, enabling aggregate analysis on each group. It is commonly used with aggregate functions likeSUM(), COUNT(), AVG(), etc., to summarize data efficiently. TheHAVINGclause further refines the results by applying conditions to these grouped records.GROUP BYcan operate on single or multiple columns, making it a versatile tool for data retrieval and reporting.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-group-by.txt"
    },
    {
        "question": "What is •?",
        "answer": "TheHAVINGclause in SQL is used to filter query results based on aggregate functions. Unlike theWHEREclause, which filters individual rows before grouping, theHAVINGclause filters groups of data after aggregation. It is commonly used with functions likeSUM(),AVG(),COUNT(),MAX(), andMIN().\nIn this article, we will learn the concept of the HAVING clause, and its syntax, and provide several practical examples",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is the SQL HAVING Clause?",
        "answer": "The HAVING clause is used to filter the result of theGROUP BYstatement based on the specified conditions. It allows filtering grouped data usingBoolean conditions(AND,OR). It was introduced because theWHEREclausecannot be used with aggregate functions. Similar toWHERE clause, it helps apply conditions but specifically works withgrouped data. When we need to filter aggregated results, theHAVINGclause is the appropriate choice.\nKey Features of the HAVING Clause",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Helps generatesummary reportsfrom large datasets.?",
        "answer": "Syntax:\nSELECT column_name, AGGREGATE_FUNCTION(column_name)FROM table_nameGROUP BY column_nameHAVING condition;\nHere, the function_name is the name of the function used, for example, SUM(), and AVG().",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is SQL HAVING Clause Examples?",
        "answer": "Here first we create a database name as “Company”, then we will create a table named “Employee” in the database. After creating a table we will execute the query.\nQuery:\n```python",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Example 1 : Using HAVING to Filter Aggregated Results?",
        "answer": "This employee table will help us understand the HAVING Clause. It contains employee IDs, Name, Gender, department, and salary. To Know the sum of salaries, we will write the query:\nQuery:\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY department;\n```\nOutput:\nNow if we need to display the departments where the sum of salaries is 50,000 or more. In this condition, we will use the HAVING Clause.\n```python\nSELECT Department, sum(Salary) as SalaryFROM EmployeeGROUP BY departmentHAVING SUM(Salary) >= 50000;\n```\nOutput:",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Example 2:Using HAVING with Multiple Conditions?",
        "answer": "If we want to find the departments where the total salary is greater than or equal to $50,000, and the average salary is greater than $55,000. We can use the HAVING clause to apply both conditions.\nQuery\n```python\nSELECT Department, SUM(Salary) AS Total_Salary, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING SUM(Salary) >= 50000 AND AVG(Salary) > 55000;\n```\nOutput:",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Example 3:Using HAVING with COUNT()?",
        "answer": "If we want to find departments where there are more than two employees. For this, we can use the COUNT() aggregate function along with the HAVING clause.\nQuery:\n```python\nSELECT Department, COUNT(EmployeeId) AS Employee_CountFROM EmployeeGROUP BY DepartmentHAVING COUNT(EmployeeId) >= 2;\n```\nOutput:\nThis query counts the number of employees in each department and uses the HAVING clause to filter for departments with more than two employees.",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Example 4:Using HAVING with AVG()?",
        "answer": "In this example, let’s find out theaverage salaryfor each department and use the HAVING clause to display only those departments where the average salary is greater than $50,000.\nQuery:\n```python\nSELECT Department, AVG(Salary) AS Average_SalaryFROM EmployeeGROUP BY DepartmentHAVING AVG(Salary) > 50000;\n```\nOutput:",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "TheHAVING clauseis an essential tool in SQL for filtering results based onaggregated data. Unlike the WHERE clause, which applies conditions to individual rows, HAVING works on groups of data that have been aggregated using functions likeSUM(),AVG(), andCOUNT(). Understanding how and when to use the HAVING clause allows you to perform more complex data analysis and generate meaningful insights from your datasets.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-having-clause-with-examples.txt"
    },
    {
        "question": "What is •?",
        "answer": "SQL INNER JOINis a powerful and frequently used operation inrelational databases. It allows us to combine two or more tables based on a related column, returning only the records that satisfy the join condition\nThis article will explore the fundamentals ofINNER JOIN, its syntax, practical examples, and the key differences betweenINNER JOINand other types of joins, such asOUTER JOIN.",
        "source": "sql-inner-join.txt"
    },
    {
        "question": "What is SQL Inner Join?",
        "answer": "TheINNER JOINclause in SQL is used tocombine recordsfromtwoormore tables. The result contains only the rows that havematching valuesin both tables based on a specific condition. This makesINNER JOINa valuable tool when we need to work with related data across multiple tables in a database.\nThe key feature of anINNER JOINis that itfilters out rowsfrom the result where there isno matching datain both tables. Essentially, it returns a “subset” of the data where the condition is satisfied.\nSyntax:\nSELECT columnsFROM table1INNER JOIN table2ON table1.column_name = table2.column_name;\nKey Terms",
        "source": "sql-inner-join.txt"
    },
    {
        "question": "What is Example of SQL INNER JOIN?",
        "answer": "Consider two tables:professorandteaches. Theprofessortable contains data aboutprofessors, while theteachestable holds information about thecoursesthat these professors teach. The common column between these tables isIDfrom theprofessortable andprof_idfrom theteachestable.",
        "source": "sql-inner-join.txt"
    },
    {
        "question": "What is teacher Table?",
        "answer": "Now, we will write a query to retrieve thecourse_id,prof_id,professor's Name, and theirSalaryby joining theprofessorandteachestables usingINNER JOIN. The query joins theprofessortable and theteachestable based on the condition that theIDfrom theprofessortable matches theprof_idin theteachestable.\nQuery\n```python\nSELECT teaches.course_id, teaches.prof_id, professor.Name, professor.SalaryFROM professor INNER JOIN teaches ON professor.ID = teaches.prof_id;\n```\nOutput\nExplanation:\nThe output contains thedetails of professorsand the courses they teach. TheINNER JOINoperation ensures that only the records where a professor is assigned a course are included in the result. The professor who does not teach a course (like Aryan, who is not listed in the output) is excluded.",
        "source": "sql-inner-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "SQL INNER JOINis an essential tool for combining related data across multiple tables. By retrieving only the rows where a match is found, it helps filter relevant information efficiently. Whether we’re managingemployee data,courses, orcustomer orders, mastering the use ofINNER JOINis key to effectivedatabasequerying and management. It simplifies complex queries and enhances the performance ofSQLoperations by minimizing unnecessary data retrieval.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-inner-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "SQLjoinsare the foundation ofdatabase management systems, enabling the combination of data from multiple tables based on relationships between columns. Joins allowefficient data retrieval, which is essential for generating meaningful observations and solvingcomplex business queries.\nUnderstanding SQL join types, such asINNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN, is critical for working with relational databases.\nIn this article, we will cover thedifferent types of SQL joins,includingINNER JOIN,LEFT OUTER JOIN,RIGHT JOIN,FULL JOIN, andNATURAL JOIN. Each join type will be explained with examples,syntax, and practical use cases to help us understand when and how to use these joins effectively.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is SQL Join?",
        "answer": "SQL JOINclause is used toqueryandaccess datafrom multiple tables by establishinglogical relationshipsbetween them. It can access data from multiple tables simultaneously using common key values shared across different tables. We can useSQL JOINwithmultiple tables. It can also be paired with other clauses, the most popular use will be using JOIN withWHERE clauseto filter data retrieval.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is Example of SQL JOINS?",
        "answer": "Consider the two tables,StudentandStudentCourse, which share a common columnROLL_NO. Using SQL JOINS, we can combine data from these tables based on theirrelationship, allowing us to retrieve meaningful information like student details along with theirenrolled courses.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is StudentCourseTable?",
        "answer": "Both these tables are connected by one common key (column) i.eROLL_NO. We can perform a JOIN operation using the given SQL query:\nQuery:\n```python\nSELECT s.roll_no, s.name, s.address, s.phone, s.age, sc.course_idFROM Student sJOIN StudentCourse sc ON s.roll_no = sc.roll_no;\n```\nOutput",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is Types of JOIN in SQL?",
        "answer": "There are many types of Joins inSQL. Depending on the use case, we can use different type ofSQL JOINclause. Below, we explain the most commonly used join types with syntax and examples:",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is 1. SQL INNER JOIN?",
        "answer": "TheINNER JOINkeyword selects all rows from both the tables as long as the condition is satisfied. This keyword will create theresult-setby combining all rows from both the tables where thecondition satisfiesi.e value of the common field will be the same.\nSyntax\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1INNER JOIN table2ON  table1.matching_column = table2.matching_column;\n```\nKey Terms",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is matching_column: Column common to both the tables.?",
        "answer": "Note: We can also write JOIN instead of INNER JOIN.  JOIN is same as INNER JOIN.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is INNER JOIN Example?",
        "answer": "Let’s look at the example ofINNER JOINclause, and understand it’s working. This query will show the names and age of students enrolled in different courses.\nQuery:\n```python\nSELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM StudentINNER JOIN StudentCourseON Student.ROLL_NO = StudentCourse.ROLL_NO;\n```\nOutput",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is 2. SQL LEFT JOIN?",
        "answer": "LEFT JOINreturns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join. For the rows for which there isno matching rowon the right side, the result-set will containnull. LEFT JOIN is also known asLEFT OUTER JOIN.\nSyntax\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1LEFT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is matching_column: Column common to both the tables.?",
        "answer": "Note: We can also use LEFT OUTER JOIN instead of LEFT JOIN, both are the same.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is LEFT JOIN Example?",
        "answer": "In this example, theLEFT JOINretrieves all rows from theStudenttable and the matching rows from theStudentCoursetable based on theROLL_NOcolumn.\nQuery:\n```python\nSELECT Student.NAME,StudentCourse.COURSE_IDFROM StudentLEFT JOIN StudentCourseON StudentCourse.ROLL_NO = Student.ROLL_NO;\n```\nOutput",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is 3. SQL RIGHT JOIN?",
        "answer": "RIGHT JOINreturns all the rows of the table on theright side of the joinand matching rows for the table on the left side of the join. It is very similar toLEFT JOIN for the rows for which there is no matching row on the left side, the result-set will containnull.RIGHT JOINis also known asRIGHT OUTER JOIN.\nSyntax\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1RIGHT JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is matching_column: Column common to both the tables.?",
        "answer": "Note: We can also useRIGHT OUTER JOINinstead of RIGHT JOIN, both are the same.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is RIGHT JOIN Example?",
        "answer": "In this example, theRIGHT JOINretrieves all rows from theStudentCoursetable and the matching rows from theStudenttable based on theROLL_NOcolumn.\nQuery:\n```python\nSELECT Student.NAME,StudentCourse.COURSE_IDFROM StudentRIGHT JOIN StudentCourseON StudentCourse.ROLL_NO = Student.ROLL_NO;\n```\nOutput",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is 4. SQL FULL JOIN?",
        "answer": "FULL JOINcreates the result-set by combining results of bothLEFT JOINandRIGHT JOIN. The result-set will contain all the rows from both tables. For the rows for which there is no matching, the result-set will containNULLvalues.\nSyntax\n```python\nSELECT table1.column1,table1.column2,table2.column1,....FROM table1FULL JOIN table2ON table1.matching_column = table2.matching_column;\n```\nKey Terms",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is FULL JOIN Example?",
        "answer": "This example demonstrates the use of aFULL JOIN, which combines the results of bothLEFT JOINandRIGHT JOIN. The query retrieves all rows from theStudentandStudentCoursetables. If a record in one table does not have a matching record in the other table, the result set will include that record withNULLvaluesfor the missing fields\nQuery:\n```python\nSELECT Student.NAME,StudentCourse.COURSE_IDFROM StudentFULL JOIN StudentCourseON StudentCourse.ROLL_NO = Student.ROLL_NO;\n```\nOutput\nNAME\nCOURSE_ID\nHARSH\n1\nPRATIK\n2\nRIYANKA\n2\nDEEP\n3\nSAPTARHI\n1\nDHANRAJ\nNULL\nROHIT\nNULL\nNIRAJ\nNULL\nNULL\n4\nNULL\n5\nNULL\n4",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is 5. SQL Natural Join (?)?",
        "answer": "Natural joincan join tables based on thecommon columnsin the tables being joined. A natural join returns all rows by matching values in common columns having same name anddata typeof columns and that column should be present in both tables.",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is Natural join Example?",
        "answer": "Look at the two tables below-EmployeeandDepartment\nEmployee\nDepartment\nProblem: Find all Employees and their respective departments.\nSolution Query: (Employee) ? (Department)",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "SQL joinsare essential tools for anyone working withrelational databases. Understanding the different types of joins inSQL, likeINNER JOIN,LEFT OUTER JOIN,RIGHT JOIN, andFULL JOIN, allows us to combine and query data effectively. With theexamplesandsyntaxcovered here, we should feel confident applying theseSQL join typesto our data to retrievemeaningful observationsand managecomplex querieswith ease. Use these SQL join techniques to streamline ourdata handlingand enhance ourSQL skills.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "sql-join-set-1-inner-left-right-and-full-joins.txt"
    },
    {
        "question": "What is •?",
        "answer": "In SQL,LEFT JOINretrieves all records from the left table and only the matching records from the right table. When there is no matching record  found,NULLvalues are returned for columns from the right table. This makes LEFT JOIN extremely useful for queries where you need to retain all records from one table, even if there is no corresponding match in the other table.\nIn this article, we will explore theLEFT JOINcommand in SQL, explain its syntax, provide detailed examples, and discuss common use cases to help you master its application.",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is LEFT JOIN in SQL?",
        "answer": "LEFT JOIN in SQLis used to combine rows fromtwoormore tables, based on a related column between them. It returns all rows from the left table andmatching recordsfrom the right table. If a certain row is present in the left table but not in the right table, the result will include this row withNULL valuesin each column from the right table. If a record from the right table is not on the left, it will not be included in the result.",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is SQL LEFT JOIN Venn Diagram?",
        "answer": "This VENN diagram shows how a LEFT JOIN works in SQL.\nLEFT JOIN\nSyntax:\nSELECT column_name(s)FROM tableALEFT JOIN tableB ON tableA.column_name = tableB.column_name;",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is Examples of SQL LEFT JOIN?",
        "answer": "Let’s look at an example ofLEFT JOIN in SQLto understand it better. Consider two tables:Emp(employees) anddepartment(departments). TheEmptable contains employee details, while thedepartmenttable holds department details.\nEmployee Table\n```python\nCREATE TABLEEmp (EmpID INT PRIMARY KEY,Name VARCHAR(50),Country VARCHAR(50),Age INT,Salary INT,department_id INT);INSERT INTOEmp (EmpID, Name, Country, Age, Salary, department_id)VALUES(1, 'Shubham', 'India', 23, 30000, 101),(2, 'Aman', 'Australia', 21, 45000, 102),(3, 'Naveen', 'Sri Lanka', 24, 40000, 103),(4, 'Aditya', 'Austria', 21, 35000, 104),(5, 'Nishant', 'Spain', 22, 25000, 101);\n```\nOutput:\nEmployee Table\nDepartment Table\n```python\nCREATE TABLEdepartment (department_id INT PRIMARY KEY,department_name VARCHAR(50),department_head VARCHAR(50),location VARCHAR(50));INSERT INTOdepartment (department_id, department_name, department_head, location)VALUES(101, 'Sales', 'Sarah', 'New York'),(102, 'Marketing', 'Jay', 'London'),(103, 'Finance', 'Lavish', 'San Francisco'),(104, 'Engineering', 'Kabir', 'Bangalore');SELECT*FROMdepartment;\n```\nOutput:\nDepartment Table",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is Example 1: Performing a LEFT JOIN?",
        "answer": "To perform left-join onEmployee and Department Tableswe will use the following SQL query:\nQuery:\n```python\nSELECTEmp.EmpID, Emp.Name, department.department_name, department.department_head,department.locationFROMEmpLEFT JOINdepartmentONEmp.department_id = department.department_id;\n```\nOutput:\nLEFT JOIN in SQL Example Output\nExplanation:\nAs left join gives the matching rows and the rows that are present in the left table but not in the right table. Here in this example, we see that the employees that do not work in a particular department, i.e., having dept no values as [NULL], contain [NULL] values of dept name and location after the left join.",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is Example 2: SQL LEFT JOIN with WHERE Clause?",
        "answer": "In this example, we will add aWHERE clausethat specifies to only return results where the “location” column in the department table equals ‘Bangalore‘. This will filter the results to only show employees who belong to a department located in Bangalore, and departments that have no employees will not be returned in the results.\nQuery:\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id= d.department_idWHEREd.location = 'Bangalore';\n```\nOutput:\nSQL LEFT JOIN with WHERE Clause Example",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is Example 3: SQL LEFT JOIN as Aliases?",
        "answer": "In this query, we’ll use aliases “e” for the Emp table and “d” for the department table. TheSELECTstatement references these aliases for each column, making the query easier to read and type. Aliases simplify code and improve readability, especially with long or complex table names.\nQuery:\n```python\nSELECTe.EmpID, e.Name, d.department_name,d.department_head, d.locationFROMEmp eLEFT JOINdepartment dONe.department_id = d.department_id;\n```\nOutput:\nSQL LEFT JOIN as Aliases Example Output",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "TheSQL LEFT JOINis an essential tool for combining data frommultiple tableswhile ensuring that all records from the left table are included in the result set, even if no match exists in the right table. Understanding itssyntax,behavior, and usage will help you write more efficient and effective SQL queries, especially when working with complexdata relationships. By using examples like employee and department data, we can clearly see how LEFT JOIN ensures that no valuable information is left out, even when there are unmatched records.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "sql-left-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "TheLIMITclause in SQL is used to control the number of rows returned in a query result. It is particularly useful when working with large datasets, allowing you to retrieve only the required number of rows for analysis or display. Whether we’re looking topaginate results, find top records, or just display a sample of data, theLIMIT clauseis an essential tool for controlling query output.\nIn this article, we’ll cover the basicsyntaxof the LIMIT clause, explain how to use it withOFFSET, and explore practical examples for common use cases.",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is SQL LIMIT Clause?",
        "answer": "TheLIMIT clauseallows you to specify themaximum number of recordsreturned by a query. It is commonly used for limiting query results when only a subset of the data is required, such as forpagination, filtering top values, or analyzing asmaller portionof a large table.\nSyntax:\nSELECT column1, column2, …FROM table_nameWHERE conditionORDER BY columnLIMIT [offset,] row_count;\nKey Terms",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Examples of SQL LIMIT Clause?",
        "answer": "Let’s look at some examples of theLIMIT clauseinSQLto understand it’s working. We will use the sample table name “Student” and write some LIMIT queries.\nQuery:\n```python\nCREATE TABLE student (id INT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO student (id, name, age)VALUES (1, 'Shubham Thakur', 18),(2, 'Aman Chopra', 19),(3, 'Bhavika uppala', 20),(4,'Anshi Shrivastava',22);\n```\nOutput:\nStudent Table",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Example 1: Basic LIMIT Usage?",
        "answer": "In this example, we will only retrieve 3 rows from the student table using LIMIT.\nQuery:\n```python\nSELECT * FROM studentLIMIT 3;\n```\nOutput:\nLIMIT Clause Example",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Example 2: LIMIT with ORDER BY Clause?",
        "answer": "In this example, we will use the LIMIT clause withORDER BYclause to retrieve the top 3 students sorted by their grade (assuming aGradecolumn exists).\nQuery:\n```python\nSELECT*FROMStudentORDER BYGrade DESCLIMIT3;\n```\nOutput:\nLIMIT with ORDER BY Clause\nExplanation:The LIMIT operator can be used in situations such as the above, where we need to find the top 3 students in a class and do not want to use any conditional statements.",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is SQL LIMIT OFFSET?",
        "answer": "LIMIT OFFSET parameterskips a specified number of rows before returning the result set. OFFSET can only be used with theORDER BYclause. It cannot be used on its own. OFFSET value must begreater thanorequal to zero. It cannot benegative, else returns anerror.\nSyntax:\nSELECT * FROM table_name ORDER BY column_name LIMIT X OFFSET Y;\nOR\nSELECT * FROM table_name ORDER BY column_name LIMIT Y,X;",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Example: Skipping First 2 Rows & Fetching 2 Rows?",
        "answer": "```python\nSELECT *FROM StudentORDER BY ageLIMIT 2 OFFSET 2;\n```\nOutput:\nSQL LIMIT OFFSET Example Output",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Using LIMIT to Get the nth Highest or Lowest Value?",
        "answer": "Now we will look forLIMITuse in findinghighestorlowestvalue we need to retrieve the rows with the nth highest or lowest value. In that situation, we can use the subsequent LIMIT clause to obtain the desired outcome.\nSyntax:\nSELECT column_listFROM table_nameORDER BY expressionLIMIT n-1, 1;",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Example: Fetching the 3rd Highest Age?",
        "answer": "```python\nSELECTageFROMStudentORDER BYage LIMIT 2, 1;\n```\nOutput:\nSQL LIMIT to Get the nth Highest Value Example Output\nExplanation:",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Using LIMIT with WHERE Clause?",
        "answer": "TheWHERE clausecan also be used with LIMIT. It produces the rows that matched the condition after checking the specified condition in the table.",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Example: Fetching a Limited Set of Students Based on ID?",
        "answer": "```python\nSELECT ageFROM StudentWHERE id<4ORDER BY ageLIMIT 2, 1;\n```\nOutput:\nLIMIT with WHERE Clause Example Output",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Restrictions on the LIMIT clause?",
        "answer": "There are several limitations of SQL LIMIT. The following situations do not allow the LIMIT clause to be used:",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "TheLIMITclauseis a powerful tool for optimizing query performance byrestricting the number of rowsretrieved. It is widely used in pagination, data sampling, and retrievingtop-N records. CombiningLIMITwithORDER BY,OFFSET, andWHEREallows for moreflexible and efficientdata retrieval. Additionally, usingLIMIThelps reduce the load on databases by fetching only the necessary data, improving query execution speed.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-limit-clause.txt"
    },
    {
        "question": "What is •?",
        "answer": "TheORDER BYclause in SQL is a powerful feature used tosort query resultsin either ascending or descending order based on one or more columns. Whether you’re presenting data to users or analyzing large datasets, sorting the results in a structured way is essential.\nIn this article, we’ll explain how the ORDER BY clause works, provide itssyntax, and walk through severalpractical examplesusing a table to illustrate its usage. We’ll focus on key concepts that help optimize SQL queries for better readability and performance.",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is ORDER BY in SQL?",
        "answer": "TheORDER BYstatement inSQLis used tosort the fetched datain either ascending or descending according to one or more columns. It is very useful to present data in a structured manner.\nSQL ORDER BY default mode is sorting data into ascending order. To sort data in descending order use theDESC keywordwith ORDER BY clause.\nSyntax:\nThe syntax to use ORDER BY clause in SQL is:\nSELECT * FROM table_name ORDER BY column_name ASC | DESC\nKey Terms:",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is SQL ORDER BY Clause Examples?",
        "answer": "We have created an Student table that stores Student data including their roll_no, name, age, addess, and phone. Let’s look at some examples of the SQL ORDER BY clause to understand it’s working inSQL.\nWe will use the following table in examples.\nStudent_Table\nNow consider the above database table and find the results of different queries.",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is Example 1 : Sort According To a Single Column using ORDER BY Clause?",
        "answer": "In this example, we will fetch all data from the table Student and sort the result in descending order according to the column ROLL_NO.\nQuery:\n```python\nSELECT*FROMstudentsORDER BYROLL_NODESC;\n```\nOutput:\nIn the above example, if we want to sort in ascending order we have to use ASC in place of DESC.",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is Example 2 : Sort According To Multiple Columns using ORDER BY Clause?",
        "answer": "In this example, we will fetch all data from the table Student and then sort the result in descending order first according to the columnage. and then in ascending order according to the columnname. To sort according to multiple columns, separate the names of columns by the (,) operator.\nQuery:\n```python\nSELECT*FROMstudentsORDER BYageDESC, nameASC;\n```\nOutput:\nSort_Multiple_Column\nIn the above output, we can see that first the result is sorted in descending order according to Age. There are multiple rows of having the same Age. Now, sorting further this result-set according to name will sort the rows with the same Age according to name in ascending order.\nNote:ASC is the default value for the ORDER BY clause. So, if we don’t specify anything after the column name in the ORDER BY clause, the output will be sorted in ascending order by default.",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is Sorting By Column Number (instead of name)?",
        "answer": "An integer that identifies the number of the column in the SelectItems in the underlying query of theSELECTstatement. Column number must be greater than 0 and not greater than the number of columns in the result table. In other words, if we want to order by a column, that column must be specified in the SELECT list.\nThe rule checks for ORDER BY clauses that reference select list columns using the column number instead of the column name. The column numbers in the ORDER BY clause impair the readability of the SQL statement. Further, changing the order of columns in the SELECT list has no impact on the ORDER BY when the columns are referred to by names instead of numbers.\nSyntax:\nThe Syntax to use ORDER BY Clause with Column Number\nORDER BYColumn_Number asc/desc",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is Example of Sorting By Column Number?",
        "answer": "Here we take an example to sort a database table according to column 1 i.e Roll Number. For this a query will be:\nQuery:\n```python\nCREATE TABLEstudentinfo\n( Roll_no INT,\nNAME VARCHAR(25),\nAddress VARCHAR(20),\nCONTACTNO BIGINT NOT NULL,\nAge INT );INSERT INTOstudentinfoVALUES(7,'ROHIT','GHAZIABAD',9193458625,18),\n(4,'DEEP','RAMNAGAR',9193458546,18),\n(1,'HARSH','DELHI',9193342625,18),\n(8,'NIRAJ','ALIPUR',9193678625,19),\n(5,'SAPTARHI','KOLKATA',9193789625,19),\n(2,'PRATIK','BIHAR',9193457825,19),\n(6,'DHANRAJ','BARABAJAR',9193358625,20),\n(3,'RIYANKA','SILIGURI',9193218625,20);SELECTRoll_no,Name, AddressFROMstudentinfoORDER BY1\n```\nOutput:\nSorting By Column Number\nExplanation:\nORDER BY 1means sorting values according to first column in the SELECT statement.",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "The ORDER BY clause is a fundamental SQL tool for sorting query results, allowing you to present data in a structured manner. Whether sorting by a single column, multiple columns, or using column numbers, ORDER BY helps you organize data for better analysis and reporting. By learning the usage of the ORDER BY clause, you can optimize your SQL queries for better readability, structure, and performance.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-order-by.txt"
    },
    {
        "question": "What is •?",
        "answer": "SQL Outer Joins allowretrieval of rowsfrom two or more tables based on a related column. Unlikeinner Joins, they also include rows that do not have a corresponding match in one or both of the tables. This capability makesOuter Joinsextremely useful for comprehensive data analysis and reporting, especially when dealing with incomplete data or wanting to show all records regardless of matching conditions.\nIn this article, we will learn the concept ofSQL Outer Joins, its types, syntax, and practical use cases. We will also explore examples that show how Outer Joins can effectively solve real-world data retrieval problems.",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is an SQL Outer Join?",
        "answer": "Outer Join ensures that all rows from one or both tables are included in the result, even if there is no match in the other table. It is particularly useful when you need to show all records from one table, including those that don’t have a match in the other table.",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is Types of Outer Joins?",
        "answer": "There are three main types of Outer Joins in SQL:",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is FULL OUTER JOIN?",
        "answer": "Each of these join types handles unmatched rows differently, and understanding how they work will help you use them effectively in yourSQLqueries.\nLet’s Consider the two tables,EmployeesandDepartmentsfor understanding all the above outer join with examples\nEmployees Table:\nDepartments Table:",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is LEFT OUTER JOIN (or LEFT JOIN)?",
        "answer": "TheLEFT OUTER JOIN(referred to asLEFT JOIN) returns all rows from the left table, and the matching rows from the right table. If there is no match, the result will includeNULL valuesfor columns from the right table.\nLEFT OUTER JOIN\nSyntax:\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nLEFT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample :To retrieve all employees along with their respective departments, even if they don’t belong to any department (i.e., the department is NULL), we can use the LEFT OUTER JOIN\nQuery:\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nLEFT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\nIn this example, Michael does not belong to any department, so the DepartmentName for Michael is NULL.",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is RIGHT OUTER JOIN (RIGHT JOIN)?",
        "answer": "TheRIGHT OUTER JOIN(often calledRIGHT JOIN) returns all rows from the right table, and the matching rows from the left table. If there is no match, the result will includeNULL valuesfor columns from the left table.\nRIGHT OUTER JOIN\nSyntax:\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nRIGHT JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now look at a RIGHT OUTER JOIN on the Employees and Departments tables. Suppose we want to retrieve all departments, even if no employees belong to a specific department.\nQuery:\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nRIGHT JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is FULL OUTER JOIN?",
        "answer": "TheFULL OUTER JOINreturns all rows when there is a match in either the left or right table. If there is no match, the result will include NULL for the missing side of the table. Essentially, it combines the results of bothLEFT JOINandRIGHT JOIN.\nFULL OUTER JOIN\nSyntax:\n```python\nSELECT table1.column1, table1.column2, table2.column1, ...\nFROM table1\nFULL JOIN table2\nON table1.matching_column = table2.matching_column;\n```\nExample:Let’s now use a FULL OUTER JOIN to get all employees and all departments, regardless of whether an employee belongs to a department or a department has employees.\nQuery:\n```python\nSELECT Employees.Name, Employees.DepartmentID, Departments.DepartmentName\nFROM Employees\nFULL JOIN Departments\nON Employees.DepartmentID = Departments.DepartmentID;\n```\nOutput:\nIn this example, Michael has no department so his department name is NULL.",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "When to Use SQL Outer Joins?",
        "answer": "Outer joins are particularly useful in the following situations:",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "SQL Outer Joins are used for combining data from multiple tables while including unmatched rows. Whether you need to retrieve all records from one table or both tables, outer joins offer a flexible way to manage and analyze relational data. By understanding LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN, you can optimize yourSQLqueries for complex data retrieval scenarios.\nThese joins allow you to handle incomplete data and generate comprehensive reports that include all necessary records. Mastering Outer Joins is an essential skill for any SQL practitioner, whether you’re working on business intelligence, data analysis, or general database management.",
        "source": "sql-outer-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "In SQL, theRIGHT JOIN(also called RIGHT OUTER JOIN) is an essential command used to combine data from two tables based on a related column. It returns all records from the right table, along with thematching recordsfrom the left table. If there is no matching record in the left table, SQL will returnNULL valuesfor the left table’s columns.\nIn this article, we will dive deep into theRIGHT JOINoperation, explore its syntax, and walk through detailed examples to help you fully understand how to use it effectively.",
        "source": "sql-right-join.txt"
    },
    {
        "question": "What is SQL RIGHT JOIN Keyword?",
        "answer": "TheRIGHT JOIN in SQLreturns a table that contains all the records from the right table and only matching records from the left table.\nIn simpler terms, if a row is present in the right table but not in the left table, the result will include this row with NULL values for columns from the left table. Conversely, if a record from the left table is not in the right table, it will not be included in the result.\nTheVisual Representation of RIGHT JOINis shown below in theVenn Diagram.\nRIGHT JOIN\nSyntax:\n```python\nSELECTcolumn_name(s)FROMtableARIGHT JOINtableBONtableA.column_name = tableB.column_name;\n```",
        "source": "sql-right-join.txt"
    },
    {
        "question": "What is Examples of SQL RIGHT JOIN?",
        "answer": "In this example, we will consider two tablesemployeetable containing details of the employees working in the particular department the anddepartmenttable containing the details of the department\nEmployee Table:\nE1\nVarun Singhal\nD1\nE2\nAmrita Aggarwal\nD2\nE3\nRavi Anand\nD3\nDepartment Table:\nD1\nIT\nDelhi\nD2\nHR\nHyderabad\nD3\nFinance\nPune\nD4\nTesting\nNoida\nD5\nMarketing\nMathura",
        "source": "sql-right-join.txt"
    },
    {
        "question": "What is Example: Perform a RIGHT JOIN on Employee and Department Tables?",
        "answer": "Now, we will perform SQL RIGHT JOIN on these two tables.\nQuery:\n```python\nSELECTemp_no , emp_name ,d_name, locationFROMemployeeRIGHT  JOINdeptONemployee.dept_no = department.dept_no;\n```\nOutput:\nemp_no\nemp_name\nd_name\nlocation\nE1\nVarun Singhal\nIT\nDelhi\nE2\nAmrita Aggarwal\nHR\nHyderabad\nE3\nRavi Anand\nFinance\nPune\n[NULL]\n[NULL]\nTesting\nNoida\n[NULL]\n[NULL]\nMarketing\nMathura\nExplanation:As right join gives the matching rows and the rows that are present in the right table but not in the left table. Here in this example, we see that the department that contains no employee contains[NULL] values of emp_noandemp_nameafter performing the right join.",
        "source": "sql-right-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "The SQL RIGHT JOIN is an important operation for combining data from two tables where you need to prioritize the right table’s records. It ensures that even if some records in the right table have no corresponding data in the left table, they will still appear in the result set with NULL values for the missing fields from the left table. By understanding the syntax, applications, and examples of RIGHT JOIN, you can write more efficient SQL queries and handle data more effectively, ensuring that you do not miss out on any relevant information, even if the data is incomplete.\nReady to go from coding beginner to development pro? OurDSA to Development CodingGuide has everything you need to crush coding interviews and ace real-world projects! Limited spots available!",
        "source": "sql-right-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "A Self Join inSQLis a powerful technique that allows one tojoin a tablewith itself. This operation is helpful when you need to compare rows within the same table based on specific conditions. ASelf Joinis often used in scenarios where there is hierarchical or relational data within the same table, such as when one employee reports to another in an organizational structure.\nIn this article, we will learn a self-join, itssyntax, and use cases and provide practicalexamplesto demonstrate how it works.",
        "source": "sql-self-join.txt"
    },
    {
        "question": "What is SQL Self Join?",
        "answer": "A Self Join is simply a regularjoin operationwhere a table is joined with itself. This allows us to compare rows within thesame table, which is particularly useful when working withhierarchical dataor when comparing related rows from a single table.\nFor example, a Self Join can help us retrieve employee-managerrelationships, where each employee in the table has a reference to their manager’s ID.\nSyntax:\nSELECT columns\nFROM table AS alias1\nJOIN table AS alias2 ON alias1.column = alias2.column;\nExplanation:",
        "source": "sql-self-join.txt"
    },
    {
        "question": "What is Example: SQL Self Join to Retrieve Employees and Their Managers?",
        "answer": "Let’s use an illustration to further understand how theself-joinfunctions. Assume that we have a table called “GFGemployees” with the columns employee_id, employee_name, and manager_id. Each employee in the company is assigned a manager, and using the manager-ids, we can identify each employee. We need to extract the list of employees along with the names of their managers because the manager_id column contains the manager ID for each employee\nStep 1:First, we need to create the “GFGemployees” table with following query inSQL.\n```python\nCREATE TABLE GFGemployees(employee_idINT PRIMARY KEY, employee_name VARCHAR(50), manager_id INT);\n```\nStep 2:Now we will add data into the ‘GFGemployees’ table usingINSERT INTOstatement:\n```python\nINSERT INTO GFGemployees (employee_id, employee_name, manager_id)VALUES  (1, 'Zaid', 3),  (2, 'Rahul', 3),  (3, 'Raman', 4),(4, 'Kamran', NULL),  (5, 'Farhan', 4);\n```\nOutput:\nemployee_id\nemployee_name\nmanager_id\n1\nZaid\n3\n2\nRahul\n3\n3\nRaman\n4\n4\nKamran\nNULL\n5\nFarhan\n4\nStep 3: Explanation and implementation of Self Join\nNow, we need to perform selfjoinon the table we created i.e.”GFGemployees” in order to retrieve the list of employees and their corresponding managers name and for that we need to write a query, where we will create two different aliases for the “GFGemployees” table as “e” which will represent the GFG employee’s information and “m” will represent the manager’s information. This way byjoining the tablewith itself using the manager_id and employee_id columns, we can generate relationship between employees and their managers.\nStep 4: Query for Self-join\n```python\nSELECT e.employee_name AS employee,m.employee_name AS managerFROMGFGemployees AS e JOIN GFGemployeesAS m ON e.manager_id = m.employee_id;\n```\nOutput:\nThe resultant table after performing self join will be as follows:\nemployee\nmanager\nZaid\nRaman\nRahul\nRaman\nRaman\nKamran\nFarhan\nKamran",
        "source": "sql-self-join.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "The Self Join in SQL is a powerful tool for querying data from a single table where relationships between rows need to be established. It is especially useful for hierarchical data, such as employee-manager relationships, where records in a table are related to each other. By using table aliases and matching conditions, you can effectively retrieve and compare data within the same table.",
        "source": "sql-self-join.txt"
    },
    {
        "question": "What is •?",
        "answer": "There are various strategies that are considered while designing a schema. Most of these strategies follow an incremental approach that is, they must start with some schema constructs derived from the requirements and then they incrementally modify, refine, or build on them. In this article, let’s discuss some of these strategies in detail.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is Schema Design?",
        "answer": "Schema design is the process of creating a logical and organized structure for a database, which involves defining tables, columns, relationships, constraints, and other elements that will govern how data is stored and accessed. Effective schema design is essential for creating a robust, scalable, and efficient database system. Here are some strategies for schema design in DBMS.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is 1. Top-Down Strategy?",
        "answer": "In this strategy, we basically start with a schema that contains a high level of abstraction and then apply successive top-down refinement. Let’s try to understand this with an example, we may specify only a few level entity types and then we specify theirattributesand split them into lower-level entity types and relationships. The process of specialization to refine an entity type into a subclass is also an example of this strategy.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is 2. Bottom-Up Strategy?",
        "answer": "In this type of strategy, we basically start with basic abstraction and then go on adding to this abstraction. For example, we may start with attributes and group these into entity types and relationships. We can also add a new relationship among entity types as the design goes ahead. The basic example is the process of generalizing entity types into the higher-level generalized superclass.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is 3. Inside-Out Strategy?",
        "answer": "This is a special case of a bottom-up strategy when attention is basically focused on a central set of concepts that are most evident. Modeling then basically spreads outward by considering new concepts in the vicinity of existing ones. We could specify a few clearly evident entity types in the schema and continue by adding other entity types and relationships that are related to each other.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is 4. Mixed Strategy?",
        "answer": "Instead of using any particular strategy throughout the design, the requirements are partitioned according to a top-down strategy, and part of the schema is designed for each partition according to a bottom-up strategy after that various schema are combined.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is Optimize for performance:Schema design can have a significant impact on database performance. Optimizing indexes, partitioning data, and using appropriate data types can all improve query performance and reduce database overhead.?",
        "answer": "Overall, effective schema design requires a thorough understanding of the data being stored and how it will be used, as well as an understanding of best practices for database design and optimization. By following these strategies, you can create a robust and efficient database schema that meets your needs and supports your business goals.",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In conclusion, designing adatabase schemarequires careful planning and attention. By understanding your data and its relationships, normalizing to avoid redundancy, setting up keys and constraints to ensuredata integrity, and planning for performance and security, you can create a database that is efficient, reliable, and easy to maintain. Good schema design lays the foundation for a robust database that meets the needs of your application both now and in the future.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "strategies-for-schema-design-in-dbms.txt"
    },
    {
        "question": "What is •?",
        "answer": "Structural constraints, within the context of Entity-Relationship (ER) modeling, specify and determine how the entities take part in the relationships and this gives an outline of how the interactions between the entities can be designed in a database. Two primary types of constraints arecardinality(specifying the number of instances in a relationship) andparticipation(whether all or some entity instances are involved in the relationship). Cardinality is defined as one-to-one, one-to-many, or many-to-many, while participation can be total or partial.\nThis forms the constraints that need to be used in defining an accurate and efficient database schema since the introduction of the interaction rules of entities ensures that the correctness of the data model reflects in the real situation. The knowledge of these constraints is very essential for the design of strong and functional databases.\nTo understand Structural Constraints, we must take a look at Cardinality Ratios and Participation Constraints.Cardinality Ratios of relationships :The entities are denoted by rectangle and relationships by diamond.There are numbers (represented by M and N) written above the lines which connect relationships and entities. These are called cardinality ratios. These represent the maximum number of entities that can be associated with each other through relationship, R.",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is Types of Cardinality in ER-Model?",
        "answer": "There can be 4 types of cardinality –",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is Participation Constraints in ER-Model?",
        "answer": "Participation Constraintstell us that the participation in a relationship can either be total or partial.",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is Total Participation?",
        "answer": "When each entity in an entity set participates in a relation, it is calledTotal Participation. In ER modeling, total participation exists when the instances of the entity must necessarily participate in at least one relationship instance. For example, in a university system, where every student must be enrolled in at least one course, total participation exists in the relationship between “Student” and “Course”. Similarly, if each professor teaches at least one course, then the relationship between “Professor” and “Course” also displays total participation. The notion here is that no entity can exist without being involved in the relationship.",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is Partial Participation?",
        "answer": "When some of the entities in the given entity set do not participate in a relation, it is calledPartial Participation.Contrary to full participation, partial participation allows some components of a particular entity to be present without being part of any relation. Some entities may or may not be part of the relationship, and, in case of a single line in the ER diagram, that is indicated. For instance, in the university system, if some professors do not teach any courses, then their participation would be partial in the “Teaches” relationship.",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is Structural Constraints?",
        "answer": "Structural Constraints are also called Structural properties of adatabase management system (DBMS). Cardinality Ratios and Participation Constraints taken together are called Structural Constraints. The name constraints refer to the fact that such limitations must be imposed on the data, for the DBMS system to be consistent with the requirements.The Structural constraints are represented byMin-Max notation. This is a pair of numbers(m, n) that appear on the connecting line between the entities and their relationships. The minimum number of times an entity can appear in a relation is represented by m whereas, the maximum time it is available is denoted by n. If m is 0 it signifies that the entity is participating in the relation partially, whereas, if m is either greater than or equal to 1, it denotes total participation of the entity.Note –Number of times an entity participates in a relationship is same as the number appearance of the entity in the tuples.\nSimilarly, a book of the library system either borrowed or not by a member, a partial participation in the relationship of “Book” with “Member”. Partial participation captures even more fluid scenarios wherein not all of the entities are involved under an obligation to participate in a relationship.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "structural-constraints-of-relationships-in-er-model.txt"
    },
    {
        "question": "What is •?",
        "answer": "Redundancymeans having multiple copies of the same data in the database. This problem arises when a database is not normalized. Suppose a table of student details attributes is: student ID, student name, college name, college rank, and course opted.\nIt can be observed that values of attribute college name, college rank, and course are being repeated which can lead to problems. Problems caused due to redundancy are:",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is Insertion Anomaly?",
        "answer": "If a student detail has to be inserted whose course is not being decided yet then insertion will not be possible till the time course is decided for the student.\nThis problem happens when the insertion of a data record is not possible without adding some additional unrelated data to the record.",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is Deletion Anomaly?",
        "answer": "If the details of students in this table are deleted then the details of the college will also get deleted which should not occur by common sense. This anomaly happens when the deletion of a data record results in losing some unrelated information that was stored as part of the record that was deleted from a table.\nIt is not possible to delete some information without losing some other information in the table as well.",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is Updation Anomaly?",
        "answer": "Suppose the rank of the college changes then changes will have to be all over the database which will be time-consuming and computationally costly.\nAll places should be updated, If updation does not occur at all places then the database will be in an inconsistent state.\nRedundancy in a database occurs when the same data is stored in multiple places. Redundancy can cause various problems such as data inconsistencies, higher storage requirements, and slower data retrieval.",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is Usability Issues:Redundancy can also create usability issues, as users may have difficulty accessing the correct version of the data or may be confused by inconsistencies and errors. This can lead to frustration and decreased productivity, as users spend more time searching for the correct data or correcting errors.?",
        "answer": "To prevent redundancy in a database, normalization techniques can be used. Normalization is the process of organizing data in a database to eliminate redundancy and improve data integrity.Normalizationinvolves breaking down a larger table into smaller tables and establishing relationships between them. This reduces redundancy and makes the database more efficient and reliable.",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In databases, data redundancy is a prevalent issue. It can cause a  number of problems , such asinconsistent data,wasted storage space,decreased database performance, andincreased security risk.\nThe most effective technique to reduce redundancy is to normalize the database. The use of views materialized views, and foreign keys are additional techniques to reduce redundancy.\nThe redundancy Problem in the Database is simply due to the presence of multiple data or copied data in the database that may lead in increasing the size and complexity of the database.",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "Q.2: What are the problems caused due to the Redundancy?",
        "answer": "Answer:\nSome of the problems that are caused due to the redundancy in the database are:",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "Q.3: How is data redundancy handled?",
        "answer": "Answer:\nData Redundancy is handled by simply a single form of data that is basically accessible by multiple users. Removing common data from multiple places helps in handling data redundancy.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "the-problem-of-redundancy-in-database.txt"
    },
    {
        "question": "What is •?",
        "answer": "Keys are one of the basic requirements of a relational database model. It is widely used to identify the tuples(rows) uniquely in the table. We also use keys to set up relations amongst various columns and tables of a relational database.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "Why do we require Keys in a DBMS?",
        "answer": "We require keys in a DBMS to ensure that data is organized, accurate, and easily accessible. Keys help to uniquely identify records in a table, which prevents duplication and ensures data integrity.Keys also establish relationships between different tables, allowing for efficient querying and management of data. Without keys, it would be difficult to retrieve or update specific records, and the database could become inconsistent or unreliable.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Super Key?",
        "answer": "The set of one or more attributes (columns) that can uniquely identify a tuple (record) is known asSuper Key. For Example, STUD_NO, (STUD_NO, STUD_NAME), etc.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is A super key can contain extra attributes that aren’t necessary for uniqueness. For example, if the “STUD_NO” column can uniquely identify a student, adding “SNAME” to it will still form a valid super key, though it’s unnecessary.?",
        "answer": "Example:\nTable STUDENT\n```python\nConsider the table shown above.STUD_NO+PHONE is a super key.\n```\nRelation between Primary Key, Candidate Key, and Super Key\nNow Try Questions discussed inNumber of possible Superkeysto test your understanding.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Candidate Key?",
        "answer": "The minimal set of attributes that can uniquely identify a tuple is known as acandidate key. For Example, STUD_NO in STUDENT relation.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is A table can have multiple candidate keys but only one primary key.?",
        "answer": "Example:\n```python\nSTUD_NO is the candidate key for relation STUDENT.\n```\nTable STUDENT",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is The candidate key can be simple (having only one attribute) or composite as well.?",
        "answer": "Example:\n```python\n{STUD_NO, COURSE_NO} is a compositecandidate key for relation STUDENT_COURSE.\n```\nTable STUDENT_COURSE",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Primary Key?",
        "answer": "There can be more than one candidate key in relation out of which one can be chosen as the primary key. For Example, STUD_NO, as well as STUD_PHONE, are candidate keys for relation STUDENT but STUD_NO can be chosen as theprimary key(only one out of many candidate keys).",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Databases typically store rows ordered in memory according to primary key for fast access of records using primary key.?",
        "answer": "Example:\n```python\nSTUDENT table -> Student(STUD_NO, SNAME, ADDRESS, PHONE) , STUD_NO is a primary key\n```\nTable STUDENT",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Alternate Key?",
        "answer": "Analternate keyis any candidate key in a table that isnotchosen as theprimary key. In other words, all the keys that are not selected as the primary key are considered alternate keys.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Eg:- SNAME, and ADDRESS is Alternate keys?",
        "answer": "Example:\n```python\nConsider the table shown above.STUD_NO, as well as PHONE both,are candidate keys for relation STUDENT butPHONE will be an alternate key(only one out of many candidate keys).\n```\nPrimary Key, Candidate Key, and Alternate Key",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Foreign Key?",
        "answer": "Aforeign keyis an attribute in one table that refers to theprimary keyin another table. The table that contains the foreign key is called thereferencing table, and the table that is referenced is called thereferenced table.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is For example, DNO is a primary key in the DEPT table and a non-key in EMP?",
        "answer": "Example:\n```python\nRefer Table STUDENT shown above.STUD_NO in STUDENT_COURSE is aforeign key to STUD_NO in STUDENT relation.\n```\nTable STUDENT_COURSE\nIt may be worth noting that, unlike the Primary Key of any given relation, Foreign Key can be NULL as well as may contain duplicate tuples i.e. it need not follow uniqueness constraint. For Example, STUD_NO in the STUDENT_COURSE relation is not unique. It has been repeated for the first and third tuples. However, the STUD_NO in STUDENT relation is a primary key and it needs to be always unique, and it cannot be null.\nRelation between Primary Key and Foreign Key",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Composite Key?",
        "answer": "Sometimes, a table might not have a single column/attribute that uniquely identifies all the records of a table. To uniquely identify rows of a table, a combination of two or more columns/attributes can be used.  It still can give duplicate values in rare cases. So, we need to find the optimal set of attributes that can uniquely identify rows in a table.",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Different combinations of attributes may give different accuracy in terms of identifying the rows uniquely.?",
        "answer": "Example:\n```python\nFULLNAME + DOB can be combinedtogether to access the details of a student.\n```\nDifferent Types of Keys",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "In conclusion, the relational model makes use of a number of keys: Candidate keys allow for distinct identification, the Primary key serves as the chosen identifier, Alternate keys offer other choices, and Foreign keys create vital linkages that guarantee data integrity between tables. The creation of strong and effective relational databases requires the thoughtful application of these keys.\nDreaming ofM.Tech in IIT? Get AIR under 100 with ourGATE 2026 CSE & DA courses! Get flexibleweekday/weekendoptions,live mentorship, andmock tests. Access exclusive features likeAll India Mock Tests, and Doubt Solving—your GATE success starts now!",
        "source": "types-of-keys-in-relational-model-candidate-super-primary-alternate-and-foreign.txt"
    },
    {
        "question": "What is •?",
        "answer": "Databases and data are the fundamental building blocks of new technology. Data is the building blocks of information, like numbers, words, pictures, and more, that computers use and process.Databases, on the other hand, are like organized libraries, making sure this data isstored,retrieved, andmanagedeffectively.\nIn this article, we’ll explore the differenttypes of databasesfrom the classicSQLto the trendyNoSQLand evenCloud databases. We will also explore the different databases for web development, backend development, mobile development, DevOps, data engineering, data science, artificial intelligence, cloud computing, and even blockchain/web 3.0.\nTypes of Databases\nTable of Content",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What are Data & Databases?",
        "answer": "Datarefers to any piece ofinformation. It can benumbers,words,images,sounds, or any other information that a computer canstoreand process. Data can be raw or processed.\nAdatabaseis a structuredcollectionof data that is organized in a way to facilitates efficientstorage,retrieval, andmanipulationof information. It acts as a centralized and organized repository where data can be stored, managed, and accessed by various applications or users.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is DBMS?",
        "answer": "ADatabase Management System(DBMS) is asoftwaresystem that enables users todefine,create,maintain, andmanipulatedatabases. It provides an interface between the database and the users or applications, allowing them to access and manage data efficiently.\nThe primary functions of a DBMS include:",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Types of Databases?",
        "answer": "There are various types of databases, each designed for specific use cases and requirements. Here are some common types of databases:",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 1. Relational Databases (SQL databases)?",
        "answer": "Relational databases(RDBMS) organize data into tables, where each table hasrows and columns. These databases usestructured query language(SQL) for defining and manipulating data.\nThese are the following relational databases:",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 2. NoSQL Databases?",
        "answer": "These databases are designed to handle large volumes ofunstructured,semi-structured, orstructureddata.NoSQLprovide flexible schema designs and often offerhorizontal scalability.\nTypes of NoSQL databases",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 3. Cloud Databases?",
        "answer": "Cloud databases are online databases that store and manage data in acloud computingenvironment. They offer various advantages such asscalability,reliability, andaccessibility.\nCloud Database",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 4. In-Memory Databases?",
        "answer": "In-memory databasesstore dataprimarily inRAMrather than on disk, resulting in faster data access.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 5. Time-Series Databases?",
        "answer": "Time-series databases are optimized forstoringand queryingtime-stamped data, such as sensor data,IoTdata, and financial market data.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 6. NewSQL Databases?",
        "answer": "NewSQL databases aim to combine the scalability and flexibility of NoSQL databases with the ACID compliance and SQL querying capabilities of traditional relational databases.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 7. Object-Oriented Databases?",
        "answer": "Object-oriented databasesorganize and store datain a way that reflects the principles of object-oriented programming (OOP). In OODBs, data is represented as objects, which encapsulate both data and the methods or functions that operate on that data.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 8. Hierarchical Databases?",
        "answer": "Hierarchical databases organize data in atree-like structurewhere each record has one parent record and multiple child records, forming a hierarchy. Records are linked together inparent-child relationships, with each child record having only one parent.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 9. Network databases?",
        "answer": "Network databases are a type of database model that represents data ascollections of recordsand sets, with relationships defined between records. Unlike hierarchical databases, where records form a strictparent-child hierarchy, network databases allow records to have multiple parent and child records, forming a network structure.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 10. Centralized Database?",
        "answer": "Centralized databases are a type of database architecture wheredataisstoredandmanagedin asingle locationor server. In this architecture, all data processing and management tasks are performed on the central server, and clients access the database remotely.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 11. Operational Database?",
        "answer": "Operational databases are databases optimized for supporting day-to-day operations and transactional processing within an organization. They are designed to efficiently handle tasks such asadding,modifying, andretrieving datainreal-timeto support business operations.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Databases Cheat Sheet?",
        "answer": "Cheat sheets are concise, quick-reference guides that provide key information about a particular topic. These are the cheat sheet of Different Databases.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Databases Interview Questions?",
        "answer": "Whether you’re preparing for ajob interviewor aiming to brush up on your database fundamentals, theseinterview questionwill help through some common and advanced database interview.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Database Query Based Questions?",
        "answer": "Query-based database questions are an essential component ofpracticingandmastering database skills. These questions typically involveretrieving,manipulating, and analyzing data stored within a database using SQL (Structured Query Language) or other query languages specific to the database management system being used.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Databases Comprehensive Learning Path?",
        "answer": "Whether you’re just starting your journey into the world ofdatabasesor aiming to enhance your expertise, thiscurated learning pathisdesignedto guide us from thefundamentalstoadvancedconcepts in a structured and accurate manner.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Database Design?",
        "answer": "Database design is a critical aspect of product development, providing the foundation for storing, managing, and accessing data effectively. It ensures that the product can scale, perform optimally, and maintain data integrity, ultimately contributing to its success in the market.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Database Connectivity?",
        "answer": "Database Connectivity refers to the capability of software applications to interact with and access data stored in databases. Database Connectivity is crucial for various types of applications, including web applications, mobile apps, desktop applications, and APIs.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "How to connect API to a database?",
        "answer": "There are several mechanisms for establishing connectivity between applications and databases",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Database Interview Experience?",
        "answer": "In database interview experience series, we share some of theinterview experienceof individuals who’ve faced the challenges of database interviews. FromSQLtoNoSQL, each article offers insights and tips to help you ace your next interview.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Databases Required for Different Technology?",
        "answer": "In today’s technology-driven world, databases play a pivotal role in powering diverse applications across different domains. FromFrontend DevelopmenttoArtificial Intelligence, each technology has unique requirements fordata storage,retrieval, andmanagement. Let’s delve into the specific databases required for various technological domains.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 1. Databases for Web Developement?",
        "answer": "In web development, databases serve as the backbone forstoring,retrieving, andmanagingdata critical forweb applications. Whether you’re building a simple blog or a complex e-commerce platform, understanding databases is essential for creating dynamic and interactive websites. here we can learn in more depth aboutWhich Database You Should Choose For Web Development?",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 2. Database for Mobile Development?",
        "answer": "In mobile development, databases play a pivotal role in storing, accessing, and organizing data crucial formobile applications. Whether you’re crafting a fitness tracker or a social networking app, a solid understanding of databases is fundamental for delivering efficient and seamless user experiences.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 3. Database for DevOps?",
        "answer": "In the DevOps, where the seamless integration of development and operations is paramount, the choice of database plays a crucial role in enabling efficient collaboration,continuous delivery, andautomated deployment pipelines.DevOpsteams typically require databases that offer highavailability,scalability, and compatibility with automation tools.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 4. Database for DataEngineer?",
        "answer": "Data engineers play a pivotal role inbuildingandmaintainingdata infrastructure that powers analytics,machine learning, anddecision-makingprocesses within organizations. When selecting a database for data engineering tasks, considerations such as data volume, velocity, variety, and the need forreal-time processingcome to the forefront.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 5. Database for DataScientist?",
        "answer": "For data scientists, the choice of database is critical as it directly impacts the efficiency ofdata exploration,modeling, and analysis tasks. Data scientists typically require databases that support complex queries, provide efficient data retrieval mechanisms, and seamlessly integrate with populardata sciencetools and libraries.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 6. Database for Artificial Intelligence?",
        "answer": "Artificial intelligence (AI) applications rely heavily ondatatotrainmachine learning models, make predictions, anddrive decision-making processes. When selecting a database for AI tasks, considerations such as data scalability, model training efficiency, and real-time inference capabilities are paramount.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 7. Database for Cloud Computing?",
        "answer": "Cloud computing has revolutionized the way organizationsdeploy,manage, and scale their IT infrastructure. When selecting adatabaseforcloud computingenvironments, considerations such as scalability, reliability, and integration with cloud services become paramount.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is 8. Database for Blockchain/Web3.0?",
        "answer": "Blockchain technology, synonymous withdecentralization and immutability, has revolutionized various industries,including finance,supply chain, andhealthcare. When selecting a database forblockchainandWeb3.0applications, considerations such as data integrity, transparency, and consensus mechanisms come to the forefront.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Types of Database Jobs?",
        "answer": "The field of databases offers adiverse range of job roles, each requiring different levels ofexperienceandexpertise. As professionals progress in their careers, they can specialize in roles that align with their skills and interests. Let’s explore into different types of job roles, considering the required experience levels.\nJob Role\nExperience\nSallary\nDatabase Administrator (DBA)\nEntry-level require 1-3 years of experience, while senior roles require 5+ years.\n4 to 15 LPA\nDatabase Developer\nEntry-level roles 1-3 years of experience, while senior developers need 5+ years.\n4 to 12 LPA\nData Analyst\nEntry-level positions require 1-3 years of experience, while senior data analysts need 5+ years.\n3 to 8 LPA\nData Engineer\nEntry-level roles require 1-3 years of experience, while senior data engineers need 5+ years\n4 to 15 LPA\nDatabase Architect\nEntry-level positions require 3-5 years of experience, while senior architects need 8+ years.\n7 to 24 LPA\nDatabase Manager\nMid-level management require 5-8 years of experience, while senior management roles need 10+ years.\n8 to 18 LPA",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Tips & Tricks to Improve Database Knowledge?",
        "answer": "Improving your database knowledge can be both rewarding and valuable in various fields, includingsoftware development,data analysis, and system administration. Here are sometips and tricksto help you enhance your understanding:",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    },
    {
        "question": "What is Conclusion?",
        "answer": "Well, this end of this amazing written getting started with Database. While database looks bit complex at first but through this guide you will learn database easily. So keep exploring and try to get mastery in it.",
        "source": "_utm_source_geeksforgeeks_utm_medium_gfgcontent_shm_utm_campaign_shm.txt"
    }
]