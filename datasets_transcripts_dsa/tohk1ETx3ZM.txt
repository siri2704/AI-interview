what's the best DSA progression should I go through each road map node in order the question you're asking is how to go through these which order but what you don't realize is you're actually asking an algorithms question you're asking what would be more optimal here a depth for search traversal or a breadth for search traversal and it's funny because you may not even know what these algorithms are until you get to this node or this node it's a very good question but in my humble opinion breath for search is probably the way to go because one thing this road map does not really clearly indicate is that the most common concepts are actually at the beginning take the alternative consider this a proof by contradiction imagine a depth first search traversal you do this you do this you do this and then you do this and then you you go here you've covered four very good topics and then you don't realize it but now you're learning about tries it's a pretty rare topic it's not super hard but it's challenging and it's not smart in my opinion to learn about tries before you've learned about Stacks why would you do that siding window and linked list these are easier and they're probably more likely to come up with a bread research alternatively and and we can continue with the DFS you'll get to like heat you'll get to intervals not bad topics but backtracking is pretty big and you know depending on the order you might have gone in this order you might have gone in like the hardest possible order where you learned about DP before you learned about graphs I wouldn't do that another reason with DFS if you went like this path and you got all the way down here you might get to advanc graphs but you haven't even done this graph this isn't actually a tree because certain topics like this have multiple prerequisites you should probably do regular graphs before you do Advanced graphs so another reason why BFS is the approach here you do this you do this layer then you do this layer then here and then you can do this though I will say some of these are less likely like if once you get to this second portion of the graph I would prioritize this this this maybe this and then probably this and this and then this this at this point it becomes kind of random like these are probably least likely to come up in your interview but I would learn dynamic programming and then maybe bit manipulation and then math so that's how I would do it