so let's just see how we can convert from infix notation to postfix with the help of one stack so the postfix or the reverse polish notation is a mathematical notation in which the operators follow their operant so suppose we have one infix notation a plus b now we can convert this to postfix so in postfix The Operators will follow the operant that means first of all we are going to have the operant a then then we're going to have the operant B and after this we're going to have this operator plus the operator is placed after these operant so that is the post fix of the infix now we can perform this conversion with the help of a stack so here is the algorithm for infix to the postfix conversion so first of all we're going to initialize one empty stack so that means we are going to use one empty stack so in this tag we're going to have one top pointer which will initially point to1 and also we need one empty post fixed string so this is our infix we need one empty postfixed string now we're going to scan the infix expression from left to right so this is our infix expression so from left to right we're going to scan this expression now for each character if we found one apperent we're going to immediately add it to the postfix so here you can see first of all we found this upper end a so we're going to add this to the post fix string and now whenever we found one operator the operator can be plus minus multiplication division or the power so whenever we encounter any operator in that case we're just going to Simply pop from the stack to the post fix if the Precedence of the stack top is higher than the current operator So currently the stack is empty so we don't have to do anything we can simply push that operator into our stack but suppose previously we had one multiplication operator in the stack so in that case we have to compare their precedence the multiplication has higher precedence than this addition so because of this we had to add this multiplication operator in the result string for now the stack is empty so we're just going to Simply push this operator into our stack so here we have to push the current operator onto the stack now if we found any left parenthesis the opening parenthesis in that case we going to push that parenthesis into our stack and if we found any right parenthesis or the closing parenthesis in that case we're going to pop all the operators from the stack and we're going to append this to the resultant post fix string until we found the opening parenthesis in the stack and then we have to discard the opening parenthesis so we're going to pop the opening parenthesis now after the end of the loop we're going to pop all the remaining operators from the stack and we're going to add this to the postfix resultant string and after that we have the end of our algorithm so here you can see we have the plus operator so now we're getting one upper end so we're going to put this into our resultant postf fix string so now we have the end of the loop so now we have to pop all the remaining operators from the stack and we're going to add this to the resultant post fix string so that is the postfix notation for the infix a plus b and this is how we can follow this algorithm to perform the conversion so here is our code so first of all we have created one stack and also we have initialize the top pointer to1 and then we have this push function so the push function will push one element to the top of the stack and also we have the pop function so this pop function will remove and return the top element so next we have the Precedence function so this function will return the Precedence of one operator so we pass the operator as a parameter and then it will check if that is the addition or the subtraction so which has the lowest precedence then we're going to return one if we found the operator is multiplication or division so then we're going to return two because it has a precedence higher than the addition or subtraction and lastly we have the power operator so it has the highest precedence so we're going to return three so next we have this e operator function so this function will check if the character is one operator or not so if the character is one addition subtraction multiplication division or the power in that case we're going to return one signifying that these are all the operators otherwise we're going to return zero and lastly here we have the important infix to postfix function so this function takes the infix expression and we're get the resultant postfix expression so first of all we're going to use one Loop to Traverse the infix expression so first of all we're going to check if the character is alpha numeric or not so here we're using the is alpha numeric function so if we found any oper and so in that case we're going to add this to the postfix so here we're going to add this to the post fix otherwise if we encounter any opening parenthesis then we're going to push the opening parenthesis to our stack otherwise if we found any closing parenthesis then we're going to pop all the operators from the stack until we found this opening parenthesis that we have pushed earlier now here inside we're going to run this ho Loop so we're going to run this ho Loop until the stack is empty or the stack top has the opening parenthesis so in every iteration of this loop we're going to pop the element from from the top of the stack and we're going to add this to the resultant post fix string so the loop will break whenever we encounter one opening parenthesis so in that case we're going to remove that opening parenthesis from the stack also so else we're going to check if the character is operated or not so if we found one operator in the infix expression then we're going to run one Loop to check the Precedence with the top of the stack so if the stack is not empty that means if we have previously operator pushed into the stack so we're going to compare the Precedence with the top of the stack with the current operator we have so if the top of the stack operator has higher precedence so in that case we're going to pop the operator from the top of the stack and we're going to add this into our resultant postf fix string so we're going to continue this process and after that we're going to push the current operator into our stack so after the end of this for Loop so if the stack had some remaining operators we're going to pop all of them and we're going to put this into our resultant postfix string so now our resultant postfix string is ready so all we have to do is add one null Terminator at the end of the string and now inside the main method let's just create one infix string so the infix string will have A+ B and also we're going to have postfix resultant string so let's now call the infix to postfix function so first of all we're going to pass the infix and then the postfix now after the conversion let's just print the result so here we're going to print the postfix result so this was the infix expression and this is the resultant postfix expression so you can see the operator is placed after the operant so that means our function is working properly so this is the way with the help of one stack we can convert one infix to the post fix so hope you understand the concept see you in the next one take care [Music]