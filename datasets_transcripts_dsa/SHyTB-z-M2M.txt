so good evening in the yesterday's session we started a new batch on data structures and algorithms data structures and algorithms with Java data structures and algorithms with Java coming to this course the duration of the course is 2 months the timings of the session is from 6:00 p.m. to 7:00 p.m. okay so weekday from Monday to Friday every day 600 p.m. to 7 p.m. session will be there where you are going to get running notes along with that images folder even we are going to share the videos also but these videos you are going to have access for 6 months so the period for this videos is nothing but six months access you will get and fees for this batch is2 500 sir where live classes are very very important if you are unable to attend then it is okay but maximum try to attend live classes there are some special topics are there which I'm going to take only on weekends like arrays strings link list binary search tree and AVL tree these five topics so because it is a lengthy topic so if you want to avoid confusion slowly I have to explain these Concepts that's why I'm going going to take a separate weekend session on this not on every weekend sir not on every weekend maybe alternatively like that yes course completion certificate we are going to provide and in the last session itself I explained what are the topics that we are going to cover as a part of this course like introduction to up to advanced level Concepts in every data structure we are going to see the implementation as well as I'm trying to explain one or two app ations also sir coming to the first chapter that we started already nothing but recursion recursive algorithms how to develop a recursive algorithms we started as a part of this what is mean by Method why we need to go for methods concept why we need to go for methods concept if you have any problem statement can't we solve that problem statement directly why again we are going for the concept of Meth thirs that I explained very clearly sir by taking multiple examples by taking multiple examples I covered so whenever these methods are executing how the control flow will be internally it is going to maintain a stack always the latest method execution is going to be invoked the latest method execution is going to be invoked so that part also I covered very clearly yesterday sir okay so next and after that introduction to the recursion also I covered what is mean by recursion a method which is called by okay a method which is called by itself is called as recursive method and that process is called as what recursion just I explained one basic scenario which always causes infinite execution where you are going to get stack Overflow error how to stop that stack Overflow error that part only we are going to discuss in today session even I explained what are the continuation topics for this recursion chapter like infinite recursion finite recursion like one by one we will see sir up to this do you have any doubt please confirm sir up to this do you have any doubt everyone please try to speak then only so you can able to uh match with my uh uh flow okay please confirm everyone clear yes sir it's clear yeah if you are clear then I will start can I start today's a topic sure sir right yeah good sir coming to the next one yeah no no problem the people who who is new to today's class no problem at the end I will share the yesterday's class video Don't Worry at all okay sir if you go to YouTube okay if you go to YouTube Sir there you can see yesterday's class video is there sir just a refer before coming to this why because I told already uh data structures is not that much easy okay yeah uh let me talk about where we have that data structures and algorithms so it is a playlist as of now yesterday's video was updated just you can go through okay so this is the permanent Link in this all demo sessions will be there so demo sessions all demo sessions will be there in this link okay uh especially the person who is new just I'm sharing go through that now sir coming to infinite recursion can anyone tell me what is mean by infinite recursion as per the name yes what is mean by infinite recursion a method which is called by which is called by itself which is called by itself and never terminates never terminates sir in its lifetime it is never going to terminate such a type of recursion is called called as what infinite recursion if you want syntactically sir I have void m is there sir void m is there so what I am doing I will write some instructions and then again I'm going to call the same method how the flow of control is happening sir someone is going to trigger main method then it is executing it is executing this two calls again it is calling the same method again it will execute these two again it will call again it will execute these two again it will call again it will execute these two again it will call Sir is it going to end never sir such a type of recursion is called as what infinite recursion okay if you want I think yesterday we had one example what is that example sir if you want to just have a look once yesterday we discussed one example like this okay sry it is previous batch class is there I don't want to delete that let me take it as a demo demo so I'm going to save this file with the file name demo. Java sir okay sir I'm going to call a method Y what that method is going to do public static void M so it is not going to print anything it is not going to print anything sir one second please wait one second e e yeah sorry for the delay now I'm calling m method the control came here and internally what is happening sir it is printing some message okay like like um hello hello Guru how are you something like this I'm printing sir what will happen it is executing only one time just let me compile Javas C demo. Java perfectly compiled fine I running you can see Hello Guru how are you that's all sir I'm going to call again the method Y what will happen infinite execution is going to be happen yesterday only we have seen this it is a never ending process but some way it will terminate somewhere it will terminate when it is going to terminate whenever you are getting stack Overflow so internally I told it is going to maintain a stack once if that stack is fill sir sorry I can't able to accommodate calls like this I will terminate like that it will switch off sir this type of recursion is called as what infinite recursion so never recommended to go for infinite recursion but just I want to cover as a theoretical part that's why I have taken this so up to this do you have any doubt please confirm no clear everyone please confirm right so what is another one sir after infinite recursion what is the next one finite recursion some people are not at all responding so what is mean by finite recursion can I say a method which is called by itself a method which is called by itself okay and a method which is called by itself and terminates terminates at a certain point okay at a certain certain point so you can give some point so it is going to terminate exactly at that particular point sir example sir here instead of calling like this I will use some condition sir AR boss first check some condition if the condition is satisfied then terminate terminate otherwise continue then what will happen it is keep on going to check every time it will check some condition but to meet this condition very very important to meet this condition we have to pass some parameters so majority of the students are having these type of doubts sir I know recursion but if they are giving any problem I'm unable to solve this yes you can't why because sir the internal structure of recursion you need to understand you have to check a condition for this we need some parameters based on these parameters we have to check the condition if the condition is not satisfied you have to send a new parameters to this method call in such a way that it should terminate at finite steps slowly one by one step by step I'm going to increase the complexity of the problems there you will get more clarity sir same parameters we have to pass this type of stale is called as what finite recursion so hello Guru how are you I want to print hello boss hello boss how are you like this sir how many times I want to print sir I want to print exactly five times then what will happen I will pass that value five here so it is a integer value right receive that and after printing this first time completed right can I call for n minus one yes sir see the flow of execution first time I called M of five sir what is doing there are two instructions sir the first instruction it is printing so hello boss how are you something like that then sir have you observed M off same method it is calling byp passing n minus one - 1 is nothing but 5 - 1 4 again it is a method call which is going to print hello boss how are you and it will call for m of3 so again it will print hello boss how are you and it will be called for M of2 again it has to print hello boss how are you it should call for M of one again it should print hello boss how are you it should call for M of Z sir count first time second time third time fourth time fifth time sir can we stop here yes that is the condition whenever the value of n is becoming zero then please come out if you take return what will happen immediately the control is going to come out from this method call the instructions are never going to be executed once if any return statement is found immediately what will happen the control is going to coming out this is nothing but the scenario what is is happening I think diagrammatically sir what I have written it is very clear for you but let me check really is it working or not we have to cross check right sir I'm going to compile the code and I'm running have you observed here first time second time third time fourth time fifth time like that the message got printed so everyone feeling comfortable up to this whatever I have given if you are having any queries please let me know I need response from everyone please confirm clear yes sir it's clear clear friends sorry this is because I just cut off in between because my power issue so just want you to know sir that like method M we are using n minus one so how it works basically that I just wanted to Sir here we are giving five okay so the receiving value is a five it will check is it equal to zero no means it will print this message again it will call for the next time but next time we are changing the parameter in such a way that that parameter should return return zero at some certain point then I will terminate this process what is that point I need to print five times so try to reduce then what we have to do whenever n value becomes zero you can terminate sir can I take in this style also n is equal to 5 whenever n is equal to 10 then we can return n+ one we can take in any way you can write so what is a matter here is how many times you have to print that is your concept understood sir yeah got it sir right so this type of recursion is called as finite recursion so I'm giving this diagram along with the code as it is okay so I'm have you observed the same diagram so same diagram I'm going to share in this in this format the total diagrams whatever I have EXP everything will come for you in this style sir okay now sir coming to this this is the program what we have sir I hope no doubts on finite and infinite recursion sir what is the next one that we have very very important sir observe carefully what is that one base condition base condition sir very very important concept sir majority of the students are going to ignore this sir what is this base condition sir to terminate okay so to terminate to terminate are so um uh to stop to stop flow of execution to stop flow of execution okay or to break to break the loop to break the loop okay to break the loop to break the to break the function or method called to break the method called we have to okay we have to write some special condition we have to write some special condition so which is called as which is called as base condition which is called as base condition so base condition is nothing but what to terminate to terminate so it will become what finite recursion so we need always finite recursion and very very important sir once okay once if the base condition once if the base condition is satisfied once if the base condition is satisfied recursion will stop recursion will stop automatically automatically the recursion is going to be stopped sir and very very important Point sir we have to write base condition base condition very clearly very clearly by identifying by identifying so all possible all possible inputs by seeing all possible inputs we have to write a proper base condition example number one sir I can take this program itself is an example because we have written base condition right can you please tell me in this particular program sir which line is base condition can you please confirm in this program and equ which line is which line is base condition n equal to z n equal to Z sir is the base condition is okay for all possible inputs please confirm clear suppose if I'm giving minus 5 what will happen sir is it a finite recursion or infinite are you seeing because - 5 is it equal to Z no print and - 5 - 1 - 6 - 7 - 8 it never be zero it never be zero that's why immediately we are going to get a problem sir instead of writing n is equal to Z better to take if n value is less than or equal to zero then you can stop now what will happen the code is going to compile fine and even sir it never executed why because you have given a negative number it never executed because you have given a negative number like that we need to prepare base condition very clearly in such a way that it should stop at a certain point sir everyone clear yes sir right sir okay what is mean by direct recursion what is mean by direct recursion sir it's a very simple sir theoretical point direct recursion means okay it is a special case it is a special case in recursion where a method calls some method a method calls some method okay which intern which intern calls same method which intern calls same method sir I don't want to take any example program just syntactically I want to show I have wide m is there s I'm going to write some instructions here after that I'm going to call the same method it is called as what direct recursion sir there is one more recursion is there called indirect recursion what is mean by indirect recursion sir it is a special case it is a special case in recursion where a method a method calls some method some method which intern which intern calls another method another method okay so that method that method redirects that method redirects to redirect to previously previously called method that's all this type of scenario if you want example sir I have void M1 method is there void M1 method is there which is having some instructions here and I'm calling M2 sir after this what is happening M2 method will get a chance sir M2 method is having some instructions to execute after that again I'm calling M1 have you observed M1 is calling M2 M2 is calling M1 it is a never ending process it is also a recursion this is called as what indirect recursion direct recursion means a method which is called by itself indirect recursion means a method which calls another method that interns call same method sir clear up to this any doubt please confirm guys sir why no response from your side please confirm it's clear sir yes sir right the next one need for recursion sir why we need to go for recursion for every problem can I go for recursion never don't go for recursion because recursion is going to take much time complexity sir I will explain in further classes what is time complexity so recursion is going to take more time that's why maximum try to avoid but if there is no situation then compulsory you have to take the recursion sir I can hand five students at a time in my class sir if I taking a small room if I'm taking Java classes for 10 members I can manage for 15 I can manage sir if the crowd is 500 or th000 I can't able to manage sir even though I'm a trainer so I can't manage all the Thousand students at a time but anyway the delivery person is myself only so compulsory we need some kind of assistance we need to maintain some hierarchy there should be some manager so receptionist fees collector n number of schedules we have to plan so like that for every problem don't go for recursion first identify is it a very small simple means you can solve by using some math algorithms if it is not solvable then we have to go for recursion first point sir we can reduce length of the code length of the code such type of problems we have to solve by using recursion sir I asked you to to calculate or I asked you to generate sir combinations I have given a string like a I need combinations only a sir you can write a small program I have AB is there sir AB B you can write somewhat complex ABC is there you can take a loop s a b c so a b okay then b b a c okay BCA then C A so CBA CBA like that we can sir if the input string is a b CDE E F G H do you remember almost 3 + 3 6 9 9 factorial cases you are going to get almost some thousands is it possible by using a loop no which will become very difficult but if you write a recursion for that whether it is a complex problem or simple problem sir you are going to get a common scenario that is a first point sir if we have if we have any common pattern any common pattern then only we have to take a recursion I told already sir addition of two numbers no problem addition of 10 numbers so recursion we can take right yes because there is a pattern in every problem you are identify you are going to calculate addition only so definitely you can solve that very simple code we can take okay like we have a common pattern then only we can sir I have one addition two subtractions one multiplication again one addition there is no proper format sequentially we are doing not possible by using recursion then sir there are some best example areas are there where we can take recursion can anyone tell me some some examples for recursion based problems H tell me some problems which we can solve only by using recursion no idea okay fine factorial problem sir yeah factorial problem but my suggestion is factorial don't go for recursion you can use Loop because it is a simple right understood then any other prime number program you have to take only by using Loops okay like that but we can also solve by using a recursion but never recommended there are some problems like sir fibon fibon sequence have you remembered this one there is a common pattern what is that common pattern there will be some amount or numbers between the two numbers it is incrementing or decreasing yes that is called as fibon Sir even there are some real time problems n stairs problem okay even if you remembered towers of hanay towers of haay all these we are going to discuss in our classes how to calculate towers of an i for first two to three cases it will be easy okay then it will become very difficult so even we have some divide and conquer technique is there in that also compulsory you have to take the help of recursion so even subsets subsets problem okay and even sir binary tree tree traversals tree traversals okay in all these cases we are going to use recursion there is a huge demand is there for recursion in this areas so are you clear why we need to go for recursion remember these two points to reduce the length of the code and if any common pattern is there immediately we have to go for recursion are you clear friends up to this yes any doubt right so next I want to take properties properties of recursion AR sir can you please write some properties of recursion yes what are the properties only three properties First Property sir performing performing same operation performing same operation multiple times performing same operation multiple times with different inputs with different inputs this is one property why because if I'm calculating addition of two numbers or addition of 10 numbers sir same operation repeatedly we have to do sir second one in every step okay in every step what we have to do sir we will divide in every step we will divide the problem into we will divide the problem into simple simple problems in every step we are going to divide the problem into very simple steps then third one sir you have to tell only three steps are there tell me third one sir what is the property of the regression which one we need to remember termination condition to ter very good base condition base condition to stop to stop or to terminate to terminate recursion these are nothing but main three properties for any recursion related programs are you clear with these properties clear sir then coming to the next one steps to implement recursion steps to implement recursion sir the first step is nothing but we have to Define base case this is very very important at very beginning only you have to write the base case then we have to define recursion case two cases will be there one is to stop second one is to continue when we have to stop when we have to continue these two things are mandatory third steps sir we have to write logic we have to write logic to terminate to terminate that means it is not base case we have to write a logic to meet that base case condition and at last sir we have to combine the solution we have to combine the solution which can be done by Stack internal these are the four steps that we have sir if all these theoretical concepts are clear for you there is one more difference is there one more main concept is there like tail recursion and non-tail recursion I will explain this and then I will move for the programs one by one are you clear with this friends please confirm sir clear everyone please confirm yes sir good sir what is mean by tail recursion and what is mean by non-tail recursion both I'm going to cover in a single stretch listen sir listen carefully what is the first one here is tail recursion sir what is mean by tail recursion inside inside recursive method inside recursive method okay inside recursive method after recursive call after recursive call after recursive call if we are not taking if we are not taking any statements any statements so then such a type of recursion such a type of recursion is called as tail recursion are you seeing the difference sir inside recursive method after recursion call Sir this is my recursive method after recursion call Sir is there any method that we are executing no sir assume here I want to print the value for n just I'm printing sir after this recursive call can I say is it recursive call or not yes after this recursive call is there any method no sir then such type of recursion is called as what tail recursion I want to show you the control for this tail recursion which is very very important observe friend internally what will happen sir I told one separate B box one separate stack will be created internally one separate stack will be created internally sir first what we are doing assume I'm calling for f sir what will happen first the control will go here it will check is 5 is less than or equal to zero condition not satisfied then output print the value of n sir what is the n value sir at current please confirm what is the n value five five five will be printed why because at very beginning we called for M of five then what will happen sir it is printing the value five it will print and is it going to call for M of 5 -1 4 that means this one is going to call another method which is nothing but M of four now what will happen sir again it is going to ex execute sir it will print the value of four the output will become four then what will happen again it will call for m of3 so the control will go here and it is going to call for M of3 sir next M of three it will print the value of three again it will go for what M of 3 minus 1 which is nothing but two so it is internally calling another method called Sir this one is going to print it it will print the value two and internally what will happen it is calling 2 - 1 1 sir it is printing and it is internally calling 2 - 1 1 then it will print one it will print one and internally it will call for zero sir whenever we are getting M of Zero have you observed condition satisfied then return come out at the time of coming out it will check is there any pending instructions are there after recursion no then delete this entry delete this entry and come is there any pending instructions no delete this entry and come is there any pending instructions no like that is there any pending instructions or not it will check and then it will come so that this is the output for this program sir if you are feeling any difficulty please let me know sir clear up to this everyone feeling comfortable so just one doubt so while printing this value it will be going to like follow that like Leo right last yes yes yes okay see uh what is happening where last in first out is happening after execution of m0 already value got printed the control will come here so you executed some task again you you you did some other job after that is there any pending job for you like that it will check which job method it will execute first what is the recent call that job after that what is the recent call that job are you getting my point yes sir this is very very important this is very very important terminology sir why because the complete the story of complete recursion is depending on that one only yeah got it sir yeah everyone clear got it good now so this is nothing but what is happening internally this is nothing but what is happening internally just I'm erasing this and let us execute sir we know the output of this particular program the output is nothing but what it is printing 5 4 3 2 1 like this because first time five only then four like that sir next after this non-tail recursion sir inside okay inside recursive inside recursive method after recursive call after recursive call if we are not taking okay so uh if we are taking actually not taking right if you are taking so if we are taking if we are taking any statements if you are taking any statements so then such a type of then such a type of recursive recursive method such a type of recursion such a type of recursion is called as is called as non tail recursion non-tail recursion sir which is internally called as backtracking our uh next chapter is backtracking only where we are going to solve Sudoko problem Yan Queen's problem such a type of things sir what is happening in this instead of taking this statement here so I'm taking the statement here that's all only thing is nothing but what after this recursion I'm taking sir this recursion is called as what it is non-tail recursion so theoretically if you are clear then the flow of control I will explain clear friends clear up to this right so see the flow of control sir first I called M of five M of five so first first it is going to maintain a stack inside that someone called M ofi okay this is the output what we have and Sir first time is five is less than or equal to Z it will check no condition not satisfied then sir see it is calling M of 5 -4 it is not printing anything so internally it is calling what M of 5 -1 4 then sir is 4 is less than or equal to Z no sir again it is calling internally m of 4 - which is nothing but three so it is calling M of three then so what will happen again it is calling M of2 so internally it is calling M of2 again m of2 is calling M of one internally it is calling M of one sir again it is going to call M of Z sir it is calling M of Z whenever M of Z is coming control is coming out majority of students are going to feel once if written statement encountered the control will come here no sir there are some statements there may be a chance having the statements after this one also sir this stale is called as what non-tail but still execution is there up to this clear please confirm yes sir now sir observe carefully I'm changing the color sir whenever M of Z is calling simply it is wring nothing is doing it will delete this entry and control will come back M of one sir already the statement got executed is there any pending instruction is there or not please confirm please confirm is there any pending instruction to be executed yes yes of one am I right yes sir so it will print that sop of one so that output will become one then it will delete this entry and it will come when you called M of2 directly you controlled But Here There is some pending instruction is there right execute that then it will delete and it will go to m of3 sir is there any pending instruction yes print the value three again delete this again it will come back so is there any instruction yes sir print so which is going to print then it will come sir is there any pending instruction maybe the order is not followed by myself just you can check it so like this we are going to get and it will delete this entry and it will go to the main that's all so the output what we are getting is nothing but this one if you want let me check really is this output is coming or not sir I am keeping the previous output also have a look once 1 2 3 4 5 6 so everyone feeling comfortable up to this any doubt yes sir clear everyone right that's all this is nothing but what is mean by tail recursion what is mean by non-tail recursion anyway the applications I will explain in the next session but before leaving this one small important note so very very important note wherever normal iterations and reverse reverse is required then better to go for better to go for recursion sir they are asking reversing a string happily you can use recursion they are asking reversing a link list go for recursion Pand or not go for recursion okay so like that if anywhere reverse concept is there blindly you can go for which one Rec sir if everything is clear for you that's all about today's session tomorrow continuation of recursion will be there where I'm going to explain some four to five examples now if you are having any queries please let me know any doubts up this no sir right the people who are interested to continue this batch you can start making the payments okay tomorrow also demo link will be there maybe from day after tomorrow we may change the link okay yes any queries is there any brocher of syllabus of this batch I already told right in the beginning I have given the syllabus right you can go through our website there it is there if you want just I will copy paste this in the chat window you can take for reference and again I'm repeating the timings of the session is from 6:00 to 7: right guys thank you see you in the tomorrow's class bye