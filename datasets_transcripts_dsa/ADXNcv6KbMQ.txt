it's a day before my first coding interview tomorrow I really want to do well and I know they're going to ask me a data structures and algorithms problem so I need to study this and make sure I'm prepared okay I know everyone says the setting need code so I'm going to pick a random problem and see what I can do let's try this one number of Island it's a medium medium doesn't seem too bad I'm sure I can do it okay oh no the brute force is not working all right I'm probably just going to look up a solution and see what I can do there okay at least I beat 85% of people if you're being completely honest with yourself this is probably you everyone says that LE code is super important for coding interviews everyone tells you to study n code you've read books like cracking the coding interview you're considering getting services like NE code Pro algo expert Le code premium but nothing is working no offense bro but you probably can't solve Le Cod mediums without looking up the solution deep down in your soul you know you're but you don't know what to do in this video I'm going to teach you how I master data structures and algorithms in just 8 weeks without any online course no tutors and no prior knowledge experience of data structures and algorithms nothing whatsoever you're going to learn how I went from not being able to solve to some the easiest problem on Le code.com all the way to being able to solve 90% of leag code mediums and several hards as well and how I use a secret formula to land internships at Amazon Shopify HP and a full-time sixf figure software engineering job at age 21 so you can do the same and land the job of your dreams trust me if you follow the advice in this video your programming life will change forever data structures and algorithms will no longer feel impossible and you'll finally be able to smash show coding interviews in no time at all the first thing I did to master data structures and algorithms is that I sto trying to learn data structures and algorithms what the hell are you talking about why would you stop trying to learn data structures and algorithms before I explain what the hell I'm talking about we need to Define data structures and algorithms just we're all on the same page a simple way to define data structures and algorithms or DSA is to think about organizing a closet data structures are like the different storage methods you might use a hanger for clothes a drawer for socks and accessories and algorithms are the specific steps you take to find the clothing item you need if you need your favorite shirt quickly you probably scan the ERS only rather than looking through every single item in the closet in coding DSA helps organize and solve problems efficiently just like organizing and finding things in a closet now let me explain why you need to stop trying to learn data structures and algorithms most people waste their time reading textbooks watching online courses watching NE code videos and that's the reason why so many people struggle with data structures and algorithms it's because you're doing something called The cookbook trap let me explain when someone first steps into a kitchen and tries to learn how to cook very often people think okay the first step is that I need to memorize hundreds of recipes from a cookbook see you think you'll be fully prepared when the time comes but true skill only comes when you crack some eggs burn a few pants and adjust the heat as you go the best cooks learn by doing and then only consult recipes when absolutely necessary do you see what I mean you're flipping the order instead of watching YouTube tutorials reading a textbook watching online courses you should just try a data structures and algorithms problem and then only learn the algorithm or data structure after you fail trying to solve it our brain only learns through challenge see you spend all of your time watching Instagram reals YouTube shorts about coding instead of actually coding because it's easy and that's why you're stuck because you're watching videos of solutions without actually challenging yourself with real problems so stop trying to learn data structures and algorithms and instead start by practicing tons and tons of DSA problems and only consult lectures online courses textbooks after you can't solve something now that you realize that the first step to learning data structures and algorithms is to stop learning and instead challenge yourself through practice what do you actually practice this answer is going to surprise you because the second step to mastering data structures and algorithms is to stop following the N code road map but it's not what you think but first who is n code well n code is this YouTuber an ex Google software engineer he created this ultimate list called the N code 150 which is 75 problems on top of the blind 75 I know a lot of lists the blind 75 is a list of the 75 most important coding problems made by a meta software engineer and to get this out of the way n code is amazing his resources are unparalleled and if you follow what I said in the first point to practice and only look at materials afterwards his materials are some of the best out there he's not a service to the World by providing all these free Solutions online and I genuinely love the guy so what's the problem if n code is so great why am I telling you to stop following the N code road map it's simple ain't nobody got time for that if you want to get great at data structures and algorithms in 2 months you don't have time to go through the entire n code road map it's simply not possible nor is it efficient here are the problems with the N code road map first of all it's comprehensive which sounds like a good thing but it's really not because it covers tons of topics that you don't actually need to know sure it's good to know dynamic programming tries Math logic problems but if you're going for internships or newr roles it's just not necessary it's also overly long 150 problems is great but very few people can solve 150 difficult leak code problems and learn from all of them in Just 2 months it also has hard level problems which also aren't relevant if you're new to leak code again the neod 150 is a good overall resource but it's simply not necessary if your goal is to master data structures and algorithms in 2 months for internships or new Gra roles so what's the secret well the secret is to do the Paro problem set instead so what is the parito problem set well it's my problem set and it's the 50 most high return on investment problems from the neod 150 so why is it so special it's simple it's designed to be done in an 8we time period so if you do these 50 problems over 8 weeks you will be completely ready to tackle any internship or new grad rooll coding interviews now why is it better than the blind 75 because 75 problems is pretty close to 50 again because the blind 975 is for mid-level and Senior Engineers as well people who are going for entry-level roles simply don't need that level of difficulty the Paro problem set also only has problems that actually show up in the interviews and doesn't cover topics that are simply unnecessary it also doesn't have any Le code hards because you don't need them at this point it's also in a better order as well that helps understanding and gives you topics that build upon each other if you want the Paro problem set you can go to AMOM manazer docomo to get it absolutely for free and if you follow it over 8 weeks you'll Master data structures and algorithm in no time at all however if you're making the next mistake I see almost every single person make no problem set is going to save you not neat code not the predo problem set nothing I've worked so far will work unless you stop doing this I've seen so many people Crash and Burn because they make this one simple mistake see up till now you've probably been doing this you sit down a couple days a week you'll pick a random leak code problem and try it and after 30 to 40 minutes you either solve it or you give up and then rinse and repeat a few days later what's wrong with this approach after all you're following the first principle and leading with practice rather than trying to read through materials and lectures online it's simple no one actually does it consistently I've worked with hundreds of computer science students and if you can naturally sit down by yourself for months at a time and consistently study 5 to 10 hours a week of Le code on your own God bless you more power to you you're probably not watching this video because you're already a master of data structures and algorithms see Le code is like going to the gym for computer science Majors if you go to the gym three to four times a week work out with good consistent form for months you will get jacked it will happen guaranteed but the problem is that very few people have the internal discipline and motivation to stay consistent with it which is why people have personal trainers exercise classes workout and groups because it makes that consistency and accountability way way easier that's a secret stop trying to do leode alone in your bedroom and instead create a system that actually enforces that you get it done before I tell you the two things you need to know to create an accountability system for lead code that actually works let me tell you my story remember how I said I got good in 8 weeks well that's the truth but but it's not the whole truth in reality I had actually been trying for two full years before that 8we period but I simply made zero progress in 1 to two years I couldn't do anything I still couldn't solve leak code easys I know depressing I felt like I was doing everything wrong in reality I only got good at Le code during that 8we period due to external accountability and that's the thing everybody knows that LE code is ultra important you've heard so many times from me from other people your friends your family your parents that you have to do Le code but very few people do it because they don't invest in accountability and consistency now there are two ways that I used external accountability to master data structures and algorithms and change my life in just 8 weeks and the second one is going to change everything for you the first is through my algorithms class I know how obvious come on you just took algorithms isn't that so blatantly obvious but it's not the way that you think see my algorithms class at University went into tons of algorithms I simply didn't need to know and also we did a lot of proofs in mathematics simply were not necessary but the main benefit is that I rigorously learned the foundation of data structures and algorithms so that I was able to apply them to lead code problems far more easily see you can look this stuff up online at any time period all the data structures and algorithms knowledge is online completely for free 24/7 available for anybody who's interested but a two-month college class that forces you to rigorously go through all the information makes all the difference again because of consistency and accountability so if you have the opportunity to take your algorithms class at University you need to do that as soon as possible now the second second technique I used to create external accountability wasn't any kind of course you don't need to be a student at any University no boot camps no paid resources whatsoever and the secret is to start a leak code Club a leak code Club is an informal organization where you meet with a few of your friends two to three times a week and solve three to five leak code problems together and this is one of the greatest hacks I've ever discovered and truly changed the game for me you must do this if you want to master data structures and algorithms in just 8 weeks but it's not what you think you probably think that the leak code Club was valuable because I had fun with my friends or that other people involved made that accountability and forced me to stay consistent sure both of those things are things that did help but it's not the main thing that actually changed the game the real aspect of the leak code club that made all the difference was the fact that I was competing with my friends to see who could get better at Le code and this is something no one talks about nowadays everybody talks about how competition is bad competition is evil it's toxic you shouldn't compete with your friends but it's similar to any kind of sport if you leverage competition in a healthy way it 10 acces your motivation to actually get good at this thing listen there were multiple times where my friend finished the medium problem far before me and it was crushing to lose to him I st up would go home study for an extra 1 to two hours because I wanted to come back 2 days later and destroy him at that topic so if you're planning on locking in and getting good at data structures and algorithms in Just 2 months the only way to do that is through external accountability and the best way to create that accountability is through leak Cod club now just because you know that starting a leak code Club is the way that you create that accountability doesn't mean it's going to work for you frankly I've seen multiple people try to do this and fail just because they don't know these three things so here are three things you have to apply when creating your league code Club otherwise it's going to crash and burn and will not help you whatsoever the first thing is to keep it small you probably didn't expect this nowadays everybody in high school and college tells you every organization you need to start has to have 50 people you need to be the president you need to be throwing events fundraisers make it this Grand thing become a president become a leader of all these individuals now while that might look cool it's Absol absolutely ridiculous and here's why the goal of the leak code Club is to benefit you and keep you accountable you already barely have enough time to study data structures and algorithms anyway so why would you start an entire industrial complex of students who are also getting good at leak code you want to keep it as small as possible so how many people should be involved in a leak code Club ideally in my experience the best number is roughly 3 to six people Max and those 3 to six people need to be people who are actually committed and dedicated to getting good not just casuals who want to show up and hang out these are people who should be ser iously committed to mastering data structures and algorithms in just 8 weeks just like you now the second principle to creating an effective leag code Club is that you must come prepared with questions the best way to do this is to actually go through the Paro problem set together over the two-month period but even if you do that you need to come with three to five questions of the pr problem set or other problem sets ready so that you guys can work through that together in the 2 to three hour period the best breakdown I've seen is two to three medium problems and then two easies for warming up and a note here is that you're probably not going to actually work through all the problems every time that's totally fine but as long as you have a series of two three medium level problems and a couple of easys that will keep you occupied for the 2 hours and the goal is to finish the two mediums and fully understand them with your friends and the third principle about running an effective leag code Club is all about timing in my experience the best way to schedule these is three sessions a week and 2 to 3 hours for each session again you're not going to work through every problem you bring which is totally fine but as long as you work through two to three of them that's enough to progress over time think about it 6 to9 High Roi Le code mediums a week that's 60 to 70 High Roi mediums over an 8we period and that's enough to get pretty damn good at data structures and algorithms if you study them in the right way okay you have a leak code Club you have that external accountability you know you need to practice problems and you know which problems to practice but even at this point people still miss out on this one aspect of your practice that makes all the difference let's bring it back to the gym analogy you can show up to the gym multiple times a week you can show up with your friends you can be doing the right exercises with good technique and form and still see little to no progress in 2 months if you make this one mistake Nothing Else Matters and that mistake is not trading hard enough not pushing yourself to failure so how does this apply to data structures and algorithms well to understand that I need to teach you the under the hood technique imagine you're trying to understand how to build and fix cars you open the hood and glance at how everything works and tell yourself hey I understand this I get it I see how everything fits together cool do you think you'd be able to fix a car engine if something goes wrong no way because you literally glance through everything and fools yourself into thinking you understand how it works that is the problem with so many people they study consistently they study the right topics but they simply don't push hard enough to understand everything to the depth that you need to you can't just glance through an algorithm or data structure and convince yourself you actually understand it because you don't you won't be able to replicate it in a real coding interview you must deeply study every concept you encounter until you fully understand it through and through b didn't you just say we shouldn't learn data structures and algorithms instead just do tons of practice of course remember how I said that you should focus on practice rather than learning sure but that doesn't mean that learning is useless learning is important after you do the practice see even if you do tons of practice you're probably not going deep enough you don't understand why the time and space complexity is the way it is you just know what to say you've just memorize the aspects of the data structure algorithm you don't get why everything fits together the way it does for example a lot of people have just memorized how to do depth for search and breath for search and how to use a stack and a q but they don't understand what characteristics about stacks and q's make it work for depth research and breath research so how do you make sure you fully understand every data structure and algorithm you study you need to use the five wise system the five wise is a system that Toyota developed in the 20th century instead of just fixing immediate problems that come up in the supply chain they keep asking themselves why is this happening why is that happening why is this happening by asking yourself why multiple times you uncover the root issue which is way better longterm to fix that rather than put a Band-Aid over the issue currently so how do we apply this to leak code problems let's say you're solving a leak code problem and you need need to sort it but you realize that sorting takes too long because it's an N log end time complexity if that happens you need to ask yourself why is sorting n log end what underlying algorithm takes n log and time complexity to sort correctly how does that underlying algorithm work who came up with that underlying algorithm you want to keep going down multiple levels to make sure you fully understand it before moving on if you use the five wise technique to understand data structures and algorithms over the 8 weeks you will walk away with a far greater understanding that you'll be able to replicate in an actual coding interview all right right even if you know how to get amazing at data structures and algorithms in 8 weeks if you can't get any interviews then there's no point whatsoever so watch this video right here if you want to learn how to make an amazing resume that gets tons and tons of interviews so you can actually apply your DSA skills thank you guys for watching and I'll see you in the next video