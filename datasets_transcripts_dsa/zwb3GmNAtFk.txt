we will be looking at a very important data structure called stack today here is a list of topics as usual we'll go over some theory first then implement stack in Python and in the end we have very important exercises for you to solve first I want to show you a use case we're using stack data structure could be beneficial I'm on this website and on this website I can navigate through various pages let's say I am reading World News News then I want to read a news in India then I want to read news in China now when I go through all these pages the browser maintains history of it and when I press back button it will show me the last page that I visited see I visited India before that I visited the world page and before that I was on a home page so just imagine if you are a browser developer how would you manage this history in terms of data structure this is a pictorial representation of links that I visited in this order and when I click on back button really I am going to the last page that I visited okay so I am now traversing this links in a backward order one option I have is I can use maybe an array to store all these links and whenever I want to get the last element I have to go to the end of the array and pop that element out another option is of course you can use linked lists but the issue with these two data structure is that for example if you are using linked lists you have to traverse the linked list to go to the end and that end will give you the last link that you visited so every time you are doing order of an operation similarly with the array the problem is you have to use dynamic array because you can't use static array because it can just keep on growing also with dynamic array there are issues such as memory relocation and copying the elements etc in this situation imagine you have a data structure like this where once you visit a link you keep on pushing the elements to that particular data structure and then when you clicks on back button you retrieve the last element that you pushed okay so there are push operation and the pop operation will pop out the last element so here you are doing last in first out operation also known as lethal and this data structure is called stack okay stack is a last in first out data structure where you keep on pushing the elements and when you say pop it will pop out the last element that you pushed if you have a stack of dishes in your kitchen right when you are watching that this is when you create a stack when you try to remove the dish from the stack you will be picking up the last dish that you pushed on the stack okay so stack is exactly that data structure pushing and popping element is order of one or a constant time operation if you want to search an element in the stack by a value it will be order of n Big O complexity because you have to go through each of the elements and you have to look at that particular element some of the use cases for stack is in any programming language language when you are calling a function and then that function calls some other function internally compiler will use stack to push all those functions to maintain the order of this functions basically in any editor let's say you have Microsoft Paint or Word or Microsoft Excel they held this undo functionality so undo functionality will undo the last operation for that also they use the stack I mentioned that compiler or programming language uses stack and underneath so here I want to show you one example where see in this code I am calling this function called insert values and insert value function will eventually call insert at the end so when I put a breakpoint here it will see it will stop here but the call for insert at n came from insert values and insert values came from this main function so this particular thing that you're seeing here is called the function stack basically function is calling it one by one you can do f10 or just press this button and you will realize that it comes back see now I have two functions so it will just go to the last function that you call so this is the standard example of how stack can be used in programming languages to manage the function calls here is the stack implementation in different programming languages Python in Python you can implement stack using list collection or DQ or leaf oq Java also has multiple class sessions and C++ has STD stack now I'm going to show you how you would manage the browser history back functionality using a list in Python so the Python list can be used as a stack here I have created this list and appended all those web links that I visited okay and when you do control-enter is gonna create the list and append all these links now when you want to get the last thing that you appended you can call pop function and pop will give you the last link that you visited which was cnn.com slash China and now when I look at s it will have only three things you see and you can then call pop again so that gives you India pop again okay world then pop again cnn.com and when you do pop after that it will say that you cannot pop from an empty list so the pop operation in stack will pop out the last element it will return the last element it will remove the element from the list now if you don't want to remove the element from the list so let me execute this once again okay let's say I don't want to remove the element from the list but I just want to get the element so in Python you know that you can use - index to get the last elements if when you say - 1 you get China back and your list is still not changed while you can use list as a stack in Python the problem with list is that it is a dynamic array for example if you have a list with a capacity of 10 let's say and if you want to insert a length element internally since it is a dynamic array what its gonna do is it now see in this case it doesn't have the capacity for 11th element so it will go into some other memory area it will allocate some extra capacity usually if your current capacity is 10 it will allocate the current capacity into to those much additional memory location and then it will copy all those 10 elements here and then now it will insert this 139 so the problem here is not only it has to allocate new memory it needs to copy all existing elements if you have million elements you have to copy all the million elements which might be costly for that reason using lists as a stack in Python is not recommended the recommended approach in Python is to use collections dot DQ now if you look at collection dot DQ documentation it says that they are a generalization of stack and queues and they are implemented using doubly linked lists so you don't have to worry about the issues that you face with dynamic arrays okay it will allocate new location as in when needed and you don't have to worry about copying the current elements into the new memory location so let's implement stack using DQ now first thing you have to do is you have to import DQ from collections ok so I'm gonna do from collections import D queue and then my stack is a DQ now I want to see what type of method this has so when you do dir stack it will show you all the methods of IC methods such as EPP and append left and so on you can also refer to the documentation okay so here it says append will add X to the right side of the DQ and that's what we want we don't want to use any of this left function okay so let's do stack dot append and in here I want to append the link that I visited let's see how the stack looks like see stack has this now you can append few more things so I'm just going to append this one and the other two links that I visited while browsing see it creates a DQ like this and when you do stack dot pop it will obviously return you the last element and not only it returns the last element it will remove it so now cnn.com slash China is not in my stack anymore now here I created a stack class just for fun using DQ you can use DQ as it is for a stack class but I want to follow the proper stack prototype and use the function such as push pop peek etcetera that's why I created this class it looks pretty simple internally I have a container which is nothing but an object of DQ class when you do push I am doing append to the push alright so you can look at all these methods these are like very very simple methods this is my Python implementation of stack class and now I'm going to try few things with this stack class writer so I pushed 5 element 5 here and then I'm gonna call ask dot P so s dot week will return 5 but it will not remove files from my stack ok so I still have you file if I call you call s dot pick once again it will still return me five if I do s dot pop it will return five but it will remove fire as well so when I now do s dot pop again it will say pop from an empty D cube at this point when I call s dot is empty method it will tell me the stack is the stack is empty you can also do a store push couple of values so I'm gonna push let's say three values okay and when you do s dot size it will return me the size of the stack that's all I had for this tutorial now the most interesting part of this tutorial which is an exercise so I have these exercises for you I have a solution link but you're not going to click on that link until you solve this exercise on your own without solving the thing on your own if you click on the solution link it is going to download cuvees 19 virus on your computer ok so be very careful I have that automation in place so you try things out on your own first then only you look at the solution for the exercises you will be using this particular stack class that we did in our tutorial and I am going to post a link of this tutorial this notebook as well as the the exercise description etc in the video description so make sure you check the video description work on the exercise also watch my rest of the data structure tutorials data structures as I have said before are very important in programming interviews even if you want to become data scientist etcetera having good knowledge of data structure is very very important all right thank you very much for watching if you like this video give it a thumbs up share it with your friends