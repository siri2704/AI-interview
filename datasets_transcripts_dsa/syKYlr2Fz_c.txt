Hi everyone! Welcome to a new video. So, today's video is useful for those who want to learn DSA through our course or want to know DSA's complete curriculum so that they can study it by themselves. If you don't want to learn DSA then, this video isn't useful for you. So, you can stop watching the video right now. Rest, let's move on in the video. There're going to be 2 agendas in this video. First, the course of data structures and algorithm that we launched there're some updates regarding it. I've to give those updates & second is I'll be discussing the entire DSA curriculum, we'll talk about in detail. Just in case, you don't want to get a course. You want to learn on your own then you can follow this curriculum and just trust me we've taken lot of time to make this curriculum. So, its going to be very useful for you. So, let's start. First of all, the updates about the course. We'd started our course from 1st January with basics of programming. Both the classes of Java & C++ were running - 4 days a week. And every class used to be around 2.5 hours. So, we've completed the basics of programming. Rest, the feedback of students will be given by some people in the comment section. And you can check out the feedback. If you ask me then, all the classes were very interactive. We solved enough questions in the class & in the homework as well. Now, in the homework questions if students got stuck, so they have TA support. So, they get instant TA support. You can directly contact with TA. And apart from the 4 classes, on Sundays - that is the 5th class - the doubt session. So, you can ask doubts there. So, it was very fun. Basics have been covered & now, we're starting with Data structures and algorithms from 5th February. Now, we've also reduced the price of the course because already 1 month classes have been conducted. But, now the DSA that is going to start will be joined by those people who know basics. If you join now & you don't know basics at all or you've 5 days - you can study from the recordings of basics, you'll get that but if you don't the basics. I don't think you'll be able to study in 5 days. So, there is no use of directly joining DSA without knowing the basics. Those who know basics, they can join DSA part as classes have been conducted for 1 month that's why we've reduced the price. So, now the price is 4200 I guess, you can go & check out on the website. Link is there in the description below. Right! So, now I'll slowly tell - if you want to study data structures & algorithms from basics. Then, how should you start. There was orientation in our first sessions, we'd interacted a bit and motivated them. After that, we started with pseudo codes and flowcharts. Now, pseudo codes and flowcharts is for your logic building. You get to know, if you want your machine to work & bring you a certain output so, which instructions should you give them. How to instruct your machines - computer is a dumb machine. It'll do whatever you tell it to do. So, this is how you can give inputs. With that we learn, how to write pseudo code. Then, flowchart - if you want to diagrammatically tell that how the program is working then flowcharts come in use. So, we learned flowcharts. Then we learnt how to get output. We didn't talk about input but juts output, if you want some output on your screen, its fun to get some output in our first program on the screen. We started with that. So, you can start your journey in this way. Then, you can learn about the variables, certain data types & then how to take inputs of these data types. Right! The curriculum is very vast & I'm going to tell you in detail, so let me take help of my mobile phone we've written the entire detailed curriculum in it. After that, you'll know how to give input & take output, what are data types where you can store data, then comes our control statements. Then we'll learn control flow after it. Now, in control flow - the decision making for example, suppose there's a certain condition, according to which I've to do this. And if its not that condition, then I need to do something else. Just for example, suppose its raining outside or its not raining, the weather outside is sunny or rainy you need to work accordingly, so if its sunny weather then I'll go to play outside and if weather is rainy, I'll stay at home & study. Right! So, this is decision making where we study - if else statement, if else ladder and switch case. Right! So, this is the 2nd thing which we're going to cover & to do it there's only one way, that is - practice. You've to practice a lot of questions. Its very basic, you'll study it in 10-15 minutes but you'll not know how to use it, until you practice enough questions. So, practice enough questions. There's a very famous question called - Fizz Buzz. Where you've to print - Fizz & Buzz according to weather the input is divisible by 3 or 5. So, you need to do outputs like this. So, these questions are available online also. Its available anywhere, you can just search that - I need questions for conditional statements in C++ or Java whatever language you're studying in. You'll get the entire list. Practice enough questions. There simple questions, just that you learn to write a code, you'll have good practice. Talking about switch case, then I don't use switch case so frequently but its an important thing to know. Often out put questions come in switch case, then do solve enough questions of it, practice it. And it'll be done within 2-3 days, we also took some 3-4 classes in this. Within 3-4 classes, we practiced intermediate & advanced questions as well. If you don't want to advanced then its fine, right! After that, comes the interesting thing that is loops. If you want one work to be done repetitively, then you won't write every statement, suppose you want certain task to be done 1000 times, then would you write it 1000 times in the code? NO! So, loops work here - for loops, while loops & do while loops - which isn't much important its not much used. I never used do while loops in my programming. So, you need to study loops after this. Right! You'll get good editorials, we did 3-4 classes for loops. And we practiced enough questions. There's a good way to practice loops - that is pattern printing. The star pattern, Trapezium patterns, diamond patterns - try printing it. Right! These are also basic questions. You'll get it online anywhere, so we solved a lot of patterns in the class & then we solved a lot of other questions also that - how can you print a series using a loop how can you print Fibonacci series & and all these stuff were covered, right! So, all these will be available, you can check out many platforms You need to practice loops, you need to spend atleast 1 week. Right! Loops aren't understand at once by people. First, the working of loops whould be understood. If its a for loop, then basically it has 4 parts. Initialisation, Condition check, then the body then the updation. So, how does it work in a loop? First is initialisation, then condition check, then body, then its updated. So, you should know these basics. Right! For loop, while loop - there's no difference. For loop can do what while loop can do. In some situations, for loop seems very intuitive means it feels like, for loop should be applied here in other use cases, while loops seems very intuitive. So, accordingly you have to use them. Alright!  So, we talked about loops - it'll include prime check, odd or even check - there're many such questions. There'll be sum of digits that how to calculate the sum of all the digits in the number, how to reverse a number. There're many interesting questions. Right! In this we also had to take extra class because we were covering a lot of questions and we wanted to atleast loops to be covered properly as they're frequently used in DSA. So, the 1st month prepares you for doing DSA questions. Right! Then, we came to data structures - arrays. After learning these, you can start with arrays. Now, there're two things in arrays - it has lot of tricks and techniques and other is to know the fundamentals of arrays. That what they actually are. How are they stored in a memory! 1D array, 2D array - right! These pointers, if I talk about C++ then it also has a concept of pointers. So, arrays are nothing but constant pointers, right! They're constant pointers. They store the address of the starting 0th index so, these all are theoretical but you should know them in detail. Because often asks you. And if you're making arrays then you should know how the memory is getting allocated. Often, there're errors when you're going out of bind, why is that error coming. So, all of these things for 1D array & 2D array were covered in detail & if you want to learn it then, it'll be good if you search it separately - arrays memory allocation right - 2D arrays memory allocation, row-major, column-major if you search it separately, then you'll get detailed articles in it. Otherwise, often if you search a normal array article - they don't tell in detail that how arrays are used a pointer. How is memory allocated, they don't tell in detail so, please learn these things in detail. Don't skip it. After that, we'll see how to use arrays, right! Now, to use arrays gain we've to solve a lot of questions for that. That in arrays, how can you store a number by breaking, how to use arrays as a map, we've covered several questions I'll tell you for an idea, so that you can search these questions and solve it by yourself. So, there're may traversals in 2D arrays - how is the diagonal traversing how to print upper right part of the matrix, how to print lower part, so, there're many questions of matrix traversal. Until now, we've not covered many techniques like, binary search and all those are also applied on matrix, but we won't cover it now because we don't know it yet, right! We'll cover it later on. Then, there're some in built functions of arrays, in Java - standard temperate library that is how can we use it in the form of vectors, these all come under it. So, I'll give you an example of the problems. Smallest element in an array, largest element in an array, second smallest element in an array - these are basic questions. So you should know these, right! How to reverse an array using two pointers - you should know that. How to print array in the reverse form, you should know all those things. Right! In multi-dimensional arrays, column wise traversal, row wise traversal - then diagonal, secondary diagonals, swap the elements of the diagonal, multiply two matrix - its a very interesting question, how to multiply two matrix, now here we're not talking about scalar multiplication, matrix multiplication - you need to multiply two matrices - matrix of A*B, and matrix of B*C multiplies to give matrix of A*C, right! So, basic maths are also used but the interesting concept of array is used, how to traverse a matrix spiral order traversal of the matrix - so cover all these questions. Your arrays, traversal of matrix will be very strong. Alright! Then we'll start strings. Strings are nothing but arrays of characters but string is taught separately because now, we don't use string as a character of array, we look at it as a different form of data structure. Its turned to a different data type by the Standard temperate library. So, that's why Strings are important & its used in every question. It makes the line easier. That's why string is added here. The main string that we're going to teach is in data structures and algorithms there we'll learn matching strings and algorithms, it has been introduced to basic data structure this is how you can take input in a string, this is how you can add 2 strings & find the length of a string, concatenate two strings, append something at the end of the string. How to find the substring of a given string, so all these basic things are covered & we solved lot of questions so that enough practice is done. Now, if you want to learn string then, you need to search article on string - String in C++ or Java you can go though that article & there's a very good website - cpluplus.com - you can search data structures there. So, you'll get all the methods of string class, all the properties there. Right! Your string concept would be covered very properly. You can see that like - how is string::size implemented how is str, sub str of the string implemented. How is its implementation written behind the scene which you can't read, you can just use it. You cannot read it, you can get it at cplusplus.com. Its a very good website. Then we'll study - functions. They're very important otherwise you can't write everything in main in programs, if you do keep writing then it'll be a huge program, it won't be manageable, it won't be readable. And main itself is a function from where the execution of our program starts. Our program starts from main. It ends in main as well. So, these things are told in it & you've to study what functions are how can you call functions how to separate out different functionalities, how can you call one function from another, how can you call itself from a function which is called recursion. If a function calls itself, which it can, its called recursion. Now, the important thing that is often missed by people is that which parts are there in a program & which memory are they present in, in which memories part. As our memory is divided in 4 parts, one part is where codes are stored, global variables will be stored, right! Code and text are stored, global variables, static variables are stored at one place - 2 parts are done. 3rd part is the, stack, 4th part is the heap. So, how is our program stored in all 4 parts, how does it run. Right! So, our functions - when they call each other, we called a function from main - we called another function from that one, so this entire work is done in  stack. In the form of a stack data structure, this work is done. Right! So, its very important to go in detail that what else is there in a memory what is being cleared, how is it being called, how are those call coming back, this theory is important to be studied, with this you'll understand recursion properly. The functionality of the functions will be understood properly with it. So, whenever you learn functions, don't just learn how to call them, how to use them, how to separate them out, how to pass value by reference, how to pass value by value. You've to study the basics that how functions work in a memory. Right! How are variables made, how are they destroyed - you've to learn all these things, right! I also told dynamic memory allocation in the case of C++, that how to use heap memory using the keyword 'new', how to create arrays inside heap, how to create pointers inside heap we talked in detail about pointers and heap memories. There's not much fuss in Java, it has basic things the work of garbage collection is handled itself, right! So, we learnt about functions - we didn't tell much about function overloading because that is going to covered in C++ - Object Oriented Programming Concept, right! Where we'll study about Polymorphism and all, there we'll cover that - what is function over-loading, over-ridding we left it here because, you can't collect so many things in the mind, so give yourself some breathing space also when you're learning stuff. Learn things, use it and give yourself breathing space to absorb it. Its not that - you kept on learning & the later you don't remember anything. Practice enough whenever you learn a concept, right! Then finally, our topics are Object Oriented Programming. For data structures and algorithm its not very much, its very basic but still we tried in the course that we teach it in detail. So that in interviews, if a question related to Object Oriented Programming is asked - you're able to answer those questions, right! This itself is a 6 month course, if you'll look at the college curriculum course so, you might not cover that much, but let me tell the basic things. What is the difference between - procedure programming language and object oriented programming language? Why is Object oriented programing put to use? Why was it needed? Why wasn't functions enough for writing programming - that was once told for motivation, right! Then it was told that - how can you make your own data types, as integer, character, boolean are in built data types, that you've studied. How can you make your own data types in the form of a class? Right! And it was told along with a real world example, that suppose, if you've to make a student class then what will be the properties of a student - his own role number will be there, his name will be there, his email id can also be there, his marks, his grade, his class, his father's name, his date of birth - so, these are his properties. What can be the functionalities of a student? What can the student do? That student can appear for exams, he can mark his attendance, right, he can go to school,  he can mark absent. These days there're apps in which all these are actually used they can mark their attendance there, they can mark whether they were present in a class or not, they can mark whether they were present in a lab or not, they can see how much marks they have they can see their own marks. So, all these things are the properties or functionalities of a student. Right! So, in this way student class - we took the example of car class, you can find all these examples, you can search - object oriented programming in C++ or in Java with examples you'll get all these things. Let me tell you the name of topics so that you don't miss out anything. Right! So, how to relate it with pre-existing data types, just imagine it like pre-existing datatypes which you're creating you're making it yourself by mixing the previous data types. Right! Then we studied about the constructors. What are constructors, copy constructors, parametrized, non-parametrized and default constructors? How are constructors called & when are they called? In constructors, in C++ there's an initializer list. If you're making a static data or constant data then in initializer list, you'll initialize otherwise it'll constructors will not be able to initialize in a body because all are small concepts but it is must to know these concepts all these were covered, right! In inheritance, there're many good examples. Suppose, there's a vehicle class - there're some children class of that class like, Car, Truck, Motorcycle - these are all vehicles. So, wherever you see 'is a relationship' - let me tell you, that 'Car is a vehicle' 'Bike is a vehicle' 'Truck is a vehicle' so, all these are vehicles. Wherever 's a relationship' exists, there we need to inherit so, the Car 'is a vehicle' So, Car will inherit the vehicle. Bike is a vehicle, so bike will inherit the vehicle. Right! Again, if I talk about - Creta so, Creta is a Car. Right! Creta is a Car. So, here 'is a relationship' occurs - so, inheritance comes, right! So, our Creta will inherit car. So, Creta will inherit Car & Car inherits a Vehicle. All the properties of a vehicle will be inherited by the car. And all the properties will be inherited by Creta. In this way, we need to understand inheritance with real life examples. There's another relation - 'has a relationship' Car has an engine, right! There we study containership. That, in a class - how to create an object of one class into another and when and when to be inherited. We studied these things in detail, there're basic concepts. But its important to know because, often we keep on studying theory on colleges & we don't put focus on these things that - when is inheritance will be needed. When we'll need containership, after that - there's polymorphism, function overloading, function over riding and dynamic polymorphism. That is our run time polymorphism. We studied all that in detail, I won't go in detail otherwise these concepts are little complex, for polymorphism, dynamic polymorphism. There is something called Upcasting, Down casting so, we'll deal all that in it. Access modifiers, where are public properties needed, where will we create private properties, protected properties we'll learn learn all that. Static and Final Keyword so, we'll study static keyword in C++ that what is the meaning of static if you make a data type static, then what does it mean. We study final, in Java, what does it mean, right! So, this is the basics. If you want to learn basics, search topic by topic - there're good articles & if you want the recording of the course then you can get the course but that'll be useful when you want to learn data structures and algorithms then from Feb DSA is going to start in which we'll study all the topics in detail, now let's see which topics are there, just in case you want to learn it by yourself, you can go through these topics and learn it, right! Let's start - first we'll study, space & time complexity analysis. Now, Space and time complexity analysis is such a topic that comes with practice when we solve questions, we analyze that here loop is applied. the loop is going for n times, then O(N) is the complexity. The loop here is running for log n times, so the complexity is log(N). So, while practicing we learn space & time complexity analysis. But before that you should've the idea that, space and time complexity is not the actual space, is not the actual time that the prpgram is taking. This is something else. Right! This is a method to measure. That if we increased the input then, how will the time of our program increase This won't give the time, it'll give you the growth rate, right! So, we'll understand that in detail with the help of space and time complexity analysis, why, what and how then different notations that we use, Big O notations, theta notations, Omega notations - we'll learn this. Comparing different complexities, that Big of N vs Log N - how much is the difference between them. How much good is Log N compared to Big O of N? And how worse is N square means - how fast will it grow, we'll learn all of these things we'll make you imagine until now, whatever we covered in basic - people were actually saying this in chat, in the feedbacks that - Bhaiya, whatever you're teaching can be imagined. We can look at in in front of us, we can see its image. So, that's how we've kept the strategy that we'll make everything imagine, its not that we just taught in theory form & then moved on. So, practice problems again, we practice a lot of problems in this because often in MCQs problems are asked - there're two loops, tell us the complexity, this type of questions are asked in first round of our interviews. So, that should be understood. Once we've enough practice of space and time complexity, we're going to continue it for the rest of the syllabus each question that we'll do, we'll analyze the space and time complexity, we'll practice for next 5 months. Next topic is, Arrays and stuff. Now, array came again - we'd learnt array in basic, we're dealing with it again. Right! The array here, basic things like memory allocation won't be covered because we'll assume that you learnt it earlier. Right! When you'll make your strategy then make in such a way that, you cover those things earlier here, you need to study different arrays and algorithms, different tricks that how can you use array, right! Here, how can you make dynamic arrays, the vectors, array list behind the scenes, how is it implemented. Tow pointers sliding window, auxiliary arrays, arrays as maps - how to use them, we'll do good questions of advanced level. Then, we'll do questions of multi dimensional arrays medium to advanced level. Basics - traversals and all, we've already done it. Right! So these are the topics that you've to do in arrays. All these topics are to be done here, matrix and all - its very simple, if you want to do by yourself then I'll give you one advice, go to LeetCode, search arrays. And you'll get sub topics of every array, auxiliary array, array as a map or two pointers - in fact, two pointers and all can be searched from outside the Leet Code questions. Practice enough questions, give around 2 weeks to this. And then you can move ahead. Next thing is recursion, we're doing it very early. The reason is that, recursion is used in basic algorithms like, if we talk about sorting, recursion is used in quick sort, merge sort. For that we need to know basic. And since we would've done earlier while learning functions that - if a function calls itself then what happens here, learning recursion won't be difficult. Here, learning recursion is important otherwise we'll skip many things. We won't be able to do it. You just need to learn basics of recursion, not very advanced, not like rat in a maze or n queen problems you need to do basics things of recursion. Right! What, how and why - why is recursion used, how is it used, which problems get easier to solve you need to study these. Classical problems are there, beginner level problems. So, reverse & array is solved with recursion so, solve that type of problem. Palindrome check is a question, we might've done earlier - how to check palindrome whether an array is a palindrome or not. You can solve it through recursion, right! Then, how recursion tree is created, and how are the functions called, we'd done already but here we'll deal with it again and we'll also see how recursion tree is created. How to find out Space & time complexity in the form of recursion we'll also deal with it that number of loads in the tree that'll give you the idea of time complexity & the high of tree will give you the idea of space complexity. Right! So, I think wherever its covered - its covered this way. So, if you're reading an article. By the way you can read articles on read.learnyard.com as well. We publish detailed articles. of C++, Java - they're more focused on & articles of data structures & algorithms are going to continuously come. We've already covered some topics, so you can go and check it out. You'll get good articles, with in depth explanation of everything. We'll do basics of recursion, solve around 10 questions, you'll get a good idea. Then comes searching & sorting because without searching and sorting lot of questions won't be solved. We'll learn about bubble sort, selection sort, insertion sort they're beginner friendly sorting algorithms then, we'll learn about merge sort & quick sort in which recursion will be used. Right! So, here we'll see for the first time that, how to use recursion in actual algorithm. And quick sort, merge sort are very good sorting algorithms. Lot of questions are created only by them, their way to write algorithm - by using that way lot of questions are created. Its not that, you'll only sort you've 5 algorithms of sorting, you can apply anyone, its not like that. there is a question where - Inversion count is a question where the concept of merge sort is used. The middle part of Merge sort is used. So, we'll solve all those questions, right! We'll dela with applications of the algorithm. Then, once we do algorithms, you can read about them from anywhere solve questions on LeetCode, then there's a very important concept which is coming. That is - Binary search. Now, binary search we need the array to be sorted. Often, you'll given sorted array but other times, you'll be sorting those to apply binary search. Binary search is a very important concept. This is asked in many contests, its asked in lot of interviews, online rounds - binary search is a very favorite concept. Its very easy concept, so you've to learn binary search How to apply binary search on simple array, on matrix