so let's just see how we can implement the stack using the linked list so as we know in a linked list we have multiple nodes and the nodes are connected using the link and each node has the data and the link to the next node so this is a single node building block of the linked list now we can Define the node using a structure so we use the struct node and inside the structure we have the data and the node type pointer we're going to call this next so this pointer will point to the next node in our linked list and also because we are implementing the stack so we need one pointer which will point to the top of the stack so for that we're going to use one node type pointer and this will initially point to null so let's now see how we can Implement all of the different stack operations using linked list so first of all let's just see how we can implement the push op operation so push operation means adding one element into our stack so initially our top pointer is pointing to null and our stack is empty so here is the function to push item into our stack so as a parameter we're going to pass the value that we wanted to push into our stack so first of all we're going to create one new node and we're going to use the mlog to allocate memory for a single node so that means we are allocating memory for a single node and after that we're going to check if the new node is null that means if the memory allocation fails in that case we're going to say stack Overflow that means there is no more memory left to allocate for the new node so in that case we're going to Simply return so otherwise if the memory allocation is successful in that case we're going to store the value into our new node so the value that we have passed as a parameter that will be stored in to our node like an example the value one so the value one will be stored into our new node and then we're going to update the new noes next pointer and it will point to the top so as the top pointer is pointing to null so that means this new noes next pointer will point to null and then we're going to update the top pointer so the top pointer will point to this new node that means our top pointer will point to this newly created node and then we're going to print the push is successful so that means we have successfully pushed the value onto our stack similarly if we call the push function with the value two in that case we're going to repeat the same process so that means first of all we're going to create one new node and then inside the new node we're going to store this value to and after that we're going to update this next pointer so this next pointer will point to the top that means this new noes next pointer will will point to this top node and then we're going to update the top so this top pointer will be updated to point to this newly created note and you can see our linked list is updated and this new value two is pushed into our stack so this way we can push another value three so that means a new node will be created with the value three and the next pointer will point to this top note and the top pointer will be updated to point to this new note and this way we can push multiple items into our stack so let's now see how we can implement the pop operation pop operations means removing one element from the top of the stack and returning its value so here is the function to implement the pop operation so first of all we're going to check so if the top is pointing to null so that means if the top pointer is pointing to null that means our stack is empty so in that case we're going to print stack is empty and then we're going to return otherwise if the stack is not empty we have multiple elements in the stack so in that case first of all we're going to create one temporary pointer which will point to the top node so that means we're going to use one temporary pointer which will point to this top node and after that we're going to extract the value from the temporary pointer and we're going to store into one variable popped so that means we are having one variable popped which will having this data three and after that we're going to update the top so the top will be shifted to the next node that means this top pointer will be shifted to the next node and then we can free this temporary pointer that means we're going to free this temporary node that means it will be deleted from the list and then we can return the popped value that means you're going to return this value so you can see after this pop operation the first node is removed and we are returning the value of that node so if we call the function pop it will return this value three and again if we call the function again so again the same process will be repeated that means we're going to use one temporary pointer which will point to this stop node and then the value of this top pointer will be extracted and then top will be shifted to the next node and then we're going to free the memory of this node so that node will be removed and then we're going to return this puff value the function will return the value to so this way the pop function will remove the topmost element and it will return its value so let's now see how we can implement the peak operation Peak operation means it will return the top element from the stack without removing the element so here we have the stack so whenever we perform the peak operation it will return the value of this stop node modde without removing the node so here is the function so first of all we're going to check whether the stack is empty or not so if the top is pointing to null so in that case our stack is empty so work now print stack is empty and then we're going to return otherwise if the stack is not empty we have multiple nodes in that case we're going to return top data top data means this value if we call the pick function so it will return the value of this top node it will return three and also we can Implement is empty function so this function used to check whether a stack is empty or not so in this function we're simply going to check if the top is pointing to null that means the stack is empty otherwise the stack is not empty so this way we can Implement all of the stack operations using one linked list now there are certain advantages and disadvantages while using the linked list so first of all let just talk about the advantages so here because we are using the linked list so here we have the advantage of dynamic size so we do not need to specify any predefined stack size because here we can allocate the memory whenever it's required and because of this here no memory is wasted so we can very efficiently perform all the array operations and also it has some disadvantages so first of all we require extra memory so here in the linked list we require extra memory for the next pointer of each node and also secondly here we have the slower access so because the linked list nodes are scattered in the memory so accessing them takes some time so it is slower than the array and thirdly because we are using the linked list so implementing the linked list is little complex and also so here we have the risk of memory leak so if we forget to free the memory of the unused node in that case it can lead to memory leak so these are all the drawbacks of using linked list so this is the way we can use the linked list to implement stack so hope you understand the concept see you in the next one take care [Music]