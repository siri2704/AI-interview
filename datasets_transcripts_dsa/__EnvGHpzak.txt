[Music] hello everyone welcome to quote soft in this video we are going to talk about the question chocolate distribution problem so let's get started now the problem statement says that we are given an array of n integers where each value represents the number of chocolates in a packet so that means the array is having n values and each value represents one packet and the value of that array represents the number of chocolates in that particular packet right now each packet can have a variable number of chocolates there are m students the task is to distribute chocolate packets such that first point each student gets one packet so till now the question is that there is an array that is having n packets and there are m students now we need to give each student one packet out of those n packets and now what is the next statement the next statement is that the difference between the number of chocolates in a packet with maximum chocolates and the packet with minimum chocolates given to the student is minimum so what we have to do is that suppose we are giving those m chocolates to n some m students right now each student will open the packet of chocolates and find out that there is this number of chocolates present in that particular packet and out of those students there will be one student that will be getting the minimum number of chocolates in his packet and similarly there will be a student that will be having the maximum number of chocolates in his pocket we need to minimize this difference that is the maximum chocolate minus minimized minimum chocolate and this difference we need to minimize in the question so what do i mean to say let's say we have this array that is 7 3 2 4 9 12 and 56 and m equals to 3 that means there are three students we need to give three packets out of these packets these are let's say if we count n that is one two three four five six seven so m is seven in this n is seven in this case and m is three so out of these seven packets we need to give those three students so the packets one packet each such that the difference between the maximum student chocolate and the minimum student chocolate should be minimum okay okay so what i mean to say is that let's say this is the array let's pick first m value so this becomes a sub array of size m so we give one student seven chocolates two students second student three chocolates and third two chocolates so the difference between maximum and minimum is 7 minus 2 that is 5 similarly if you pick any other sub array let's say this of size m that is 3 students 1 student will get 9 chocolates other will get 12 and the last one will get 56 difference between minimum maximum is 56 minus 9 that is 47 so this is the difference now we need to minimize this value this difference value we need to minimize so we need to pick that sub array accordingly which will give us this minimum array so in this case if we look at this sub array that is 2 3 and 4 so the maximum value is 4 and minimum is 2 and 4 minus 2 equals to 2 this is the minimum value that we actually require so you can see that if we if we pick these three values that is these m values from this array we get the minimum value so i hope the question is clear i would request you to pause the video at this moment and please try this question on your own if you're not able to then please refer to the video solution the brute force approach which would actually come into anyone's mind is that okay we are given an array we can actually create all the sub arrays that are possible in o of n square time and after creating all the sub errors we can just check the maximum and minimum value and subtract them find the difference and save it somewhere and keep comparing it with all the sub arrays and find the final answer so we have talked about the brute force approach now let's look at the optimized solution so the optimized solution goes with the fact that to minimize the difference between maximum and minimum value we need to pick the sub arrays that are having all the values closest to each other right so what do i mean by this is that let's say we have a sub array that is 2 3 and 4 right so in so we need to pick sub arrays in which the next number to 2 should be the next bigger value possible that is 3 so any sub array that is 2 4 or 9 this this is not a candidate for being for giving us the answer because after 2 not 3 but 4 is present and that is why we are missing a value that means the difference is actually being greater and we want the minimum difference so that is why we will pick all the values that are closest to each other and for that what we need to do is we need to sort the array after sorting arrays we get the values in increasing order and thus we can create or we can pick m m size sub arrays in order starting from 0 till m minus 1 then 1 to m 2 to m plus 1 and so on and then we can compare the values to find the answer okay so this is the array that we are having and if i talk about let's just pick up this right yeah so if we sort the array we get this array so what the solution says just sort the array after that pick so m in this case is three right m is three so pick m size sub array one by one so first we will pick this sub array this will return the difference as 2 that is 4 minus 2 then we pick this this sub array that is 3 4 7 the difference here is 4 and we compare this 4 with 2 2 is still smaller so we pick the value 2 only and do not use this 4 value then we go to next sub array that is 4 7 and 9 9 minus 4 is 5 again 5 is greater than 2 so we still pick the 2 value then we pick the next sub array that is this and the difference is again five which we have which is again greater than two and so on we just we just actually traverse the array pick m values find the maximum minus minimum difference and after that we just compare it with the previous value or the smallest value we have found till now and this is how after after the end of traversal of the array we will actually find the smallest value and this will actually take only of n log n time because our sorting takes only of n log n time so let's move to our editor and implement this solution okay so let's implement the solution and okay so the array given in the question is 7 3 2 4 9 that is 7 3 2 4 9 and then we have 12 and 56 so this is the array here okay here n is equal to seven and let's just sort this array so uh we can use this default sort of uh function that is provided by stl so what sort err comma er plus n and we can rename this to arr only okay after sorting what we have to do we need to create a variable that will store this minimum difference value so minimum difference will be stored in this and we need to maximize it initially so that all the values that are coming from the array should be smaller than this so let's just save it as into max so now let's declare two variables that is i and j so i refers to the starting point of our sub error and j will refers to refer to the ending point of our eat sub array now what we need to do is we need to declare j as k minus 1 this will be the ending point of our first sub array and we need to start a loop for i where i is starting from 0 that is the first starting point of the for sub array and i will go till i will go till m n minus m plus 1 so basically this will be the last starting point of the last sub array right this is what we need to do after this what we have to do is we just need to find this local difference so this difference is actually a r j minus r i okay after that we need to compare compare this difference if this difference is smaller than our minimum difference if this is the case we will just update the minimum difference with this difference right now our j now our i will actually be moving through the loop but we need to increment our j in each case so we will just do j plus plus so at the end of this we will just see out our minimum difference value and we should be i think good to go okay so n is not declared in this scope okay so we are actually not so there is one bracket missing at the end so this should be fine k is not declared because we are using the variable m and it says n was not declared in the scope this is because we haven't put the ending point here so i think this should be fine now and you can see we are getting the value 2 that is the minimum difference so this is the case this is the code for this problem and this is the optimized one where we are just using of n login time for sorting of the array you can also put a condition that if if our m is greater than n that means the number of students is greater than the number of chocolates so in this case we can just see out that no answer found because we are not having all the packets for each student so there will be no sub area of size impossible so this is the this is the optimized solution problem for this one if you like this then do follow us to subscribers and thank you for this video that's all