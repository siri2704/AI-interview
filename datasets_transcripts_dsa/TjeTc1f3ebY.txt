what the hell is a link list and how is it different from a race and why is everyone so scared of it so let's say we have these two cupboards over here one is completely empty and other has some items inside of it and these cupboards over here signify our memory and these stack of clothes signify the elements that we're supposed to store inside of our memory so let's see we're supposed to store these inside of this empty cupboard so I'm going to put it every cloth above each other and okay we cannot store this anymore this cupboard is filled so okay this this one got left out because our memory is full right now and this signifies our array over here since our array we store all of our items in a linear fashion at one place inside of our memory but let's see this other cupboard also signifies our memory but this memory has some items already kept in different different places but we don't have a place where we can store all of these you know clothes simultaneously or in a linear fashion so what link list helps us to do is this we can keep one stack over here one stack over here let's say other stack over here and we can keep a tag on each of these Stags that okay next tag is kept over here and over here I've kept a tag that okay you can find another stag that is above your compartment that is right over here so this is what a link list is all about it helps us save a lot of space inside of our memory just like it did over here in our arrays we cannot do this we cannot store our elements in different different parts of the memory and Link them together but in our link list we can do this let's see a better visualization of a link list so this is what we use to denote our link list this structure right over here and as you can see our link list is made up of these small small items which we call node and each link list has a head node and has a tail node but what is this node anyway so in JavaScript we note a node by using a class which we call node or whatever you want to call it and inside of it we have a Constructor which has two things a data and the address to our next node in a node you can see we can store our data over here which can be anything like number string whatever that you want to keep over here and we have a next field which contains the reference to our next node so as I mentioned over here inside of our cupboard we kept a tag on each of each and every cloth right that where is the location of the other cloth that is exactly how link list Works in each of these nodes we have the location of the next node in our memory so that we can you know Traverse through this link list or we can go through each and every node in this link list also in a link list we can only move from left to right and we cannot move in a reverse manner because obviously a node doesn't know the size of a link list and how far it is supposed to go the only information a single node has is the reference to its next node node and a particular node doesn't know from where it came from so it doesn't have the reference to its previous node so we cannot move from right to left we can only move from left to right or from start to end inside of our link list and every single node in this link list has a head node and a tail node the so the first node is called a head node and last node is called a tail node and the very last node of our link list doesn't have any other node after it so that's why we are pointing it at nil let's better understand it by implementing in JavaScript let's understand how we can insert a new node how we can delete a node how we can get a size of a link list Etc but before moving forward I would like to mention my DSA sheet which I announced recently in my previous videos and I've received so many messages from you all telling me how many times you've encountered these questions in your DSA interviews therefore I would highly recommend you all to go and download this DSA sheet from the link description down below so that you can avoid hundreds of useless questions on lead code and do only those which actually matter for your interviews okay so let's see see so the first thing obviously that we are supposed to do is to create a node for our link list so as I showed you earlier I'm going to create a class called node and inside of it I'm going to have a Constructor which will take a item that we're supposed to store and it will store it inside of this do data equals data and obviously as I mentioned we're going to have another variable which is going to be next and next will point to the next node but in this case we don't have any node so by default it's going to be null all right cool so this is our node class which is being initialized with this data now let's go on and create our link list class so I'm just simply going to name it link list and this will also have a Constructor and I'm going to initialize with this do head by default are if you notice in our whiteboard we had a head right but in this case we don't have anything inside of our link list currently so this do head is going to be null for now when we're going to add something to it then this do head will point to the first node of our link list all right cool now let's write our first method that is adding to the very top of our link list or adding to the head so I'm going to name it add first so obviously it will take a data and let let's first see visually how this works so let's see we have this link list over here and we're going to insert something at the head so okay let's insert 93 on the head so I'm going to press go and you're going to see so we created a node called 93 and we're going to point it to our head and then we will assign the head variable to this because now it's at the very top so this is no longer the head this will be the head so yep that is what we're going to do over here I'm going to create a new node let's say const new node and this is how we basically create an instance of a class in JavaScript if you want me to create an in-depth video on class and Constructors in JavaScript let me know in the comments down below so if we have a class over here this is how we create a new instance of a class or new object of a class and we're going to initialize it with the data this data that we're supposed to add inside of our link list and then simply I'm going to say new node remember we had two things a node has a data and and it has a next variable so new node. next will point to the current link list head so whatever the head of our link list is that it was 22 in this case so I'm going to say this do head so now it's pointing to this variable over here but at the end we're supposed to make this our head so now I'm going to say this do head should have new node inside of it as simple as that and I don't know why people are so much scared of Link list it's so easy it's so straightforward you're going to understand as I move forward in this video I'm going to show you how you can insert at the very last insert in the middle remove from the middle remove from the last from the top every single method keep watching this video so okay let's go on now I'm going to create an add last method simply this will also take a data cool let's first go on and understand how it works visually so I'm going to go and start of insert and yeah after tail that is at the very last right okay I'm going to take this value and just press on go so simply what we did over here is we traversed through our link list we went to each node one by one and we kept going forward until we found a node which was pointing to null and then after that we pointed that node to the node that we're supposed to add at the very end so let's see the code so I'm going to create a new node obviously new node which with this uh data over here that we're supposed to add then first of all we're going to check if is there something inside of it link list or not so our head was by default n right so if there is nothing inside of this link list obviously we're going to just keep it at the very first element that that is at the very head of our link list right so I'm going to check if there's nothing inside of this head then I'm going to say this do head is equals to Simply this new node over here it's like that and I'm going to say return cool but if that's not the case I'm going to Traverse through our link list now so how do we do that I'm going to take a variable called current which will be by default this do head that is the first element of our link list this one and I'm going to run a y Loop until we reach a node which has next as null so I'm going to say current dot next over here that is if we have something inside of the next that is it's not null then we're going to keep going forward and I'm going to say current equals current dot next so what this will essentially do is every time we go insert this loop it's going to assign the next node inside of this current variable so first current is this then in second Loop current is this third Loop current is this and as soon as it encountered the next to be null it's going to break it and now the current is on this node over here so now simply we can say current. next equals this new node right so all right current. next is equals new node as simple as that now let's see how we can add something inside of our link list at a certain index so I'm going to create a new function over here called add at and this will take a data and an index so index is where we're supposed to add our data so okay first of all first thing first the index that is provided over here we need to check if this is valid or not so I'm going to check if I'm going to uh put a condition over here that if index is less than the size of our link list and it's more than zero so if it's between that only then we're going to do something if it's not then we're going to say invalid index so okay I'm going to say if index is less than zero if it's less than zero or index is more than the size of our link list that is this dot size but we don't know what this size function is right we we haven't created it yet so you know what let's create this first so I'm going to say size and inside of it we're going to do the same thing that we did over here so I'm going to copy it but this time every time we go through a single node we're going to count it so we don't need this one I'm going to take another variable let count equals z right let current is on this do head and while current. next has something we're going to do count Plus+ or we can so do current over here and at the end we're going to return the count as simple as that let's go back to our add at and now this is valid because we have have defined this size over here and inside with I'm going to throw the error if this is the case if it's less than zero or more than the size of our link list I'm going to say console. error to be invalid index and I'm going to return cool now what do we do after it let's uh understand it visually so let's say we have this link list and we're supposed to insert at the third position 21 okay let's go so we're traversing it one by one and okay over here we're supposed to insert our element right over here so what do we do first of all we're going to point our new node that we have created over here to this node over here and then we're going to point this node to our created node so you can see first we pointed it to this one and then we pointed the other node the previous node to this one over here I'm going to first of all create a new node obviously since we're going to add it so uh this is the line that we're going to use again so just like that and after it I'm going to say if index is equal to zero that is we're adding another Edge case check over here that if if it's zero then obviously it's going to be added inside of our head right so I'm going to say new node do head basically we're going to use this same code over here where is it this one this one I'm going to copy it and I'm going to paste it node. next this do head and this doad will be new node and I'm going to return but if that's not the case what's what are we going to do we're going to Traverse through this link list so I'm going to say let current equals this do head and it will keep the track of our current node and now I'm going to run a for Loop which will start from zero and it will go to index minus one inside of it I'm going to do current equals current do next just like we did over here but in this case simply what we are doing we're going to this index minus one that's it we're not supposed to go to the very end right we're supposed to go to this index when this index is found then we're going to add our element over here so okay at this point our current index is found so simply I'm going to say new node do next equals current do next so if you notice over here this was the current and we're supposed to point this new node to this and how do we know which node is this we're going to Simply say okay whatever the next node of this was I'm going to point to that one so at one point if you noticed both of these were pointing to the same node over here right so that is what we' done over here new node. next equals to current node. next but now we're supposed to point this current node do nextt to this one so I'm going to say current node. next to New node equals new node just like that that is all we needed to do to add a node in between of our link list okay now next let's see how we can remove an element from the top of the link list so I'm going to say remove top and inside of it simply first of all I'm going to check the case if there is no head so I'm going to say if this do head is null then I'm going to Simply return it no need to do anything but if there is a head I'm going to say this do head equals this dot head dot next so whatever I done over here let's see so let's see if we're supposed to remove this head over here simply what are we supposed to do we're supposed to take this head this head and we're supposed to point it to this one over here so that this one sees this to exist this will no longer exist right so this is how you remove something from the top of Link list let's see how you remove from the end of a link list so remove last it's actually going to be similar to this one over here add last so I'm going to copy this code and I'm going to show you how it's same to this one so we're not going to create a new node so I'm going to remove that we're going to check if this do head doesn't have anything then it's going to Simply say return and then we going to Traverse through our but over here we're not going to check current do next we're going to check current do nextt do next because we're supposed to stop at this position over here because we're supposed to remove this element from our link list right so we if we stop over here we can remove it by pointing this node over here to null so okay while current do next do next is the case then I'm going to do current. next and as soon as it reaches this element over here it will stop here and I'm going to Simply do current. next equals null as simple as that now let's go on and see remove at if we're supposed to remove at a specified index in our link list so remove at and obviously we're going to provide an index variable over here and again this will be very similar to this add at so I'm going to copy this code paste it over here we're not going to create a new nodee so I'm going to remove that so first of all I'm going to say if index is less than zero or more than the size obviously invalid index we cannot remove it but if index is zero that is if it's at the head of our link list then simply I'm going to say this do head equals this do head. next that is what we do to remove something from head right so yeah that is what I'm going to do over here and I'm going to Simply return it but if that is also not the case then I'm going to say let current equals this do head and I'm going to reach to that particular index by traversing through it so simply similar to that I'm going to do that and at the very end when we reached that index I'm going to remove this I'm going to say if current do next has something then current dot next equals current dot next dot next so what have I done over here so let's say if we're supposed to remove this one over here so if I reach this index I can simply ditch this one and point directly to 43 so this will then cease to exist so inside of our link list if we're supposed to remove this one I can just simply point my next to this over here then this will no longer be a part of our link list now so if this is how you remove an element from a specified index from a link list the very last function of our link list is printing the link list so I'm going to say print and simply to print the link list we're going to Traverse through the link list and print every single element so let current equals this do head and I'm going to say while current has something then do console log current do data and we're going to move the current to the next one after printing the current data so current equals current dot next cool and that is all that is how our link list looks like let's go on and try to run this so I'm going to create an instance of this link list class how you do that you do const link list or whatever that you want to name it equals New Link list okay let's go on and add some item to it I'm going to say linked list dot add first I'm going to add let's say five then I'm going to add three and eight let's print our link list and and see what do we get linklist do print and I'm going to go to my terminal and say node link list.js uh okay we got we got an error over here link list is not defined oh okay so this is spelling mistake okay now let's try to run this again yep you see we added 538 and it printed it accordingly eight was added the at the very last so eight should have been at the head so it was at the head let's try to add something at the very last so add last and I'm going to say six so this should have six after five now yep that is what it did let's try to get the size of our link list so after I've printed it I'm going to console log this linklist do size and yep we get four the size of our link list was four I'm going to say something like size equals so it's better to see yep after that let's try to remove something so I'm going to say link list dot remove top and this should remove um eight from our link list okay it removed the eight and now the size is three let's try to add something at some specified index add at and we're supposed to give some index let's say two and I'm going to add eight at two second index let's run this and yep you see we got eight added at the second index similarly we can remove something from the last so it should remove six now that's what it did we can remove something from a specified index let's remove eight from it that is from the second position eight should have been removed now yep it is removed so you see how easy it was to implement Ling list in JavaScript now let's go on and see some of the most frequently Asked interview question on link list in our DSA interviews okay so I opened my DSA book over here and if I scroll down to the content we can see we have link list over here and I'm going to click it so y we have all of the list of questions you can download this ebook by clicking the link in the description down below and you can access all of these questions over here as well so I'm going to click on this palindrome link list our first question and I'm going to open it in new tab so the question says that we've been given the head of a singly link list and we have to return true if it's a palindrome or false if it's not so first of all if you notice something in real world problems in real world DSA problems we not supposed to create our own link list every single time we are given a link list or more specifically the head of a link list the starting point of a link list and then we're supposed to solve the problem that is provided to us so in this case a link list is already made so you can see the description over here that this link list contain this do Val as which will contain the value of our link list and this do next which will contain the address to the next node of our link list so yep we've been provided the head over here and then we're supposed to work on it if and tell if it's a palindrome or not so we have been given this example over here this is our link list and if you read it from reverse as well it will be 1 22 1 but in this case this is 1 comma 2 but if you read it in reverse this will be 2 comma 1 which is not a palindrome link list so let's see how we can do that so inside of this is palindrome function I'm going to take two strings string one and string two both will be empty for now and then I'm going to take another variable called node and inside of it I'm going to store our head because this node will be used for traversing through our link list if you remember we used current variable in our vs code when I was explaining the link list in this case we can use node or current whatever that you like so what our approach is going to be over here so what I was thinking is we can Traverse through these items 1 by one and we can add it to this string so let's say if I'm taking uh for string one I'm I'm going to encounter one first so I'm going to add one then two then two then one but for the string two what I'll do when I'll encounter this one I'll add one over here then when I encounter this two then I'll add two before this one and then again two and then one so that in the end we will get a reverse link list over here then we can compare both of the strings and tell if it's a palindrome or not all right let's get started then I'm going to run a y Loop over here and this y Loop will run until node encounters a null value and S if I'm going to say node equals node do next just like we understood in the case of that current variable right so yeah this is what we will do and for each iteration as I mentioned what I'll do for string one I'm going to use back Tex over here and template string and so is I'm going to say string one whatever the previous value of this string one is and add the current value of the node so node dot well just like that same thing I'm going to do for string two as well but there's going to be just one difference so for string two I'm going to put it after this so this going to be string two yep that's it that is all we need to do and in the end we will get a reverse string over here this will keep adding the values before for the already added value now after that I'm going to return if string 1 is equals to string 2 that is the Boolean value if these are equal or not let's try to run this all right it's been accepted let's try to submit it amazing our question was accepted successfully let's move on to the next interview question so the next question is to reverse a link list now we already saw a way to reverse a link list but in this question I'm going to tell you another way of reversing a link list so let's open it in new tab we've been given the head of a singly link list again and we have to reverse the list and return the Reversed list all right so you can see the example over here this is our link list and we have to return it just like that in a reverse manner another example and if we have empty link list we just simply going to return the same thing okay so we have been given this function over here called reverse list and ahead as uper RAM and again for this head as well this will be this do value which will store our value and this dot next which will store the reference to the next node so first of all what I'm going to do let me just write out the code over here then I'm going to explain you what it exactly does so I'm going to take a variable priv which will be by default null and another variable called current which will be by default our head node because this is what we will use to Traverse through our link list okay I'm going to run a while loop until current is not equals to null so now first of all what we will do is we will create a next node variable which will contain our next node basically so current do next after that what we will do is we will say current do next equals to previous and then the value of previous will be equals to our current node and then current will be equals to the next node that I already over here okay so what have I done over here let's see I'm going to copy this code so first of all the value of next node will be current dot next so current was as you already know it was pointing to the head so we stored the value of next node basically we're taking the backup of whereever this current is pointing to right now inside of this next node variable so next node is over here so now we can easily manipulate the value of current so current do next will be equals to previous so obviously since we are supposed to reverse this this first head will now be pointing to null because the last node always points to null right so this will be pointing to null now so the next for this will be pointing to previous which was null right now previous will be equals to current so now we will Point previous to current which was this one and then we will move current to our next node since we had already taken the backup of our next node over here so we will point to this one over here right now in our next loop again same things will happen next node will be equals to current do next so now current do next is this one so okay we're going to move next Noe over here fine and then I will say current. next will be equals to previous so current do next that is this one will be equals to previous and previous was pointing to this one so now this will be pointing to the previous link list so I'm going to say it's pointing to this one over here then then previous will be equals to current so I'm going to move previous over here and then current will be equals to next node so since the loop moves forward so I'm going to move current to the next node again I'm going to repeat the same process next node will be equals to current. next okay current do next equals previous so this will be pointing to wherever previous was pointing that is over here then previous will be equals to current just like that then current we move to the next node then again same thing will happen this will move over here this will point to here this will move over here and then current will be equals to next node so did you notice something what just happened over here this is pointing to this the previous node previous one is pointing to this one this is pointing to this one and this at the last is pointing to null so we have successfully reversed our link list just like that and in the end we can simply return the previous because previous is pointing to this one and this will be considered as head now this last node over here so I'm going to say return previous and that's it that is all we need to do let's try to run this awesome it has run successfully let's try to submit this and our code was accepted awesome let's move to our next question okay for our next question I'm going to pick this delete a node in a link list because we have already done this one so this should be very easy there's a single link list head and we want to delete this node inside of it so we've been given the specific node that we have to delete inside of this link list but we will not be given access to the first node of the head so we've been directly been landed on that particular node that we supposed to delete so for example if this is our link list they have given the reference to this node let's say examp for example this node was to be deleted we've been given the reference to this node over here so let's see how we can delete that if you scroll down we can see yep so if this was a link list we've been given access to this node and we have to make sure the link list looks something like this after our job is done here you can see an example as well so okay this is going to be pretty easy what we can simply do is so let's say if this was the node we can say node do value will be node do next do value so what simply we have done is for this we have assigned the value of the next node that is one over here so now this will become one as well so if you take an example here 4 5 1 9 so we've changed the value of 5 to 1 okay just like that and in our next line what we will do node do next to node do next do next so now we want this node to be pointing on next do next that is this node will pointed to 9 so instead of this node this will be directly pointing to 9 which will result in this node being removed from the link list just like that and Yep this is how you delete a node from a link list it was that easy let's TR to run this oh sorry this should be Val not value yeah let's run this again okay let's submit it great this one was accepted as well awesome now I have a side question over here so so what if you are asked to clear a link list so let's say I have a link list over here and we're supposed to clear the link list the complete link list what you can do over here so what you can simply do is you can point the head node to n directly to n or maybe I can create a nil over here just like this that is all you need to do and code for this can simply be you will provided the head right so this Dot head equals to n that's all that's all you can do so just a heads up question that I wanted to mention so the next question is to remove anyth node from the end of list okay let's open this now this one is a little bit tricky question so let's try to understand it properly so until now what we have seen is we wanted to remove the nth node or ith node whatever from the start of the link list but in this case you have to remove it from the end of the link list and as I already mentioned before you cannot not move from right to left in a linkl you always have to move from left to right because every node has the address to the next node and not the previous node so how will you know that what is the nth node from the end so let's say for example our n is equal to 2 and our fast pointer and our slow pointer are both on this first node so what I'll do is simply if n is equal to 2 I'm going to Traverse my fast pointer till the second node so 1 2 okay so now slow is on the first node and this is on the nth node so now we will Traverse both of these nodes until fast reaches the very end of our list so in this case we just have to Traverse once and yep we reached at the very end of our list for this fast node so now simply if you notice now the slow is at one step behind the our Target node because that is what we wanted right the nth node from the end of our link list so the nth node is this and this is one step behind so what we can do is we can say slow do next do next point to that one simple and this node will now cease to exist so yeah that is what we have to do let's try do this I'm going to initialize two nodes let's slow equals head let fast equals head then as I mentioned I'm going to Traverse fast to the nth position in our link list so for i = 0 0 I less than n and I ++ first equals first dot next now at this point of time the fast is at the nth position in our link list after this Loop is done obviously so but first we have to check a few edge cases so if if there's nothing inside of the fast if fast has already reached null so that means it is at the very end of our list so I'm going to Simply return head dot next we will remove the first node because if n is equals to let's say for example for this list it's five it has length five right if n was five so that means all we have to do is remove the head so then we can simply return head do next that is this node over here and we will get this list as our output but if that is not the case then as I mention we will move both of these node simultaneously until fast reaches the very end so while fast. next has something or you can say that until fast next is not equals to null do this fast equals fast do next and same for slow as well slow equals slow. next now at this point of time we are at this position now simply as I mentioned what we have to do we have to do slow. nextt equals slow. next. next so this will be point to this one so slow dot next equals slow do next do next that's it and we can return oure let's how to run this awesome let's submit it amazing so you see how easy link list questions are in our DSA interviews you just have to put in a little bit of logic and it's very straightforward to do questions like these let's move on to our next question and our last question which is adding two numbers okay so the question says that we've been given two non-empty link lists representing two non- negative integers okay so let's take for example this one we have 2 4 3 and we have 5 6 4 so these are the two link list that we've been given and we have to add both of these link lists so add the two numbers and return the sum as the linked list you may assume that the two numbers do not contain any leading zero except the number zero itself we have to start adding from here because if you see they mentioned the digits are stored in reverse order and each of their nodes contain a single digit so we have to reverse this link list so we have to assume that this is 342 + 465 and then we are supposed to give the answer so if this was the case let's see 5 + 2 7 okay 6 + 4 10 and you cannot write 10 over here right because one is going to be a carry so it one is going to be carry forward over here here 4 5 6 7 8 so then we will get 8 so the sum of both of these will be 7 0 8 so this a little bit tricky this scary part actually is going to be a little bit tricky so let's see how we can do this so first thing first what we need to do is obviously we need to create a new node for this new link list that we're going to be creating so as you can see over here we they have given us the blueprint for creating a node so our node is going to be called list node I'm going to say where dummy equals new list node and this will have zero by default and then I'm going to have a current variable so let's just say current equals dummy so dummy over here is going to be the head of our newly created link list so I'm going to store dummy inside of our current variable okay and I'm going to have another variable where carry which is going to be by default zero it's going to contain if there's any carry values for example over here 6 + 4 was 10 and 1 was the carry value this will contain that so let's see how we're going to use these so first of all simply I'm going to run a while loop so while this while loop will run until this L1 has something or this L2 has something so L1 link list L1 is not equals to null or L2 is not equals to null or carry is more than zero until that point this will run okay so let's start by extracting these values one by one so I'm going to say where value 1 equals if L1 has something then I'll take L1 dot value else I'm going to take zero because there could be a possibility that these are not of the same length right so let's say if uh at this point of time it was just five and six and this was 2 4 3 and there was no four over here so to replace this four or to replace this node I'm going to take zero so okay if we don't have anything inside of it we will take zero else we will take Li do value so we've taken two over here same for our second list as well so value two L2 l2. value so you can assume that this is two now and this is five right now now after this simply we're going to add them so where sum equals value 1+ value 2 plus if we have any carry with us right now we don't have any carry but you're going to see that how we're going to have this carry later on so okay let's suppose that this sum gave us some value which if was bigger than 10 or biger bigger than 9 basically so let's say if this was 7 + 7 so 7 + 7 will be 14 but we don't want 14 right we only want four and we want one as a carry so instead of carry I'm going to say math. floor sum IDE by 10 this will extract one from that 14 but we want four as well right so I'm going to say sum at this point should be sum modulus of 10 so what this essentially is doing is if we have 14 so mod 14 mod 10 will be 4 and over here 14 / 10 is 1 so we are extracting the carry over here and we're extracting here the value for our sum after this simply we if you remember we created a node over here current I'm going to Simply add it inside of our this newly formed link list so current do next equals new list node and I'm going to add this some over here and we have created successfully a node over here now I'm going to say current equals current do next I'm going to move on to the next value now that is all we needed to do now in the end we will need to Traverse our link list right so I'm going to say if there's something inside of our L1 or L2 so I'll say if L1 has something then just do L1 equal L1 do next same for L2 as well after all of this is done we will get our sum inside of our dummy link list so I'm going to say dummy do next I'm I'm doing do next because we don't want the first node right because first node was Zero we don't want the zero we just created it for the sake of creating a node over here so I'm returning dummy. next so let's see what's happen happening over here is in first iteration we will do 2 + 5 7 okay we got seven inside of our L our newly created link list so our newly created link list so this will be seven all right now in our next iteration if carry is still zero so no worries again we're going to do 6 + 4 but in this case we will get 10 over here so in carry we will get one and In Sum we will get zero so fine again we're going to create a new node over here with zero so 7 will point to zero and our carry right now has one inside of it okay again we're going to do the same thing and this time we have three and four so 3 + 4 but we have carry value as well 1 so I'm going to add that as well so it will be eight so now we get eight over here we don't need anything here and we get eight here so now a new node will be created with eight just like that we have created our dummy list and we don't have anything inside of our link list now after this so this will not go inside of our while loop and it will break it and now we can simply return dummy. nextt and we will get our answer so let's see I'm going to run this all right let's submit it awesome our solution was successfully accepted and that's it that is it for this video If you like this video give this video a huge fat thumbs up and don't forget to go and check out my DSA sheet if you haven't downloaded it yet it's the best resource for dsav JavaScript with all of these questions on all of these topics you won't regret downloading this ebook trust me because it will save you a lot of times that you will spend on going through useless lead code questions