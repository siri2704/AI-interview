hi friends good evening so in the last videos we have started data structures and algorithms with python a new batch it is the fourth batch and the timings of this session is from 7 pm to 8 pm and the duration of the course is 45 classes we are going to spend 45 hours to complete this course and the fees for this batch is 1500 where you are going to get the live classes recorded videos recording videos and then running posts and these running nodes is Lifetime validity but these are recorded videos you are going to get up to six months next and after that if you are willing to continue just you can contact it to these numbers so that our team is going to assist so what a syllabus we are going to cover I explained very clearly and yesterday we have seen a sample Python program a sample Python program so to print the message called something like hello and even we have written a program to print to print hello how many times 10 times 10 times like I I try to explain the concept of range function next and after that even we had a very clear discussion about so factorial of the given number in in how many ways we can calculate this total three ways are there one is by using Loop another one is by using recursion so under a predefined a predefined method is there by using this we implemented this particular program and even I explained n Queens n Queens algorithm and even I showed you how we can able to execute the TN currency program of course uh just not in detail about the program just at the top level what is that a program and how you can able to get the solution for that problem at the top level I explained in the last session right so this is nothing but what we cover so some students are asking sir where we can get these recordings see whatever classes I have taken these videos are uploaded in our YouTube channel you can get the videos from our YouTube channel if you want you can see so just a second I will show you if you take a playlist so here you can able to see data structures and algorithms with python so I think this is the third session two sessions got completed those two sessions videos are available in this link just for your reference purpose I am sharing this link here and even I will I will paste this link in the chat a bit the people who wants to refer you can refer so these are the things which we covered in the last videos now I want to implement a program okay I want to implement a program to check whether to check whether the given number is even number or odd number I want to check whether the given number is even number or odd number I want to implement a program to meet these requirements so first we will we will take a Python program in test folder already Python program is there so I want to implement a program to test whether the given number is even or ordered we know very well how you can check whether the given number is even number or odd number very simple sir part of the term we have to divide the number with the two okay you have to divide a number with two suppose if you take number is equal to 5. and if you divide that number with five percentage division we have to take what is the reminder that you are going to get one one so it is a not even number it is nothing but odd number like this we can take the decision okay now if n is equal to 6 what will happen if you divide a six percentage with the two what is the remainder that we are going to get is zero zero means what it is the even number like that we can check whether the given number is even number or odd number by using this normal normal logic I think you know very well about this project now I am writing def so f u n one first function it is taking a number and if that number percentage 2 is equal to 0 then I am going to return the message saying even sir otherwise I am going to return the message saying a simple program what this function is taking this function is taking one number and it will check whether it is divisible by 2 or not if it is divisible by 2 then we can say it is the even number it will return even number even as a message suppose if the number is not divisible by 2 then it will return the message saying r like this we have so this is the first approach I am going to take a for Loop which will generate the numbers from 0 to 10. so I am printing the number followed by function 1 I will pass that number it will check whether the given number is even number or odd number so this function will return either even or other so that we can able to see what output we are going to get let us open this so here just I am going to enter into test folder why because the programs are saved in this test folder how to run python file already we know you can see the number 0 is it even number yes the number one is it even number so it is odd number number two is it even number yes number three it is our number number four it is even number number five it is odd number number six it is even number number seven odd number like that up to ten we are getting the perfect option but now I want to write another logic which will check whether the given number is even number or odd number I will introduce that logic for you people so that you can get some idea can you please confirm everyone is the logic whatever I explained is it clear for you people yes is this logic is clear for everyone right now I will take the second logic what is the second logic is by using bitwise operators also we can Implement sir okay by using bitwise operators also we can implement sir I want to take one bitwise operators and we need to see how it is going to work just to have it just to have electrons see if you take a number called zero what is its binary equivalent in the four bit form I want to represent which will become zero zero zero zero I want to take one what is its binary representation zero zero zero one I want to take a 2 what is its binary representation zero zero one zero I want to take a 3 what is its binary representation 0 1 0 0 uh eight four to one like this if I want to represent for its binary qualities eight four to one if I want to represent 5 its binary quality is 84 to 1 like this if I want to represent a six it is nothing but eight four two one like this so these are nothing but decimal numbers under corresponding binary equivalent values decimal numbers and corresponding binary equivalent values I have given now my question is by seeing this binary number how you can able to differentiate which number is even number and which number is odd number by seeing the last digit can we take a decision yes if the last digit is zero if the last digit is a zero we can say that number is nothing but not even number if the last digit is 1 we can say that number is nothing but not odd number okay sir can I can I get a conclusion like this please confirm by seeing the last digits everyone please give confirmation is it is it clear please see the last digit based on that can we take a decision or not yes yes sir right keeping that in our mind just I want to implement one small concept whenever we have a number try to perform under operation between is under operation with answer numerical value one because what is the binary equivalent of one it is zero zero zero zero one last bit is always see forget about the remaining numbers whatever we have automatically your result will become 0 only because uh what is the definition of under operator if any one bit is zero your result will become zero now here I am getting 0 here I am getting 0 here I am getting 0 but this bit is one right see if you are having one here then only we will get one so if you are having one here means what is it order number or yes if it is having zero here definitely it will become zero so when you are doing n Ampersand one if your result is equal to zero can I say is it even number yes if your result is one can I say is it odd number yes I request everyone to please confirm is this logic whatever I have written is it a clear for you yes sir yes sir clear yes yes sorry clear so now we have to write a code for this let us see how it will let us see how we can implement this particular logic see here uh for your understanding purpose I will take one example example number one let us take any number for example I will take five so what is a binary equivalent of a 0 1 0 1 right I am going to perform under operation with one so what will be your result so 0 0 and here we are going to get 1 since 1 it is not equal to 0 right so then immediately it is nothing but not odd number and if you take second example example number two if you are taking the number as a 6 what is its equal enter so 0 1 1 0 right and if you perform under operation with one what will happen the total result will become 0 it is 0 right then it is nothing but even number this is the another logic another logic what we have so now gesture for your understanding purpose I am saving this image file now we will see the executable code for this how it will be now what I am doing we know the function right so we are going to take if the value of N I am percent one since it is a bit wise operator it is having some priority that's why we have to take Within brackets if n percentage 1 is equal to 0 then what is the meaning sir it is nothing but even number we have to return even otherwise what we have to do we have to return R this is nothing but the concept now we have to call this one right function to bypassing I let me check whether for these two we are getting the same result or not now you can see so first one even second one odd third second one even odd even or like it is working perfectly this is the way how we can check how you can calculate whether the given number is even number or odd number by using this simple logic okay hope you understood it sir do you have any doubts up to this whatever I covered please confirm operator right sir then what is the end operator system and is logical logical and operator okay that is used to check multiple conditions but this one is going to work with binary numbers binary number okay sir everyone got clarity about this please confirm yes sir yes sir when the essay concept will start from Monday sir just I am explaining the random topics okay from Monday we will start our actual content okay right now I want to demonstrate one data structure related terminology okay so what is that is see just for demo purpose I am taking this one just to try to understand see what is mean by linked list what is mean by linked list it is nothing but a collection it is nothing but a collection of notes collection of Concepts so then you may have a question of node what is mean by node so node is abstracted data type which contains which contains the following fields which contains the following Fields what is the first field data what is the next field next what is the next field previous like that it may have three Fields three fields so there are two types of nodes are there one is a single node where data will be there next pointer will be there and there is a double nodes also there double node means we have previous field will be there data will be there next will will be there if you want to understand it technically just I will draw some diagram so that you can get a Clarity sir this node is called as single single node where two Fields will be there this first field is having the content called the data and the second field is having the content called The Next Step which is pointing to the next model which is pointing to the next node whereas coming to double node it is having two Fields like this three Fields like this where in the middle we are going to hold the data under connection will be there to the next field that is nothing but a next node and this one is nothing but not a previous node which is having a connection with the previous see when we are representing a Linker list like this we will take it is nothing but a collection of collection of notes or something like that so if you take single Linker list it will be there like this where first node is pointing to the second node second node is pointing to the third node third node is pointing to the fourth node like that what is the fourth node pointing to none empty there is no node connected to the fourth node and this data field can contain some elements like this we will see in detail about this letter and there is one special node will be there which is nothing but a head ahead which is always pointing at the first node this is called as single linked list in our technical terminology this is called as what a single linked list like that we can represent a double linked list also double linked list means what we have to take the nodes which are having two pointers sorry three pointers where one pointer is to hold a previous field one pointer is equal to data and another pointer is next field assume the data is at 10 so 20 30. please understand this terminology what is a next in order to 10 20 what is the previous note to 10 2010 what is an external to twenty Thirty what is the previous note to 30 20 what is the next node to 30 none there is no node what is the previous node to 10 no like this we can represent so here also the first node is always called as what a head node head node like this it will be there see based on these directions we have single linked list is there which is called as SLL under double linked list is there which is called as a dll sometimes if you connect the last node with the first node then it is called as a circular single link list which is called as a c s e l l and we have circular double linked list is also there which is called as a CDL okay like this we have different types of linked lists are there I request everyone to please confirm is the concept is clear just at a top level please try to understand anyway in depth we will see in the linked list at the top level is the concept is a clear Prince yes sir clear sir but what is the means of the abstract data types why it comes under the abstract data types you told that no DJ abstract data types uh if you take integer value is going to hold only one value right yes sir suppose if you take a floating point it is going to hold one well if you take a list it is going to hold different types of objects right yes sir suppose in that list can I take all student objects yes sir so how you can say student is a predefined object or user defined object tell me user Defensor that means Martin in the real time we are going to write a student and all related content we will put here am I right yes sir the student is called as ADT abstracted data type when you are defining a data type by yourself then it is called as ADT which is going to have two Fields one is nothing but a something like a data field another one is nothing but next field which is finding to the same same node got the concept yes like this we will have okay yeah yes I need response from everyone please confirm is the concept is clear up to this whatever I covered yes yes clear sir right uh sir I have zero idea about this what are nodes what is its user just to see diagrammatically are you getting these diagrams uh PSI just it is a Layman terminology nothing I have defined anything uh you understood what I explained right that is more than sufficient so later we will see see it is something like for 45 hours movie it is just like a teaser or trailer okay so there will be a big fighting will be there between hero and hero if you want to see what happened between hero and heroine you have to watch the movie okay so then only you can get the concept just I am giving a trailer cut that's all so you have to get interest towards uh class okay I will explain the usage all these things got the points I write maybe now I am going to demonstrate one more small uh implementation of this link list at least your confidence level on linked list will be increased to at least 10 percent if it is increased to ten percent then make sure that you are going to learn this very clearly no doubt at all okay right so I am going to explain one small concept like inserting inserting a node inserting a node or inserting the data at a single Linker list okay so inserting a node at a beginning beginning okay beginning of linked list okay if I have a linked list I want to insert a node at the beginning sir I told very clearly there is one special pointer will be there with name head do we have any linked list at the beginning no that means it is always pointing to none because we don't have any node it is always pointing to the none sir am I right whatever concept I told is it clear if there is no node it is always pointing to the null yeah something like none null is called as none here in Python now what I am going to do is I will create a new node I will create a new node and this is single linked list that's why it is having two pointers let us consider this node name as nothing but a new new node so data is a 10 next field is another now since the head is none can I consider this head is now onwards pointing to this new node that's all now this uh none will be want to be there this is nothing but how you can able to add a node at the very beginning whatever I explained just I am going to write in the form of theory just to have a look so new node is equal to I am creating a new node with the data tab so a new node will be created after that what I am checking I am checking whether your head is equal to none that means if there is no view node can I say that a new node will become head node or not yes that new node will become head on then stop that's on then written that's all sir otherwise otherwise means what already I have something now consider I have this list is there I want to perform which operation again I need to insert one more node but the topic is what insert at a beginning so I am going to create one more node consider this is nothing but my node it's a content is nothing but a 20 and the next field is nothing but none and this name is nothing but what you know automatically whenever you are giving a name for these this name will be erased now what is our main motto we have to add this node at the beginning of the legal list if you want to add this node first we have to establish the connection between these two nodes that means this link we have to create sir how to create this link can I take like this can I take like this so your newly created node is there right its next field is pointing to header okay that means what this is my name so what I am going to take here is so this newly created node I am making pointer okay so this newly created node I am going to make a link like this that's all after this what we have to do we have to change this head pointer right because now onwards this is not a head this is nothing but the header and the new node will become so this is the way how we can add a new node into the beginning now how you can identify this chain because we have a pointer at a first node we can get an extra pointer also so new node dot next is equal to head after that what we have to do head is equal to new naught now sir one more node I am going to add just to please have a look once see now I am creating one unit sir is the nodes are already available or not yes so whatever node that you are creating where it will be added at very beginning right so immediately consider the data is nothing but something like a 99 and it's a next field is none and the name of this node is nothing but what new node something like this we have now my python is going to check sir is head is equal to none this condition not satisfied okay because the head is pointing to some node then what will happen it will come to else path in the else part two instructions are there what is the two instructions new node is there right its next field is equal to none its next field is equal to header okay so automatically what will happen that ahead we are going to link so just for your understanding I am writing like this notes can be anywhere in the memory okay so now what will happen there will be a link between these two so after this what we have to do because this one will become first node right that's why I am taking head is equal to New Order already head is pointing to somewhere else so we have to bring this pointer here that's all so with this a link I got a Creator like this you can perform any number of insertions so can I say is it going to take Big O of one only one unit right we don't have any Loop simply create the node and check whether list is empty or not if list is empty the node which you created will become in you know otherwise what will happen you have to consider the new node which is created is nothing but the first node make next field as a head and again make it as a hit sorry is this a simple operation is it clear for you people friends at least somewhat idea you got Sai please confirm is it clear yes sir but uh so how the head will pointing to another you know sorry then function is there or see uh you are coming from python background right see if I am taking X is equal to 10 after this if I am taking Y is equal to X then what is the meaning already some object is there with content X now same are referred by y also right yeah yeah are you seeing here okay it's condition are you seeing here yeah like that we are thinking okay yes everyone please confirm are you clear with this whatever I told yes sir so really is it the correct code do you want to see the code of this particular python uh it's a compression yes sir so that you can cross check really my explanation is a correct term let us let us move on um this uh circular not circular single lingle list that a PDF is there with me I think so just I will open you so that you can get clarity I'm clearing all the images yes have a look once yeah have you observed insert at a first location this is the code what I have taken first we are giving head and then data temp is equal to we are creating a new node then Tempo dot next is equal to head I told right Tempo dot next is equal to head and written that attempt that's all simple so temp is equal to new node Tempo dot next is equal to head we are going to return that so now if you print that head this is the original list after that if you are inserting at the first triple line have you object that triple 9 came at the first order yes this is the way how you can but don't worry you people are going to get in detail about these in our upcoming classes I will show you okay because you can see so the total with the diagram explanation I am going to give the complete information sir don't worry at all okay so this is nothing but just a sample example what we have here any doubts friends clear up to this yes sir yes right so the next one the next Point what I am going to discuss here is see I will I will Implement a program okay I will I will Implement a program okay uh to find out okay I will implement it some doubts are there second uh nothing uh as of now leave it because just you have to see at a top level why because it is not the linked list Concept in our future classes we are going to start from the beginning because it is a demo right directly I can't go for the syllabus okay so we are going to see in depth about the link list there you will get it so you have to identify how this code is understandable by you at a top level you have to see because without understanding the internal things you can't get these things okay so don't worry just you have to see at the top level okay right so next I want to write a simple program okay to generate Fibonacci Fibonacci numbers Fibonacci numbers sorry you know write a Fibonacci Sequence just I want to implement this equipment sequence in how many ways we can implement this Fibonacci sequence means the first one by using Loops we can Implement second one by using a recursion we can Implement do you know for this we can apply dynamic programming sir dynamic programming that is nothing but a DP so just maybe introduction path alone I will give you so how this dynamic programming is applicable for this Fibonacci Sequence so please listen here sequence I think you know right Fibonacci sequence means what the first digit is a zero next digit is one next digit we can get by adding these two zero plus one one one plus one two two plus one three like every number is sum of it's a previous two numbers every number is water some of its previous two numbers like this we are going to get this is nothing but water Fibonacci sequence see I want to implement a program to generate the system how to do that very simple I am going to define a function I am going to define a function where I will give the value of n suppose if I am calling so print of a function of 5 it has to generate five Fibonacci numbers how to generate we have to run a loop for five times five times we are going to run it but if I want to generate human Okay sequence I am taking one empty list and the first value or term one first term or let me take a a is equal to minus 1. B is equal to I am taking plus one then what I am doing is I will calculate the value of C what is the formula a plus so this is the first number try to append this number a to the list try to append that number into the list then I am taking a is equal to B P is equal to a something like this At Last I will return the list technically I will explain how it is going to work but don't worry sir again we will disc we will discuss all these things in depth see I have a list is there with empty then what is the initial value of here we have taken minus 1 what is the initial value of B we have taken plus one now when I is equal to when when I is equal to 0 it will start we are calculating C what is the c value a plus b a value is minus 1 B value is a plus one if you add these two we are going to attitude that the zero we are appending to the list okay then a is equal to B we are copying the value of a b into a and we are copying the value of C into B then you can see a is equal to b z then again Loop will run for I is equal to 1. again what we are doing C value 0 plus 1 1 that 1 will be added here next this a will become 0 and B will become 1 when I is equal to 2 again we are adding this 0 plus 1 will become 1 which is that one then when I is equal to 3 what we are doing this one will come here this one will come here one plus one two and update this so next what will happen this one will come here these two will come here and it will become 3 when I is equal to 4 then these two will go here this 3 will go here and it is nothing but a 5 when I is equal to 5. sir that's all right then I is equal to 6 automatically the loop is going to fail easy Tower Fibonacci Sequence or not yes definitely let me cross checks are by by executing the code you will get a clarity sir here line number nine sir b equal to a you have written but you are saying b equal to C yes right now we will run the code under let us cross check sir is the correct output is coming 0 1 1 2 3. one two three if you want to get one more value only five values it is coming if you want to get one more value you have to give six or if you give 10 what will happen so e say sorry here we have given five only okay no problem let us give 10 but in this example don't take up to five you have to take up n because we are giving the value of n rate that's why I enter it some error is there second now I am running the code so easy to clear we got all these numbers this is the way how to generate Fibonacci sequence everyone please confirm how this Fibonacci Sequence got generated is it clear for you people yes sir yes sir right now I want to demonstrate so what is recursion how you can solve this problem by using recursion next and after that why dynamic programming is required at the top level I will explain please listen carefully see if you take a Fibonacci offer if you take Fibonacci off something like a five or something like 4 sir can I say it is a sum of previous two numbers that means if I want to calculate a Fibonacci Alpha 4 we need to calculate a Fibonacci of three then we need to calculate a Fibonacci of 4 minus 1 is 3 4 minus 2 is nothing but a 2. then to calculate Fibonacci of three again we have to calculate a Fibonacci of 2 and the place of Fibonacci of one to calculate Fibonacci of 2 we have to calculate Fibonacci of one plus a Fibonacci of zero again to calculate Fibonacci of two we have to calculate fibono K of one okay of zero see what I am trying to say is until okay until getting until getting 0 and 1 you have to trace out like this here sorry 1 0 1 0 1 up to this okay now how many method calls number of method calls how many methods calls sorry easy to one two three so four five six seven eight nine nine method calls we have taken to execute or to calculate the Fibonacci number so am I right is this diagram is clear is it clear sir if we take an input of a large number like um then maybe stack it over to ah I'm asking that sir uh if I will take a large number like 1000 or 2000 of Fibonacci Sequence then uh will the extract will be overflow or like uh whenever I'm trying this program then I'm getting the I'm getting an output that strike is written out means after bound that is the 995 is the last stack call yes yes you got the problem right so that's why we can solve this problem by using dynamic programming is there right again we are calling yeah got it F of 1 is there again we are trying to call so F of 0 is there again we are trying to call so that what I am trying is I will write a program like this Factory sorry Fibonacci Alpha 4. it will call for Fibonacci of a three under fibonaccia and anyway first this one only will be expected right okay of one under this Fibonacci of two will be calculated 1 and then 0. that's all whenever it is asking one already in memory F of 1 is calculated I will return that value I want to expand whenever it is asking F of 2 this value is already calculated I won't write up now one two three four five six seven almost two calls we did use if you take factorial Fibonacci Alpha 5 may be minimum some five to six calls we can able to eliminate so number of calls we are going to reduce by using which concept dynamic programming and you can solve this in two ways one is nothing but by taking the array and another one is nothing but a memoization anyway we will discuss that in detail sir at the top level you got the point right please confirm everyone yes sir yes sir so what is recursion what a problem we are getting in the recursion I think you people got Clarity okay there but in DP how we can solve sir but by I didn't get that point sir very simple whenever we are calculating some value we will store in a backup we will store that data in the memory okay okay next time if you are trying to calculate the same value I will check whether that calc I mean uh whether that particular result already calculated if it is already calculated we will return that solution if it is not calculated we will calculate it got it yes it got it we will Implement with the help of algorithm so that you can get clarity yes it okay yes sir right with this I am going to stop today's a session so next class will be on Monday sir and those who are willing to join just you can make the payment and continue from Monday Monday onwards I will start the first unit theoretical part onwards it will be started the link will be the link would be changed or the same link I will join because I already joined demo yes yes this is the only demo link sir Monday after our team are going to send emails regarding you those who join the course yes yes only for them they will share okay server Monday afternoon so for all the students those who have registered at a time they will share the link okay okay sir I have one question okay so we know you continue then I joined a little bit late uh this meeting with this class so will you be able means whatever you are teaching the link list about the link list will you be means re-teach that in a linked list class yes whatever I explained till there today I mean three demos right in these three whatever I explained again I will start from the beginning just started at the uh but internally we have to see each and everything here you can see recursion I explained just at a top level but we have to see in depth what is happening one for what kind of problems you can choose recursion that in depth we will see and even if you see young Queens just to attract you people just I have taken the code and I explained visualization wise and I have explained that particular uh even program also you have seen but that a program step by step we will write once if you understand that backtracking okay those things will be covered in depth except don't worry starting from the first unit everything I will demonstrate okay thank you sir right sir I have one question sir actually I don't have the basic knowledge of the Python sir means I don't know the syntax logic I know how can I write the concept of everything but I don't have the basic syntax of the I don't I don't know about the python sir so can I proceed for it sir or Whatsapp your choice but uh I will give two suggestions the first suggestion is so my python batch is going to start in the morning time if you want you can go okay so python 7 AM 7 AM class is there so it the links will be there in our website just to visit and you can join this is one option second option no problem without that also if you want you can continue are you able to follow these programs whatever I am trying to explain yes sir then no issues okay okay it will be like this but if you are having python knowledge it will be good sir otherwise sometimes you are confusing with the concepts as well as syntaxes see as a syntax only uh I I little bit uh not clear about the syntax logic I have clears here what you have to teach it right now okay we will take the concept then we will Implement in the program so we have to concentrate only on The Logical market so if we want to concentrate on the logical part you should be perfect in the programming so that's what we are expecting but you can take the decision sir that is up to you okay can otherwise better to go with python and then you can continue parallely no issues okay got it yeah one second one second so whatever classes I explained today that link will be I mean that particular video will be uploaded in the YouTube you can check it same link Sai Kumar okay yes sir someone is asking so how do we practice on that topic um so as of now here you won't get the programs that matches up okay so you are going to get the concept concept and how that concept is going to work we will see the implementation perfect but if you want you I think your question is to improve coding skills right yes or that we have another program we will discuss about that later so logic based programming like we have one one course is there we will discuss about the letter about this okay the videos will be uploaded once if the class got completed maximum by night you are going to get the videos okay running notes will be uploaded uh from Monday or from Monday you will get the notes also Focus yeah Monday we are going to give all the access like notes if everything you are going to get right thank you sir thank you