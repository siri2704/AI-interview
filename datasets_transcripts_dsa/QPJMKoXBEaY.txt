selection sort is a simple and efficient sorting algorithm that works by repeatedly selecting the smallest or the largest element from the unsorted portion of the list and moving it to the sorted portion of the list what do I mean by we have an array of five elements 64 25 12 22 and 11. now we apply selection sort to sort the array the whole array is traversed from 0 to n minus 1. on the first traversal the element at index 0 is selected then we check if there is an element in the array which is smaller than all the elements in the array in this case we have 11. replace the element at index 0 that is 64 with 11. now 11 is sorted in the second iteration we select the next element that is 25. again we check if there is an element smaller than rest of the elements yes we have 12. you might ask 11 is smaller than 12 but 11 is already sorted so you do not have to include it swap 25 with 12. now 11 and 12 are sorted now at the third iteration we select the next element which is 25 again we check the smallest element in this case we find 22 so swap 25 and 22 now 11 12 22 are sorted at the fourth iteration we select the element at index 3 that is 25 now we check the smallest element here there are no smallest element than 25 so no swapping takes place the sorted elements are 11 12 22 and 25 at the last iteration we do not need to check any conditions as we already know that it is the last and the largest element in the array hence the array is sorted now let's look at the code for this algorithm we have a basic structure of a C file we have included the header file we have a print array function which just prints the array in the main function we have declared an array to work with we have a variable n which contains the size of the array at first we call the print array function which prints the array before sorting then we call the selection sort function which sorts the elements of the array using the selection sort then we again call the print array function to print the array which has been sorted now we Implement a swap function which just swaps the variables X and Y given to it using a temp variable then we implement the selection sort function which takes arguments array and size of the array in the function we create a for Loop which runs from 0 to n minus 1 that is n minus 2 in the for Loop we have a variable called minimum index which contains the current ith element below the variable we Implement another for Loop which runs from I plus 1 to n in the for Loop we check whether the current element or the jth element is less than the minimum element if s then we update the minimum index element with the current element or the jth element then after the for Loop we check whether the minimum index is not the current ith element if it is not the current ith element then we swap the minimum index with the ith element hence the array would be sorted now let's look at the output here you can see first the array was not sorted then after running the selection sort the array is sorted the source code is in the description so do check it out the time complexity of this algorithm is Big O of n Square as there are two nested loops the advantages of selection sort is that it is simple and easy to understand it works well with small data set contrarily selection sort has time complexity of bigo of n Square in worst case and average case it does not work well on large data set and it does not preserve the relative order of item that is it is not stable to know whether you have mastered selection sort try to sort the array in descending order that is from highest number to lowest if you were successful then congratulations you have mastered selection sort if you fail do not worry re-watch the video and understand the logic behind the algorithm rather than focusing on code eventually you will succeed and become a master of selection sort finally congratulations and signing out foreign