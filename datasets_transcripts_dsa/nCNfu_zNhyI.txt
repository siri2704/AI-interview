we will be discussing a very popular must short algorithm in this video as usual we'll go through some theory first then we'll implement more short in python and in the end we will have an interesting exercise for you to practice on let's say you have two sorted arrays like this and you want to merge them into one single sorted array now you will be like why are we talking about two sorted areas the whole goal of sorting algorithm is to take unsorted array and create a sorted array out of it right well hold on your thought we'll get to that later for now just think you have two sorted array you want to create one single sorted array out of it how can you do that just pause this video and think about it it's actually quite simple so you start with the first element in each of this array you compare them the smaller one is 4 so you put that smaller element into your sorted array then you keep the pointer at 7 as is and in the second array which is on the right hand side you have moved your pointer to next element which is 9. now you compare 9 with 17 which one is smaller well 9 so you put nine here and after you put that into sorted array you move the pointer so now you're at 25. now you compare 17 with 25 which one is smaller well 17 you put 17 here and now you move the pointer on the left array so now you are at 21. you again compare 21 and 25 put 21 here you keep on doing that and you get this nicely sorted array so what we learnt is if we have two sorted arrays creating a single sorted array out of it is very easy so now let's go back to our original problem which is we have totally random unsorted array how can you short this using the concept that we just learned okay let's try this out okay just for an experiment we divide this into two arrays so we take first four elements next four elements make it half and half if you have nine elements you can do four and five doesn't matter then now you have two arrays and you try to merge them but well i cannot merge them easily using the techniques i just learned because these two arrays are not sorted so then what if i try to divide them again now can i merge this 2138 with 2917 i still cannot because these two are is also still not sorted 21 38 is sorted but 29 and 17 is not sorted all right so then you move to the next step which is you still divide them you might have known about divide and conquer and using recursion and that's exactly what we're doing here now we have all the arrays with only one element this array has only 21 this has 38 and so on now can we merge them well yes now we can because an array with single element is already sorted so now we can use our technique that we learned initially and merge them so let's take this eight arrays that we have although they have single ml element they're still arrays arrays with single element now we go back take 21 and 38 and try to merge them well we can merge them using the techniques that we learnt initially same thing with 729 it looks like this 425 looks like this 932 looks like this then you go to the next step so see now you when you merge these two arrays 21 38 and 1729 these two are already sorted so you can merge them using the technique that we learned and it looks like this similar thing is happening here and then you sort these two as well into the array so now you realize that by divide and conquer we sorted our original array easily yay i know what is the wire and conquer okay the time complexity of this algorithm is order of n log n if you want to know how we arrived at that complexity i would suggest you read this article on khan academy um our original divide operation is order of one because it's a constant time then the combined step is order of n and then um the actual merging and merging part uh is uh merging and sorting them is n log n total so just read through it you will get an idea now merge sort is an important algorithm because it is used by python sort function so when you call sort built-in function in python it uses a technique called tim short which is a hybrid algorithm that uses merge shot and insertion shot so you realize that merge sort is quite important it gives you a very good time complexity we saw like things like bubble shot takes order of n square which is a lot of time whereas merge short takes only n log n which is quite fast let's go get into python coding now first thing i will do is write a code to merge loose sorted arrays so i have written this empty function and i'm passing two sorted arrays so let's finish this function first then we will write the code for merge short so as we saw already that we are taking two sorted errors and creating a third array so i'm just gonna call it sorted list and i will return that whenever that sorted list is prepared so here we'll be writing that code the knee the thing you need to do is first get the length of both the list uh a and b okay and then you will iterate through both the list until you reach end of either of them so you will say while i is length you know we just have two pointers i is equal to j is equal to zero and you will say length of b you're doing this because you want to stop whenever you reach the end of either of the list now you first check the you compare the element from both the list right so you say if a of i is less than or equal to b of j which is in the second list you have a element which is higher than the first list so now you will put this particular element in a shorted list so you'll see sorted list dot append and append you put a of i and then you of course increment i right because you are inserting element to sorter list from a that's why you are only incrementing i you are not incrementing j because your j pointer is still static if you look at our presentation you see if you are inserting 9 from the second list you're not touching your pointer from the first list so whichever list you insert the element from you only move the pointer of that so right now this is i this is j in the else you find that the element in the other list is less than this first list so you will now put that element in your sorted list so you will say append b of j guess what you need to do here well you need to increment j all right so i think the logic is kind of done we iterated through both the list and from each of the lists we are maintaining the pointers which is inj and you compare the element one by one and whichever element is less you put it into sorted list and you return that so let's execute and see what happens okay so looks like it worked 5 7 8 9 12 45 51 oh i see 56 missing any guess on why this happened well i think what happened was we reached the end here okay so let's see this condition so we reach the end and when you reach the end just because you have end condition this for loop will exit you can also have scenario like this and see you will now miss all those elements after this for loop exits you will miss all these three elements so we need to run one time loop on both the list actually so what that loop will do is so you will say okay after i have exited this loop which means either this was true or this was true if this is true then i need to iterate through rest of the elements from this list and just directly append them so i will say i is less than length of a sorted list dot pen uh a of i and then i'm incrementing my i and you want to run the same loop for the another list which is your b so here you will say b this is b of j of course and here you are incrementing j i hope you're getting the point if you don't just put a breakpoint in your pyjama and run it i'm using pycharm zen mode that's why you don't see any distraction here all right so we have the function ready which can merge two sorted list now we need to give our real list so i'll remove this and i will give an unsorted array for shorting and i will probably write a function called merge sort okay so i need to implement that function the utility function that we needed to merge two shorted arrays we already have that so now we are writing merge short function and okay let's let's think about it what we need to write here so this will be a recursive function as you already saw in the presentation and for any recursive function you need to first take care of the exit condition the exit condition was whenever we have array of size 1 you want to exit correct so you will say if length of array is less than equal to one let's say it is one or zero it's an empty list then you want to return that list so this merge short function is returning the new sorted list and if that is not the case then you find the mid element because you divide the array into two parts left and right and in python this is super easy once you have the middle element you can use the indexing if you don't know about indexing in python basics follow my python basic tutorials you get an idea and you get left and right right is elements starting from mid all the way till end if you don't specify anything here it means it's end if you say six it is gonna be go going till five okay now what i will do is see i need to call you know we need to call merge short function on both the left and right array this is how we call it in a recursive manner and once you get call merge short on left you get a shorted left array so i will store it in left and i will say right is equal to my short right and once you get left and right both are sorted then of course you call merge to shorter list so left and right and you return that because mars short by default it returns a sorted array so once you have shorted array let's say two shorted array when you merge this guy is also returning it hence you need to return this as well and let's try it out okay mid is not defined let's see okay submit is nothing but the length of an array divided by two now if you just do one divide it will go you give you floating number so if you do this it will give you the um integer number see my list is sorted now you can see 3 7 10 15 yep so this worked although this worked this required creating uh new arrays all the time you see you are creating new array then you return it so it's not optimal in terms of space complexity so what if you can do everything in line in your original array itself well then that might be an efficient version of the merge short so let's do that so in that what we're planning to do is basically something like i don't have to return anything see if i do this and if i print array it should be sorted so your sorting array in line so for doing that uh we need to stop returning things first of all so here i am returning these two shorted list so instead of creating a new list i'll let me remove that what if i pass [Music] the original list here so see i have passed original list in my array so let's start with my short function first so here in my short first of all if the size of array is 1 i don't want to do anything it is already sorted so let's not do anything and then here also let's remove this because when you call the merge shot function it is shorting this left and right array in line and once you have these two arrays you can just merge them so now let's come to merge to shorted list here i will pass an array because i don't have sorted list and i need some place to put my shorted elements so i will do array here and then see here i was putting appending them to the sorted list so the depending thing is gone so here um maybe i need to create a new index called k this is the index into the sorted array which is a rr here so instead of appending it to shorter list what you can do is you can say array of k is equal to a of i so i'm just replacing this line this line require me to create a new list i don't want to create new list to save my space so i'm just using the original array and here i will do the same thing where i will assign b of j to something what is that array of k okay and in both the cases you want to increment a because your your appending element to your final list all the time okay you will do similar thing here as well so here you'll do assignment from array a and then increment e same thing here and increment k and you don't return anything because the inline array itself is shorted okay so it's the same code as previous one i'm just optimizing my memory usage right click run and you see the array is shorted now usually you want to run couple of test cases to make sure it is working for all the edge cases and so on so i always have this habit of writing different test cases and i will do for array in test cases so it will take one array one by one and then it will print it wow so that worked you see check each of this list they are all sorted i tried empty list list with one element a list that is reverse sorted list that that is already shorted in a correct order and a random list and it is passing all the test cases so hooray good job our merge short program is done now let's move on to an exercise i'm gonna provide a link of this exercise in the video description below so make sure you check the video description for the link of this exercise as well as the code we covered in the video what you have to do is you have list of elements which are like json objects and these people are marathon runners by the way these people are from our discord community they are mostly admins on discord community so thanks vedandraja vignesh in my for your awesome contribution uh we want to modify more short functions so that it takes a key and based on that key it will short so for example if you say time hours then it will short by time hours so you see 3 2.5 1.5 and 1. here it is in descending order so you are also specifying descending equal to true but if you say sort by name then it will short by name see c comes first in the alphabet and r and so on and if you don't specify any argument here for descending it is false by default so do this exercise it should be fun um doing exercise is the most important thing friends i keep on saying this if you just watch video it won't be useful so trust me you do the exercise and you don't click on solution directly okay you know what's gonna happen if you don't click it directly you have to put your afford you have to try it out and after that you tally your answer with my answer thank you very much for watching i hope you are enjoying this data structure and algorithm tutorial series in python i have a complete playlist for all data structures and algorithms so go check it out they all have exercises thanks once again bye