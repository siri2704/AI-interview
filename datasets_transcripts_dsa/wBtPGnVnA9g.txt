[Music] [Applause] [Music] [Music] I want to start this series from a question why why everyone wants to learn DSA and why are those big Tech Giant companies like Google Amazon Facebook and you name it only hir those Engineers who are good at DSA or who knows DSA if you are someone who don't know what a say is well I'm sorry to say this but you are not even allowed to apply for those jobs like in Google or Amazon or those big companies so we are going to be diving into this question in a more great detail now first of all we have to ask ourself is that what in the world is this technology which we are currently learning and why then we are going to be jumping into the why part okaye like why are we learning it so first of all what is a data structure a data structure is a specific way of organizing storing and accessing the data if you don't get this definition you don't have to worry about it because I Promise by the end of this course you're going to be calling yourself as a data structure and also the algorithm monster okay that's going to be my promise I guarantee okay so that was just a Wikipedia or a chair GPT definition of what a data structure is but now the question is what in the world is algorithm we hear these two terms like a lot like what is a data structure a data structure is a way of organizing storing and accessing the data and we're going to be diving into this definition in a more great detail so a set of instruction that tells a computer how to do something or you can also say a step-by-step solution of a problem is called algorithm so I want you to just focus on this area a stepbystep solution of the problem is SC algorithm now I know a lot of you will say that husin this are just definition that you copied from like I don't know chat GPT or Wikipedia or something like that we one example so now let me just give you example but before I give you example I want you to just write some code I don't care whichever kind of programming language that you want to use but throughout the course I'm going to be using a JavaScript so I want you to just go ahead and perform this Challenge and this is the most simple challenge that I can ever give you so what I want you to do is that I want you to create an array if you are solving this problem in the python you got to go ahead and create some sort of a list okay so arrays and list both of them are like exactly the same thing I mean like not exactly but you get the idea so create an array with five student names that's it after that create a function which takes two parameters like all students and also the student specific name so then I want you to iterate over through all of that students which we are going to be passing into that function and then I want you to itate over through all of that student and I want you to only find that specific student name which you're going to be passing right here so basically what I want you to do is that I want you to create some sort of a function in which we are going to be passing a list of students spread over through all of that students and then only search for this specific student okay so give it your best shot if you can do it that's completely okay and then watch a solution then I'm going to give you my solution but first of all we have to do a bit of work so I want you to pause the video and do it by yourself but first of all I want to show you something now I know a lot of you will ask me hus like what are the prerequisites for this course so the only thing which you have to do is that that um you have to watch this course not from the top to bottom but uh yeah you have to be good at uh JavaScript and by the way you are not just limited to work with JavaScript programming language you can use like uh here are top languages so you can either use JavaScript for this course you can use Python you can use calling you can use typescript you can use Java C++ or any kind of programming language that you like you can totally do that but throughout the course I'm going to be using a JavaScript because my entire channel is about JavaScript okay so that's the only reason I'm going to be using JavaScript but there are no hard rules about JavaScript anyways okay so that's the requirements and also throughout the course I'm going to be using a vs code and you are more than welcome to choose whichever kind of code that you like so I want you to just come to this link which is code. vscode or visual studiio code.com and it's going to bring you to this landing page right here I happen to be using a windows so it automatically detect my operating system right here but if you want to download that for like Mac OS or uh Linux or Windows so you can totally do that and after that I'm going to be creating a folder and I just give it the name of like DSA and once again you are more than welcome to give it like any name that you like now I'm going to right click on this folder and now let me open that in my vs code now I successfully open this folder in my vs code but chances are your Cod will not look exactly like mine because I've changed a lot of things inside there and if you want to make your vs code exactly the same like mine so I have a complete course on there and I also have a complete videos on there if you want to check it out so feel free to do that next go to the extension area and search for a code Runner and once you do then click on there and install that in your machine I already installed it the next thing that you have to do is that you have to hit F1 on your keyboard and then search for shortcuts okay so short come on shortcuts okay so here we have a few options so we have the first one like toggle the keyboard shortcuts but the one I'm interested in is the open keyboard shortcut so I'm going to just click on there and it's going to give me the entire list of keyboard shortcuts that I have in my vs code so I'm going to just search for a code Runner and once I do then I'm going to choose the second one which you can see right here okay so I'm going to just double click on there and chances are in your case it may not look exactly the same like mine but you have to double click on there and then hold control and then hit enter okay so once you do that then hit enter one more time okay so this is how you're going to be creating a shortcut for yourself okay so now that's successfully done I'm going to go ahead and just create a new file you are more than welcome to give it like any name that you like so I'm going to just give it the name of like index. JavaScript or JS because I'm going to be using a JavaScript so now it's my turn to show you the solution for that problem so I'm going to just create like students uh database and inside there I'm going to just store a few students like Jordan and also Eric and also John and Michael or something like that I'm going to be creating a function so I'll just give it the name of like find student it's going to take two parameters like all students and also student name okay so now inside there we are going to be iterating over through all of their students like for let I equals to zero and I is less than all student. length and then i++ now inside this Loop we have to find out that specific user or student okay so I'm going to be using like all student and we are going to be taking the index which simply means that we want to it over through every single item inside this list okay so this will gives us like first of all Jordan then it's going to gives us Eric then it's going to gives us John then it's going to gives us Michael right here okay so we wanted to iterate over through all of these items inside this Loop and then we want to search for this specific one which you can see right here so we are going to be searching for this specific student name so like let's suppose instead of providing like student name I'm going to just uh provide like a so which means like we are now searching for the Eric so what this code will do is that it's going to first of all ask this one like are you the Eric no I'm not then it's going to jump to this one are you the Eric yeah I am so it's going to put it right here but we are not done yet then it's going to still ask this one like are you Eric no are you Eric so no I'm not Eric so it's going to give us the result of this one right here okay so now let me just get this back like student name and now what I want to do is that I want to just log that to the console and I'm going to just say found and here we are going to be passing the student name okay so now let me just save this file and now underneath there let me just go back uh I'm going to just call this function by find student and I'm going to be first of all passing for this parameter all the student database so now let me just pass there and now for this another parameter I'm going to just only search for this Eric right here so I'm going to copy that and now let me just place it right here okay so now if I run this Cod so what are we getting we are now getting like found ER right here and why is there because we are now iterating over through all of these list and we are only searching for Eric and we already have Eric inside our list so that's why we are now getting uh this found Eric right here now that we successfully solve this problem but now the question is what was that specific data structure that we use for this problem and what was the algorithm so the answer is this array is a data structure and through the course I'm going to make you a monster in the data structures but this is just like a one data structure that we currently use okay so this is a data structure that we use and this is the algorithm that we use for finding that specific user so data structure allows us organize store and access the data which we are doing right here and on the other hand algorithm is just a stepbystep solution for or problems okay so these are just a step-by-step solution for our problem so this is a data structure and this is the algorithm for solving that problem right here there was a lot of explanation about data structure design algorithm but now still we have another question like why why should Ione care about learning a data structure and algorithm well if you want to go at these stuff so you have to learn data structures and algorithms so if you want to be efficient Problem Solver or strong coder or interview successor or coding confidence if you want to get all of these stuff so you have to learn data structures and algorithm and these are just a few bullet points but the real thing about data structure and algorithm is it's going to make you become a great Problem Solver so that was the last slide and throughout the course we are going to be only focusing on these two words become a great Problem Solver okay so that was the first video of my data structure in algorithm and I'm going to see you in the next video bye-bye Welcome to the bigon notation master class so in this course I'm going to be teaching every single thing that I know about the bigon notation and if you haven't check out the previous video where I introduced the data structure and algorithms so you can go ahead and watch that video otherwise what I want you to do is that I want you to just solve this problem by yourself and it doesn't matter like whichever kind of programming language that you want to use for this problem you can use JavaScript you can use Java python rust or any programming language that you like so I want you to just go ahead and perform this challenge by yourself and if you can do it you got to watch my previous video about that okay so now let's get into the main topic which is called the big notation now that we successfully solve our problem but now the question is how can we tell whether our code was a good code or a bad code I know a lot of you will say like yeah you give us some sort of a challenge we solve that challenge so why should I even care about the code quality like why should I even care about whether my code was a good code or a bad code well you don't have to to and you never will care about whether your code is a good code or a bad code but if you're applying for some sort of a job the inner viwer will ask you this question like how can you tell whether your code was a good code or a bad code or they will ask you like what is the space complexity of your code what is the time complexity of your code or what is the Big O of your code so for all of those questions which I just mentioned here is the answer and the answer is the big old notation so now I know a lot of you will say like finally we are now talking about the big on notation so what is a big on notation now let me just introduce there so a big notation help us understand how long an algorithm will take and this area is something called the time complexity like how long an algorithm will take to run this area is known as the time complexity or how much memory it will need as the amount of the data it handle grows so this area is known as the space complexity let me just say that once again so big notation help us understand how long an algorithm will take to run this is known as a Time complexity or how much memory it will need as the amount of the data it handle grows so this is known as the space complexity and to combine both of those term it becomes something called the bigon notation so you can think about the big notation is like the language that we speak to communicate with other like whether our code is a good code or your code is a good code or a bad code that's it now I know that was a lot of gibberish which I just said so now let me just break this down for you so imagine you have a giant mess to clean bigger notation is like saying how the cleaning time grows as the mess gets bigger so that was just an knowy which I want you to know okay so the first big on notation which we are going to be discussing is something called the O of N and by the way this is not a mathematical term you don't have to know mathematics for the big on rotation I mean like for one which you know you don't have to worry about that so of and signifies that the execution time of an algorithm grows linearly in proportion to the size of the input data N I know you you will say that Huzan I don't get it like what's the point of all of this gibberish word which you just said so now let me just break this down for you okay so you can think about the ofn as the number of item in the input data increases the time it takes for the algorithm to run increases correspondingly I know still you don't get it so now let me just break this down a bit more so imagine you have a list of groceries to find a specific item like for example the milk you might need to scan through the entire list so if the list has five items it will take like a relatively short time but if the list has 500 or 5,000 or 5 million items it will take considerably longer this is the essence of of a linear time complexity so that was a lot of Gish which I just said so now let me just break this down for you in the diagram here you can see I have array of groceries so I have a eggs bread strawberry milk bananas so if I want to search for like let's suppose milk in this case I have only five items right here so it will not take that much long so if I want to search for a specific item inside this list so we already know that we have to over through our entire list so first of all we are going to be iterating over through this item and we will say like are you the milk no I am not then we are going to be jumping into this one are you the milk no I'm not then we are going to be jumping into this one and are you the milk no I'm not then we will finally jump to this one and we will ask this question like are you the milk and it will say yeah I am the milk okay so now we successfully found our milk and in this case we have very short uh list right here and now we are iterating over through this list still it is taking a little bit of time but it is taking some sort of a time so what is the Big O of work code the Big O of work code is O of N and why is that because as the size of my input grows the time it take will also grow so like let's suppose if I add 1 million items and if I want to search for milk so it will take a lot of time but if I only have like two items like eggs and milk it will not take that much time so this is what we call the O of n so now let me just write some code and then you will get to know what I'm talking about time to write some code so I'm going to first of all create my groceries list underneath that we have to write our algorithm okay so search for item and it's going to take only one item and based on that input we are going to be iterating over through all of that array and we are going to be searching for that specific item so now let me just iterate over through like let I equals to zero and I is less than groceries. length and then finally i++ and now inside there we are going to be searching for that specific item but first of all we have to write groceries and I and which simply means that we have to iterate over through all of these list and we have to ask this question and what's the question the question is triple equals to item okay so like let's suppose if you pass I don't know maybe eggs so we now taking this eggs and we now passing there right here and we are now asking every single item that are you the egg are you the egg are you the egg and it's going to say yeah I am the egg so finally we will just pass it right here and then it's going to come to here and then finally we have to just log it out and I'm going to just say like found and here let me just paste that specific item which we were searching for so now let me just save my file and finally we have to execute our function and now let me just pass the eggs right here so if I save this file and run my code so what are we getting we are now getting like found egg right here so I'm going to right click on this area and then I'm going to choose set that to the right and now I think that's looking better so this is what we call the O of n because we are now iterating over through this entire list and that totally depends on the list items so like let's suppose if you have 1,000 items so the time it will take for our algorithm will also be increased okay but if let's suppose if you have only one item or maybe two items so it will not take that much time so this process is known as the O of n so that was the O of n but now let's talk about how we are going to be dropping the constants so how we are going to be doing that let's suppose we have two for Loops inside our function so I'm going to just write like for let uh J equals to zero and then I'm going to just say like J is less than groceries. length and then finally j++ and now inside this J we're going to be searching for like that same thing like JN is going to be equals to the item and if that's true so we have to just look to the console like found that item and we have to just write two in this case it's in this case we have two for Loops so we have this off n and we also have this off n right here and both of them are dependent on these groceries list right here so what do we have right now so we have this n and we also have this n right here okay so what I'm going to do is that I'm going to just write like n plus n which means like this for Loop plus this full loop so what it will gives us to combine both of them is is going to gives us something called the 2N or you can say the O of 2 N but whenever we have a situation like this we don't count this two we always drop the constants like we remove that from here you will never say like oh of 2 and a big no no you have to keep that in mind so what we have to do in that case we have to drop the constant so it becomes the O of just n not the O of 2 n 2 N just like that okay so whenever you have situation like this you're going to be still saying that this function is the O of n not the O of 2 N so this what we call dropping the constants and this is what we call the O of n now that we learn about the O of N and now let's talk about the O of one also known as the constant time in everyone's favorite one okay so o of one signifies that the execution time of the algorithm remains constant regardless of the input size so if I ask you a question like what is a con resert keyword in JavaScript so your answer will probably be like when we declare a variable by using a const Reser keyword we cannot change the value of that so that is known as a constant and that is exactly the same constant right here so the o1 also known as the constant time signifies that the execution time of the algorithm remain constant which means like not going to be changing regardless of the input size so let me just break this down for you imagine you have a box filled with item and you know exactly where each item is located to get a specific item you go directly to its location taking the same amount of time irrespective of how many items are in the box back to our array example so we have that same array right here we have that grocery items inside there but now let's suppose in this case I know exactly where my item is let's suppose I'm searching for the eggs no matter if the input grows or shrinks I don't give a f okay so I know the item so I'm going to be just running some sort of algorithm which will find out that specific item let's suppose I know the strawberry so I know the location of my strawberry so I'm going to just take my marker or my pointer and I'm going to point it right here so this is known as the constant time no matter if my input grows or shrinks we don't care about that we only care about that specific item which we are searching for so it will gives us a constant time so the time it takes to find that specific item for our algorithm will remain constant I want you to just keep that in mind or you can also say the O of one both of them are totally exactly the same thing so now let me just write some code and then you will get to know what I'm talking about so what I'm going to do is that I'm going to just create a numbers array and it's going to hold like 1 2 3 four come on three four and five let's just save them and now we have to create our function or in this case you can say or algorithm because this is a step-by-step solution for our problem okay so we are now passing the array and also the index so array will be this entire array and the index will be that specific location where our item is located like let's suppose three four or five okay so I'm going to just write like array and now we are going to be passing that index and now if I log that to the console so get element and now let me just past the numbers array and I want to get the first element so now let me just save my file let's just go back and now if I run my code so what are we getting we are now getting the one right here and why is there that's because we are now passing the index of zero it's going to gives us one right here so this process is known as the O of one which means like we don't care if our input size increases or decreases we are only interested in that first item or that specific index item like let's suppose maybe three or four or something like that we are only interested in that specific item and we create our algorithm the way like if you want to get a specific item it's going to gives us that specific item based on the index so this is known as the O of one okay so now let's talk about the expensive one which is called o n the power 2 or you can say o n * 2 you can call it what whatever you want to call it so this indicates that the algorithm execution time grows quadratically I can't pronounce this word but quadratically with the size of the input data represented by n so I know that's a lot of gibberish words but now let me just give you some sort of analogy imagine you have a box of items and you want to compare each item with every other item to find a specific pairs so as the number of the item increases the number of the comparisons n * 2 GR grows much faster so that's why we call this one as the expensive one so you know what let me just write some code and then you'll get to know what I'm talking about all righty so what I'm going to do is that I'm going to just create some sort of a function and I'm going to give it the name of like find Pairs and it's going to take the array okay so now inside this function let me just zoom in a bit inside this function first of all we are going to be iterating over through like let I equals to Z and then I is less than array. length come on L GT and then finally I Plus plus and now inside there we're going to be using like for let J equal to I + 1 and then J is less than array. length and then finally j++ so what in the world are we doing we have a function and now inside this function we have two for Loops or you can say quadratic time okay so it's going to take like a double time so that's why we call this notation as the o n * 2 okay so it's going to gives us a quadratic time so now if I log that to the console like a pairs so pair or pair come on pair like that p a i r there we go so I'm going to just say like array I and then I'm going to put a comma and then array and then finally let me just put a J in there so let's just go back and I'm going to save this file let's just create some sort of a data so that we can iterate over through that data so I'll just write a numbers and now inside there I'm going to just put like one two three four and five once again and finally let me just proide like a find Pairs and we are going to be passing that numbers okay so now if I save my file and run there so what are we getting we are now getting our pair one five times and this is coming from the outer loop okay and this one is coming from that inner loop right here okay so we are now printing there like five time and then we have that two and we are still printing there like three time and then we have that three we are now printing there like uh like two time and then finally we have a four and we are now printing there one time okay so it's going to gives us a pair but what we are doing is that we are now creating a nested Loop we have a loop inside another loop so this process is known as the o n and then this carot symbol 2 or you can say o of n the^ of two okay so that was the o n * 2 but there is a bit of catch let's suppose if I just remove that from here if I hide this area underneath this for Loop if I create another for Loop like let maybe Q equals to Z and then Q is less than five and then q++ and now inside there I'm going to just write like conso log and first of all let me just put some sort of a separator and now inside there let me just print out the loop so what do we have first of all we have o n * 2 which we already know because this one has a nested Loop right here next we only have o of n right here oh it's not o of n let me just write like uh Q is less than array. length let's suppose if I save this file now this is a o and so if I go ahead go back and run this code so what are we getting we are now getting that from zero through four right here and this is coming from this of N and this area these pairs are coming from these nested Loops right here so what do we have right now we have this situation so now let me just go back and now let me just place my comments right here here and we have this situation so if we combine all the O operation it becomes o n ^ of 2 + n which you can see right here so first of all we have o n the^ of Two And if you combine this n so it's going to just gives us this o n the^ of 2 + n but o n the^ of two is something called the dominant term and then n which you can see right here is a non-dominant term so we remove the non-dominant terms and we are only left with o n to the^ of two so we always remove the non-dominant term because in this case this one has a high precedence and this one doesn't okay so like this one is taking much more time and this one isn't so we have to remove I mean like just for explanation purposes we are going to be just removing this and we are not going to be removing this entire code like that we are not going to be doing that but just for the explanation purposes we can say like this is technically correct but we don't write the dominant term so we have to remove this dominant term so we are only left with the o n the^ of two which you can see right in here so this way we can simplify or Big O if you don't get what I'm saying right here you don't have to worry about that you only have to keep in mind that whenever we have a nested for Loops or any kind of a nested Loop so we say that this is known as the o n the^ of two and whenever we have some sort of a loop which will beating over through some sort of a data okay so that process is known as the O of n so yeah that was the o n to the power of two welcome to the O log n and trust me this is one of my personal favorite but now let's talk about it so what is a o log and by the way we are not going to be writing any code for that because it involves something called a sorting and searching and all of that and we are not there yet so we're not going to be discussing that okay so in the upcoming videos we will Master the O log n I'm going to be explaining that again and again but for now let me just give you a quick idea about that so what is the O log of N and by the way this is going to be the final one okay so the O log of end time complexity referred to the algorithm runtime that grows logarith matically I can't even pronounce this part I'm really sorry about that with the size of the input represented by n in simple term as the input size increases the time it takes for algorithm to run increases slowly not faster but slowly I know there a lot of gibberish but now let me just show you there in the diagrams imagine that we have this sorted list right here and I want to search for this first item inside this list so how can I go about doing that well we are going to be using something called the divide and conquer which we are going to be mastering a bit later in this course but not right now okay so we are going to be doing a divide and conquer so how we are going to be breaking this down to get this first element inside this l so to search for this specific item the first thing that we are going to be doing is that we are going to be dividing and then conquering so we have to divide this array by two okay so now once we do that we are going to be performing a f statement right here is that item which we are searching for is located in this half or in this half so it is now located in this half so we have to save a buy to these items right here then once again we are going to be doing that divide and conquer once again so we going to be taking these two elements and we are going to be dividing them we are going to be searching whether the element which you are searching for is in this list or in this list so it is now available in this list so say by-bye to this one right here then we have only two items so we are going to be dividing there finally once again and then finally this is not the element which we are looking for so say bye-bye to this one and we only have this element right here okay so let me just go back and let me show you that entire flow so what we did is that first of all we have these item so the first step that we did is that we break this entire list into two so that was the first thing now next we break this down once again and then finally we break it down yet another time so we only did three operations right here so how that's going to look like in the O log of n this is how it's going to look like right here so now let me just place that this is how it's going to look like so we have a log of two and then we have a add and it is now equals to the question marks is what is all of the Gib even means I want you to just forget about the log just consider that like log is nothing just like forget about that okay and then what do we have we have a two so we will say this like 2 to the 1 power = to at 2 to the one power equal to at okay so just imagine for a second like 2 to the word power gives us n and that's the solution let me just place it right here 2 to the 3 power gives us at at was the elements that we had in our list and now we are just searching for 2 to the what power three operation so it gives us eight right here and that three operations which you can see right in here so we have operation one then we have operation two and then we have operation three so this process is known as the O log n Okay so I hope it makes sense but if it didn't don't you worry about that because in the upcoming videos where we are going to be learning about the binary search and trees and all of there we're going to be discussing this o log of in in a more great details all righty so that was it about the O of ends and the O of Wands and that was the entire story and I'm going to see you in the next course and for now love you all stay healthy stay happy and bye-bye welcome to the data structure and algorithm Master Class so in this video I'm going to be making you AR raise monsters so what are we going to be learning in this single video so first of all we will start our conversation by a quick introduction of what an array is then we're going to be creating our own custom array with a lot of challenges after that we are going to be performing these challenges like uh reverse string pandrum integer rsal sentence capitalization FBS Max profit array chunks and the final one two sums so now let's get into it if you watching this course I already assume that you guys already know what an array is but still I'm going to just give you a quick introduction of what an array is and then we're going to be jumping into how we are going to be creating our own custom array and how we going to be performing a lot of algorithms on there so let's talk about what an array is so data structure array is an order collection of elements that can be accessed using a numerical index and you guys already know all of this stuff so now let me just write some code and then you'll get to know what I'm talking about so what I'm going to do is that I'm going to just give you a quick introduction of what an array is so we're going to just writing like uh string array and we are going to be storing like string a BS come on uh c d e and so on then we can also create an array for the numbers so I'm going to just write like num array it's going to be equals to like 1 2 3 4 5 or something like that we can also create an array for the Boolean so we can store like true or false value inside there and we can also create a mixed array so I'm going to just write like mix and I'm going to just store like string undefined now and also object like some sort of object and we can also store a nested array inside there so I can log like all of them like mixed semi file and run there so here you can see we're now getting this mixed array right here which is totally fine and so that was just a quick preview of what an array is but now the question is how we are going to be creating our own custom array like how we are going to be creating some sort of a place where we can store any kind of data and we can push our data we can remove our data and we can do all of that algorithm by creating our own array like how we going to be doing that so now let me just show you how we going to be doing that time to create our own custom array so how we are going to be doing that to do that we are going to be using You Guessed It classes okay so first of all we have to write a class Reser keyword and then you are more than welcome to give it like any name that you like but in my case I'm not going to give it the name of like array because it will override my existing array so what I'm going to do is that I'm going to just name it my array and you are more than welcome to give it like any name that you like and now inside there we have to Define our Constructor inside this Constructor we have to Define the initial values for our array so I'm going to write like this do length and it's going to be initially set to zero because in this case we don't have any items inside our array so that's why it's going to be set to zero now the next thing that we have to do is that we are going to be creating some place where we are going to be storing our data okay just like if you create some sort of an array inside this array we are going to be either storing or number or Boolean or something like that so now we are storing this data inside this object right here so we're going to be doing that okay so now let me just cut that from here and now this is how we are going to be creating our own version of an array so what I'm going to do is I'm going to just create a new instance of there by writing like my array and now here I'm not going to pass anything inside there okay so now let me just write like con my new array it's going to be equals to that array so now let me just loog that to the console like my new array array let me just go back s my file and run there so what are we getting we are now getting that my array the length is now initially set to zero and the data is totally empty okay so this is how we are going to be defining our own array and now it's time to Define our own algorithms inside this array time to Define our algorithm on our custom array and that algorithm will be the do push method okay so this push method allows us to add a new item at the end of or ar okay so like let's suppose if I want to add like I don't know maybe apple or maybe I don't know just some sort of a number or maybe a Boolean or something like that so this push method will allows us to add a new item at the end of our array okay so I want you to just go ahead and pause the video and do that by yourself so what you have to do is that you have to just Define a push method inside this array and I want you to make it so that anything I pass inside this push method will go right here inside this data right here okay so I want you to pause the video and do that by yourself as you were asking me in the previous video in the comment section you are asking me that Huzan you are not giving us a challenges I want you to give me some sort of a challenge just wait and see how much challenges I'm about to give you okay so that's going to be your first challenge that I want you to do by yourself so pause the video give it your best shot if you can do it that's completely okay then come back and watch the solution and here is my solution so what we have to do is that we have we have to write our push method and it's going to take some sort of a item because we're going to be pushing that item which we're going to be passing right here like let's suppose if I want to pass Apple so we are going to be taking that item and we are going to be pushing that to our data right here so how we're going to be doing that to do that we are going to be accessing first of all our data which we already defined Right Here and Now inside there we are going to be providing like this do length Okay and now it's going to be equals to the item itself so you can also log that to the console if you want it to so now let me just log that to the console so what I'm going to do is that I'm going to just write like console. log of this. data and I'm going to also provide a separator right here so you guys can see everything a bit better and now if I sve my file and now let me just run that so what are we getting we are now getting the index of zero which is now initially set to zero right here as a string and we are now passing the value of this apple right here so this is coming from this line right here okay so that's I like from this line okay so now let me just provide something like this. length in this case and let me just go back and this is how we are going to be writing our code and now let me just save there and run there so what are we getting we are now getting that specific apple right here that specific thing which we are now providing right here as for this push method okay so now let me just clear this out and now let me just close that from here and now the next thing that we have to do is that we have to increment this length by one because now we are adding some sort of item so now we want to change this length from zero to one so how we are going to be doing there well we have to first of all X is there and then we have to just write a Plus+ and this is how we are going to be doing that and finally we have to just return this so that we can see something so we have to just write like this to length and that's it let me just go back and that was the entire algorithm for or push method you know let me just remove these conol logs from here I'm going to also remove it from here as well and let me just add a few more items like orange and I'm going to also add the mango and finally let me log my array my new array to the console so now if I sve my file and run there so what are we getting we are now getting the length of three right here because anytime I add a new item we're going to be incrementing this length and also we are now getting this data so for the index of zero we are now adding Apple for the index of one we're adding orange and so on and so forth okay so that was our push method time to perform another challenge so let me just give you another challenge so what I want you to do is that I want you to add another method so which will be my new array and then the dot get method not length get method and now for this get method it's going to take some sort of an index so like let's suppose if I specify the index of zero so it's going to gives us ample but if I specify like one so it's going to gives us orange and if I specify two it's going to gives us mango so I want you to give it your best shot if you can do it that's completely okay then come back and watch the solution I'm going to specify zero right here for the index pause the video and do that by yourself s and here is my solution so what I'm going to do is I'm going to just create my get method and let me just pass some sort of a index inside there and now we are going to be just returning the this do data and now here we have to just specify that specific Index right here so we are now accessing this data and here we are going to be accessing some items like let's suppose if I specify that zero right here so that zero will come from here and we will put that zero right here inside this index are yeah then that zero index will come from there and we will put that right here instead of that index we're going to be getting more items like this okay so that was the entire challenge let me just go back okay so let me just save my file and run there so what are we getting log that to the console and let me just show you there now we are logging that to the console and now let me just run there so what are we getting we are now getting that apple right here but if I specify one and rerun there we now getting the orange if I specified two and rerun this we are now getting that mango right here and that was the challenge number two or you can say the algorithm number two time for another exciting challenge which will be the pop algorithm so if I just write like my new array and if I write like pop and now if I execute that so what this method will do that it will pop out or you can say it will remove the last element from or array okay so if I have like I don't know maybe a lot of items and if you want to remove the last element or the last item inside our array so for that we're going to be using this pop method and inside there we're not going to be passing any item and also any index because we already know the index like we're going to be removing the last element from our array so like let's suppose if I have this array let me just show you that if I have 1 2 3 4 5 if I want to remove this Fifth Element so for that we are going to be using this do pop method okay so I want you to go ahead and pause the video and do that by yourself but if you can do it that's completely okay and here is my solution but before I show you the solution please pause the video and do the pop by yourself so what I'm going to do is that first of all I'm going to have to access the last element from or array okay I can't even say that word from or array from or from or array God damn it English is a hard language so I'm going to write like last item and it's going to be equals to the this. data which we are now which we've already specified right here so we to be accessing the this. DAT this is going to be our entire database and now from this database we wanted to get that this. length and then minus one so it's going to gives us the last element from or array yeah this time I said the from or array so if I log there to the console like class item and now if I sve my file and now let me just run there so we now getting that mango right here you know let me just put a separator if I am not wrong okay so now if I sell there and what are we getting we are now getting that mango right here which is totally correct okay so now we are successfully getting the last element from our array from right so then we have to delete that item so we're going to be writing like delete and this. data we still going to be accessing our entire database or you can say or entire store whatever you want to call that then we're going to be getting that same like last element from from or array and now we successfully remove that element the next thing that we have to do is that we have to decrement this length by one okay so we're going to be just writing like this do length minus minus because in this case we are now removing one item so we have to write the come on so we have to write uh this do length minus minus or we have to write the decrement so now I'm going to just write like last item and now let me just save my file and finally if I run my code so we are still getting undefined that's because we are using that get method but if I remove that from here and here you can see we have three items right here so we have Apple we have orange and we have mango but now we will get to see these two not the last one because we are now popping out this last item so if I run my code so what are we getting we now getting the length of two even though we have three items we are still getting the length of two because we remove or we pop out that last item right here so we have the data of apple and we have the one item which will be set to Orange but we don't have this mango right here so this is how we are going to be removing the last item from from or array there we go God damn it time to solve another challenge and in this case we're going to be creating something called the shift method and trust me this one is going to be a challenging one so what this shift method will do first of all let me just give you a demonstration so I'm going to write like item is going to be equals to like 1 2 3 four five and now we're going to be using like item. shift method and as soon as we use the shift method a few things will happen the first of all is going to remove the first element from this array the next thing is going to be happening is that we are going to be reindexing our entire array so like you know what let me just go back and I'm going to just write a few spaces right here and now at this point the index of one is zero and then we have the for the two of one then we have three then we have four and five just like that but let's suppose if we remove this first element from this array so we also have to reindex every single thing okay so what we have to do is that we have to remove this one and the rest of them is not totally cool okay so we have to remove that last element so this is what I want you to do so I want you to give it your best shot and if you can do it that's completely okay come back and watch the solution and please don't say in the comment section that I'm not providing a lot of challenges because in this video you and I are going to be solving a lot of challenges okay so I want you to pause the video give it your best shot if you can't do it here it is my solution so I'll just write like shift the first thing that we have to do is that we have to access the first element so I'll just write like first element and it's going to be equals to or you know instead of a first element I'm going to rename that to this do data we are now accessing our database right here which means like we now accessing this entire store in which we're going to be storing our data in which we already store our data case now in this case we're going to be accessing only the first element because we want to get the first element from this array okay so that's going to be the first thing now the next thing that we have to do is that we have to do the reindexing okay like uh if this was our array so we have like 0 1 2 3 4 5 if we have this kind of array right here so index of this one will be equals to zero this one will be set to one and this one will be set to two and if I remove this element the index of the two will be now set to zero and the index of the three will be now set to one okay so now if you want to do that so for that we are going to be reading over through this entire array so we will just say like for let I is equal to zero and then I is less than this do length and then we will just say like I ++ now we are iterating over through this entire list and now inside there we are going to be accessing like this data and we want to access each element inside that data we are now iterating over through that entire database and then we have to set that to this. data and then we have to get our I and we have to increment there by one okay so we're now going to be re indexing there now the next thing that we have to do is that we have to delete the last element now you might be asking hose like why do I have to delete the last element well you have to because if you want to reindex everything so you have to so you know if you have this array like 1 2 3 A4 and we want to remove this first element so now we have to do the reindexing so first of all we have to just set that to zero then this is going to be for the one and this is going to be set to two right here okay and we remove one which was set to three so we also have to remove that third one okay so now let me just remove that from here and we have to just write the delete Reser keyword and we are going to be using this. data and then this do length minus one so it's going to give us like the last element which we just saw a few seconds ago so then this start length will be decremented by one we also saw that a few second ago and then we have to return the first item so that we can see which item was deleted so what I'm going to do is that I'm going to just write like shift method word here or you know before I write this shift method I'm going to duplicate this line of code and I'm going to just say shift right here for this second one so if I save my file and yeah I'm going to also duplicate then and put that right here once again so basically I have two copies so it's going to show us the original array the previous version of an array then we are now removing one item from that array and finally it's going to giv us the new updated version of or array so I'm going to have to just run there now let me just save my file and rerun there so what are we getting we are are now getting craziness okay so first of all we have this older version right here the length was three and we have apple orange and mango now the length is two and we only have orange and mango and we now successfully remove this apple from this array okay so this is how we are going to be working with the shift method okay so time for another challenge so what I want you to do is that I want you to create a delay by index method so how that's going to look like if I have items items and I'm going to write like 1 2 three four five and now if I use like items so you can give it the name of like delete or you can say delete by index if you wanted to and here we're going to be specifying some sort of index like if I specify zero so it's going to remove this first element but if I specify like I don't know maybe one so it's going to remove the one if I specify two it's going to remove the two and once again you have to reindex everything so like you have to iterate over through there by using some sort of a loop and you have to do all of them which I just mentioned a few seconds ago so I want you to give it your best shot if you can do it that's completely okay and here is my solution so pause the video pause it pause the video and give it your best shot so what I'm going to do is that I'm going to just create a delete method you can give it the name of like delete by index if you wanted to so I'll give it the name of like uh Delete and now let me past the index inside there because we are going to be removing our item based on their index so now let me just get there so what I'm going to do I'm going to write like this. data and we're going to be passing that index and here is our entire database and we're now taking that index so like for instance if I specify like delete and if I specify zero so we are now placing that zero right here and we are now storing there like we are now accessing our item based on their index okay so now let me just store there in the items or item variable right here inside there now the next thing that we have to do is that we have to do the reindexing so I'll just write like index and then I is less than this. length and then finally I come on uh we have to get the last element in this case and then we are going to be using like i++ inside there okay so I'm going to just write like this data and we're going to beating over through our entire array and we're going to be getting each item and we have to just set there to this start data and we have to just provide one to there which means like if you have zero so that zero now becomes one and if you have like one so that one now becomes two and so on and so forth okay so now if I save this file and now underneath that we have to use the delete and now we are going to be using like this. data and we have to specify that this. length minus one which means like we are now getting the last element from our array and then we have to decrement the length Okay so I'll just write like this do length and just decrement then finally we have to get what we just removed okay so we have to get this specific item so now let me just go back and now I specify the index of zero so which means like we now removing this apple and now if I run my code so what are we getting we are now getting our apple right here and now if I log that to the console like my new array and now if I sve my file and run there so which means like that apple is now successfully and we are now left with this orange and also the mango and not only that the indexing are also totally changed so now Orange Is Now set to zero and mango is set to one okay so yeah this was a lot of code and this is how we are going to be creating our own custom array and this is how we're going to be defining our own custom algorithms on that array so yeah that was amazing time to perform a lot of challenges so the first challenge that we have is a string reversal or a reverse string whatever you want to call that and if you are watching this course the data structure and algorithm course and especially on YouTube so which means like you've already solved this question like maybe 100 or maybe 200 times I know that so anyways but if you didn't that's completely okay so if you guys already solved this Challenge and you get every single point of this challenge so you can skip this Challenge and you can jump to the next challenge but if you feel like yeah I'm going to just give it a try so stick around and I'm going to show you a few instructions but if you feel like you are not able to do this challenge so I have a hints for you just wait for a few second first of all you have to create a function which will take a string so like if you specify hello it will reverse it out to this O Okay so I want you just do that then if you specify like apple so it's going to just reverse it to this ala or Ila whatever you want to call that so once again if you can do it so go ahead and do that but if you feel like no h like I don't feel that much comfortable so here are the hints so let me just place it right here these are the hints so the first thing which I want you to do and by the way there are a million ways like a trillion quadrillion ways of doing this same challenge I mean like not much but still there are a lot of way to perform this challenge but the most simplest one in JavaScript especially is this one the first thing that you have to do is that you have to figure out the way to convert your string to some sort of array so just do that figure out the way like I don't care whichever kind of programming language that you want to use so convert your string to array that's going to be the first thing that you have to do and in JavaScript we have a method for that like how we are going to be converting the string to array so I want you to pause the video and figure this out by yourself and the next thing that you have to do is that you have to just reverse out that array like now that you successfully convert your string to array then the next thing that you have to do is that you have to reverse out that array and once you reverse this out the final thing that you have to do is that you have to convert array back to the string and that was a lot of hints that I can give you so give it to your best shot if you can do it that's completely okay and here is is my solution baby and the solution will look something like this first of all let me just place this instruction right here so if you want to convert a string to array so in JavaScript we already have a built-in method which is called the split method and if you want to reverse out the array so for that we have another method which is called the reverse method and if you want to like combine it back so for that we have the join method okay so yeah and by the way there are a lot of ways to do the same challenge like in different ways so what I'm going to do is that I'm going to just create a function I'm going to give it the name of like reverse string it's going to be taking one string perimeter and now let me just first of all use the string. split method and if I didn't specify anything at all and now let me just write like console. login reward string and I'm going to be passing like hello right here if I specify there so it's going to convert there to array so if I run my code so what are we getting let me just rerun there I'm going to rerun my Cod so what are we getting we are now getting the we are now getting our string as our array right here so which means like we can now perform all of our array operation right here on uh on our string so now that we successfully convert our string to this array now the next thing that we have to do is that we have to reverse this array so we have to use the reverse method right here so we're going to be using this reverse method and we don't have to specify nothing for there so now if I save my file and rerun there so what are we getting so here you can see that used to be hello low now we successfully convert that to O right here so now we are 90% there but now the funny thing that we have to do is that we have to join it back so here you can see if I run my code this is now set to array but we don't want that we want to get that as a string so how can you go about doing that well to do that we have to use the join method and it's going to convert it back to the string so if I sve my file and rerun there what are we getting we are now getting this o right here let me just go back and we are now getting this o I'm saying it as o but I don't know if that's a correct pronunciation of it I'm going to write Apple in this case so it's going to convert it to uh IL or something like that okay so if I save my file and run there and we are now getting this illar right here let me put my own name you know what I'm going to put my own name so I'll just write like hosan web dev s my file and we are now getting yeah I can't even pronounce this word but yeah you get the idea so that was our first challenge of this course time to do another challenge which will be a pandrum so what is a pandrum and how we are going to be even solving this challenge so so what is a pandrum that's going to be the first question so if the reverse ring is equal to the original one then that word is known as something called the palum how that's going to look like this is how it's going to look like so if I have like cddc and if I reverse this out so it's going to still gives us that cddc which is toally a pandrum or you can say a wet pandrum but if I specify like Abba still if I reverse this out it's going to still gives us that Abbi which is a pandrum but if I specify hello it's going to gives us o which means like that's not a valid pend drum so I want you to give it your best sh if you can do it like a million times you don't have to swear about that because throughout this course you're are going to be solving like a lot of challenges if you feel like you totally can do this challenge by yourself without any hints then pause the video and do that by yourself but if you feel like no I can do that so here are instructions for you or you can say the hints for you okay so the first thing that I want you to do is that I want you to just convert your string to array then I want you to reverse it out then I want you to convert your array back to that string so we already done all of that stuff in the previous challenge now the next thing that we have to do or the new thing that we have to do is that we we have to compare our string with that reverse string which we just saw so give it your best shot if you can do it then watch the solution and baby here is my solution so I'm going to just create my pandrum pind drum and it's going to be equals to that string and now I'm going to be passing like string. split method and it's going to convert that to my array then we have to reverse this array and then finally we have to rejoin it back and now the new thing is that we have to check this reward string with the original string right here so we're going to be passing that string right here and now if I log this out so you know what uh I'm going to just remove that right here so I'll just write like string hel rum and I'm going to specifying like cddc save my file and run there we still getting that cddc like the RSE string of there if I specify like Huzan sa my file and run there you're now getting this NIU or something like that which is not a p and run by way so I'm going to just write like triple equals to this not true but string and now if I just specify hen s my file and run there it's going to gives us a false because that's not a valid p r and now if I duplicate this line of code and if I change that to like uh cddc s my file and run there it's going to gives us like true for there because this is true if I reverse this out so it's going to still gives us that cddc or if I duplicate that and change that to like Abba sa my file and run there and it's going to give this true once again so that was the pandrum third one which is the integer reversal so now that we know how we going to be reversing the string now it's time to learn about how we are going to be reversing the integer so let's suppose if I specify like 1 2 3 to my function so it's going to reverse it out to 3 I mean like 4 3 2 1 and if I specify like 5 6 7 8 it's going to give us like 8 765 basically it's going to just reverse it out so if you feel like you totally can do this challenge by yourself go ahead do that if you can do it then here are my hands and keep in mind if you can't do it like please pause the video and do that by yourself but if you can bang all righty so what do we have to do the first thing that we have to do is that we have to convert one number to a string we already know that we totally can do that in JavaScript and spoiler alert we have a method for that in JavaScript and if we didn't have that method we can still do that in JavaScript now the next thing that we have to do is that we have to convert a string to array next we have to reverse the string then we have to convert array back to that string then we have to convert a string to the number and finally we have to return the number and you can totally use a Google for this one if you wanted to and basically these are just a method of JavaScript and by the way you can totally do this challenge without even using a method if you wanted to so you know what give it to your short if you can't do it here's my solution baby and the solution is this okay so convert number to a string so for that we are going to be using the two string method of JavaScript and if you want to convert a string to array so for that we already know the split method if you want to reverse it out so we have a reverse method if you want to join it back so we have a join method and now if you want to convert a string to a number so for that we have a par end method and finally we are going to be just returning that number so now let me just remove that right here and now let's just create or uh reverse integer and it's going to be taking the number and now let me just create this function so let's just use our reversed it's going to be equals to that n that two string method so it's going to convert a number to a string then we have to split it out okay so we have to make it as an array then we have to reverse that array so if I just use like rewards and now we're not going to passing anything to that and finally we have to join it back so I'll just use that join method right here and now the next thing that we have to do is that we have to return our par integer so it's going to giv us s string so we have to convert that to uh integer right here so we are going to be passing our uh what do we call it we are going to be passing our string it's going to convert it to the integer so then we have to use our math. sign and now let me just specify this n right here okay so if I save my file and now if I specify like I don't know maybe a reverse string and now if I write like I don't know maybe minus1 2 3 semi file and run there it's going to gives us that 321 we can also specify positive value like Val we can p a positive value not a video so let me just reun there it's going to also like still gives us that 321 uh if I use 32 1 so if I save there it's going to give us one two three we can also use like four five 6 say our file so it's going to gives us 654 and this is how we're going to be reversing the ing in JavaScript time for another challenge which is the sentence capitalization okay so basically I want you to just create a function which will take some sort of a string so let's suppose if you specify the lowercase string so it will just capitalize the first letter like H will be capitalized and then this W will be capitalized okay just like that so here you can see if you specify like Hello World in the lower case so it's going to just capitalize it like this it's going to take the first element and it will uppercase the first element and here is another example if I specify my own name it's going to use us like this so give your best shot if you can do it that's completely okay and here are a few hints if you care about that so here are a hints then if you don't care about that then go ahead and solve this challenge by yourself so here are the hints so make the string lower case that's going to be the first thing then convert that string to array we already learned about that then capitalize each word so we are going to be itating over through that array and we will take the first element from the array and we will only capitalize or uppercase that first element and then finally we have to convert array back to the string so basically if I just you know I'm not going to give you any more hands in there so give it your best shot if you can do it then watch a solution and here is my solution so I'm going to just remove that from here and here is the solution so how we are going to be making our string as a lowercase so for that we have a two lowercase method method in JavaScript and how we are going to be converting a string to array for that we have a split method how we are going to be capitalizing each word so for that we are going to be using the map method to iterate over every single item from that array which we just met by using the split method and finally we have to just convert back or array to that string by using the joint method so yeah that was that and I just realized it should be four not three okay so you know let me just write the code I'm going to write like const Capal lies it's going to be equals to this string it's going to take that string and now inside this function we are going to be returning that string and we're going to be using that two lower case method first of all and then we are going to be making that lower case string as a split array okay after that let me also provide a space right here after that we're going to be itating over through each item inside that array so for that we are going to be using that map method and we're going to be passing that word to it and now we have to get the first element from that array and we have to just make it like two upper come on u p r c and we have to execute that let me just go back and finally we have to join the rest of the word so we are going to be using like word. splice not splice but a slice and we have to join it back okay so now that's done we have to write the join method so it's going to join it back and that's the entire solution so what are we doing first of all we are now taking the string we are now making the as a lower case you don't have to do that there but we will do that because yeah in some situation let's suppose if somebody specify like hello word in uppercase so first of all we are going to be making that as a lower case like a hello word so that's going to be the first thing now the next thing that we have to do is that we have to convert there to a i me like to array okay and then we have to itate over through that entire array we have to get the first element from the array we have to uppercase that and then join the rest of the array okay just like that and by the way this join method allows us to join back that array to that string okay so now let me just go back and let's just proide a few test cases so let me just use like con log of capitalize or capitalize function we're going to be passing hello word to there if I do that save my file and run that and here you can see we are now getting like hello word right here and if I specify a space right here save my file and rerun there and now we are getting that hello word with a space and here you can see that the first letter is now capitalized and the rest of them isn't okay so that's there and let me just provide another test case for my own name like uh hosan webdev I'm going to also provide one for the Jordan Peterson the person I don't like that much but yeah I don't know why I'm providing his name in every single course of mine but yeah I guess name sounds cool so here you can see everything is now successfully capitalized time to solve another challenge which is the fiz bu was the most popular challenge like ever and maybe 80% of the interview I've seen this challenge that this challenge is asked so basically what you have to do is that you have to create some sort of a function which will take like n number of um come on which will take n numbers of numbers and then what we have to do first of all we have to print numbers from one to n that's going to be the first thing now the next thing that we have to do if the number is divisible by three which means like in this case going to be using the mod okay so it's going to gives us the divisibility so if the number is divisible by three print phase otherwise gives us that number from one to the end okay so we are going to beating over through that number starting from the one through unlimited amount of numbers which we are going to be providing and if the number is divisible by three so only gives us phase and if the number is divisible by five gives us buzz and if the number is divis ible by three and five so then in that case we have to get the fiz bus otherwise we have to print the number so give it your best shot and there are no hands because these are the entire hands so give it your best shot if you can do it that's completely okay then watch a solution and here is my solution buzz and it's going to be taking the number now inside this Loop we have to first of all itate over through that unlimited number which we are going to be taking as a perimeter so we are going to be writing like let I equals to one because we're going to be starting our loop from one as I just mentioned right here like starting from one to the end numbers okay so let I equals to 1 and then I is less than or equal to n and then I ++ that's the first thing that we have to do now the next thing that we have to do is that we have to check if the number I mean like that I which is like a number we now going to be iterating over through the entire list if the number Mar three is equals to 0 and index like that same number mod 5 is equals to 0 so what do we have to do in that case in that case we have to just write like phase buz this the first step is now successfully completed and now the next thing that we have to do let me just write lse statement right here else if we have to provide another statement right here inside the or not a statement but a condition which is if I or you can say the number is divisible by 3 is equals to zero so what do we have to do in that case we have to just write the phase okay so like phase and then if that's not the case so we just have to run or you know what we have to provide another one okay so we have to provide like if I mod 5 is triple equals to zero so in that case we have to write like um buzz in this case because that was if the number mod 3 is equals to zero and the number Mod Five is equal to five so we are going to be printing like F buzz like both of the word at once if the number mod 3 is equals to zero so we are going to be only printing the pH if number Mod Five is equals to five I mean like zero so for that we are going to be only printing the buzz otherwise we have to just print cons log and that same number right here so if I sell my file and if I run this code like f buzz and now I'm going to have to specify like 15 sell my file and now if I run there here you can see it's going to first of all gives us like one then two then three will gives us Fizz right here then it's going to give us four and then we have Buzz Fizz and so on and so forth so this is what we call the fizzbuzz challenge time for another challenge I want you to keep in mind that this challenge is not the easiest challenge and I'm not going to even assume that you can totally do this challenge by yourself but at least I want you to give it your best shot so what do we have to do imagine you're buying and selling a stock throughout the year your job is to find the biggest profit you could make by buying low and selling High only once keep that in mind this condition like only once you can read this through by yourself so what do we have to do here is what you are given a list of stock prices for each day like in day one the stock price will be seven in day two we will have one we will have five and so on and so forth so here is what we need to do the difference between the cheapest price you could have bought the stock and the most expensive price you could have sold it later on and there are no there are no hints for this Challenge and and I'm not even going to assume that you totally can this challenge so yeah if you want to give it a try you totally can you don't have to give it a try because I'm about to show you the code so what do we have to do first of all we have to write our Max profit now inside this going to take the prices as a perimeter so the first thing that we have to do is that we have to get the minimum price so we will just write like Min price and we will set there to the prices and we will get only the first day okay so you know what let me just see pass their prices right here I'm going to write like prices it's going to be equals to that same prices okay like we have first of all seven then we have 1 5 3 6 and four and now we have to pass that to our Max profit function we are now going to be pening there let me just store there in some sort of variable like a profit and then we have to log there to the console so we will just say like maximum profit profit was this much okay so we'll just P that function right here or that function call to be precise so now we are assuming that the first day is the cheapest day to buy which is the seven now we are just only assuming that that's not going to be the case actually but we are just assuming that next we have to get the max profit which will be initially set to zero because we didn't sell something we bought something but we didn't sell it to someone so that's why the initial value will be set to zero and now underneath that we have to itate over through these prices and then we will find out like what is the current price what is the minan price and what is the potential price and all of that okay so I'm going to just write like for let I equals to 1 and then I is less than prices. length come on l e n GT and then i++ and now inside there first of all we have to get the current price so we'll just s like a current price it's going to be equals to the prices and then that value which means like we're going to be getting like all of them so you know let me just show you the e one okay so I'll just write like a current price right here sell my file and now let me just run that and it's going to give us there 53 64 so these are the current prices which we're now getting right here inside this Loop so now let me just cut this out the next thing that we have to do is that we have to update the minimum price if the lowest price is found so you know let me just write there right here so update minimum m m i n i m u m minimum price if the lower price is found okay so how we are going to be doing that well first of all we have to use the math.min and it's going to gives us the minimum value from our entire array and the minimum value which we already have is this Minx Min price right here so we have to copy that we have to place that right here now let me just put write a comma and then we have to pass our current price which we are now getting right here so we already saw what this gives us and now we have to assign that to the minimum price so what I'm going to do is that I'm going to just write like a minimum price and it's going to be equals to that minimum value right here so now that's done so if I log that to the console like uh Min price let me just sell my file go back and run that so we are now getting like only the one and here you can see in this entire array the minimum price is is only one right here five is not lower than one three is not lower than one 6 is not lower than one four is not lower than one seven is not lower than one only one is the least or you can say the minimum price so that's done and now let me just clear this out now the next thing that we have to do is that we have to get the potential price and how we are going to be getting there to get there we are going to be using current price minus minimum price right here and we're going to be also storing there some sort of variable like potential profit it's going to be equals to this function potential let me make sure the spilling is correct we have potential Price Right Here and Now if I loog this to the console like potential price right here or profit why am I saying price and now let me just run that so it's going to give us the potential price of 0 4 2 5 and 3 it's not going to gives us seven it's also not going to give us six right here but the potential prices are 0425 and three so then done and now underneath there would we have have to do we have to get the maximum profit and that's going to be it okay so how we are going to be getting there as we learned that math. Min will give us the minimum price now we can use the met. max so it's going to give us the maximum price right here so first of all we have to provide this Max profit I'm going to copy that and now let me just place that right here and we are going to be also passing the potential profit and now let me just assign that to the max profit and it's going to be equals to this uh method word here now let me just log that the console so we have a Max profit save my file and run there and the maximum profit we have four and also the five right here and this is undefined because we have to return something from this function that's why it is undefined okay so now that's to done the final thing that we have to do is that we only have to get the maximum profit so we have to return the max profit s my file and run there so we are now getting the maximum profit of five right here that's going to be the maximum profit and one which we just saw right here from the minimum price is going to be the lowest so we are going to be buying our stock by one and then we are going to be selling that on the fifth day o that was a lot of talking so this is how we are going to be solving the max profit challenge this one is going to be a bit more challenging so let's get into it so what we have to do the first thing that we have to do is that we have to create a function that takes an array and a chunk size as inputs so it's going to take array and also the chunk size as inputs now next the function should return a new array where the original array is split into chunks okay chunks of a specified size so basically what we have to do is that we are going to be passing some sort of array and we're going to be also placing the size like in how many pieces we want to split this array into okay so we have this data right here like add items inside this array and we want to split this out into three so here you is going to give us like 1 2 3 in the first array 4 5 6 in another one and then 78 in another one okay so that's done now we can also specify like um 1 2 3 4 5 for the array and we can split this out into two so it's going to give us like 1 two and 3 four so give it your best shot if you can do it then watch a solution and here are a few HS but trust me it will not help you a lot I totally can guarantee so now let me just place it right here if you want to read through there you totally can otherwise we're going to be writing a code for the like exactly the same code so if you don't want to read there you can go ahead and just uh fast forward the video if you wanted to otherwise I'm going to read there create an empty array to hold a chunks set the starting index to keep track of where we are in the original array Loop through the original array as long as the index hasn't reach at the end and then extract the Chunk from the desired size from the original array then add add the extracted chunk into that chunk array which we've already defined at the beginning of this um challenge then move the index for by a chunk size which we're going to be taking as a perimeter to get the next chunk and then finally we have to return the final array of chunks so I already told you that it will not help you that much but yeah these are a few hints so give it your best shot if you can do it that's completely okay and now let me just show you my solution so what we have to do is that we have to create a chunk function it's going to take the array and also the size okay so now inside there we have to first of all create a chunk array okay some sort of a place or a database where we're going to be storing our chunk array okay so yeah that's that now the next thing that we have to do is that we have to also set the index which will be initially set to zero okay and now what we have to do in that case we're going to be iterating over through our array so we're going to be just using like index is less than array do length while uh while index is less than array. length there we go come on L GTH so what do we have to do in that case well we have to split our array and we have to make it as a chunk so we going to be just writing like chunk it's going to be equals to array. slice method and if you guys don't know what a slice method is so I want you to just pause the video right now at this point at this second and go to either YouTube or chat GPT or Google Google or something like that and search about array and slice method so we're going to be passing the index and now let me just pass the index plus that size right here inside there okay so if you log there to the console this chunk and I'm going to also return this chunk right here so let's just return what chunk c c chunk there we go so I'm going to be pasing some sort of a data to there so I'll just write like conso log of Chunk and now let me just write like uh one comma two comma 3 four five six 7 8 I'm going to pass eight and we want to split this out into three so now if I save my file and run there and here you can oh my God it will gives us a oh my God it will gives us a infinite Loop because we are already inside the Y Loop God damn it I'm going to have to re-record this video sh oh finally I close my vs code and reopen there oh God damn it so we have to just use our chunk and we come on chunk which we currently have right here this is going to be our database and now inside there we have to just push our chunk array right here okay so we are going to be just pushing the chunk into our chunk array and then finally we have to use our index plus equals to the size right here so now I can totally uncomment this line out and now if I save my file and you know what I'm going to also write a separator for myself so if I save this file and run that and reopen and now that's really working so this method will allows us to split our array into different chunks right here which you can see right here so here you can see I have items starting from 1 through eight and now I'm splitting this array into these size which you can see I already plus this size right here so what we are doing first of all in the first itation we are now taking that array and we are now splitting that into one two three item then in the next iteration we are now taking this array and we are splitting there into four five six item and then finally we have seven and eight item right here and then finally in this case which you can see right here like chunk. push and then we are pushing this chunk is that database which I mentioned right here we are now pushing that chunk which we are getting right here into that array so that's the final result that we are getting right now all righty so time for the final challenge which is the two sum and before we start this challenge I want to say that this challenge is not the easiest challenge in the world like this is the most not the most difficult challenge but it is some sort of a difficult challenge you can say that so we are going to be writing a code for this challenge but we not going to be refactoring that code because we didn't discuss something called the maps and hashes and stuff like that so once we learn all of that stuff then we're going to be refactoring our code but for now the code we are about to write will gives us the biger of o n to the power of two which means like we're going to be using a two four Loops so what are we even talking about so imagine you have a list of numbers and a target number your job is to find two numbers in that list that adds up here the keyword is that adds up to the target number you also need to tell which position or indices or indexes those two numbers are at in the list okay so let me just give you example of that so if our list looks something like this like uh we have a 27 11 and 15 items inside there and the target is nine like you want to find you know let me just say and the target is nine and the answer would be 0 and one because two at the index of zero which you can see right here I'm talking about this two right here plus 7 let me just add that right here so 2 + 7 at the index of 1 right here equals to 9 we are now providing this array and what do you want to get back you want to get the addition like once we add two numbers or you can say the pair it doesn't matter if you add the first one or the last one or the middle one and if it gives us that nine then that's the correct solution right here so I want you to pause the video and read through all of this stuff by yourself I feel like I didn't explain it that much well so I want you to pause the video and you can read through there and then give it your best shot and if you can do it that's completely okay because at this point of the course I don't expect you to solve this challenge by yourself so now let me just write some code and then you'll get to know what I'm talking about and by the way before I start you with the code I want to say this note that this is not a better solution we will make it better in the upcoming videos okay so first of all we are going to be creating some sort of a function I'm going to give it the name of like two sum it's going to take the perimeter of nums it's going to also take the target as well and now inside there the first thing that we have to do is that we have to Loop through each number in the list come on what is the spelling of a three okay so first of all we have to write or let I equals to zero then I is less than nums do L uh and then finally we have to L G and then we have to just write i++ inside there let me just go back now inside there for each number check the rest of the list okay so now we are going to be doing that we are going to be just writing like let J = to 1 I + 1 and then J is less than nums do length and then finally we have to just increment or J as well okay so now inside there we have to check if the current number and the one we are checking add up to the Target then what do we have to do in checking then what do we have to do in that case we have to just return the their indexes or their indexes okay so now let me just save this file and go back and now we are going to be checking there right here so if num nums do I which means like we're going to be iterating over through for the first time and then nums doj the second time is triple equals to the Target so in that case we're going to be just returning like I comma J that's not the case so we are going to be just returning the empty array in that case and now under NE let me just test this out and I want to store them in some sort of variable like conr and I'm providing like 27 11 uh 15 and I want to get the pair which will return the nine okay so 7 + 2 will give us 9 7 8 9 okay so which means like we are going to be getting the result of uh what do we call it zero and also one okay so we should get there if I set up everything totally correctly so we're going to be getting like res and sale there and yep we are totally correct so we are now getting the index of zero and also one which is totally correct let me pass another array which looks something like this so we have like 13 7 9 and two and we want to get the 11 right here so it's going to give us us 9 + 2 will gives us 11 so 0 1 2 3 and four so it's going to give us three and four and now I'm going to have to store that in the rest twoo and now let me just duplicate this line of code and provide our rest to sa our file and run there and it's going to gives us that three and four right here and by the way this is not the better solution because we're going to be refactoring this code and I'm going to even explain this code a bit more once we jump into something called the maps we are not there yet so we are not going to be discussing that right now anyways that was it about for the arrays thank you so much from the bottom of my heart and I'm going to see you in the next part of this course and for now take care love you all if you want to subscribe to this channel feel free to do that and I'm going to see you in the next video bye-bye again Su and welcome to the data structures and algorithm master class so in this video I'm going to be teaching you every single thing that there is to learn about the link list so what are we going to be learning in this course we are going to be first of all starting our conversation by talking about the singly link list then we are going to be jumping into the W link list and finally we are going to be solving the interview question the reverse link link list so now let's get into it okay so now let me give you the academic definition of what a link list is and why you should even care about that so A Link list is a linear data structure where elements are called nodes are not stored continuously in the memory instead each node contains data and a reference keep in mind these two words like each node will contain data and also the reference or you can also call it like a link to the next note in the sequence now I know a lot of you will say like hus these are a lot of like gibberish words and I don't get it well I know that you don't get it so now let me just break this down for you so now let me show you how the link list looks like in this is how it looks like right here now a lot of you will say like hus what in the world are these things these things are called a nodes which I'm going to be explaining in a few seconds but I want you to just give me a bit of time and for now you can just say like this is a data which will be pointing to another data and so on and so forth but when we don't have any other data so we are going to be pointing to the null right here so basically a link list is just a combination of these nodes right here which will be pointing to another node and another node and when we don't have any other nodes we're going to be pointing to the null okay so now let's talk about these nodes and what are these node even made of so this is something called the node and basically it is just an object which will have two properties the data and the reference okay and that data can be anything so now in this case I only put one right here as a number but you can put string you can put undefined you can put null you can put like uh object you can put arrays you can put anything that you like but in my case I only store one right here now the next thing that we have is something called the reference which will be referencing to another node and when we don't have any other node so we are going to be referencing still to something called the null property okay so let's suppose if you have this other node right here so we are going to be taking that and we are going to be referencing that first node to that other node word here okay and then if you don't have any other nodes so we going to be pointing to the null value right here K and node is basically going to be just an object which will have two properties like data and the reference and that data can be anything and that reference can also be anything but we are going to be referencing to another node okay and when we don't have any other nodes we're going to be pointing to the no so the combination of all of that nodes is something called the link list but now the final thing that I want you to keep in mind about the link list is that the first element is called the head and then the last element is something called the tail okay so now this entire thing is something called the singly link list and we're going to be also learning about the W link list as well okay so time to create our own node and once we are done with that node then we're going to be jumping into create our own linked list okay so first of all how we are going to be creating this node and what is inside this node now let me just show you there so we already know that our node looks something like this so basically this is going to be just an object that object will have a data you can also call it the value and in my case throughout the course I'm going to be calling it as a value but you are more than welcome to call it as a data so we would have some sort of a data and then that data will be pointing to like anything you can provide a number you can provide a string you can provide anything that you like then we will have a next property which will be initially said to know because currently we only have one link list right here I mean like currently we only have one node not a link list okay so let's just remove them and to create a node the first thing that we have to do is that we have to create a class we have to give it some sort of a name so in my case I'm going to just give it the name of like node and now inside there we're going to be creating our Constructor and now this Constructor will take some sort of a value and based on that value you know let me just show you there this value will be that data right here you can give it the name of like data if you wanted to you can give it the name of like value you can even provide it at the name of like banana if you wanted to but some people call it the value some people call it the name of data so in my case I'm going to be calling it as a value and now we are going to be creating this. head because we already learned that the first element of the link list is called the head and we're going to be pointing that to that specific way right here after that we're going to be also writing this do next and we are going to be setting that to the null so congratulations that was our first node now that we successfully created our node the next thing that we have to do is that we have to create our own link list and how we are going to be doing there well you guessed it we're going to be using a class once again you can give it any name that you like but in my case I'm going to give it the name of like link list and now inside there we're going to be passing our own Constructor and we're going to be also providing some sort of a value when we are creating this link list now let's talk about how our link list looks like right here okay so this is how our link list looks like so we would have a nodes then the first node is called the head the last node is called the tail now initially we only have one node right here so our head will be pointing to this node right here and also our tail will be also pointing to this one one node right here so now let's just do that first of all we have to create our head so we going to be just writing like this do head and it's going to be equals to the new node and we're going to be passing that value right here which we're taking as a perimeter from The Constructor and we have to pass that right here inside this node and now that we successfully created our node word here okay so that's going to be the first thing which is now ahead now the next thing that we have to do is that we also have to provide a tail so we're going to be using like this. tail it's going to be equals to the this do head head so here you can see we are now pointing that head to that newly created node right here we are also pointing this tail to this do head right here which in this case is still that specific node which we just created right here now optionally we're going to be also providing another property called the length because when we because when we want to keep track of that length so we're going to be just providing like one now in this case we only have one node right here so we are now pointing the this. length property to this one and once we are creating that push and pop method so we are going to be incrementing and decrementing this property now that we successfully created our node and we also created our link list right here so now let me just create instances over there I'm going to go back and I'm going to give it the name of like con my link list it's going to be equals to the new link list which we just created right here at the top and we're going to be passing the value of one okay so if I loog there to a console like my link list and now let me just save my file and run there so what are we getting we are now getting our link list which have a head property and which is pointing to that node and now inside that node we have a head property and the value will be set to one because we are passing that one right here and the next property will be set to no because in this case we only have one node right here so we not going to be pointing to any other nodes and then finally we have a tail and we have the head property of one inside there and the next property of null and the length is now currently set to one so this is how we are going to be creating our node and this is how we going to be creating our link list and now let's talk about the push method inside that link list Welcome to our first challenge first of all let me give you the directions and then we're going to be writing our code okay so we are going to be implementing something called the push method and push will allows us to add a new node at the end of our link list okay so how that's going to look like I want you to keep these steps in mind so the first thing that we have to do is that we have to create or new node like that's going to be the first thing that you have to do because when we want to push a new node at the end of this list first of all we have to even create that new node okay so that's going to be the first thing now this node is no longer set to null because we have a new node right here so we're going to be taking that and we will just put that on a side and now we are going to be grabbing that newly created node and we will put that at the end of our link list right here that's the second step now the third step step is that we have to take this tail because this one is no longer the tail now this one is the tail okay so we are going to be taking the reference of this tail and we will point that to this node right here and now this newly created element is not referencing to anything so we will just take that now and we will point there right here so this is how we're going to be pushing a new item to or link list right here so the first thing that we have to do is that we have to create a new node the next that we have to do is that we have to take this pointer or marker or anything that you want to call there we will take that from this node and we will point there to that newly created node and finally we have to just set there to the n and this is the entire flow so I want you to give it your best sh if you can do it that's completely okay then come back and watch the solution and now let me give you my solution okay so you know what first of all we are going to be just writing a push method and we're going to be providing a value to that because based on this new value we're going to be creating a new node so the first thing that we have to do is that we have to create a new node which you can see right in here okay so how in the world we are going to be creating a new node well you guessed it we are going to be using a new and then the node and then finally we are going to be passing this value which we are taking as a push and we have to pass that right here inside your node and then we have to store in some sort of a new variable like new node or something like that the next step is that we have to take this t which you can see right here which will be initially pointing to this four we have to take this tail and we have to point the to or newly created node right here so how we are going to be doing this one well we have to just write the this. tail do next property which we currently have inside our node so we have this node right here and we have this next property inside there and it is now pointing to this null value okay so we have to take this. tail. next and we have to point there to that newly created mode and now next we also have to write that this tal going to be set to that new node and finally now we are adding new item so we have to just increment our length so this our length Plus+ and now if you s our file and now that's totally done there is still one thing left which we're going to be discussing in a few second but first of all let me just try out that push method okay so I'm going to be using like my link List Right Here and Now if I use a push method and I'm going to be just passing like 10 right here in this case and now if I save my file and run my code so what are we getting uh let me just expand there first of all we are getting the head which is set to node now inside this node the first head is pointing to this one value then we have a next value which will be pointing to that newly created node right here and now that newly created node has the head or you can say the value of 10 right here and then finally we have a next property which will be now set to no because we no longer have any other nodes so it's going to be pointing to that now so here you can see we have a tail and the head property is now set to the 10 because this is going to be the last element and then we no longer have any other element so it's going to be pointing to that now and here you can see that length is now set to two Okay so this is how we going to be implementing the push method but there is a bear of catch and what is that catch I'm talking about let's suppose if we don't have any elements inside this link list head is pointing to nothing and also tail is pointing to nothing nothing like this is totally set to n like we don't have any elements so which you can see right here so what are we going to be doing in that case when we are performing the push method well you guessed it we are going to be just removing this null first of all we have to create one new element and we have to put that right here we have to take the head value and we have to point that to this node right here then we have to take that tail value and we have to point that to this node right here so now both the head and also the tail will be pointing to this newly created node right here when we are performing the push method so now let me just do that right here so once we successfully create our node the next thing that we have to do is that we have to check if we don't have any heads which means like our link list is empty so we are going to be taking the this. head and it's going to be equals to the new node and we are going to be also taking the this. tail and it's going to be also set to the new node right here and that's it baby that's it okay that was there about the push method in the link list all right so now let's talk about the pop method and I got to tell you this is not going to be the easiest one okay so what is the pop method a pop method where allows us to remove the last item from our entire link list so how we are going to be doing that well that's quite simple and easy we have to just take the tail and we have to point it right here and then we have to say byebye to this one and we have to take that null and we have to put it right here I wish it was that simple it's not that simple so what do we have to do we cannot take this tail and we can just point it directly to this third element or the previous element we have to iterate over through this entire list and then we have to find out the last element and then we have to find out the previous element and then we are going to be taking their tail and then we're going to be pointing this one and finally we're going to be removing there okay so that's the entire process so now let me just break this down for you right now so for now I'm going to just take up both the head and the tail and I'm going to just move there right here up above and I want to show you something first of all we're going to be creating two variables the first one will be a temp you can like give it any name that you like but in my case I'm going to give it the name of like Temp and we're going to be also creating another variable which will be a prev okay like a previous okay you can either call it the previous or the next or something not a next but a previous or a temp so I'm going to just call it as a temp in the previous and we have to point both of those variable to this head right here okay so now we are going to be starting iterating over through this entire list so you can either use the full loop or you can also use the Y Loop so how that's going to look like so we're going to be taking this St variable and we're going to be asking the question like are you the last element no I'm not then we are going to be taking this stem variable and we have to move there to this one and we will say this one like you are the previous element so we want you to stay in here for a while then we're going to be asking this one are you the last element then it's going to say no I'm not I have a reference to another element right here so well we will say okay no worries so we're going to be pointing to this next node then this St variable will also call this previous one and we will move there right here like this one is not the last element this one is also not the last element now we going to be asking this one are you the last element is going to say no I'm not because I'm now now pointing to another node okay so we will say okay then we will take our temp and we will point this one right here to this fourth element we will also take this previous one and we will point that to this third element now this temp variable will ask this one are you the last element and it's going to say yeah because I no longer have any other nodes so I am the last element so it's going to say okay cool finally I found you okay so finally I found you so now this previous will take up this tail so we will take this tail and we will point it to this third element and then we can totally sa to this element right here so I'm going to just remove that from here I'm going to also remove the stem from here and then we will take this n and we will point that right here okay and this is the head value now and now we successfully remove that last element so this entire process is known as popping out the node from our link list so I want you to give it your best shot if you can do it that's completely okay and now I'm going to just give you my solution the first thing that I'm going to do is that I'm going to be using a pop method it's not going to take any perimeter because we are now removing the last element from our link list so first of all we have to create both of that variable like uh let temp it's going to be equals to this do head and we're going to be also creating like let pre for the previous one and it's going to be also pointing to this do head okay so now underneath we're going to be using the Y Loop you can totally use the for Loop if you wanted to but in my case I'm going to be using a y Loop and now inside there we're going to be providing that temp. next right here because the temp. next it's going to ask this one are you the last element no then it's going to jump into this element right here okay so that's why we're now providing this temp. next right here and now inside there we can set the pre is equal to the temp variable which is currently set to the temp and that temp was ahead okay so now we move this one but we're going to be still leaving this previous to this previous Noe to be precise and now we're going to be taking this temp it's going to be equals to this pr. next okay so now that's totally done the next thing that we have to do is that once we successfully found out the last element now in this case the last element is this one so we're going to be taking this previous and we have to point it right here to the second one we have to take up our tail we have to point it right here and we finally have to save a buy to all of them and now this one will be set to null okay now let's just do that so we're going to be using like this tail it's going to be equals to their pre and we're going to be also taking this. tail. next it's going to be now set to no so it's going to remove that connection it's going to remove that last element from that link list and then finally we have to decrement we're going to be using like this length minus minus right here okay so now that's totally done so I'm going to save my file and underneath that we're going to be also returning our temp variable so that we can see like what was removed and that's not it like we have to still do a pair of modifications but currently I'm going to just remove this 10 from my link list so I'm going to just run my code you know let me just rerun this so you guys can see everything a bit better the length is now set to two and here you can also see the tail is now pointing to this 10 right here but now if I use like my link list. pop method and now if I sell my file and run there here you can see the length is now set to one and my tail is still the linkless tail is pointing to this head of one right here which means like it is only pointing to this one and this 10th element is now successfully gone from that Lisk my tail what the hell and there are a few edge cases that I want to point out which I did in a previous section you know let me just point it out right here if we don't have any head which means like if we don't have any items now in this case we are using pop method we are not creating any element we're not pushing that to or link list we're now removing there okay so if we don't have any element so what we are going to be removing from wiress if we don't have anything inside there so we are going to be just returning undefined or you can return null if you wanted to and now let me just show you if we only have one item so we are going to be using like this do length triple equals to zero so that we are going to be using this do head and we are going to be pointing there to the null and we are going to be also taking this do tail and we will still point that to that null right here and that is known as the pop me method I know that was confusing because data structure and algorithms are not the easiest thing to learn because it's going to allow you to go into big tech companies like Google Amazon Facebook so you cannot go into that companies just by learning the basic syntax of a programming language and something like that you have to learn all of that complexity in your code time for another challenge so in this section we're going to be creating a new method which is called the unshift so what this unshift will do that is going to allows us to add a new it or a new node at the beginning of our linklist so how that's going to look like first of all we have to create a new node and then we have to take up this head and we have to point there to that newly created node as simple as there but there is also one Edge case imagine that you have a link list which is totally empty so what are we going to be doing in that case well we have to remove this now and we have to put that newly created element which we are going to be creating by using that unshift method and we have to take this head we have to point it to come on we have to point it to that newly credit element and we also have to take that tail and we have to point it to that newly created element right here okay so that's exactly what we are going to be doing but first of all this is a challenge so I want you to give it your best shot if you can do it that's completely okay then come back and watch the solution but at least give it some sort of a try so what I'm going to do is that I'm going to just first of all create the unshift method and now inside that we're going to be providing some sort of a value and based on that value we're going to be creating our new node so the first thing is that we have to create our new node come on c new node it's going to be equals to that new and then we have to pass our value inside there now underneath that we're going to be checking if we don't have any items inside your link list like if we don't have any head so which means like we don't have any items inside our link list our link list is totally empty so we are going to be taking the this. head and we will point that to this new node and we will also take this do tail come on tail and we will point that to this new node which you can see right in here if we don't have any elements so we're going to be taking that new node which we just created and we're going to be taking the head we will point that to that newly created element and we will also take that tail and we will point that to that newly created element for Here and Now underneath this F statement we have to take our new node. next property and we are going to be setting that to the this. head and why is that because once we successfully created our new element right here we have to point that to the beginning not to the end but to the beginning and to do that we're going to be taking this node and we're going to be providing the do next property to the this. head and this do head used to be this first element so basically what we are doing is that now we successfully created our new element we are now referencing to the head to this first element now that's totally done the next thing that we have to do is that we have to take this head and we have to point it to that newly created element so let's just do that we're going to be taking this do head you can see right here and we have to point the to this newly created element so we're going to be just writing like new node and now underneath there we are going to be using like this start length Plus+ and finally we have to just return or this okay so that's everything that you have to do for the unshift we are now removing one element so I'm going to just remove that from here we only have one and we only have 10 inside our link list so now if I save my file and run that so currently we have only one and we also have 10 right here for the head we're now pointing to this one right here I mean like we're now providing this one but now I'm going to be using like my link list unshift method and I'm going to be providing zero right here in this case and now if I sve my file and run there and here you can see my head is no longer pointing to this one value which used to be this value right here we now pointing to this zero element or this zero value because we are now creating a new element and we are now pointing our head to that new element right here or that new note to be precise so yeah that was it about for the unshift method all right so time time for another challenge so I want you to perform the shift method so basically the shift method allows us to remove the first element or the note from our link list so first of all we have to take out this marker or head and we have to point it to the next element and then we have to say by-bye to this existing one to this first one to be precise and this is what we call the Shi method so give it to your best sh if you can do it that's completely okay then come back and watch the solution but at least give it a try so now here here is my solution so the first thing that I'm going to do is that I'm going to just write like a shift method and it's not going to take any parameters because we are going to be removing the first element okay so now we have to check if we don't have the this Dar head which means like if our linkless is empty so we're going to be only returning undefined and now underneath that we have to first of all point you know let me just WR C right here so point the first node SL element so we're going to be using this do head and we have to store that in the temp variable right here okay so now it's going to be equals to the head which means like the first element in our link list that's going to be the first thing now the next thing that we have to do is that we have to move the head to uh next node SL element you can either call it the element or the node okay so that's the next thing that we have to do like we have to take out you know let me just go back we have to take out this head and we have to point there or move there to the next element so now let's just do that okay so we're going to be using like this doad it's going to be equals to this. head. next okay so it's going to gives us the next element okay and now finally we have to remove first element which we currently have right now so now we successfully move our head to the next element and now we have to remove this first one so how we are going to be doing that well we just have to use the temp. next and we have to set that to the null okay and finally we have to just remove I mean like not remove but we have to decrement or length and now underneath that let's suppose if we have like zero items what are we going to be doing in that case so we're going to be using like this. length is strip equals to zero so we're going to be using like this. tail is equal to n that's it and finally we have to just return our temp so that we can see what happened so these are all the step that you have to take in order to remove the first element okay so now let me just use it right here so uh yeah at the beginning we are now adding zero right here you know let me just from there right here you can see head is now holding the value of zero right here for the first one and now I'm going to just remove this zero so it's going to gives us one for this first one right here so I'm going to be using like my link list do shift method and I'm not going to be providing anything to that so now let me just save my file and run that and here you can see now we successfully removed that zero and now it is set to this one right here so yeah that was about for the shift method in our link list welcome to the most easiest challenge in this entire course which is called the get first element okay so here is my my link list and let's suppose if you call this method on this link list so it's going to gives us that zero anytime we call that that's as simple as I can go so give it your best shot if you can do it well here is my solution so now let me just clear this out and next we're going to be implementing the get first method so let's just use get first and now we are not going to be passing anything to that because we're going to be only getting the first element and we just have to return that this done head and that's it baby that's it okay so now let me just uh uncomment I like comment this line out and comment this line out so we only have one and also 10 value right here or you know I'm going to also change that to two and now if I just use like get method right here get first method right here save my file and run there so it's going to gives us only the first element right here inside your link list so that's going to be the first element and that's going to be the last element so that's why we are only getting the first element from our link list and that was the get first challenge all right time for another challenge which is the get last element okay so we're going to be just creating some sort of a temp variable like temp oh my God I didn't mean to do that let me just create a temp variable and we're going to be asking a question from each of the nodes which means like we are going to be using some sort of a loop are you the last element no because I'm pointing to another node then it's going to jump to this one are you the last element no I'm pointing to another one then it's going to to jump to this one are you the last element no I'm pointing to the next one then it's going to jump to this one and it's going to say no I'm also not the last one because I'm pointing to this one then it's going to jump to this one right here and it's going to say yeah I am the last element because or the last node because I am not pointing to another node right here so then it's going to gives us this value right here so I want you to give it your best shot and if you can do it that's completely okay come back and watch the solution and here is my solution so we're going to be creating get last method first of all we are going to be checking if our link list is empty so for that we are going to be only returning n and if that's not the case we are going to be first of all creating that uh temp variable and we will select this do head we will point there to the first element right here from our linkless like it's going to be pointing to this one because this is the head so we now going to be taking this temp variable and we are going to be pointing to the first element which we are doing right here okay so that's done now the next thing that we have to do is that we have to use our y Loop and we have to pass our temp variable inside there and now we are going to be checking if not temp. next so in that case we're going to be returning that temp otherwise we have to change the temp to temp. next like we have to keep searching this line means like we have to keep searching and if you found the last elements we're going to be only getting that specific last element okay so that said and now let me just s my file I'm going to rename that to the get last right here so now if i s my file and run there this it's going to gives us that node which have that head which is pointing to this two Valu so if I change that to like I don't know maybe 20 and save my file and run there so it's going to gives us 20 right here so this is how we are going to be getting the last element from our link list time for another challenge which is the get or you can say get element by index you can give it any name that you like but in my case I'm going to only call it get and it's going to take only one perimeter which is going to be the index so we're going to be passing some sort of index and based on that index we're going to be getting that element like for example if I specify the index of three so it's going to search from zero one 2 three so it's going to only gives us that three right here okay so you know what first of all let me just change that to the index come on index and what we are going to be doing is that we're going to be using some sort of a for Loop and we are going to be still asking that same question like are you that element which I'm searching for like for instance if I specify three so let me just simplify there for you are you3 no I'm not are you3 no I'm not are you3 no I'm not are you3 yes I am so just return this node right here so give it your best shot if you can do it that's completely okay then come back and watch the solution and here is my solution okay so I'm going to just use like get and I'm going to be passing Index right here because we are going to be searching our element based on that index and first of all we have to create some sort of a counter because we're going to be incrementing this counter by using our y Loop the next thing that we have to do is that we have to point to that head so you can either give it the name of like temp or you can give it the name of like node and it's going to be pointing to that head because we're going to be starting our iteration from the first element okay so you know instead of that node I'm going to just give it the name of like uh T I guess that makes sense so now we're going to be using our y Loop and we have to P that temp inside there and now we are going to be checking if counter is triple equals to that index so in that case we're going to be returning that specific thing or that specific node okay which is now currently pointing to this head and otherwise if that's not the case so anytime we iterate over so we're going to be incrementing our counter by one and now the next thing that we have to do is that we have to just change the temp value to the temp. next like we're going to be iterating over through again and again as long as we didn't found that specific index item okay and if that's not the case we have have to just return null and now let me just save my file and this is the entire code which you can see right here okay so that's done now let me just use it right here and instead of providing a get last you know I'm going to also push so this is going to be zero and I'm going to just change that to one two and I'm going to specify three right here in this case and I'm going to be using the get method which I just created right here a few seconds ago and I'm going to just past the index of three so now if I save my file and run there and here you can see I'm now getting the node with the head value of three and next will be now set to no because we no longer have any other elements so that's why we are only getting this specific element right here if I search for like I don't know maybe a second and come on what the hell did I just do if I change that to two and now if I run that so we now getting this second element or second note to be precise so that was our get method in link list time for another challenge which is the set method so you can think about the set method is just like a update method so it's going to take two parameters like the index and also the value and once you specify a specific index it's going to give you that specific node based on that index that you've provided and then you can also change the value of there if you wanted to so here let's suppose if I want to change the value of this two so I'm going to have to specify the three as a index so let me just write a three right here so I'm going to have to specify three as a index once you found that element we can totally change the value of that to anything that we want okay so how that's going to look like the first thing that we are going to be doing is that we are going to be passing some sort of index and we are going to be looping through this entire list and we're going to be asking this question are you there item that I'm looking for no I'm not let's suppose I'm searching for like uh I don't know maybe two so I'm going to just write a two right here so I'm going to just ask this question like are you the two no I'm not then we're going to be jumping into this one are you the two no I'm not then we are going to be jumping into this one are you the two yes I am okay so we are going to be returning this item but not only that we can also change the value of that to anything like let's suppose if I want to write like 10 or maybe 20 or something like that so I can totally change the value of there so give it your best sh if you can do it that's completely okay then come back watch the solution and here is my solution so what I'm going to do is that I'm going to just write like a set method and it's going to take two parameters like index and also the value and now inside there I'm going to do a bit of magic not a magic but I'm going to be reusing the existing method so instead of itting over through this entire list like uh first of all we have to ask this one a question then this one a question then this one a question and figuring out all of them by ourself we already built a method for that and that method is this start get method and here it is taking some sort of a perimeter and based on that perimeter it's going to gives us that specific node okay so what we have to do is that we have to past that index inside this get method and once we are done with that we are going to be also storing there in some sort of variable like temp and by the way you can like any name that you like so I'm going to log this to the console so that you guys can see it a bit better and now if I save my file and now I'm going to have to use that right here so I'm going to be using like my link list and I'm going to be using this set not get but this set method on there and I'm going to just specify like I don't know maybe this second one right here so I'm going to just past this second one save my file and run there so what are we getting we are now getting that node and the head value is now set to two and why is there then because we are now getting this item right here okay so let's suppose if I specify this three save my file and run there so we are now getting that three right here and we are now getting this undefined that's because of this console. log so if I just remove there and now let me just rerun that and here you can see that console log is gone so I'm going to right click on there and I'm going to set that to the right and I think that looks a bit more better okay so now we totally not totally but now we successfully get the item in which we are looking for and now the next thing that we have to do is that we have to provide our condition if temp which means like if we found that specific node which we were looking for so what do we have to do next we have to get the temp. value and we have to change the value of that to that new value which we're going to be specifying right here so now that we successfully get this third element or this third node we can totally change the value of that to 10 or 20 or even the string value or anything that you like so I'm going to just specify this 10 right here and now the next thing that we have to do is that we have to return true okay and now if that's not the case we have to just return false in this case so now let me just go back s my file and run there and we have to log this to the console so console. log and we have to run and now I'm going to save this file and now let me just rerun there so we are now getting true right here and the Valu is now changed to something else so now I'm going to loog to the console like my link list sa my file and rerun there and here you can see you know let me just rerun from there for the final time and here you can see for the final element which is a three we are now providing the value of 10 to there and you can provide anything if you wanted to okay so that was our set method in our link list time for another challenge so I want you to implement the insert method and as the name suggest that this insert method will allows us to add our node into anywhere inside our link list it doesn't matter if you want to add at the beginning so for that we going to be using the unshift method and if you want to add there at the end so for that we are going to be using a push method which we' have already implemented but now the question is let's suppose if I want to add a new element right here inside at the middle or maybe if I have like a lot of elements and I want to add my element right here so how in the world we're going to be doing there okay so let me just show you there okay so now let me just show you there so the first thing that I'm going to do is that I'm going to just make a bit of space and now the next thing that we have to do is that we have to create our own element which we want to answer so the first thing that you have to keep in mind is that you have to create that new element so just keep that in mind you have to create that new element and then you have to figure out where you want to render this element or where you want to place this element so now in this case let's suppose if I want to place this 20 element or this node inside at the middle of this two and three the first thing that we have to do is that we have to access that before element where we want wanted to insert our new element so like let's suppose if I want to insert my element right here the first thing that we have to do is that we have to access this element and I'm going to tell you why okay so that's the first thing that you have to do let me just say that once again I feel like I'm confusing you first you have to create a new element second you have to figure out where you want to render your element third you have to access the before element where you want to insert your new element into so like in this case we're going to be taking care or we are going to be accessing this element right here now next you have to take this pointer like the newly created node pointer and you have to point that into this node right here the next node which is going to be after this node okay so now that's totally done now the next thing that we have to do is that we have to take this pointer as I said just a few seconds ago that we are going to be accessing this element so now we have to take out this pointer and we have to point it to this newly created element which you can see right in here okay so now let me just make it a bit bigger so you guys can see everything a bit better okay so just like that so I'm going to say that for the final time because I know this method will confuse a lot of student the first thing that you have to do is that you have to create your new node the second thing that you have to do is that you have to keep in mind like where you are going to be placing that node and third you have to access the previous element or not element but the previous node or the before four node whatever you want to call them and then third you have to take the pointer of that newly created node and you have to point there into the next element or the node and then finally you have to take the pointer of the previous node and you have to point it to the newly created node and that's it so give it your best sh if you can do it that's completely okay and come back and watch the solution and I'm going to give you my solution but now let me just correct the right here okay so this is how we are going to be adding a new element into our node so let's go the first thing that I want to do is that I want to just write like insert and it's going to take two parameters like index and also the value and now inside there first of all we have to perform a check we have to check if the index is triple equals to zero which means like we're going to be adding our element at the beginning of our list like we're going to be taking this element and we're going to be adding there right here at the beginning of this list so we can totally do that manually but we don't have to what we can do is that we can just write like return and then this. unshift because we already made this uh element right here so we are going to be just passing the value to that after that we can also check if the index is triple equals to this. length so we can then just push our element right in here so we can just use the push method which means like let's suppose if you want to add this element at the end of our list so for them can WR write more custom code but we already written our code which is the push method so we don't have to repair ourselves again and again we just have to do what we want to do okay so now let me just save this file and that was the first step now the next step is that we have to you guess it we have to create the new node right here so how we are going to be creating them well we just have to write like cons new node it's going to be equals to that new note right here and we have to pass a value inside there okay so that's stly done now the next thing is that we have to get access to this before element now we are placing this element right here at the middle of this 2 and three so we have to get access to the second element or the before node or whatever you want to call that so I'm going to just place this comment right here like use the get method to find the node right before the desired position like index minus one okay so we're going to be using like this. get method and we're going to be passing the index minus one like we want to get the before element okay so now let me just store in the temp variable you can give it like any name that you like and now the next thing is we have to take the pointer of this new node let me just put there right here at the bottom we have to take the pointer of this new node and we have to point there to the next element just like that so to do that we're going to be using like new node. next method it's going to be equals to the temp. next method Right Here and Now underneath that the final thing that we have to do is that we have to take care of the this pointer right here so we have to take take that pointer and we have to just point that to this newly created node okay so we're going to be just using like temp. next it's going to be equals to that new node right here and then we have to just increment our length and finally we have to just return true right here so now if I send my file and this is how we are going to be adding or inserting a new item to our list okay so I'm going to just remove it from here and I'm going to just write like I don't know maybe if I want to add new item right here at the second index so I'm going to be using like insert method and for the index I'm going to specify two and for the value I'm going to specify 20 right here in this case so now if I save my file and run that it's going to gives us true obviously it's going to gives us true because we are correct and now let me just write like my link list s my file and run there and here you can see for the second element where is my second element oh we cannot see that God damn it we're not at the de tool to the zero index and now let me just run there now here you can see we're now adding their 20 right here so this is how we are going to be using the insert method on our link list so this one is going to be a bit simple one so here is the challenge I want you to create a size method and it's going to gives us the count like how many items are inside our current link list okay so in this case we only have four item so it's going to gives us the length or the size or the count of four so give Your Best Shot if you can do it that's completely correct and I mean like that's completely okay then come back and watch the solution and here is my solution so I'm going to remove this insert from here and I'm going to also hide this insert if I can get there and now underneath this insert we're going to be creating our size method so now let's just write our size method and now inside there first of all we have to create our counter because we are going to be looping through each items and then we are going to be counting or we are going to be incrementing this counter and then we have to create our temp variable come on temp it's going to be equals to the this. head like for the first element we are going to be counting from this first element so that's why created this temp variable and it is now pointing to this first element okay so that's only done now the next thing that we have to do is that we have to iterate over through all of that temp or all of that items okay so we're going to be using counter Plus+ anytime you want to iterate over through there so counter do Plus+ or not Plus+ counter Plus+ and then we have to take this temp it's going to be equals to that temp. next value okay so after that we have to just return that counter and s file and that's here okay so let's just use that I'm going to be using that size method right and now let me just execute there semi file and run there so it's going to gives us four items and why is there because we are now starting from zero and we have three elements so that's why we are now getting four so 1 2 3 4 all right guys for the final challenge that I want you to do is is that I want you to make a clear method it's going to allows us to remove every single element from our list and just make it as null and give it your best shot and you would be able to do that because this is going to be the most simplest one so give it your best shot if you can do it well here is the solution baby so let's just create our clear method and now inside there we're going to be using this do head and we just have to point that to the null value okay so if I just use like instead of that size and I'm going to be using do clear method right here and now if I sem my file and run there is going to gives us undefined because we no longer have any elements inside your link list so yeah that was it about for the singly link list let me just expand all of these coding right here and that was a lot of challenges and a lot of code that we have to write God damn it I guess it's time to get into the W link list so now that we are totally done with the singly link list and now let's talk about the W link list and how that's going to look like this is how it's going to look like right here so the main difference between the single link list and the W link list is inside the nodes so in the W link list node it will have an extra property which is called the previous property so how that's going to look like this is how it's going to look like right here okay so we will still have our value or you can say the data whatever you want to call that we will still have that next property or you can say the the reference or you can also say the pointer but the only difference between the singly link list and the dou link list is this previous properties now this is known as the singly link list node and this let me just put that right here this is known as the W link list node and that's the only difference between that and how the code is going to look like the code is going to be looking the same like this is going to be still an object it will have the value it will still have the next property but now in this case we Now using the W link list so it will also have the previous property as well okay so that was just a quick intro to what a w link list is I can't even speak that word w link list is and now let's get into the coding part and first of all we are going to be creating a node for our W link list so how that's going to look like first of all we're going to be creating our Constructor we're going to be passing some sort of a value inside there we will still have our value which will be set to that value we will still have our next property which will be set to null because in this case we're not pointing to anything so the initial value will be set to null but now the main thing about the singly list and the W list is the previous property okay so now we are going to be attaching this previous property so this node is known as the W link list node okay so now let me just create a class for the W link list as well so D come on doubly link list and now inside that we're going to be still placing our Constructor in that value all of that stuff will be totally the same so so now we are going to be creating our node first of all we are going to be just providing that value that's totally the same like cons new node we already know all of that stuff and we're going to be also setting the head to that new node we're going to be also setting the tail to that uh this. head that same new node and also we're going to be using this do link come on l in GTH and it's going to be equals to one right here so everything is exactly the same but the only difference in the node is this line of code right here and and the only difference in the Constructor I mean like in the W link list is this W right here now we just added this W so this is now known as a w link list class and this is known as the W link list node I hope that makes sense all right guys so time to create our own push method in the W link list so how that's going to look like still first of all we are going to be creating our new W link list node that's going to be the first thing the next thing that we are going to be doing is that we have to just move the bit the next thing that we are going to be doing is that we have to take that pointer and we have to point that to this link list right here that newly created link list I mean like this newly created node not a link list the third thing that we have to do is that we have to take this pointer of this newly created node and we have to point that to this previous one right here and finally we have to take our tail and we have to point that to this new node right here and and this is how we are going to be performing the what do we call it the push method on our dou link list so I want you to give it your best sh if you can do it that's completely okay then come back watch the solution and here is my solution so what I'm going to do is that I'm going to go to the bottom right here or push method so I'm going to just write like push we're going to be specifying the value today and now inside there first of all we have to create our new node and then we are going to be just using our new node and we have to pass our value inside there so now that's toly done time to check if link list is empty so we are going to be using if not this do head which means like if our link list is empty so we are going to be taking this do head and we are going to be pointing that to that new node right here and we are going to be also taking that tail and we're going to be pointing this one to this new node as well okay so that's St done now the next thing that we have to do is that we have to take care of our actual push method so we're going to be taking this. tail. next and we're going to be pointing that to our new node and then next thing that we have to do is that we have to take our new node. previous and we have to just point there to this tail so now let me just show you there okay so now we point this property to this new node now we are going to be taking this previous property and we have to set there to this previous element right here and this should not be right here it should be right here at this point okay so now the next thing that we have to do is that we have to take care of this tail so we have to take this tail and we have to point that to this new element just like that and now how that's going to look like this is how it's going to look like so we're going to be using this tail and we have to point there to this new node which we just created right here so we have to save our file and now underneath there we're going to be just incrementing our length Okay and then finally we have to just return the this and that's it so we have to save that but I don't know what's wrong let me just go back what's wrong oh I'm going to cut that from here and we have to put that right underneath that so now that's to done and now let's just create a new W link come on D Link list and we are going to be passing zero right here for the first value and I'm going to store that in the um my w link list is going to be equals to that my w link list and then we are going to be using my w link list and we have to just push this one right here inside there so now if I log that to the console like my w link list now if I save my file and run there and here you can see we are now getting there right here so if I right click on there and let me just go ahead and go to the right and this is how it looks like right here so we have ahe in reference to the node and we have a value of zero initially and then we have the value of one right here because we are now pushing that value of one to our W link list so now let me just clear this out and this is how we going to be creating our push method on our W link list time for another challenge so I want you to implement the pop method on the W link list so how you're going to be doing this there there are a few steps that you have to take the first thing that you have to do is that you have to create a temp variable and you have to point this temp variable to the last element in your link list that's going to be the first thing the next thing that you have to do is that you have to take this tail and you have to move there to the before element or to the previous element next you have to break the chain of this fourth element and this fifth ele so I'm going to make this a bit smaller so now that chain is totally gone and finally we also have to break the chain of this last one right here okay so now we are going to be successfully removing that from our list just like that and then we have to make this fourth element is the last element by providing this null value right here let me just explain that once again very quickly okay so I'm going to explain that once again very quickly so the first thing that you have to do is that you have to create a variable you can give it like any name that you like and you're going to be pointing there to the last element in your link list next you have to take that tail and you have to point that to the be Four Element then you have to break the chain of this fourth element with this Five Element so you have to break the chain of there then finally you are going to be also Breaking the Chain of this previous property with this Fifth Element and which is now currently pointing to this fourth element uh so you're going to be also setting that to the null and then you're going to be just removing that from here you have to take this null and you have to point that to this fourth element so now this fourth element is the last element in our length list so give it your best shot if you can do it that's completely okay then come back and watch the solution and here is my solution so what I'm going to do is that first of all we are going to be creating our pop method and now inside this pop method the first thing that we have to do is that we have to check the length Okay so we are going to be checking the length by first of all writing the this do length is triples equals to the zero element so we are going to be just returning undefined okay so if that's the case so we are going to be just returning the undefined next we have to create that temp variable which I just said and we have to point that temp variable to this do tail okay and after that we're going to be also checking one more thing this do length is triple equals to 1 so in that case we're going to be pointing this do head is equal to null and we are going to be also pointing this do tail to also null value as well so if that's not the case so we are going to be first of all taking that uh tail which you can see right here so first of all we are going to be taking that tail and we have to point there to this before element okay so we're going to be just writing like this tail going to be equals to this. tail. previous right here come on tail. previous right here the next thing that we have to do is that we have to break out the chain which is the this. tail do next and it's going to be equals to null right here which is that tail which we are now talking about we have to just set there to now and we will remove the chain of this element or this pointer with this new node okay so not new node but this previous node okay so we have to take care of that and then finally we have to write our temp. previous and we have to set that to n right here and finally we also have to break out the chain of this one so we have to make this shorter which means like we now set there to null and we have to remove that from the list and we have to provide this null right here to this third element right here so we can make that a bit bigger just like that and we have to set that to the null value just like that okay so yeah and finally I'm going to also provide the this. length and we have to decrement there and we also have to return their temp variable as well so I'm going to go back and this is the entire code for the pop method okay so I'm going to just pop out this last element or you know I'm going to also provide a few more elements like two and also the three so now if I want to remove this third element so for that I'm going to be using this dot pop method okay so if I execute this semi file and run there it's going to pop out this third element from the list just like that okay so yeah that was the pop method in the W link list time for another challenge so I want you to perform the UN method on the W link list so what is the unshift method unshift method allows us to add a new element or a new node at the beginning of your link list so here you can see this is what you have to do the first thing that you have to do is that you have to create a new node and then you have to take the pointer of this node and you have to point there to this next node which is used to be the first element but not anymore now this one is the first element then you have to take the pointer of this one which is a before and then you have to point that to this newly created node right here and then finally you have to take this head and you have to point that to this one right here or that newly created node so this is how you're going to be un shifting a new element or a new node into your link list let me just say that once again very very quickly okay so first of all you have to create a new node then you have to take the pointer of this node and you have to point it to the next node then you have to take the pointer of this used to be AE and you have to point there to this newly created node then you have to take this head and you have to point there to this newly created node so this is what you have to do so pause the video give it your best shot if you can do it that's completely okay come back and watch the solution and here is my solution so what I'm going to do is that I'm going to just write like unshift come on unshift method and I'm going to be passing a value inside there and the first thing that we have to do is that we have to create one new node so we'll just just write like new node it's going to be equals to the new node and we're going to be passing a value inside there and now underneath there we're going to be checking if this do length is come on length is triple equals to zero so we are going to be using this do head and we are going to be pointing that to our new node and also this do tail and if that's the case we are going to be also pointing that to uh the new node and if that's not the case so we are going to be using like a new node and we have to use the next property and we have to just set it to this start head okay so what are we doing we are now taking first of all let me just undo that we now successfully created this node right here so we have to take the property of there and we have to point that two which used to be the head so we are now taking that new node and we are now providing this next property and we are now setting there to which used to be the head but not anymore okay so we are now taking this property and we are now pointing that to this new node right here here okay so that's totally done the next thing that we have to do is that we have to write this do head. previous and it's going to be equals to the new node right here which used to be the head but not anymore we are going to be taking the property of there let me just get that right here so we are going to be taking the property of there and we are going to be pointing that to this newly created node so this is exactly that we are doing right now and then finally we have to take the head and we have to point there to a new node okay so now we are taking this entire head and we are now pointing that to this node right here okay so this is what we call the unshift method in my come on in my w link list there we go so now if I save my file but we are not done yet we also have to write a this. length Plus+ and we also have to return the this Reser keyword okay so now we successfully added like um 01 to 3 and I'm going to also write like my w link list and I'm going to be unshift I don't know maybe 100 and now if I just remove that from here and now let me just save my file and run that and what are we getting we are now getting the first value and which is now currently set to 100 right here okay so this is how we are going to be adding a new value at the beginning of our link list or you can say this how we're going to be adding unshift method into our W link list time for another challenge so I want you to implement the shift method and the shift method will allows us to remove the first element from our link list so how you're going to be doing that well to do that the first thing that you have to keep in mind is that you're going to be taking this head and you're going to be pointing there to the next element so that's the first step now the next step is that you have to take this previous property and you have to break this connection by setting that to the no okay so now that's totally done and now finally you're going to be also taking this connection and you also have to set that to no so this connection will be totally break and then you can remove this element from the link list and you can set this n property right here okay so give it your best shot if you can do it that's completely okay and then come back and watch the solution and here is my solution so what I'm going to do is that I'm going to just write a shift method and now inside this shift method we're going to be checking if this do length is come on l n GTH if this length is zero so we going to be just returning undefined I already explained that like a thousand time and next we have to point our temp variable to this do head okay so now that's done next we also have to search for the length if the length is triple equals to one like if you only have one node if we only have either one node or zero node so for that we're going to be using this do head it's going to be equals to null and also this do tail will be also set to n as well and now underneath that we're going to be using this do head and we have to point that to this. head. next which is that we are now taking this head property right here and we are now pointing that to the next element just like that so now we are totally done with that the next thing is that we have to take the this. head. previous property and we have to set that to no so we're going to be taking this property and we are going to be setting that to null so which means like we are now breaking this connection so that's done now the next thing is we have to take the temp. next value and we have to also set there to the no okay so we're now going to be taking this value and we're are going to be setting there to no so we can totally remove that from Or List just like that okay so once we do that then then the final thing that we have to do is that we have to just write like this do length and decrement then because we remove something from our link list and then we have to write our attemp so that we can see that we did something okay so now that we successfully push these items right here and we also push 100 so I'm going to remove that from here and now I'm going to be using like my link list and then I'm going to be using the shift method on there so which means that it's going to remove this Zero from our link list and we are going to be only getting one two and three so now if I sa my file and run that okay and here you can see we are now getting the value of one and we no longer have this zero right here in our link list and you can also see the link is now currently set to three then because we now successfully remove this one so we only have these three items left so this is how we are going to be implementing the shift method in the W link list all right guys so welcome to the famous interview question which is given a link list you have to just reverse it out that's the only thing that you have to do this is my phot time of re-recording only this section this specific challenge why cuz I face a lot of issues in this challenge when I was teaching that in my previous videos I give a lot of hints but now finally I decided to not give you any more hints because I know I feel like it will confuse you a lot so that's the only reason I'm not going to give you a lot of hints so for this challenge I'm going to give you only two hands and that's going to be air okay so the first thing that you have to do is that you have to switch the head and the tail as you can see right here so the tail is now pointing to the head and head is now pointing to the tail right here so that's the first thing that you have to do and the next thing that you have to do is that you have to reverse those arrows as you can see right here so yeah now I know a lot of you will say hoseen these are not that much Clear instruction but now you get the idea like what you have to do and the reason I'm not giving you any more hint you will just see that in a few seconds why I'm not giving you any hint so yeah give it to your best shot if you can do it that's completely okay come back watch the solution but at least give it just one try or two tries and here is my solution so I only have this one singly link list right here so I have a head and also the tail pointing to their own places like nothing is reversed for now so now let's get into the coding first of all let me just show you what I have I have my own single link list node then we have our own singly link list right here now inside there we have our head and also the tail and also the length and we also have our push method so it's going to allows us to push our item to or link list so we have 1 2 3 four items right here inside our link list and now we are going to be reversing out those items so how we are going to be doing them well we have to write our reverse method and now inside this reverse method first of all we are going to be creating three pointers so we are going to be writing like let temp is equals to this. head so what in the word is this line even mean we are now creating our new poiner we are now giving it the name of temp you can give it any name that you like and now we are pointing that to the first node in our link list that's the first thing that we are doing right now okay so next we have our this. head and we are now pointing there to this do tail which means like we are now taking the this do head and we are now pointing there to this tail right here I hope it makes sense okay so we are now pointing there to this this tail just like that this tail all right so now what else do we have to do we have to now take this do tail and we have to point that to the temp so what is the temp temp is that head right here so we have to take this tail and we have to point that to this head right here so now we successfully flip out the head and also the tail right here which you can see so we have our tail which is now pointing to the head and we have our head which is now pointing to this tail right here and we still have our temp pointer as well so the next thing that we have to do is that we have to create two other pointers we have to create two new pointers so we are going to be creating like next it's going to be equals to this temp variable and this temp is now initially pointing to this head right here so what are we doing we now creating yet another pointer we're now giving it the name of next you can give it like any name that you like and we are also pointing this next to to this first element inside this node right here just like that ah my drawing so this is what's happening right now next we have to create our final pointer which will be set to prve and it's going to be pointing to the null we're going to be creating yet another pointer and we will give it the name of like creeve it's going to be pointing to the null value right here just like that next we have to it right over through each item so for that we are going to be using like let I equals to to zero and then I is less than this do length and then finally I ++ and now inside there we're going to be using like next is equal to temp. next okay so what is the next next is their temporary pointer which is now pointing to the head so we going to be setting that to the temp like the head do next to the next element okay so what are we doing right now this is now initially pointing to this first node right here so we're now going to be taking the and we have to point that to the next like temp do next let me just zoom in a bit temp do next okay so here you can see we have one next which is now pointing to Temp do next so we have our temp dot next so this is how we are going to be pointing our next property to this next element inside where link list so now then stly done next we have to write temp. next and we have to point to this previous one right here so we are now taking this temp dot next we are now taking that pointer and we are now reversing it back like we are now setting that to the previous one and the previous one is now set to no so this how we are now going to be flipping the arrow so now that's to done the next thing that we have to do is that we have to take our previous and we have to set that to our temp so what is a previous that previous is initially set to null we have to remove that null from here and we also have to point the right here I know it sounds a bit confusing but we have to point there right in here to this first element or this first node right here okay so that's toally done the next thing that we have to do is that we have to take our temp and we have to set that to this next right here so what is a temp temp is this pointer which is now pointing to this first element we have to take the just this first one and we have to set there right here for this one okay just like that and that was our first iteration right here okay so in the next iteration we're going to be still taking this next property we're going to be pointing there to another one then we're going to be taking this arrow and we have to flip there just like that and we have to set there right here and then we are going to be taking this temp then still we're going to be pointing there to this new element which you can see right here then we're going to be taking this previous one and we are going to be pointing that to next one and this iteration will go on and on as long as it revers out the entire link list so this step will be happening again and again so it's going to be pointing there to the next element just like there come on to this next element just like that and then we're going to be flipping out all of them so you know what instead of wasting your time by showing you those diagrams now I already show you that in the first element totally clearly so instead of wasting all of your time on these diagrams I'm going to just go ahead and just show you that right here in the code so I'm going to use like do reverse method right here so we have first of all you know let me just show you there so we have 1 2 3 and four right here so if I run that we have a one then we have a two and the last element we have a four and that three is Now hidden right here so now if I use the do reverse method on there and now if I save my file and run there we're now getting undefined okay so we have to remove this console. log from here God damn it what the hell am I doing we have to remove this console.log from here the conso my link list and now if I save my file and run there so we are getting the head of four we're also getting the head of three and it is now successfully reversed out so yeah that was how we going to be reversing out over link list again Su and welcome to the data structures and algorithm master class so in this course we're going to be learning about the stack and the cues so I'm going to be sharing every single thing that I know about the stack and the cues so what are we going to be learning in this course first of all we are going to be introducing the stack then we're going to be performing some sort of a challenges on the stack then we're going to be jumping into the queue we're going to be solving some challenges on the Queue finally we're going to be solving a few interview questions and that's going to be it but before you guys jump into this video first of all there is only one prerequisites that you have to watch this link list where like you first of all have to watch this link list course then you'll be able to follow along with this specific where you guys are currently watching right now all righty so let's go into to the stack now the question is what is a stack so here is the Wikipedia definition of a stack so a stack is a linear data structure that follows the L IO rule so you can say the last in and the first out principle so how that's going to look like this is how it looks like right here so I want you to imagine that this is going to be some sort of a bookshelf and we're going to be stacking our books inside this bookshelf now if I want to add my first book so I'm going to have to drag that and we have to put that right here so the last in and then the first out so you know what and then I'm going to add my next book which will be the book two I'm going to add there right here then my third book then my fourth book right here so this is how we are going to be adding a last in and the first out so now if you wanted to get this last book so we cannot do that why is that that's because they are now stack on each other so here you can see first of all we are going to have to grab this book so we have to grab that and we have to put that right here then we have to grab this book we have to put that on a side and finally we are going to be getting this one so this is what we call the last in and first out or you can say Leo or lifo whatever you want to call that so that was example number one the next example that I have is let's suppose you are browsing on the web so first of all you go to the YouTube so we're going to have to put the YouTube right here then we're going to be going into the x or you can say the Twitter and then we're going to be going into the meta or you can say the Facebook and finally we're going to be going into the Instagram right here so so this is how we going to be going into these social media networks but now let's suppose if I want to go back so the first thing that I have to do if I hit the back order the return button so it's going to first of all bring me to this Facebook page right here then if I hit that back button one more time so it's going to just brings us to this X and then if I hit there one more time so it's going to brings us to this YouTube right here and that's going to be the final result so we're going to be storing our data in this kind of a linear data structure so which will be the last in and the first out so how exactly our stack looks like in this is how our stack looks like right here we will still have our nodes we will still have our reference and we will still have our data inside those nodes but now here we are not going to be pointing over head and tail instead if you want to use the last one we totally can but in this case we're not going to be giving it the name of like uh head and tail in this case you can either give it the name of like top and also for this one the bottom or you can say the last and the first okay so we're not going to be using the last one so that's why I'm going to just remove that from here and you have to keep in mind that that first will be now pointing to the last element and the next thing that you have to keep in mind is that this node will be exactly the same node just like the link list node so now let me just show you there and here you can see we have our node right here which will have the reference and which will also have some sort of a value and that way you can be anything that you want it can be string it can be Boolean or anything that you want and here you can see that's going to be still an object and inside this object we would have our value and we would also have our next property so yeah this is how our link l i mean like not link list but our stack looks like right here time to create our own stag but before we create our own stag first of all we have to create our own node then we're going to be creating our stag based on that specific node okay so how we are going to be doing that well the first thing that we have to do is that we have to write a Reser keyword and then we have to create a node just like we did in the previous videos then we're going to be also providing the initial value of a value as a Constructor we're going to be setting this value it's going to be equals to this value and then also we we will set this do next it's going to be set to initially null as you can see right here and it should be null okay so what are we doing we are now creating our node we are now providing the value which will be initially set to nothing and then we are also providing this next property which will be now initially set to null right here so now this part is done the next thing that we have to do is that we have to create our own stack based on that specific node which we just created right here okay so what do we have to do now if you want to create your own stack so the first thing that you have to do is that you have to write a class resert keyword and then the stack you can give it like any name that you like but I'm going to give it the name of like stack because we are creating our stack so now for the initial values we're going to be only passing a value inside there and also the first thing that we have to do is that we have to create our own node just like this one so how we are going to be doing that well we will just write like new node and we're going to be passing that value which we are taking inside this Constructor okay so now we have to store there some sort of variable like con node and it's going to be equals to this new node right here so I'm going to just change that to like new node and now underneath that we are going to be using this start first and we have to point there to a new node and also this do length okay it's going to be equals to one right here so now this is how we going to be creating our node and also this is how we going to be creating our own stack right here okay so now underneath that let me just create instance of there so I'll just write like let the stack or you can give it like any name that you like and I'm going to just write like Stag and now initial value I'm going to just set that to zero and finally let me log that to the console so the stack and now if I save my file and run my code so now here you can see I have a stack and the first property is now set to node and the value which we are now providing a zero right here so that's why we have a zero and also we have a next which is now initially set to n and we also have a length which is now set to uh one okay so this is how we going to be creating our node and this is how we going to be creating our stack all right so welcome to the first challenge so what I want you to do is I want you to implement the push method so what is the push method push method now in this case it allows us to add a new item at the beginning at the beginning of our stack so how that's going to look like so what I want want you to do is that anytime you want to push a new item you have to create that so how you're going to be doing that this is how you're going to be doing there so first of all you have to create your own node and then you have to take this first marker and you have to point there to this newly created node that's all the thing that you have to do and this is how you're going to be performing or this is how you're going to be creating your push method so I want you to give it your best shot if you can do it that's completely okay come back and watch the solution and now here is my solution I'll just write like my push method and it's going to be taking some sort of a value because now we are going to be creating our node based on that value so what we will do is that first of all you have to create a new node so now let's just do that so to create a new node first of all we have to write a new resert keyword and we have to paste that value inside there so I'll just give it the name of like cons new node it's going to be now pointing to this newly created node and now we have to check for the empty okay so how we are going to be doing that we going to be using like this do length is triple equals to zero so what do we have to do in that case we're going to be taking this do first and we are going to be pointing there to the new node which we just created so what in the world are we doing let's suppose if we don't have any of these items right here okay so I want you to imagine now we are going to be pushing a new item so what we have to do is that we have to create that item and we have to put that right here we have to remove this null property from there and we also have to set this first property or the pointer or the marker whatever you want to call that and we have to put there or point there to this newly created item that's what you have to do okay so let's just go back let's just go back okay just like that and now the next thing that we have to do if that's not the case what you want to do in that case we have to take like a new node and we have to use the next property on there and we're going to be pointing that to this do first okay so here you can see this was set to this first property was set to once we didn't create this newly created element right here or node now we successfully created this node we have to take this first. next property we have to take that and we have to point that to this newly created node and we're going to be using this start first and we have to point there to this newly created node and finally we're going to be just incrementing our length and also we have to just return like what in the world are we doing okay so what I'm going to do is that I'm going to just write like like this tag and I'm going to be using a push method on there and I will push one I'm going to duplicate there and I'm going to also push two so what we will get to see is a zero and also the one and also the two so now if I run my code so what are we getting we are now getting a stack which will have the first property which will be set to node and now inside this node we have the value of because that's going to be the newly created node and we also have the value of one that's going to be coming from the next node and we also have another one which will be three I like which will be set to zero not three and so we have a length which is now set to three okay so this is how we are going to be using the push method or this how we are going to be creating a push method on our stack all right guys so welcome to the next challenge in the stack so what I want you to do is that I want you to just create the pop method so as the name suggest this going to allows us to pop out the first node or the first element from our stack so how that's going to look like so the first thing that we have to do is that we have to create our temp variable right here and that temp variable will be pointing to the first node or you can say the first element in our stack okaye now the next thing that we have to do like that's going to be the first thing that you have to do okay then the next thing that we have to do is that we have to take this first marker or the pointer and we have to point that to the next node and then finally we have to take this node and we have to set that to null so it's going to just remove this item entirely okay so this what you have to do so I want you give it your best shot if you can do it that's completely okay then come back and watch the solution and here is my solution let me just go back I'm going to just set everything to totally normal just like that okay so let's just create our pop method right here okay so I'll just write like a pop method it's not going to take any perimeter because we're now removing something and by the way I forgot to show you but if our stack is totally empty so we are not going to be doing anything we are going to be just returning undefined okay like if you don't have anything ins side stack let me just remove there so what we have to do we have to just return the undefined or you can return the null or you can throw some sort of error if you wanted to okay so that's that's totally on you so yeah let's just do that the first thing that we have to check for is this. length is triple equals to zero so we have to just return come on return undefined next we have to create our pointer which will be let temp it's going to be now poin to this start first okay as you can see right here so now we are creating this pointer or this uh temp pointer and it's going to be now pointing to this first element okay so that's going to be the first thing now the next thing that we have to do is that we have to take this do first and we have to point that to the next element so we are going to be using like this. first. next okay so we are going to be taking this first pointer and we are going to be setting that to the next element just like that okay so now that's only done and now the next thing that we have to do is that we have to take this temp. next and we have to point it to this null okay so we are going to be taking this temp and we have to point that to this null so which means like we are now totally removing that from our stack okay just like that and now we have to do that we already did that right here and finally we have to just decrement the length and also we have to return the temp and this is how we're going to be popping out the element or the node from our stack so we have a zero and we also have one and we also have two if I run my code so here you can see we have the value of two then we have the value of one and then we have the the value of zero which you cannot see right now but if I use the stack if I use my pop method on there and now if I save my file and now if I run my code so what are we getting we are now getting the value of one instead of that two and we are also getting another node which is now pointing to zero and here you can see the length is now decremented to two it used to be three now it's two so which means like we now successfully implementing this pop method on our stack so yeah that was it about the stack and now let's get into the cues time for yet another data structure which is called the Q and I know the spelling is a bit weird like q u e u e so what is a q a q is a linear data structure that functions like a waiting line and don't worry I'm going to show you what a waiting line even means and it follows the FI fo4 rule or principle so what is the FI fo4 rule the first in and the first out meaning the first element that enters the quebe first will be the first one to be removed so what do I mean by all of these gibberish now let me just show you there and here is my waiting line right here okay so now imagine this is going to be some sort of a store or a coffee shop or something like that this guy will be the first one to order a coffee or to buy something from the store okay so this guy is now the first so he will make the order then he will come out from the store then this guy will be the second one and this guy will be the next one and so on and so forth okay so the first in will be the first out now this guy is the first one so this guy is the first in and he will be the only one to First out just like that then he will be the first one and he will be the next one to go out and then he or she might be maybe the uh the next one then he or she will buy something and they will be the last one to go out from the store okay so that was my Q anology keep in mind now the first element or the first person or the first node that you want to add to our line or you can say or queue so this process is known as the in queing and now if you remove this first one this process is known as the deqing and I'm going to show you what do I mean by ining and deqing so time for the first Challenge and we did this challenge like a million times okay so if you're watching this course so I promise you already solv this challenge but anyways okay so what do we have to do we have to perform the ining so let me just explain what in the word is ining ining just simply means that we're going to be adding a new element at the end of our link list or you can say our queue okay so now this is known as a q so we are not going to be providing the head and tail instead we have to rename that to the first and the last just like that okay so what I'm going to do is that I'm going to just remove that from here because we're now about to add a new element so we're going to be first of all creating that newly created element just like that first of all we have to create this element then we have to point there right in here okay so now this one will be no longer pointing to the N instead that newly created element will be pointing to null because this is going to be the last element and now the next thing that you have to do is that you have to take this last pointer or marker and you have to point there to this newly created node just like that and this is what we call in King and we already performed this challenge like a million times okay so if you want to go ahead and do that by yourself so feel free to go ahead and do that by yourself and by the way I forgot to show you how we are going to be even creating our oh my God how we are going to be even creating our node and also or queue but now let me just show you there and then you can pause the video and then perform this in queing and deing okay so let's go I'm going to just remove that from here and the first thing that we have to do is that we have to create our node as we just saw a few seconds ago and we're going to be providing our Constructor and also our value and now inside this node we're going to be setting this. value to this newly added value and this. next will be now set to this node right here so this is how we are going to be creating our node now it's time to create our own q and now inside this que the first thing that we have to do is that we have to provide our Constructor and also the value now inside this Constructor first of all we have to create a new node which we just saw a few seconds ago and now we are going to be passing a value to that okay and also we are going to be setting this new node and we have to point there to this newly created node just like there and now inside there still we're going to be using this start first and we have to point there to the newly created node and we also have to use this start last and we have to set that to this newly created node and finally this. length l n g th it's going to be now pointing to this one right here so now let me just go back and this how we are going to be creating our node this is how we are going to be creating our own que and now let me just create an instance of that okay so what I'm going to do is I'm going to just write like my q and it's going to be now equals to this new instance of this q and now inside there I'm going to be providing a zero as the initial value and then I'm going to be using like conol log my q and now if I sem my file and run there so what are we getting we are now getting our Q which will have the first and last property and now the first property is now pointing to this node and now inside this node we have the value of zero and we also have the next of no and same well goes for the last one right here because we don't have any other elements inside this que so this is how we are going to be creating our node and this is how we going to be creating our que and now I want you to pause the video and perform the in queing okay so if you can do it that's completely okay come back and watch the solution and now it's time for me to give you the solution so what I'm going to do is that I'm going to just write like e n q u e u e I know the spelling is a bit weird and now inside that we're going to be passing a value and I'm going to be first of all creating my new node that's going to be the first thing that you have to do because now we are going to be adding a new node so we have to create the new node okay just like that and next we have to check for the length Okay so if this start length is triple equals to zero as we just saw in the previous videos and also and also in this video as well so we're going to be taking this start first and we have to point that to this newly created node and we also have to take this last and we have to point that to this this new node just like that and now underneath this if statement we're going to be taking first of all this. last. next and we have to set there to this newly created node as you can see right here so it used to be right here in this third one now that we successfully created this newly created node right here so we're going to be taking this pointer and we have to point it to this newly created node okay so this is what we are doing right now next we also have to take like uh this last and we have to point it to this newly created node and we have to just increment the length and we also have to return this and now if I sell my file and this is how we are going to be performing the in queing so I'm going to be using like my q and I'm going to just put like inq inside there is the method which I just made a few seconds ago so I'm going to be providing one and then also two so we have three items inside there first of all you would have a zero then we have a one then we have a two and now if I run my code and here you can see we have a Q and now the first value is now set to zero that's because I'm now providing the zero right here and next value will be set to one that's because here you can see we're now providing the one value and the third one is hidden but you can trust me on this one that the next value will be the two or you can say the last value will be set to two and you can also see the length is now set to three so which means like we are now adding three elements or three nodes inside this queue so that was it about for the inq challenge and now it's time to do the deqing so what do I mean by a deqing or you can think about the DQ is like a pop method you have to remove the last element from your Q so how that's going to look like the first thing that you have to do is that you have to take out this pointer you have to point that to this previous one and say byebye to this one just like that and you have to set that to the null property so give it your bench shot if you can do it that's completely okay come back and watch the solution and here is my solution so what I'm going to do is that underneath this in Q I'm going to be creating a d q just like that the spinning is awful and we have to once again check for the empty I'm going to be using like if this. length is equals to zero so we're going to be just returning undefined because we cannot remove anything if we don't have nothing okay so now now the next thing that we have to do is that we have to create our temp pointer which will be now set to thisan which you can see right here so let me just go back and we're going to be creating our new new pointer let me just duplicate this one right here and I'm going to set there at the bottom I'm going to give it the name of like temp I know it is reverted I'm sorry for my bad writing or yeah now that's looking better okay so we now creating our temp variable or a pointer and we're now pointing there to the last element yeah just like that now the next thing that we have to do is that we have to check for one element so if you have like this. length is triple equals to one so what do you have to do in that case we are going to be setting this start first is equal to n and we're going to also setting this start last to null as well and now underneath that we're going to be taking this start first and we have to point there to this. first. next as you can see right here it used to be right this pointer used to be pointing to this newly added value and a few seconds ago I just moved there right here so it used to be right here so now so now this line mean as you can see right here this line simply means that we are now taking this PO and we are now pointing there to this new element or the previous element not a new element what the hell and now underneath that we're going to be taking this. temp and we have to set that to null so now if we set that to null so which means like this temp is not pointing to this one so we are going to be just removing that from here and now this pointer will be set to null okay so which means like we now successfully remove that last item so what do we have to do we are going to be just using like this do length and we have to decrement there because we successfully remove one element and finally we have to just return or not this but or temp like what we just removed and now I'm going to be just providing like you know first of all let me just show you there so if I run my code and here you can see I have three items inside there or you can say three nodes and now the first one we have is a set to zero then one we have set to one and then the final one we have is a two okay so now if I use like my q and if I just use like DQ and now let me just execute that sa my file and run that and here you can see the length is now set to two and we now successfully remove this zero one from our list so now we only have these two nodes inside our queue so this is what we call the stack and also the queue and this is how we're going to be doing the in queuing and also the deqing all right guys so time for the first lead Cod Challenge so what do we have right now we have our node as you can see right here we created that like a thousand time and then we have our own Stag and now inside this tag we only have this push method which we just created a few seconds ago and this push method allows us to add a new elements into our stack now the question is that I want you to add this Min method and this Min method will gives us the minimum node inside or St like what do you think is this the minimum value or is this the minimum value or is this the minimum value let me just zoom and you guessed it the minimum value will be set to this one right here like this is going to be the minimum value in our entire stack but if I provide zero right here so now that zero will be the minimum value but if I change this one to like 100 now this one will be the minimum value and the maximum value is set to this three right here and now if I set this one to like 1,000 yeah just like the 1,000 so now this two is the minimum value and this 1,000 is the maximum value okay just like that so I want you to only find find out the minimum value in your stack so how you're going to be doing that well pause the video give it your best shot if you can do it then come back and watch the solution and now let me write my own solution right here so what I'm going to do is I'm going to just Define my main method inside there and first of all we are going to be checking like if this. length so we are going to be just providing like return undefined and that's going to be it and now underneath that the next thing that we have to do is that we have to check out for the current and that current be now set to this do first element and we're going to be also searching for the minimum value so we're going to be just writing like Min value and as a temporary pointer is going to be pointing to this current do value and what is a current current is now set to the first element inside our stack yeah inside our stack and here you can see we have a value inside there so we are now just taking there and we are now pointing there to the minimum value so that's the first thing now the next thing that we have to do is that we have to iterate over through this entire element inside Word Stack we're going to be using like current do next it read over through this entire stack as long as this current did not found the null as long as this current is set to n that's what I mean okay so I want you to just iterate over through this entire stack and once you are iterating over through there I want you to change the value of the current to current. next okay so let's suppose if we have zero so we're going to be first of all checking are you the men no then we're going to be jumping to this one then we're going to be jumping to this one and so on and so forth but we're not going to be just changing the value of there first of all we have to provide our check our conditional check so we're going to be using like current do value if that's less than minimum or you can say the M value which we have declared right here up above and that mean value is now currently pointing to the current do value or you can say the first start value in this case okay we are now checking if current value as we are now iterating over through there is less than the minimum value so what do you have to do in that case you know first of all let me just log that to the console so I'm going to just write like current do value and I'm going to be also logging to the console my minimum value and now underneath that we're going to be changing our minimum value and we have to set that to the current dot value just like that okay so now let me just save my file and I'm going to be using this Min method on there so I'm going to just uh UNC com this line out s my file and run that and as you can see right here the current value is now set to two and then the minimum value is now set to three so is 2 less than three and then we are checking is one less than two then we are checking is0 less than one so finally it's going to gives us that zero right here as a result okay so that's there now underneath there what do we have to do we have to just return or minimum value like what will be our minimum value which we are now defining right here okay so now if I save my file and run there and here you can see it's going to gives us the minimum value that we have is set to zero and if I comment this line out and let me just save my file and rerun that and here you can see it's going to only gives us that zero right here because that zero was the minimum value inside our stack but now if I remove this Zero from here send my file and run there and you guess it it's going to give this one right here okay so this is how we going to be performing the minimum value inside our stack okay time for another challenge which is find out is valid parentheses so now here you can see we have the list of totally valid parentheses right here so we have like opening parentheses and closing parentheses like totally exactly the same so if that's valid it's going to gives us the return value of true if that's not valid as you can see right here for this one it's going to gives us false if and here you can see we're now providing this valid parenthesis once again so it's going to gives us true and here you can see we are only providing the opening parenthesis but we are not providing a closing parenthesis for there so it's going to gives us false so yeah this is what we have to do right now so give it your best shot if you can do it then come back and watch the solution and here is my solution so what I'm going to do is that I'm going to just create my own stack so how we going to be doing that well we have to just write a stack and it's going to be pointing to or is going to be equals to this array so now inside this array we have all of that method like push and pop and unshift and shift and all of that method so this is how we are going to be creating our own stack and we are now creating this stag for the opening brackets only like we are now using this tag to store the opening brackets only okay so that's the first thing that we have to do next we have to create our own bracket so like cons brackets it's going to be equals to this object right here and inside there we have to provide our own pattern like this is going to be the opening and this is going to be the closing for the object next we going to be also providing yet another pattern like this is going to be for the array or you can say the simple bracket or whatever you want to call them I don't even know all of them and this is going to be for the closing one and then finally I'm going to just provide one more which will be for these parentheses and then this is going to be the pattern for closing these parenthesis so this is how we are going to be adding our brackets or you can say the pattern which we have to follow okay so now the next thing that we have to do is that we have to Loop through each character in our string okay so how we are going to be doing that let me just go back first of all we are going to be just writing like let charart of string now we're going to be iterating over through this string right here like whatever we provided right here is the argument for this perimeter so we are going to be iterating over through each of the character like the opening then the closing then also the opening and then the closing now inside there we going to be performing a check okay so I'll just write like brackets. Char so what do I mean by that if this is the opening bracket so what do we have to do in that case we have to just write like a stack. push and we have to only push that opening bracket just like that and if that's not the case so what do we have to do in that case if that's a closing bracket so we have to check if it matches the top of the stack okay so we will just write like stack. pop so it's going to gives us the top of the Stag and now let me just store that in the top variable you can store in any variable that you like and now underneath that we are going to be providing yet another nested uh check right here if not top or this bracket which you are now providing right here or this pattern whatever you want to call that we're going to be also providing our Top Value inside there if that's not equals to that's not equals to that character which we are now iterating over through so we have to just return false okay so just like that and now underneath them we're going to be just returning our stack. length if that's equals to zero so then we have to just return nothing and so this is how we are going to be creating our stack this is how we are going to be creating our pattern this is how we are going to be iterating over through each character in our string now we are checking if we have the left Valu so we're going to be pushing that to our stack and if we have the right value so we're going to be first of all getting the Top Value we have to check if we have the top value or we have the right of the bracket is not equals to that character so we have to just return or false otherwise uh we have to check if stack. length is equal to zero so we don't have to do nothing okay so now let me just run there so what are we getting we are now getting the true for this first one right here as expected then we are getting a false for this one because as you can see right here now we are not providing any closing bracket for this one just like okay that's the only reason we are now getting this false right here then we are getting a true because this is now matching with our pattern so that's why we are now getting a true and now this one is not matching with our pattern so that's why we are now getting false value right here so yeah that was it about you know let me just rerun that I guess I messed it up something nope totally correct so yeah that was our is valid parenthesis match all right time for yet another challenge which is the reverse string or you can say the string reversal so we already performed this challenge like a million time before but uh we we have to do that by using the stacks in this case so give it your best shot if you can do it uh you know let me just explain that right here so here you can see we're now providing a hello word right here and it is now giving us the reverse of our string so yeah that's the only hint that I can give you so give your best shot if you can do it come back and watch the solution and here is my solution so the first thing that we have to do is that we have to create our empty stack so I'll just write like const and then stack and we're going to be setting that to our array and it's going to gives us that put push pop shift unshift method totally for free now the next thing that we have to do is that we have to iterate over through this string and we have to push the like each character to this uh stack right here so let's suppose if I have uh hello words we're going to be taking this H we're going to be storing the in the uh in this stack right here then we're going to be taking this e we're going to be storing the in the stack and so on and so forth so now let's just do that so I'll just write like for let CH like for let character of that string so what do you have to do in that case we have to take that each of the character and we have to push that to or stack right here just like that now the next thing that we have to do is that we have to initialize empty string so to store a reverse string so I'll just write like reverse string and going to be now set to totally empty string just like that and now underneath that we have to pop each character from our stag to build the reward string so we are going to be using like while uh stack. length is greater than zero so we have to just pop that out from our stack so we're going to be using like reverse string come on plus equals to this tag. poop and we're going to be popping there and it's going to gives us the reward string right here so if I just return like reward string just like this s my file and go back and I guess I messed it up something so I'm going to have to copy this one now let me just place it right here and I'm going to also place it right here as well so now if I save my file and here you can see we're now providing a hello word so it's going to give us the rewards of there like I don't even know how to pronounce this word so now let me just run there and here you can see it is now giving us this um whatever this is so it is now giving us the reverse of there so now if I just provide like hosan web dev which is my own name so now if I run there it's going to gives us I don't know yeah it's going to gives us the rewards of that and if I just put like um just hello and if i7 run there it's going to gives us o if I provide like hi it's going to gives us I guess or something and here you can see we are now getting like eh yeah that was our stack in cues and that was it about for this video and I'm going to see you guys in the next video take care and if you enjoyed this video so feel free to subscribe to this channel again Su and welcome to the data structures and algorithm master class so in this video we are going to be learning about the hch tables from scratch plus we're going to be also solving a lead code challenges so now let's get into it so H table is a data structure used to store the key value Pairs and we already know what a key value pair is so if you are coming from any of these languages you already know what a key value pair is so if you are coming from a JavaScript which you should be if you are watching this video so in JavaScript we call it objects and in Python we call it dictionaries and in go we call it maps and there are a lot of uh languages which supports HH tables now the question is if you already have all of them so what's the point of discussing this hash table well the point is we're not going to be using these builtin we're going to be creating our own version of a hash table like our own version of objects dictionaries and Maps Okay so that's what we are going to be doing but now how we are going to be doing that and to do that we are going to be using something called the hash function suppose if you want to store a phone number in a hash table like we would have a John you would have a lot of people and their phone number so now let's suppose if you want to store them in the hash table so how in the world we're going to be doing that and to do that you're going to be using something called the hash function I know you will be probably thinking like hus we are now talking about the hash table what in the world is a hash function and by the way you don't have to worry about what a hash function is but I'm going to still explain that just for those people who care and trust me you will never use hash functions in your day-to-day life so now let's talk about the hash function so hash function acts like a translator taking an input of any size and converting it into a fixed value which is called the hash code which I'm going to be showing you there in a real diagrams but I want you to just give me a few seconds that can be used as an index within the hash table internal array something which I'm going to be showing you I'm not just talking about the theory I'm going to be showing you there in this process of mapping arbitrary keys to fix length indices is called the hashing okay so that was just a quick definition of what a hash function is but how what a hash function will even looks like and this is how it's going to look like and if you want to read through this I want you to pause the video and read through that but if you don't well you don't have to worry about that so now let me show you in diagrams how our hash function will look like and this is how our entire thing will look like so this is going to be our hash table which we're going to be creating in a few seconds this is going to be our arbitrary data and this is going to be our hash function so now what in the world is this hash function will do this hash function will do two things only so if you take this data and we put there inside this hash table so it's going to do two things the first thing it will do is that it's going to gives us a unique identifier or you can say the index okay so now let me just make that a bit bold so it's going to giv us some sort of a location where we are going to be storing our data inside that specific location so now in this case it gives us two so we are going to be storing our data inside this two right here in this area so that's the first thing next it's going to take our data and it's going to wrap that in the bracket or you can say array whatever you want to call there so it's going to wrap that in the double array just like that now we are going to be taking this data and we're going to be storing that in that specific index which is coming from this hash function right here so let's suppose if it gives us like four so we're going to be taking the data and we're going to be storing that in this fourth index just like that so then what a hash function will do first of all it's going to give us a unique index it's going to convert our data into array and then we're going to be storing that array data inside that specific index so that was just a basic theory of a hash function and also a hash table so now let's just first of all create or hash table and then we're going to be also creating our own hash function but you don't have to worry about how we going to be creating our hash function so now let's just do that so the first thing that we have to do is that we have to write a class you can use a function if you want it to my case I'm going to be using a class then we have to give it some sort of a name for our class so I'm going to just give it the name of like hash table because we are creating our hash table so now inside there we're going to be passing our Constructor and then we're going to be providing some sort of a size you can provide 10 you can provide five you can provide any of the size that you like in my case I'm going to just stick with this six and then we're going to be using a property which will be this. keymap and it's going to be now set to this new array because we are going to be converting our data into this array and now we going to be passing this size and we're also providing a default value of six today so now let me show you what in the world we are doing first of all we are creating some sort of a hash table and then inside that hash table we are going to be storing seven or six item inside there so what are we doing we are now creating we're now creating our hash table and it should be you know I'm going to just change that to five because that's what I show you in the diagram so this is how we going to be creating our hash table so now it's time to create our own hash function so the coding will be a bit weird and as I said that you don't have to worry about how we are going to be creating our own hash function okay so first of all let me just go back we're going to be using this hash function as a name and you can give it like any name that you like the name doesn't matter and then we're going to be specifying some sort of a key and it's going to tag that key it's going to Hash there so what we have to do the first thing that we have to do is that we have to provide a sum and it's going to be now set to zero and this will be used to store the hash value error we are going to be seeing there in a few seconds next we have to take care of the prime number so I'll just write like a prime prime come on Prime and then number and now it's going to be equals to this 31 prime number underneath that we have to Loop through our data less than m.min and we're going to be passing the key. length inside the L GT l n GT there we go and we are going to be also providing this 100 right here and then finally we have to just increment our I by one so what in the world is all of the gibraan mean which you can see right here this means that Loop through each character of the key but only up to the maximum of 100 characters this basically just ensure that the function don't take much longer like much longer Keys now inside that we have to convert that to a number so we are going to be using like a Char code it's going to be equals to key do Char code at so we have that function in JavaScript you want to learn more about that I have uh I already explained that in my complete JavaScript course if you want to check that out feel free to do that and we're going to be also passing uh 96 inside there and finally we have to change the value of sum so I'll just use this formula which I copied from the chat gbt which will be sum and times and then the prime number and then we're going to be also adding the character code and then we're going to be using the modul this. key map and then we have to grab our length inside there underneath that we have to just return or sum and that's going to be a so if I save this file and this is how our hash function looks like right here once again you don't have to worry about this hash function and yeah this is how we going to be creating our Constructor and this how we're going to be defining our hash function inside there time to create our own set method so how that's going to look like the first thing that we have to do is that we have to take our data and we have to Hash that okay so if we hash our data so it's going to gives us the index okay so like in this case it's going to gives us two we're going to be searching for the two Index right here so which we already have available inside our hashtable so now that we found that index the next thing that we have to do is that we have to check if we already have array inside like if you already have empty array or if you have some sort of items inside this array then we have to just take this data and we have to put that inside that array but if that's not the case so first of all we have to create our empty array and then we're going to be you know let me just put some sort of a spes word here we have to create our empty array and then we have to take that data and we have to store that inside this empty array and by the way we are going to be also wrapping that in yet another array okay just like there let me just show you get the idea so let me just copy that and place it right here and I'm going to also copy that and place that right here just like that I know the drawing is not that much good but you get the idea let me just say that once again first of all we going to be taking our data we're going to be putting that inside the hash function it's going to gives us some sort of a index then we have to check if you already have empty array or some array inside there so then we have to just take our data and we have to put that inside that array but if we don't have any array we have to first of all create a new array and then we have to store that data inside that specific array you get the idea so now let's just do that okay so first of all we have to just create our set method it's going to be taking some sort of a key and also the value and now inside there first of all we have to Hash our key which we are now taking as a Prem for this function so we're going to be using this do hash function right here and we're going to be passing our key inside there so as the result it's going to gives us some sort of index which we are going to be storing there inside this variable now we have to check if you already have an empty array or not inside that specific index okay so now let's just do that we're going to be using the F statement not this. key map and we're going to be passing a index inside there come on keymap and we're going to be passing an index inside there so what do I mean by there let me just comment there for a few seconds so you guys can see that a bit better and you know what I also forgot to show you how our index will look like so now let me just sell there so if we hash our value we are going to be getting some sort of index so which kind of index we are going to be getting now let me just show you there first of all let me just SC an instance of my hash table and now we have to store that in the phone book some sort of a variable okay and then we have to use our phone book. set method and we have to provide our key which will be John and we're going to be also providing some sort of a value for there like 555 333 and also 444 and now let me just save my file and now if I run my code so what are we getting we are now getting the zero Index right here that is coming from this index so if I provide a separator right here let me just put some sort of a separator and now if I sa my file and run that and here you can see that zero is now coming from this Index right here now we also have to check this statement so I'm going to copy that and now let me just log that to the console just like like there I'm going to save my file and run there and it's going to gives us true and why are we getting a true because in this case we don't have empty array already available inside that specific index so that's the only reason we are now getting a true so now let me just uncomment there and if that's the case like if we don't have any empty array so we're going to be using like this. keymap and we have to just set there to this empty array so I'll just remove this curly braces from here and I'm going to sell my file I think this is looking better but if you already have an empty array so we have to take our data and we have to store that in that array so we're going to be using like this. keymap and we're going to be passing our index inside there and then we are going to be using a push method and finally we have to just push our key and also the value which you can see right here we have to push our key and also that value to this existing array so I'll just return this so that we can see now let me save my file and now if I run my code so what are we getting we are now creating our hash table and now inside that we have our key map and then here you can see while we have our outer array and then we have our inner array inside there and now inside that array we have our content like our key and also the values and you cannot see that that's because we did not create our get method and we're going to be creating our get method in a few seconds okay so time for the get method so how that's going to look like first of all we're going to be providing some sort of a property to our get method and our get method will take that property and it will hash there so once it hashed there it's going to gives us some sort sort of a index based on that property so it's going to give us like I don't know maybe two or three or some sort of index okay then we're going to be going into that index and first of all we have to do a pait of check do we have some sort of a data inside this index if we have some sort of a data then cool then we're going to be iterating over through the data something which I'm going to be showing you right now and if we don't have any data so we're going to be passing undefined there we go okay so let me just say that once again first of all we are going to be providing some sort of a property to our get method our get method will take that property and it's going to Hash there so once it hash there then it's going to gives us some sort of index based on that hash then we're going to be going into that specific index and we have to check if we have some sort of a data inside that specific index then cool we have to itate over through that data but if we don't have any data so we are going to be just showing undefined so now let me just show you like if we have some sort of a data inside or index so first of all we're going to be iterating over through this outer array which you can see right here this blue array we are going to be iterating over through there and we are going to be checking like are you that element like the John which I'm searching for so it's going to say no and then we're going to be also asking this one are you the John and it's going to also say no but if I change that to John like let's suppose if you already have some sort of a property of a John so it's going to gives us the value of there and that's the entire process of the get method so if you want to do that by yourself so give it your best shot if you can do that then come back and watch the solution and here is my solution so what I'm going to do is I'm going to be creating a get method and I'm going to be also passing a key to there okay so first of all we have to Hash word key so we're going to be using like this do uh hash function come on hash function and we have to pass our key inside there and we're going to be storing there in the index variable just like there underneath there we're going to be checking if we already have some sort of a data or not so I'm going to be passing like if this do key map and we're going to be passing that specific index so if that's the case then we're going to be iterating over through that data like first of all we are going to be checking like do we have some sort of a data in this area if we have that data so we are going to be iterating over through these arrays but if we don't have any data so we're going to be just returning un come on undefined just like that so this is my check but if we don't have any data so we're going to be just returning undefined just like that BM but if we have some sort of a data instead of that undefined we're going to be first of all iterating over through this array and then finally we're going to be iterating over through this array and we're going to be searching for that specific item inside that array okay so how that's going to look like first of all we're going to be using like for let I equals to zero and then I is less than this. key map come on key map and we're going to be passing our index inside there and we are going to be also getting the length of there and finally let's just provide our increment and then we have to check if this. keymap and then that specific index and we're going to be also providing an index right here and we want to get the first element inside there if that is equal to the key which we are now providing for this get method which is now hashed right here so if that's the case so what we have to do we just have to return this. keymap come on keymap and we are going to be passing our index and then I and finally our data okay so now let me just save my file and and I'm going to just run that right here so instead of that console. log I'm going to just remove that from here and I'm going to provide like onbook do get and we're going to be passing John in this case okay so if I specify John save my file and run there it's going to gives us an error I don't know why it's going to gives us an error let me just see oh that's because we are now passing a key instead of a key we have to specify our key map okay so now if I save my file and run there it's not going to gives us anything but if I log the to the console like conso log and now let me just sa my file and run there it's going to gives us that specific data or you can say it's going to giv us the John phone number but if I specify my own name which is not available inside veret it's going to give us undefined which you can see right here so yeah that was the get method in our hash table okay time to create two final methods which is called the get all keys and also the get all values how we're going to be doing there first first of all we're going to be iterating over through each element inside our hash table and we're going to be searching like do you have any elements or items it will say no then we're going to be asking this one like do you have any items it's going to say no then we're going to be checking this one do you have any data or items or elements whatever you want to call them and it's going to say yeah I have some sort of a data so we're going to be zooming into it and first of all we going to be iterating over through this area and then we are going to be getting all of the keys from from there and later we are going to be also getting the values from there so we are going to be creating a two different methods for that let me say that once again first of all we're going to be iterating over through each element inside our hash table and then if we found some sort of a data then we're going to be iterating over through this hour array and then we are going to be getting our keys and also the Valu so now let's just do there first of all we are going to be creating our get all keys method so get all keys now inside then we are going to be creating a container where we are going to be in all of the keys so that's going to be our container and now it's time to iterate over through our entire hash table so we're going to be using like for let I equals to zero and then I is less than this. key map key map and then we're going to be taking the length of the and then let's just use our i++ and now inside there we going to be checking like do you even have the data or not so we're going to be using like this. keymap key map and we're going to be providing the index or the data inside there so then then now the next thing that we have to do like if we found that we have some sort of a data inside there so what do we have to do in that case we have to it right over through that data so we're going to be using like let J equals to zero and then J is less than this. key map key map and we have to specify our index inside there and now let's just get the length of there and finally we are going to be using a j++ and now inside there we're going to be using like keys. push and we have to push that to our container like this. key map and we're to be pushing like I and also the J and we're going to be pushing that first element which will be the zero okay and finally we're going to be also returning our keys so that we can see what we have so let's just return our keys and I'm going to sve my file and now let me just collapse there and here you can see I already pushed a John Jordan and also the Michael and now let me just use con log of phonebook do get all keys and I'm going to just execute there so if I sve my file and run there and here you see it's going to giv us the key of John Jordan and also the Michael so now let me just push myself like uh hosan and now if I sa my file and here you can see I am now right here inside this link list not a link list a has table there we go I'm going to remove myself from there we're going to be creating a method for get all values so get all values so now inside there we're going to be getting the values so we have to create our container for the values okay so I'm going to be using like for let I is equals to zero that same same exactly the same process and then finally we have to iterate over through our entire hch table and then we're going to be getting the length of there so I'll just use like i++ so that's going to be the first iteration we have to check like if you have some sort of a data so we are going to be only interested in that specific area Okay so let's just get that and if we have some data so now let's just iterate over through that data so I'm going to be using like J is equal to zero and then J is less than this start key map and I'm going to be also passing the index inside there and then the length and if that's the casee so we have to just increment there so finally we have to grab the values I'm going to be using like values. push not unshift but push and we have to push over this start key map and let's just push over I and also push over J and the first element and finally we are going to be just returning the Valu so that we can see what we have okay so yeah this is the entire code I'm going to collapse this code and finally let me just duplicate this line of code and I'm going to be using like get all the values so now if I save my file I'm going to comment this line out save my file once again and if I run there and here you can see I'm now getting all of that values right now so this is how we are going to be getting all of the keys and the values and the get method and the set method and also the hash Method All right so that was it about for the custom hash table and now it's time to perform a few lead code challenges so the first challenge that we have to do is that we have to create the word counter so what do I mean by that here you can see I have a text variable right here I have a few English words like I have Hello then I have my and then I have name name name three times and then I have is and Huzan so I want you to create some sort of a function where we are going to be passing that text and it's going to gives us like how many times that specific word is appeared in our text like hello is one time my is one time name just like this as you can see right here so we have hello one time my one time name three times as you can see right here and also we have a is one time and also Huzan one time so give it your best shot if you can do it that's completely okay then come back and watch the solution and here is my solution so the first thing that I'm going to be doing is that I'm going to be creating some sort of a function I'll give it the name of like word counter and now as a perimeter I'm going to be passing a text inside there and the first thing that we have to do is that we have to convert our text to the lower case text so how we are going to be doing that well we already know how we can do this we're going to be using like text to lower C method and it will make our text totally the lower so I'm going to be using like lower text it's going to be now equals to the result of this lower text so that's the first thing now the next thing that we have to do is that we have to create a hash table to store our account so now let me just do that we not going to be creating a custom hash table but we are going to be just creating the object so I'll just write like uh word map just like that it's going to have set to this empty object underneath that we have to split orex into words so how we are going to be doing that well we have to use the split method on this we are going to be using like lower text which is our variable right here and we have to convert that to each word so we are going to be using the dot split method and we are going to be passing this reject and you don't have to worry about this reject we can like totally do that in a lot of different ways but this is just a one way to do that so I'm going to just store that in the words variable and you know what let me just show you that so if I log that to the console like words and now let me just s my file I'm going to go back and now let me just create a text variable and we're going to be storing the value of like hello my name name name is hosan just like that and now if I use like uh word counter and we're going to be passing our text inside there so it's going to gives us some sort of a reason and you know what now let me just save my file and run there and here you can see it's going to change your text to these words right here so here you can see we have hello then my name name name and is hosan which is amazing so now let me just remove that now the next thing that we have to do is that we have to iterate over through these words so how we are going to be doing that well there are like thousand ways to do that but in my case I'm going to be using con word off words so I'm going to be using a four off Loop and now here we have to check if we have the word inside the word map and what is the word map now let me just show you there so here you can see this is going to be our word map we're going to be pushing our content to this hash table or object whatever you want to call there so then we have to just write like word map and then we have to pass our word inside there and we have to just use the Plus+ symbol and if that's not the case so we have to just set that to that specific word so I'm going to just write like word map we're going to be also passing a word today and now we are going to be setting that to one and finally we have to just return what we did so we have a word map just like this so now I'm going to sve my file I'm going to also remove these empty spaces from here and this is the entire code that you have to write okay so yeah now if I run my code here you can see we are not getting anything that's because we have to store this in some sort of a variable so I'm going to just write like Reser and and now let me just log there to the console so now if I save my file and run there and here you can see we're now getting hello one time my one time name three times is one time husan one time which is amazing so now let me just zoom in a bit and now let me try out something else like uh I don't know uh walk the dog dog dog and now let me just run that and here you can see we now getting walk one time the one time and dog three times so yeah that was word counter all right so now that we have to solve the two sum problem we already solved that throughout this course and as I said that we are going to be refactoring that code once again I'm going to be writing the code from scratch but if you want to refactor that previous code you are more than welcome to do that so what do we have to do first of all we have to create some sort of a function which will take two parameters it will take the nums array and it will also take the target value so here you can see I have a nums array right here I mean like it shouldn't have to be a nums array you can give it like any name that you like but you have to create some sort of array with a lot of elements so now here you can see we have 2 7 11 and 15 now what we have to do is that we have to combine these two words with each other and for the pair we are going to be getting that Target value so what do I mean by all of these gibas which I'm saying basically you have to add two numbers with each other and you have to check whether the combination of those two wordss is equal to 9 or their target value or not so we already know if you combine 11 + 15 so it's going to gives us some sort of a value Which is higher than 9 but if you combine two and seven so it's going to gives us 9 okay so then we are not done yet we have to find out the indexes so we have to find like this is going to be the zero element and this is going to be the one element so this is how we are now printing there right here so I want you to give it your best sh if you can do it that's completely okay then come back and watch the solution and here is my solution the first thing that we have to do is that we have to create an object to store the numbers in their indices so we have to just write like num map now we are going to be storing our indices inside this map or you can say the object whatever you want to call that now the next thing that we have to do is that we have to itate over through that nums array okay so how we are going to be doing that well we have to just write a four let I equals to zero and then I is less than nums do length come on L and GTH and then i++ now inside there we have to get the complement so how we are going to be getting there we have to write the target minus the nums and each number inside our nums okay so you know what now let me just log that to the console like compliment and now we have to just log that to the console compliment and I guess the spelling is correct but now if i s my file and if I run my code so what are we getting we are now getting like 7 2 - 2 and - 6 okay so that's then now the next thing that we have to do is that we have to check now let me just write a check if compliment in the num map and the num map have that complement is not equals to one just triple equals to I mean like not one but each element inside this Loop okay so then we have to just return the num map and also we have to provide a complement there and also our index inside there so we can see there now underneath this F statement we have to provide our num map and also we have to get the nums let me just remove this empty space from here and we also have to provide our Index right there and we have to set there two this index and if that's not the case so we have to just return an empty object I mean like empty array so now if I save my file now let me just go back let me just run my code so if I run my code so here you can see it's going to giv us the index of zero and one as we expected okay so here you can see the target value is now set to nine and we are now combining both of these words and we are now getting the indexes of each of these uh words or data whatever you want to call that so now let me just change this one to like I don't know maybe 10 and this this one to um 20 and the target I'm going to set there to 30 okay so now if I sve my file and now if I run my code so what are we getting we are now getting two and also three and why is that because this one is zero this one is one and this one is two and this one is three so that's why we are now getting the result of 30 right here so yeah that was the two so the real question is what is a tree and why you should even care about that so here is the Wikipedia definition and you don't have have to worry about that if you don't get it you don't have to worry about that because in this course I'm going to be teaching every single thing that there is to learn about the trees so a data structure tree is the fundamental hierarchical data structure it represents a collection of elements data called nodes connected by edges links forming a tree like structure and I know it is a bit weird definition so I know that you don't get it so now let me just break this down for you and now let me show you how the tree even looks like and this is how the tree looks like right here so if you haven't watched my previous video on link list you got to watch that video first then you would be able to follow along with this video anyways so here you can see I have my node and now my node is pointing to the left and also to the right right here as you can see and this node will be the parent of these children so you can either call them as a children or you can also say that these are going to be the siblings of this parent and by the way if this is going to be the very first node in your entire tree so you can call this one as the root node and we are going to be also writing a code for there so you don't have to worry about that for now there are a few things that I want you to keep in mind about the trees okay so if you don't have any other nodes so these nodes are something called The Leaf node because they are not pointing to any other node so you can call them as the leaf node so that's the first thing next we have a full tree so what do I mean by a full tree a full tree is a tree where each node either has no children or you can say the leaf node or exactly will have two children so what do I mean by that as you can see right here so now this one is a full tree so what do I mean by that here you can see it has two nodes right here and I am saying that it will either have exactly two childrens or it will have zero children like no children whatsoever okay so this one is a full tree and this one is also a full tree as you can see right right here it has two nodes and now you might be asking like well is this a full tree yeah of course it is because it doesn't have any other nodes so this one is also a full tree and here you can see the definition each node either has no children or you can say leave or exactly two children okay so this is something called the full tree next we have a perfect tree so it will have all the functionality of the full tree and also it will be a balance what do I mean by a balance balance simply is that all the leaf nodes are at the same depth like distance from the root so here you can see I have these Leaf nodes right here and they will be exactly at the same distance as you can see right here they are now at the end of this parent node what if I create a new node so let me just bring this down right here so is this a perfect tree no of course not because here you can see I'm now mentioning that all the leaf node and these are no longer a leaf I mean like this one is a Leaf node but this one isn't a leaf node because it is now pointing to yet another node okay so all the leaf nodes are at the same depth distance from the root okay so here you can see they are not exactly at the same depth like distance from the root so this is no longer a perfect tree okay so if I want to make it perfect so I'm going to have to just delete this last node and here you can see this is something called The Perfect Tree the last one we have is a complete tree so here is the diagram of that but no first of all let me just show you like what in the word is a complete re one mean all levels except possibly the last one are completely filled with nodes as you can see right here like all of that last nodes as you can see right here are totally complete with these nodes okay so here you can see them this is something called the complete tree where the last level is filled with the nodes from the left side as much as possible so that was a few examples of a tree so this one is a complete tree we also saw the perfect tree we also saw the full tree and finally we just discuss a few more topics like uh where is a leaf uh node and also the parent and the children and by the way this is going to be the root so now let me just show you that root by the way okay so if that's going to be the first node so this node will be called as the root node so now let's discuss something called the BST or the binary search tree so a BST is a special kind of a binary tree used to organize data in a sorted way and here the keyword is assorted way and it works like a filing cabinet where you can efficiently search add or remove items from so that was just a quick definition of what a BST is and now let me show you in action how BST works so there are a few things that you have to keep in mind when working with the binary search tree or you can say the BST for short okay so what are those things if you want to add a new element to your existing tree the first thing that you have to keep in mind is this statement so what is this statement this statement said that go to the left if the value is smaller than the current Branch or go to the right if the value is bigger than the current Branch so what in the word is all of the GI means here we already would have some sort of a value right here and this is going to be over root you can say that this is going to be our root node so now if you want to add a new node to this root node the first thing that we have to keep in mind we have to check if this current node is smaller than this existing one as you can see right here the root one so what do we have to do in that case we have to put that right here on this side otherwise if this is bigger than five so we have to put that right here on this side okay so you got to keep that in mind let me just say that once again go to the left if the value is smaller than the current Branch go to the right if the value is bigger than the current Branch okay so now we are going to be placing there right here because eight is greater than five so we're going to be putting this add to the right just like that next we have a three okay so here once again we have to ask ourself this question like is three greater than five or is three less than five of course three is less than five so we have to keep that right here or we have to put that right here okay so next we have a one and here is the problem next we have a one okay so we have to ask ourself this question like is one greater than five or is one less than five course one is less than five so we cannot put that right here because this area is already filled out okay so next we already searched that right here we also have to search this element with or you can say this node with this node so we have to check is 1 greater than three or is one less than three one is less than three okay so what do we have to do first of all we have to take out this pointer and we have to move it right here and now we are going to be taking this one and we are going to be putting that right in here okay not to the right not just like that we not going to be putting that right here we're going to be putting that to the left why is there because one is less than three one is also less than five so we are going to be putting there right here next we have a seven so we have to once again ask this question like is seven greater than five or is seven less than five so of course 7 is greater than five so we have to put that right here no we cannot do that and why is that because here we already have a new element or you can say we already have a node so we also have to compare both of these values as well so we have to check is seven greater than eight or is seven less than eight of course it is less than that so we have to just put that right here so now let me just take out this pointer and we have to point that to this newly created node okay so I'm going to just put that right here and now this is looking better now the final one we have is a nine so this is going to be the last comparison that we have to do is N9 less than five or is 9 greater than five okaye of course 9 is greater than five so then we have to also make a comparison between these two okay so we have to check is 9 greater than 8 or is 9 less than 8 well of course 9 is greater than this eight so we have to take this nine and we have to put that right here on the right side okay so I'm going to also just steal this uh marker or pointer whatever you want to call that and we have to just set that right here just like that and this is how we are going to be creating or what do we call it BST or binary search tree okay so that was a bit of theory about the BST and now let's write some code so the first thing that we have to do is that we have to create our node as you can see right here so we have to create this node and then we are going to be pointing there to these other nodes okay so what do we have to do first of all we have to write a class and then we have to create a node inside this node we are going to be passing our Constructor and a value inside there then we're going to be setting this do value and it's going to be now pointing to that value which we are going to be providing for the Constructor next we have to create our markers or the pointers whatever you want to call this so we're going to be setting the left and also the right to toally now okay so we have to write this. left and we are going to be setting that to null and we also have to write this start right and we will also set that to null and that's everything that we have to do for the node next we have to create our class for the BST okay so BST like a binary search tree and now inside there we're going to be passing our Constructor but we're not going to be passing any value to that unlike a link list the Sten and the cues and we are going to be first of all creating our route as you can see right here but now initially we're going to be setting this rout to totally null because at this point we did not create any node so we cannot set that or we cannot point that to anything so we have to write this. root and we have to point there to null so now let me just save my file and go back first of all I'm going to be creating a tree so I'll just write like a tree it's going to be now pointing to that new BST like new binary search tree and now just log there to the console like tree semi file and run there so what are we getting we are now getting this PST we only have a root property inside there and it is now initially pointing to nothing as you can see right here so that was it about forward node and also for our BST Constructor okay so time to create our own insert method I already show you the entire process a few seconds ago like I put this one right here and so on and so forth so if you want to pause this video and do that by yourself so you are more than welcome to do that otherwise here is my solution so what I'm going to do is that I'm going to be using my insert method okay so it's going to take some sort of a value and we're going to be providing or we are going to be creating our node or we are going to be inserting our node based on that value so the first thing that we have to do is that we have to even create something then we would be able to insert that to this existing tree okay so how that's going to look like first of all we have to write like new and then node and we are going to be passing that value to this node next we have to write like like a new node you can give it any name that you like and now we successfully created that node next we have to check if the roote is empty like if we don't have anything inside this route and it is now totally set to null okay as it is which you can see right here here we already set there to null okay so we have to check for that if that's the case so first of all we have to create that node and we have to point or root to that newly created node so now let me show you what I mean by that so first of all we're going to be checking if this root is triple equals to no like if our root is now set to no so we are going to be taking this do root and we have to point that to this newly created node and finally we have to just return that so that we can see what we did okay so what are we doing as you can see right here like this do root is now equals to no which it is now in our case so what we have to do first of all we have to point this do root to this newly created node as you can see right here so now in this case we would have just a null value now let me just remove that from here we would only have a null value now we are creating a new node so we are going to be removing this now and we have to just create a new node just like that and we're going to be pointing this start root to this new de created element now the next thing that we have to do if our node is not empty like in this case so what do you have to do in that case we have to first of all create our marker or our pointer so we're going to be creating a temp variable it's going to be pointing to that root so now what are we doing we are now creating a new temp poiner and we are now pointing that to this newly created node next we are going to be using the Y Loop and we're going to be passing through inside there now why are we using the Y Loop and why in the world are we even providing a true inside there well the only reason for that is because we don't know that how many times we are going to be using this insert method and how many nodes we are going to be inserting two or node so that's the only reason we now providing the Y Loop and we're now passing a true inside there okay so first of all we have to provide our check if new node. value is triple equals to temp. Value so what do you have to do in that case well we just have to return undefined first of all let me just explain what do I mean by this statement if new node. value is equals to the temp value let's suppose if I already have this element and now if I wanted to add yet another right here like let's suppose if I want to add yet another add so we cannot do that that's going to be a duplicate value so what do you have to do in that case we just have to return undefined underneath that we're going to be providing yet another if statement and we're going to be passing if new node. value is less than temp. value so what do we have to do in that case like as you can see right here now we successfully created our node now is the time of that comparison that I was talking about earlier we have to compare this newly created node value with this old one or this root one right here if new node do value which is now set to add is less than temp. Val temp. value so is this less than Ed or is this greater than Ed well we already know that it is greater than five and we already know that we are going to be putting that right here but first of all we also have to make another check is this area where we're going to be placing this node empty or not empty okay so that's what we have to do right now so we have to check if temp. left is triple equals to no if that area where we are about to store this newly created node is empty or not so if it is empty so we have to take temp. left and we have to assign this new node value to that and finally we just have to return this and now let me just say there okay so which means like we are now successfully taking this newly created node and we are now pointing there right here in this right area just like that and now what if that's not the case so what do we have to do in that situation so we have to take like temp and we have to set that to temp. left if this value is less than five so we're going to be taking this node and we have to point that right here well that's not the case we have to put that right here for for this case that was our entire first if statement now we have to also write a L statement for this we are going to be using a l statement and we have to do a nested check check like if temp. WR is triple equals to null so what do we have to do in that case we have to write like temp. right and we have to set there to this newly created node and we have to just return this that's going to be it and finally if that's not the case we have to write like temp it's going to be now equals to temp. write and now let me just save my file and that was it okay so now let me just make this a bit bigger so you guys can see everything a bit better let me just go back so if you get confused by this code don't you worry because I'm going to give you a lot of exercises so what I'm going to do is that I'm going to insert a few elements or notes to my tree so I'm going to be using like tree. insert and first of all I'm going to be inserting five then add then three 1 7 and then finally 9 okay so now if i s my file and now let me just run my code and what are we getting we are now getting our binary search tree and now inside this tree we have a Noe I like we have a root which is now pointing to the node and initially we're going to be passing the value of five as you can see right here on this diagram so we are going to be passing the value of five and then we have a left and right values if the value is less than five so we're going to be putting that right here on the left side if the value is greater than five so we're going to be putting there right here on the right side okay so that was it about this insert method on our tree okay so time to create our next method which will be the includes method okay so basically it's going allows us to to search for a specific node in our entire tree so what do I mean by that let's suppose if I want to search for a seven so it's going to gives us true if it found out the seven otherwise it's going to gives us false if you don't have a seven inside our tree so that's what we are going to be doing but now let me just give you the instruction of how we are going to be doing there suppose we are now searching for the seven in our entire tree okay so first of all we are going to be asking or we are going to be making a comparison between the root and also the seven okay so we're going to be providing a value of seven and then we're going to be comparing there with the root okay so is 7 less than five or is 7 greater than five so if seven is less than five so we're going to be checking in this area right here now let me just highlight this we're going to be checking our item in this area only but if or S is greater than five so we are going to be checking in this specific area right here okay so now that we already know that 7 is greater than five so which means like we are going to be checking in this area Okay so seven is greater than five so which means like yeah we have to go in this route then we have to check is seven greater than eight or is 7 less than eight we already know that seven is less than eight so we have to go a bit down and here we have it okay so here is our seven value right here now let me just change that to like I don't know maybe one so we're going to be making a comparison like is one greater than five or is 1 less than five will we already know that one is less than five so we're going to be checking in this area right here okay so one is less than five so which means like we have to check out for this one are you the one no I'm not I'm not the one so we have to make a comparison one more time so like is one greater than three or is one less than three well 1 is less than three so we have to go a bit down and here we have our one right here and we're going to be creating an includes method and it's going to be taking some sort of a value and based on that value we're going to be searching for the specific item okay so the first thing that we have to do is that we have to make a comparison like if not this. root so what do we have to do in that case we have to just return false like if we don't have anything inside our tree so we cannot search for anything like let me just give you example of there if if we don't have anything so how in the world we're going to be searching for something inside this empty tree so this is what this if statement means now underneath them we have to create our temp variable so we're going to be creating like temp variable and we have to point that to this start route so we are going to be creating another variable or pointer whatever you want to call that I'm going to give it the name of like Temp and we are going to be pointing this temp variable to this first node right here to this root and what is the root a root is this first node okay so that's exactly what we are doing right now next we have to provide our while temp and then we have to check out so if we have the temp so we're going to be searching for our items but if you don't have the temp so well you get the idea okay so now inside there what do we have to do we have to search if the value which we are now searching for like that specific thing which we are searching for is less than temp. value okay so what do we have to do in that situation well we have to just write like temp is equals to temp. left now the thing we are searching for is less than temp do value so we have to set the temp to the temp dot left so what do I mean by all of these G which I just said we are now searching for this value right here like uh let's suppose if I'm searching for seven I'm going to just write like seven and we have to make a comparison between both of them like is seven greater than five or is seven less than five well s is greater than five okay so here you can see we are now writing a less than five you know let me just change that to maybe three okay so three is now less than five so we have to make our comparison right here in this area okay so now we have to take out this stem and we have to put that right here at the bottom and now this stem is pointing to this three so which means like we're now going to be getting this result right here so we are now taking this stem variable which used to be pointing to the root now it is pointing to this third uh node right here just like that and what if that's not the case we're going to be providing like else if and value is greater than temp. value so what do we have to do in that situation we have to take out the temp and we have to assign that to the temp. right value inside there okay so now let me just sa my file so what in the world are we doing now the value which you are searching for is greater than temp. value if that's the case so we have to set out the temp to the temp. right let's suppose if I want to search for a seven so what we have to do first of all we now making this comparison like is 7 greater than five or is s less than five so we already know that 7 is greater than 5 so we are going to be taking this temp which used to be pointing to this root so we're now taking there and we're going to be searching for the specific element inside this area right here like temp. right like now this temp is pointing to this route so we are going to be checking our element inside to the right of this node which means like we already compared seven and five so we have to take out this temp and we have to point that to this Ed then we're going to be comparing the seven and eight so is seven greater than or less than eight well seven is less than 8 so we have to take out this Temp and we have to put that right here and there we go here we have our seven nde so it's going to gives us True Value and if that's not the case like else if if the value is triple equals to the temp. value so what do we have to do in that situation we have to just return true and if that's not the case so underneath uh underneath this one we're going to be just returning false so now we just write like return false and I'm going to cut that from here and now let me just put that right here so now let me just save that let me go back and this is the entire code that we have to write for the includes method I'm going to go to the bottom and here I'm going to just search for the Tre do includes method and I'm going to be providing like let's suppose if I want to search for this one so I'll just pass like this one right here and do I have to store it in the console log now let me just put in the console log yeah I guess that's going to work so I'm going to comment this line out and save my file and run there so what are we getting we are now getting true right here because it found out that this one is now inside our tree but let's suppose if I search for like 100 so it's going to gives us like false if I search for 100 and now let me just save my file and run there so it's going to gives us the value of false let's talk about Rec Recon so what is recursion and why should even care about that so recursion is when a function call itself but it doesn't call itself exactly the same way each time so now you might be asking like Huzan what in the world is this recursion even mean and why should I even care about that well you have to care about recursion because we are going to be learning about something called the treat reversal and we are going to be also using a recursion in the upcoming algorithm which we're going to be creating very soon so yeah that's just the actual definition of what a recursion is and now let me just show you there in the actual diagrams and here is the diagram so I want you to imagine that you have some sort of a Russian nesting doll or you can say this actual name which I can't pronounce that's the only reason I provided uh this definition like a Russian nesting doll so I'm going to just remove that from here and basically this is some kind of a doll which will be initially wrapped with some kind of a box and once we open that box we have a doll once we open that doll we have another doll if once we open that one we have another one and so on and so forth as soon as we didn't reach to this point we are going to be opening this doll again and again and again so now you might be asking like hoseen yeah we know this kind of a doll but now the question is what is recursion in this entire process and recursion play these roles right here now let me just bring there right here let's talk about the first one the function makes the problem smaller by changing the input a bit like opening a smaller doll inside the bigger one like once we open this doll and we found out another doll inside there so that's going to be the first point in the recursion process now the next point we have is like there is a simple case which we call a base case and that function can be solved without calling itself again and this is something called the base case you don't have to worry about what a base case is what you can think about there is that we're going to be calling this function again and again as soon as we find out the last one like the last element inside this doll or the last doll inside inside these Russian nesting dolls okay and as long as it's not the B case the function will call itself with the smaller problem so I don't know if that was a good or maybe the most horrible definition of a recursion but now let me just write some code and then you will get to know what I'm talking about let me give you the example of a recursive function in JavaScript so basically you're going to be creating a function you can give it any name that you like but in my case I'm going to call it as a countdown because we're going to be creating a function which will do the countdown so that's going to look like so basically if I just provide like five so it's going to decrement one each time this function calls so it's going to giv us first of all four then three then two and finally one and once it reaches to the zero we are going to stop executing this function so how that's going to look like well you can use the for Loop you can use the Y Loop there are a lot of methods that you can do but in my case I'm going to be using a recursion so I'm going to just P this function once again so I'll just write like countdown and I'm going to just decrement or you can say minus one from that function okay so now if I save my file this will totally work but it will give us something called the infinite Loop because this function will run again and again and it's going to gives us something called the stack Overflow which we don't want so how we can prevent that from happening we can prevent that from happening by providing a b case so a Bas case is basically that point once our function reaches to that point so we can stop the execution of our function so we can just say like number triple equals to zero so if we hit zero number so we can just to return you can also provide some message if you wanted to so I'll just write like and finally the stop come on stopping point there we go and I'm going to also paste this Emoji right here and this is how we are going to be creating our first recursive function so if I log that to the console like my number so it's going to show me all of that number again and again so now let me just call that right here and I'm going to just pass Five inside this so if I save my file let me just go back and now if I run my code so what are we getting we are now getting five 4 3 2 1 right here and once we reach to the zero so we are now getting in finally the stopping point okay so this is how we going to be creating our recursion function and this how we going to be providing a Bas case like once you reach to that point you got to stop execution like you have to provide there if I don't provide there let me just comment this line out and now if I sve my file and now let me just run there and here you can see this function will run again and again and it's not going to give me anything in this case but yeah you get the idea so that was example number one now let me just remove that and now let me give you example number two which is something called the factorial so if you are coming from the mathematics background so you already know what a factorial is but if you don't you don't have to worry about that so basically if you want to find out the factorial of like four and by the way factorial looks something like this let's suppose if you want to find out the factorial of five and we have to provide the explanation mark right here now let me just zoom in a bit so this is something called the factorial of 5 so essentially it's going to gives us 5 * 4 * 3 * uh 2 and then finally times one right here so if you wanted to create a function for that we can totally do that by using either a full loop and Y Loop or you can also use the recursive method so we are going to be using a recursive method because we don't want to use a four loops and Y Loops we are now working with a DSA so let's just write a factorial the name doesn't matter and first of all I'm going to just return When the numbers time and then we are going to be passing that same function once again and we are going to be also decrementing there by one something which we just saw a few seconds ago okay so we are now just multiplying there with that number which we are going to be specifying right here as a perimeter okay so now let me just sve my file and once again we did not specify any base point for that so this function will run again and again so now to provide a base point for that so we can totally do that by just writing like if number triple equals to zero so we just want to return one right here that situation okay so now let me just log there to the console I'm going to write like Factor not favorite data but factorial of four or you know I'm going to specify five right here and now if I sve my file and run my code and here you can see it's going to give me the result of 120 so that's the factorial of five but if you want to check out the factorial of four so I'm going to just write four and now let me just run my code so we are now getting 24 right here and that's totally amazing but we can also refactor this code to just a simpler version so I'm going to remove that from here I can totally write like that same formula in one line by just providing like um number triple equals to Z if that's the case so we can use the trary operator so just gives us one and if that's not the case so then gives us like numbers and that same formula which we just use so factorial and then we have to decrement one from there and now if i s my file so this will totally work if I run my code and still here you can see we're now getting the result of 24 right here once again and we can even more reflector there by just using like const and making an arrow function if you want it to so we can totally remove the return keyword and so on and so forth and this is our factorial function or recursive factorial function looks like right now so if I run my code and still we are now getting 24 right here so yeah that was it about the recursion and next we're going to be learning about the treat reversal all right guys so now we are done with how we are going to be creating the tree and also the recursion part and now it's time to learn about something called the tree treal so what do I mean by a tree Tre so basically a tree so just simply means that we going to be accessing each item inside the tree and we're going to be storing that in some sort of array okay so how we are going to be doing them there are a lot of ways we can do that like we're going to be also learning about the BFS and also uh the in order and post order and something like that which we are going to be learning learning very soon they are coming but first of all let's talk about the first one which is called the BFS or you can say the breath first search so how that's going to look like well we are going to be first of all starting from the rout and we are going to be providing that node to our que so we are going to be creating our own queue not our own queue but we are going to be working with array okay so yeah we going to be taking our item from our tree which will be the first item or you can say the root and we're going to be placing that in that queue the next thing that we have to do is that we have to take this data from this queue and we have to P there right here inside our data array so we are going to be providing the entire node to our que and we're going to be only taking the data from that node and we are going to be passing that to this data array now the next thing that we have to do is that we have to search for the left and also for the right and why is that because we are now providing this entire node which you can see right here so it has the pointer of the left and Al to the right so next we are going to be searching this third and fourth element okay so now we successfully added this element right here as you can see so we can totally remove that from our que so now we successfully removed this so the third thing that we have to do is that we have to take this third and also this add element and we have to take that and we have to put that right here inside this que so once we do that the next thing that we have to do is that we have to just take the data off there like this three so I'm going to just write that three right here oh that's super big so now let me provide a comma and I'm going to also provide this three right here and I'm going to also provide this eight right here in this case okay so now we are not totally done yet we now successfully added this five and also this three and also this a but now it's time to check the left and also the right pointer of this third node okay so we're going to be taking the and now let me just highlight this area because now we're going to be working with this area Okay so we're going to be checking like is is there something to the left of this node yeah there is so we are going to be taking this one and we are going to be putting there but first of all we have to remove them from here so we have to remove them then we are going to be taking this one and we are going to be placing there right here and then we're going to be taking this one value from there I'm going to just remove that from here and we're going to be placing that right here inside our data so now this area is totally done now let me just highlight there this area is now totally done now the next thing that we have to do is that we have to take care of this area now we have to go ahead and go to this add because we already added this Ed right here is there something to the left of this node and also is there something to the right of this node yeah there is so we are going to be taking there but first of all we have to remove the right here because we already added that inside our array so we have to take this left value and also this right value and we have to put that inside our C so now once we do that the final thing that we have to do is that we have we have to just take the value from there so we are going to be taking the value of seven and we're going to be also providing this nine word here and now we are totally done with this First Street reversal but we also have to remove these nodes from here so this is how we are going to be iterating over through each node inside our tree and this is how we going to be getting a data from there and this is how we going to be storing there in our data array and this is something called the breath first search or you can say the BFS or the breath first search sech so now let's write a code for that time to create our own BFS or you can say the breath first search okay so it's not going to take any perimeter or anything like that now inside there the first thing that we have to do is that we have to get the current value so how that's going to look like first of all we have to set that to the root so we are going to be accessing our root right here by using this. root and we have to store that in the current variable just like there so now that's done the next thing that we have to do is that we have to create this q and also this data right here okay so we are going to be just writing like q and it's going to be now set to this empty array and we are going to be also creating our data and we are going to be also uh setting that to the empty array just like that now the first thing that we have to do is that we have to take this root value and we have to take that and we have to put the right here inside this que this entire node I'm talking about not just only the value so we're going to be using like q. push method and we're going to be passing this current value inside there the next thing that we have to do is that we have to iterate over through each element inside or node so to do that we can either use the for Loop or we can also use the Y Loop so in my case I'm going to be using the Y Loop because in this case I don't know how many elements I would have inside my tree so I'm going to just write like k. length so as long as I have something inside this tree so we are going to be iterating over through there so once my tree length is set to either uh zero or no so then we're going to stop itating over through this tree so now that's done we now successfully added this element to our Q so now we have to remove that so how we are going to be doing them well we just have to write current and we have to use our q. shift method so it's going to remove the first element from our Q okay so we're going to be using data. push and then we're going to be adding this current um current node and we're going to be passing the value of there so what are we doing we are now first of all taking this value and we are now placing that inside our data which you can see right here current do value and we're now pushing there to this data right here as you can see right here so we are going to be taking this five and we are going to be pushing there to this data and we are going to be removing this one from our que just like that as you can see we now removing there from our list or you can see the tree why am I saying the list now the next thing that we have to do is that we have to search for the left and also for the right uh pointers so how that's going to look like we're going to be using current. left if there is something to the left so what do we have to do in that situation equation well we have to write our q. push method and we're going to be pushing our current. left okay so basically we are now searching we're now iterating over through this entire tree there is something to the left of this node we have to take that data and we have to push that two or q but if there is nothing there so we have to also search for the right Val which we're going to be doing in a few seconds okay so now this step is totally done the next thing that we have to do is that we also have to search for the right value so we're going to be using like current right and if there is something to the right so we're going to be taking that value and we are going to be pushing that to come on current do right and we're going to be pushing there to or Q okay so if there is something to the left we're going to be taking there and we're going to be pushing there to the que if there is something to the right we're going to be also taking that and we are going to be pushing there to our q but if there is nothing there either to the left or to the right so we can totally just ignore that so yeah now that's done and the final thing that we have to do is that we have to return our data so that we can see what's happening right now so if I just use like return data and yeah that's going to be it for our entire BFS so it's going to it read over through each element and it's going to just first of all remove the first element which we already provided right here for the root it's going to take the value of there and it's going to put the inside our data then it's going to search for that specific node left value if there is something to the left so it's going to add there to the que and if there is something to the right so it's going to add there to the right of our que I mean like it's going to add there to the que and finally we are now just returning our data and now let's use that right here so I'm going to be using console. log of 3. BFS and now let me just execute there I'm going to save my file and run there and here you can see first of all it's going to gives us five then it's going to gives us 3 8 17 and9 and here you can see 5 38 17 and 9 5 you know let me just copy that why am I reading there right now so now let me just place this so here you can see we have 5 38179 as I explained a few seconds ago so yeah that was our breath first search let's talk about the DFS and especially the pre-order DFS we're going to be also learning about the in order and also the post order but now let's talk about the pre-order DFS and what do I mean by a DFS death Plus search we already learned about the bread first search and now it's time to learn about the depth first search so how that's going to look like and it's going to look something like this first of all initially we're going to be starting from the root and we're going to be pushing this root to our array and then we're going to be asking is there something to the left or to the right of this node yeah there is something to the left and also to the right so we are only interested in this area right here okay so we're going to be taking our marker and we're now going to be pointing the to the second node okay so it's going to take this data and it's going to also store there in that array so you know what let me just highlight there for you so first of all we are going to be creating this array and now inside this array first of all we are going to be providing this five because there going to be the root not we are going to be attaching there right here inside our array and next we have to search for the left area and now inside this left area we have a three right here so we are going to be taking that three and we are going to be adding that to our array we also have to search for the left and right of this this third node okay so we have something to the left but we don't have anything to the right so we are going to be taking this one and we are going to be also storing there right here inside this array and then we're going to be jumping back so there is nothing right here to the right and we already stored this one right here so first of all we are going to be jumping into this three and then we're going to be jumping into this five and then we're going to be checking the right area right here now this area is totally done now we are going to be asking the question like is there something to the right of this node yeah there is so which is the Ed so we are going to be taking that Ed and we are going to be storing there inside our array okay and then we're going to be also asking that same question like is there something to the left and to the right yeah there is also something to the left and also to the right so we're going to be first of all taking the left value which is the seven so we are going to be adding there right here so first of all let's just add the seven and then once we successfully added the seven we're going to be jumping jumping back to this at right here and then we are going to be jumping down to this nine or you can say to the right of this node so then we're going to be just writing like it and yeah this is what we call the DFS pre-order and I realized that I made a mistake instead of providing a nine I provid it right here at once again so now let me just change that to the nine and this is how we are going to be working with the DFS pre-order so now let me just write a code for there and then you'll get to know what I'm talking about I'm going to create a new method I will give it the name of like DFS PR or you can give it any name that you like and first of all we are going to be creating our node and I'll just provide a premier of no to them and initial value will be set to this do root and also we're going to be setting the data to this empty array initially and now first of all we have to check if there is no node like if the node value is set to null so in that case we're going to be only returning the data which is now initially set to empty object I mean like empty array so that's the that's the first thing now the next thing that we have to do is that we have to take our data and we have to push the node value to there so like we have to take this root data and we have to push the value off there right here inside our array so that's the first thing now the next thing that we have to do is that we have to check for the left and for the right values so we can check like if there is something to the left of this node so what we have to do we have to do the recursion like we have to call this method inside itself like we're going to be calling this method right here once again so now we have to write like this do uh DFS and then pre-order right here we have to call this function and we have to provide the left value to there and we're going to be also passing the data inside there so this is our base case like once our node is set to null so we only have to return the data and nothing else then there so here you can see we're now checking there is something to the left so we have to call this function or this method inside itself we have to first of all P the pointer like what in the what is this node pointing to so it used to be pointing to the five now it is pointing to the three so this is how we going to be passing that pointer and we are going to be also taking the data of there and we are going to be storing the inside our array as you can see right here so now the value will be three so we are now taking that data and we are now pushing that to this empty array okay so that's going to be the first thing and we also have to check for the right valure so if there is something to the node. right so what do we have to do in that case we have to once again call this method or you can say we have to recursively call this method okay and we are going to be passing the pointer which will be now set to no do right and we also have to provide the data inside there and finally we have to just return what we did okay so I'm going to sve my file and that's all the thing that you have to do yeah this is going to be our BAS case this is how we going to be pushing our new element every time this method is call and also we are going to be checking if there is something to the left so we're going to be providing the pointer and also that data to that specific array which you can see right here and we are going to be also checking for the right if there is something to the right so we're going to be calling this method recursively once again we're going to be passing the pointer and also the data to there so uh you know what let me just run this code and then you will get to know what I'm talking about so instead of writing this BFS I'm going to console.log this uh tree. BFS pre-order and I'm going to sve my file and run there and here you can see that result will be exactly the same like this one so I'm going to copy there and now let me just place it right here so we have 5 3 1 8 7 and 9 and now let me show you that in the debugger you don't have to do that but I want to do that okay so if I log there to the console so what I'm going to do is that I'm going to just write a separator right here and I'll just write this data and I'm going to sve my file and now me show you how our data will look like so if I run my code you know let me just clear this out and now let me run my code so initially my array will be now set to empty array then we're going to be passing this fifth element which is going to be the root element then we're going to be checking for the left value you know let me just zoom in a bit we're going to be checking for the left Valu if there is something to the left so we're going to be adding that right here inside our array and then we're going to be also checking if once again like if there is something to the left or to the right so now in this case case we only have this one right here we don't have nothing inside to the right so that's why we are now only getting this one then it will jump to this three it will also jump to this five and then it's going to start working or start searching for this right value so is there something to the right of this five yeah there is as you can see right here which is the air so we're going to be taking there and we have to put there right here then it's going to check if there is something to the left yeah there is which is the seven so we're going to be also storing that right here then we will go back to this Ed and then we're going to be searching for the last element is there something to the right yeah there is something to the right which is nine and we're now adding there right here so that was the basic but you don't have to do this step and if you don't want to watch the rest of this DFS pre-order you can totally skip there but I'm going to show you there in the debugger okay so I'm not going to show you this area but I'm going to have to provide my pointer right here and now let me just run the debugger and and this is how it will look like right here in the debugger so you don't have to focus on anything you only have to focus on this ter right here so first of all once our code start so the initial value will be set to empty array and we have the node of five and then for the left value we have a value of three and then we also have the left value once again of one as you can see right here so we have 5 3 and one and then also we have the right value which will be now first of set to the ADD and you can see right right here that is now set to the Ed and for the left we have a seven so as you can see right here we have the value of seven for the left and for the right we have a nine value as you can see right here and this is how it's going to look like initially so now if I run through the once it's going to push that five to this data array right here so that's the first thing okay then then we have to just run through there I'm going to just F forward so it's going to go to the second pointer and then it's going to take the value of there it's going to put that right here inside this five let me just run that once again and it's going to take the value of one and it's going to also add that inside that array and then let me just run there for a few more times so it's going to take the value of three as I said like it's going to go back once we added this one then it's going to go back to the three then it's going to also go back to the five it is now set to the three it's going to also go back to that five right here and let me just run that one more time so here you can see it's going to go back to the five and now this area is totally done so it's going to go to the right of that value so if I run through there and let me just run there once again here you can see the value is now set to eight and now it's going to take that value it's going to store the inside our data variable ah just like that and so on and so forth you get the idea I don't want to waste your time anymore if you want to test that out so you just have to hit F5 and it's going to start this debugger for you and let me just stop executing so I'm going to just click on there and you get the idea of BFS pre-order now we we just learned about the pre-order now it's time to learn about the post order so what do I mean by the post order it will look exactly the same like the pre-order but the only change will be once we are inserting the data to the array so what do I mean by all of that gibbish which I just said so first of all we're going to be starting our search from this initial value which is five but we are not let me just say that once again we are not going to be adding the value of this five inside our array so you know what let me just build the array right here so you guys can see what I'm doing so just like that we're going to be starting our search from this five but we're not going to be storing the value of there then we're going to be taking that pointer and we also have to search for the left area and then we have to search for like is there something to the left or to the right yeah there is something to the left but there is nothing to the right so we have to take that pointer and once again we are not storing the value we have to take that pointer and we have to point there to this last node and then we're going to asking that same question like is there something to the left or is there something to the right there is nothing to the left and there is nothing to the right so which means like this is a leaf node now we are going to be taking the value of this Leaf node and we are going to be storing there inside this one right here I mean like inside this uh array what am I saying today I don't know so now that's toally done the next thing that we have to do is that we have to go back and we have to take the value of this three and we have to store that right here in side or array just like there and once we go to the top one more time like to this rout one more time we are not going to be storing the value of this one now this area is totally done the next thing that we have to do is that we have to search for this area right here now this part is left we are not going to be storing the value of five so we are not going to be storing the value of this eight instead we're going to be asking this question like is there something to the left or to the right yeah there is something to the left and also to the right so let's just go go to the left area and then finally once we reach to this point we're going to be asking this question like once again is there something to the left or to the right no there is nothing to the left and nothing to the right so which means like this is a leaf node or the final node so we're going to be taking the value of this one and then we're going to be storing the inside our array just like that and now once we edit the value of this seven we're going to be jumping back to our it and then we're going to be searching like this this area is totally done we have to search the right like is there something to the right yeah there is there is a ninth note right here so we are going to be pointing to this ninth node you know what let me just highlight there for you and now we totally done this area now we're going to be jumping into this ninth node and then we are going to be asking that same question is there something to the left or to the right of this ninth node no there is nothing to the left and nothing to the right of this n node so which means like this is a leaf node so we are going to be taking the value of that nine and we have to store that in our array okay and now we going to be going back now this area is totally done we are going to be going back and we're going to be taking the value of this eight and now we have to go back for the final time for this rout and we have to pass the value of this rout okay just like that let me just say that once again the main difference between the pre-order and the post order is that once we were working with the pre-order we started to add every sing single element that we retrieve to our array but in the post order that's not going to be the case so first of all we're going to be searching for this item but if we found the last element or the leaf node we are going to be taking the value of that leaf node and we are going to be storing there into this array okay so then we're going to be jumping back and we're going to be storing the value of this one we're not going to be storing the value of that one we are going to be searching for the right and then we are going to be adding seven then nine then eight and then five that was a lot of explanation so now let me just write some code and then you'll get to know what I'm talking about I lied I'm not going to be writing any code I'm going to be copying and placing there so now let me just comment this line out and the code will be exactly the same but we only have to change one line okay just the order of one line so I'm going to just uh rename that to like DFS post order and now inside there we're going to to be taking this push method and then I'm going to cut that from here and we're going to be adding there right here at the end and you know we don't need that from here so now let's just remove that okay so first of all we're going to be providing our base case you already get the idea of that as I explained a few seconds ago so I'm not going to explain every single thing once again like for the second time but yeah you get the idea so we're going to be taking that pushing their irem and we're going to be placing there at the end so which means like if we found the leaf node then we're going to be taking the value of there and we're going to be pushing there to or array so you know what let me just run the keep this code in mind so we're going to be only taking this line of code which used to be here we now taking that and we now placing there right here so I'm going to save this file and now let me just run that right here so that was a pre-order and you know what I realized that I made a mistake I have to also change this DFS pre-order to this post order so I'm going to copy that and now let me just place it right here I'm going to also place this one right here sve my file and now it's going to gives us the correct result so I'm going to run my code and here you can see we now getting that exactly the same result so I'm going to just place that right here we're now getting 137 985 which is exactly the correct result and if you want to pause this video and if you want to hit the F5 and run this debugger by yourself you can totally do that if you wanted to but I'm not going to because I already explained this pre-order in a very great detail so I think it's going to just waste your time let's talk about the final one which is called the depth first search in order so how that's going to look like and it's going to look something like this first of all we will start our reversal from the root okay so we are not going to be airing the fifth one but we are going to be jumping into this next one which is the third we're not going to be airing this one we will jump into this last one and as you can see right here there is nothing to the left and nothing to the right so what we will do is that we will just first of all create our array and we're going to be storing the value of one then we will jump to this third one we will also store the value of third one but now in the in order we will jump to this one and we will also store the value of this root right here okay so I'm going to also store that right here now this area is totally done the next thing that we have to do is that we have to search for this right area so we are not going to be storing the value of this head let me just point my pointer right here we not going to be storing the value of this this Ed we will jump into the left of this add and then we will take this value as you can see right here like there is nothing to the left and nothing to the right so that's why we are now going to be taking the value of this seven we will also add there and then we will jump back to this at right here and we will also take the value of this add now we will add there and finally we will also search for the right and for the right we only have the ninth element right here so we will also take the value of that nine and we have to put that right here and this is how we are going to be working with the in order so I'm not like once again I'm not going to write any code I'm going to duplicate this code right here I'm going to uh collapse that one and now let me just show you what we have to do right now so we have to change only a few things first of all we have to change the name of these three so I'm going to just change the name of that like DFS in order and now the next thing that we have to do is that we have to take this data. push we have to cut that from here and we have to put that right here in that area okay so we only have to take this data and we have to put that at the middle of this left and also to this right so now if I uh you know I'm going to have to copy that and now let me just comment this line out and I'm going to be using con log Tre do uh DFS in order and now I'm going to execute that and now let me just run my code and here you can see we are now getting that exactly the same result let me just place it right here so we can see is everything okay or not and yeah that is okay so we getting 135 7 and 8 I mean like 135 7 8 and 9 and yeah this is what we are doing right now so thank you so much for watching this long video but I hope it was worth it and if you enjoy this video feel free to go ahead and comment and like and share subscribe do whatever you want to do thank you so much again Su and welcome to the data structures and algorithm master class so in this video we are going to be learning about the GRS from scratch so what is a gr and why you should care about that so a graph is a nonlinear data structure that models a relationship between the objects so it consists of two components which is called the vertices or you can also call it like a nodes and also the edges so if you don't get this definition you don't have to worry about that because in this course I'm going to be teaching you every single thing that there is to learn about the graphs so now let's talk about that vertices or you can say the nodes and also the edges so vertices or nodes these represent the inter visual component within a graph on the other hand we have a edges so these are just a connection between two vertices or more than two vertices these connect vertices signifying a relationship or connect between them that's it so there are a couple of ways where we can store our graph the first one is called The adjacency Matrix and the second one is called the adjacency list so throughout the course we're going to be using this adjacency list but I'm going to also show you how we going to be working with the adjacency Matrix so now let's talk about the adjacency Matrix right now okay so if you want to store the data of this graph inside your adjacency Matrix the first thing that we have to ask ourself is that what are the connection of each node with other nodes so basically these stuff are called the vertices or you can also call them the nodes and this is something called the edges okay so as I explained a few seconds ago but I want to just make sure so with who this a is connected with this a is connected with this E and A is also connected with this B but a is not connected with the d a is also not connected with the c a is only connected with the E and also the B so what do we have to do so you can store like zeros and ones if you wanted to but in my case I'm going to just use like uh cross and check just for this diagram purposes so let's talk about the first one which is the a so a is not connected with the a so that's going to be the cross a is connected with the B so we are going to be taking that check mark and we're going to be placing that right here next we have a is connected to C no a is only connected with the E and also with the B A is not connected with the c so we're going to be taking this cross and we will just put that right here next we have like a connected with the D no a is not connected with the D so we're going to be grabbing there and we have to put this cross right here next we have like a is connected to the E yeah this a is connected with this e so we're going to be taking this check mark and now we have to place it right here I don't want to waste a lot of your time on this graph but now let me just show you this second one and you can do the rest of them by yourself and I'm going to also show you the complete graph okay so now let's talk about this b b is only connected with the A and B is also connected with the c b is not connected with the D B is also not connected with the E B is only connected with a and also the C B is connected with a so we're going to be taking this this check mark and we have to put the right here so B is not connected with itself like B is not connected with B so we're going to be taking this cross and we have to put theid here and next we have like B is connected with c yeah B is connected with C so we're going to be taking this check mark and we have to put that right here and also B is not connected with anything else so we can just take this cross and we can just put there right in here so yeah I don't want to waste your time so now let me just show you the complete diagram of there and and here is the complete diagram so you can pause the video and see all of these connections by yourself but if you don't want to do that you don't have to do that okay so that was The adjacency Matrix and now let's talk about the adjacency list okay so it will look something like this so we are going to be taking our connection and we're going to be storing the inside our object and now inside this object we're going to be providing the property and then that connection so these are something called the vertices or nodes and these are called the connections or you can say the edges whatever you want to call there now let me explain the connections between there so a is connected with E and also with B so a you know let me just highlight there a is connected with b and also with e okay now the next one we have is a b is only connected with a and also the C so here you can see we have B connected with a and also the C now the next one we have is a c so C is connected with b and also with d so here you can see we are now connecting this C with b and d and now the next one we have is a d d is only connected with c and also with e so here you can see D is now connected with c and also with E and the final one we have is a e and e is now connected with d and also with a so here you can see we're now placing this e and we now connecting that with the A and D so yeah that was just a basic theory of the adjacency metrix and that was the adjacency list and now let's get into the coding part all right so now let's get into the coding part so how we going to be creating our graph well to do that we are going to be using a class and we have to write a graph you can give it any name that you like the name is to on you now inside this graph we are going to be defining our Constructor and now inside this Constructor we are going to be only using like this do adjacency list and it's going to be now pointing to this empty object so this is how we going to be defining our graph and now let me just create an instance of this so I'm going to go back now we'll just use like graph or you know I'm going to just give it the name of like G it's going to be now equals to this new graph so if I just execute then if I log there to the console like this G I'm going to sell my file and run there and here you can see we have our graph and now inside this graph you only have this adjacency list which is now pointing to this empty object now that we successfully created our graph the next thing that we have to do is that we have to Define our Vertex or you can say that we have to Define this property and then we're going to be storing the connection for this property and by the way you are not just limited to provide one property you can provide more than one like a b or you can give it any name that you like like you can provide like one two you can provide like apple and mango and something like that and initially we are not going to be storing any edges inside there for that we're going to be creating a separate method but for now let's just take care of this creating the property and providing the empty object to there so how we are going to be doing that and to do that we going to be defining a new method I'm going to give it the name of like add vertex and now inside there we're going to be providing the VTX like for our vertex and based on that first of all we have to check for the duplicate values so if we don't have uh this. adjacency list and then we're going to be passing this Vortex inside there so it's going to check for the duplicate value so if this is already defined so we are going to be only returning the false so now let me just return that false right here but if that's not defined so the next thing that we have to do is that we have to create there so we are going to be just using like this. adjacency list we are going to be accessing there right here which we have already defined up above and we are going to be passing that perimeter right here okay so I'll just write like VTX and we will set there to this empty array just like that and now underneath we're going to be also returning the true so this is how we are going to be defining or this is how we going to be adding our vertex right here for our graph so I'll just remove that from here I'm going to write like G do um add vertex so I'll just give it the name of like a I'm going to also create another one for the B and yet another one for the C so now if I lock there to the console like conso lock I'm going to save this file and now if I run my code so what are we getting we are now getting our graph and now inside this graph we have our adjacency list now we are providing the value for the property of a and it is now initially set to this empty object because these are something called the connections which we are going to be doing in a few seconds but first of all we wanted to take care of this Vertex or you can say the vertices so now we take care of that now the next thing that we have to do is that we have to Define our own edges or you can say the connections let's talk about how we're going to be creating our own edges so there we're going to be defining yet another method it's going to allows us to connect these two or more than two with each other so edges are basically the connections and now let me just show you there right here so first of all we would have some sort of a node or you can also say the vertices whatever name that you like and then we are going to be creating this Edge or you can say that connections now we already take care of these nodes or you can say the vertices and now let's take care of this Edge so how we going to be doing there now let me just show you how we can do that underneath this method I'm going to just write a comment like this is going to be for the connection and now let's just create our own Edge okay or yeah just one Edge would be fine it's going to be taking two parameters like vertex one and also the vertex 2 so now inside there we are going to be first of all checking if there is already The Vortex or not so we're going to be using like this. adjacency come on what the hell did I just adjacency list and we're going to be passing the vertex one to there and we are going to be also searching for another one so if you also have the adjacency list of the vertex 2 as well so you want to make sure like is there any vertex one and vertex 2 if there is so we are going to be pushing our data and we are going to be just returning true from there and also if that's not the case we're going to be only returning the false value from there so if there is the vortex one and also the vortex 2 so we're going to be taking that property or you can say yeah we're going to be only taking that property and we're going to be pushing the vertex two inside this we're going to be using like this start adjacent list and or adjacency list and we're going to be passing the vortex one and now for this vortex one we're going to be pushing our vtex 2 value and then I'm going to just duplicate this line of code and then for the vertex 2 we're going to be pushing the vertex one value to that so I'm going to save this file and that's all the thing that you have to do so first of all we're going to be creating this method it's going to take only the vortex one and Vortex 2 perimeter we going to be checking for the vertex if they already existed so we are going to be pushing for the value of Vex one we are going to be pushing the value of vertex 2 and for the vertex 2 we are going to be pushing the value of vertex one and if that's the case we're going to be returning true and if that's not the case we're going to be returning false and for the vertex one I'm going to Define like a and for the vertex B we going to be defining B so if I just save my file and run there and here you can see now let me just make a bit bigger you can see for the vertex 1 we now storing the value of B and for the vertex B we are now storing the value of vertex one so yeah this how we going to be adding our own edges for our vertices so now we learn about how we are going to be adding the edges and now let's talk about how we are going to be removing those edges so how we going to be doing that now let me just show you that I'm going to Define another method which will be for removing the edge so I'll just write like remove edge it's going to be taking the vertex one and also the vertex 2 now inside this method first of all we have to check like if we already have the Vex one and also the vortex 2 then we're going to be removing there but if you don't have this so we're going to be just returning false okay so I'll just write like this adjacency list and we're going to be checking for the vertex one and also for this. adjacency list we're going to be also checking for the vertex 2 so if you have both of them defined so then we're going to be changing the value of that so how we can do that we can do that by using something called the filter method so this is going to be a lot of fun now let me just show you there first of all we have to use like this. adjacency list and we have to take the value of vortex one which we are taking from this perimeter and we just have to change the value of the so how we going to be changing the value of them we're going to be using like this. adjacency list and we're going to be providing the vertex 2 value and then we're going to be filtering and I'm going to show you why am I filtering now we have to provide the value that value is not equals to the vertex 2 so only return there this line simply means that return everything in the array that is not equal to the vertex 2 so only return those items which are not equals to the vertex 2 so I'm going to duplicate there and I'm going to also change the value of this one to two and I'm going to also change the value of the last one one so now what in the word is this line one means like return everything in the array that is not equals to the vertex one in this casee so return everything that is not equals to the vertex 2 and return everything that is not equals to the vortex one so if we do that the final thing that we have to do is that we have to return true and if that's not the case so we only have to just return the false value so now as soon as I save this file and this is how the code will look like like actually it looks a bit horrible but trust me it's not and now let me just remove that from here and to do that I'm going to Define another vertex which will Now set to C and this line is cool but I'm going to also duplicate there one more time then we're going to be Define the B and it's going to be now equals to the C and now let me just duplicate there and now we're going to be taking the value of this C and we will set there to this a so now if I sve my file and run there and this is how our adjacency list will look like like we have a a which is now connected with the B and C then we have a b which is now connected with the A and C then we have a c which is now connected with the B and a so that's the first thing so now if you want to remove some specific Edge from there so I'm going to comment this line out and I'm going to be using like g. remove edge and we're going to be specifying like we want to remove the A and also the B from this list so then finally we can just log that g to the console s file and now it's going to totally remove this line of code right here so if I run my code and as you can see right here so we have a a and which is now pointing to A and C instead of that A and B and then we have a b which is now pointing to the C and then we have a c which is now pointing to the b and a but we don't have any A and B or you can say this how we going to be removing the edges so I'm going to just collapse there okay so welcome to the final part so now that we learn about how we are going to be removing the edges now let's talk about how we are going to be removing this entire vtex so how we can do that well we just have to remove that no we are not going to be only removing that but instead we're going to be removing this entire connection with it okay so if I want to remove this D I also have to remove this connection this connection and also this connection just like there okay so then if I want to remove this a Vertex so I'm going to have to remove all of these connections now if I want to delete this C I'm going to also have to delete these two connections as well and so on and so forth so how we can do that well now let me just show you that and to do that we're going to be defining yet another method which will be for remove vertex and it's going to be take taking only one perimeter which will be a Vertex first of all we have to even check that vertex like if this vertex is defined or not so if there is nothing defined well we have to just return undefined so let's just do this so we are going to be using like if not this. adjacency Matrix why am I saying Matrix adjacency list so we are going to be providing our own vertex there and if that's the case so we have to only return undefined and if that's not the case we have to iterate over through all of the adjacency vertexes so we're going to be using the four off Loop for this so I'll just write like let neighor of this start adjacency list and we're going to be providing that specific Vortex to there so we're going to be only taking that neighor and then we have to remove the edges from the neighbor's list so how we can do that we have to write like this adjacency list we're going to be providing that specific neor which we're now getting from that specific vertex which we are now providing as a perimeter for this remove method so we are going to be finding the it's going to be now equals to this. adjacency list and now we have to provide our nebor right here and then we have to filter that out so we're going to be taking the value and we have to check like if that value is not equals to that specific vertex so only return that value so it's going to just remove that element or that connection between that adjacency list now the final thing that we have to do is that we have to delete that Vortex from the adjacency list so how we can do that we're going to be using using delete and then we are going to be using this adjacency list and we have to provide our own vertex to there and finally we have to just return this okay so that we can see what we just removed so there is the entire code first of all we have to check like the thing we want to remove already existed or not and if that's not existed so we are going to be returning and if is existed so what we have to do we have to itate over through there and we have to take the neighbors of there and then we're going to be using a filter method on there and we want to get only that value which is not equals to that vertex so it's going to gives us that value and finally we have to just remove that entire vertex and we have to return this so that we can see what is removed so I'm going to just delete this entire thing from here and I just realize that I made a mistake in the edge it should be Ed d g so I'm going to copy that from here and yeah this is how we going to be using there so first of all we have a Vortex of a b c and d and then we have edges of first of all a is now pointing to the B A is still pointing to the C and also to the D then B is now pointing to the d c is now pointing to the D as well and now if i s my file and now if I run my so this what we are getting right now we now getting this a Vertex which is now connected with b c and d then we are getting this B which is now connected with a and d and c is also connected with a and d and d is also connected with a b and c now if you want to remove a specific Vortex from there so it's going to also remove the edges or the connect connection between those vertices so I'm going to just comment this line out and now let me just remove one of them like g. remove workex and we're going to be removing only the D and now let me just loog to the console my G and now if I now let me just console lock my G now if I run my code and here you can see it's not only going to be removing that specific vertex like we only have a b and also the C and now we successfully remove the D it's going to also remove the connections between them so here you can see we only have like a b and c and that D is totally gone and also the connection between the D is also gone so yeah that was the graph and if you like this video so feel free to subscribe and follow me here and there and I'm going to see you in the next video bye-bye let's talk about the most easiest sorting algorithm which is called the bubble sword so what is a bubble sword and how is it works so the first thing that you have to do is that you have to take the first element which is now set to the left and you have to compare that with the next element which is now set to the right so in that comparison you have to ask yourself like is this left value greater than or less than the right so if it is greater than the right you have to swap these values just like that you have to swap that elements just like that but if it isn't so we have to go back and we have to put there as it is but now in this situ situation 4 is greater than two so we are going to be taking that four and we are going to be putting there right here for the right value and we are going to be placing this two for the left now the next thing that we have to do is that we have to compare four with six is four greater than six or is four less than six so four is less than six so which means like we don't have to swap anything now the next thing that we have to do is that we have to compare this six with this five so this six is greater than five so we are going to be swapp in both of these values just like that okay because 6 is greater than five so we have to swap those values now the next comparison that we have is 6 greater than one or is 6 less than one so we already know that 6 is greater than one so we are going to be swapping both of these values and now the final comparison that we have is like is 6 greater than three or is 6 less than three so 6 is greater than three so we're going to be also swapping these values as well now for the first iteration so we are going to be getting this value now in the next iteration we are going to be still asking that question like is 2 greater than 4 then we are going to be asking this question like is 4 greater than five and then we're going to be asking this question like is five greater than one so yeah we already know this so I'm not going to waste a lot of your time but yeah this how the bubble sort works so we are going to be comparing these values with each other and we are going to be searching for the smallest value and we will put that to the left and we will search for the greatest value and we will put that to the right in the second iteration as you can see right here like like these two are totally sorted now we have to take care of this one so yeah this iteration will go on and on and I'm going to fast forward the video right now and here you can see this how we going to be sorting our items like we have 1 2 3 4 5 6 and they are now totally sorted and that was the first sorting algorithm that we are going to be doing right now first I create a function I'll give it the name of like bubble sword and it's going to be taking an array as a perimeter and now underneath there we're going to be creating some sort of a unsorted array and we are going to be passing that unsorted array as an argument to this function so now let's just take care of this function the first thing that we have to do is that we have to iterate over through each element inside this array so how we are going to be doing that well you can do that by using a full loop while loop do while loop and something like that but in my case I'm going to be only using a full loop case I'll just use like let I equals to array. length minus one so which means like if we have only 10 element we are going to be iterating over through nine if we have five element so we are going to be iterating over through Four Element okay so that's why we wrote like array. length minus one and then we have our condition like I is greater than zero so then we have to decrement our I now this Loop was for iterating over through each element inside our array now we are going to be providing yet another loop which will be an nested Loop and that inner loop will allows us to swap those values so how we are going to be doing that well we can just write like let J is equals to Z and then J is less than I and finally we're going to be using j++ to increment the value of the okay so how we are going to be swapping those values as I said right here like we're going to be starting from the first element and we're going to be comparing there with this second one if the value of first element is greater than b so we are going to be swapping those values but if that's not the case we are not going to be doing anything so now in this case let's just do that we're going to be providing our if statement and we are going to be first of all passing the array of J if that is greater than array J + 1 which means like now this is going to be the zero value and this is going to be J + one like the second element inside our array now we are iterating over through there so that's why this one will gives us the zero and this one will gives us the one okay so now let's just do a swapping so you can either use a short hand but I'm not going to do that right now so I'll just use like let Temp and I'll point there to array and J so basically it's going to gives a zero value right here and now the next thing that we have to do is that we have to take the value of that array and J and which is now set to zero and we have to set that to array and then J + one like this next element anytime we iterate over through our element we're going to be pointing that to our next element just like that and then finally we have to write our array J + 1 and now it's going to be equals to this Temp and what is a temp temp is now equals to the first element element or the current element inside this iteration now underneath that we're going to be just returning our array so we can see what's happening okay so this is the entire code that we have to write for the bubble sword and now let's test that so I'm going to just store the value of that like uh in the result variable and I'm going to also log this rest to the console so if I save my file and run there and here you can see we are now getting 1 2 3 4 5 6 as a sorted array so that was our bubble sort let's talk about the selection sort so selection sort will also exactly the same like the bubble sword but there are just a few changes between the bubble sword and also a selection sword so we are going to be still iterating over through each element inside our list and we're going to be also comparing these two elements but in this case we're going to be taking care of the minimum value and how that's going to look like first of all we're going to be comparing this left value with this right one and we're going to be asking ourself that question like is this the minimum value or is this the minimum value well obviously two is minimum or less than the four so what do we have to do in this situation we have to provide a marker or you can say we have to point it to this minimum value you can even provide the label if you wanted to so I'm going to just provide some sort of a label like Min and now I'm going to just put that right here up above now this value is temporary a minimum value next we going to be ignoring this value so I'm going to just ignore that for a few seconds like this one is already checked next we have to still compare this four with this six so we already know that four is less than six so we're not going to be doing anything inside there we also have to compare four with five so four is less than five so we also have to don't worry about anything right now we have to totally ignore both of them and then now we have to compare this four with this one so now this one is less than four and one is also less than this pointer right here so what we have to do we have to take that we have to put that right here once again and we have to take the pointer of there and we have to now point there to the least value inside our list and yeah I'm going to also take there and I'm going to just put that right here for the Bottom now for the final check we have to compare four with three okay so is four less than three or greater than three so four is greater than three so which means like we have to swap these values no we are not going to be swapping these values but instead we have to also check the value of this minimum value with this one so this one is less than this one so we are not going to be taking this pointer and we're not going to be pointing there to the last one but instead this one is the most least value or the most lowest value in this entire list so this one wins now the final thing that we have to do is that we have to remove this marker and we also have to remove this Min and we have to swap this one with this four okay so we are going to be taking the fourth value and we will change that to one and we are going to be taking this one value and we have to change that to to four now these two are totally swapped now the next thing that we have to do is that we have to start our comparison right here from the second element so we're going to be comparing two with six so 2 is less than 6 2 is less than 5 2 is less than four 2 is less than three which means like we're not going to be providing any pointer and we're not going to be doing anything in that case this is the least value next we're going to be comparing this six with this five so which means like five is less than six we're going to be providing our pointer to this five right here just for a few seconds next we have to compare six with four so which means like four is less than six and four is also less than five okay so we have to put that right here on its own place and we have to take this pointer and we have to point that to this four okay next we have to do the last comparison which is six which means like three is less than six and three is also less than four so we're going to be taking this pointer and we have to point there to this element so now finally this is the last element so we have to do the swapping okay so we have to change this six to three and we have to change this three to six just like that now these elements are totally SWA now the next thing that we have to do is that we have to compare these three values so I'm going to just cut that from here so now let's just compare five with four so four is less than five we're going to be providing our pointer to this four right here okay now the next thing that we have to do is that we have to compare five with six so yeah five is greater than six so we don't have to do anything in that situation eqution so now we're going to be just swapping the value of these two okay which means like we're going to be changing the five value to four and we're going to be changing the four value to five okay five just like that that being said all of these values are now totally swapped so we have 1 2 3 4 5 and six and they are totally Swap and this is something called The Selection sword let's get into the coding part so I'm going to go ahead and create a function I'll give it the name of like selection sort and it's going to be taking as array I'm going to save this file and here is my unsorted array and we're going to be passing that as a selection sort argument okay so I'm going to pass my array just like that so the first thing that we have to do is that we have to iterate over through each item inside our array so how we are going to be doing that well I'll just write for let I equals to Zer and I is less than array. length and I ++ so it's going to allows us to iterate over through each item inside our array next we have to initialize variable I'm going to give it the name of like minimum index and going to be now equals to the I the first element inside this array this one like the first element inside this minimum index okay so now that's done now the next thing that we have to do is that we have to create yet another nested Loop which will be the inner loop so this going to allows us to right over through the unsorted part of the array is equals to I + 1 remember we are going to be now searching for this element we going to be totally skipping there that's the only reason now we have like I + 1 I + 1 now the next thing that we have to do is that we have to pass this condition like as long as j. array. length then we have to increment our J next we have to provide our comparison like is this first value greater than or less than this second value so now let's just do this so I'm going to be providing my if statement right here and we're going to be passing array of J is less than array of uh what do we call it minimum index so if that's the case we are going to be changing the value of the minimum index and we're going to be changing there to this J value so I'm going to sve this file so now underneath this if statement and also this full loop what we have to do we have to just swap our values if I is not equals to the minimum index let's just first of all take our element and we're going to be storing there in the temp variable as we did in the previous Challenge and then we're going to be changing the first element inside our list to this array and we're going to be also passing the minimum index two there and finally we're going to be also changing the value of this array minimum index and we're going to be pointing there to this temp so I'm going to sve this file and now let me just go back and that's going to be it okay so now let me just run this code right here so I'm going to just write like con Str and it's going to be now set to the selection sort and I'm going to also past it to the console like R I'm going to save my file and run there and we are getting undefined because we are not returning something from there okay so I'll just return like um underneath this one we're going to be returning that array so that we can see something and I don't know where in the world is this Infinity came from so I'll just change that to like minimum index I'm going to S my file and now if I run my code and here you can see we now getting our sorted data right here and that was our selection sort all right guys time for the insertion sort and this one is one of my favorite one so now let's talk about it so in this situation in the insertion sort we're not going to be taking the first element and we're not going to be comparing it with this second one but instead we are going to be taking this second one and we are going to be comparing that with the previous one so how that's going to look like so we're going to be first of all taking the next element and we're going to be comparing that with the first one so we will ask this question like is two greater than four or is two less than four 2 is less than four so we going to be swapping this value just like that next we have to compare four with six so we are going to be saying like is four less than six or is four greater than six so four is less than six we're not going to be doing anything in that situation next we have to compare six with five so is 6 less than five or is 6 greater than five so 6 is less than I mean like 6 is greater than than five so we have to also Swap this value but here we also have to ask the question from this one like is four greater than five or is four less than five so four is less than five so which means like we're now going to be putting this item right here at the middle okay so that's done next we're going to be comparing six with one so is six greater than one or is six less than one so six is greater than one so we're going to be just taking the and put that right here we're going to be also comparing one one with four so 1 is less than four and also 1 is less than two so which means like we don't have any elements right here we're going to be putting there right here is the first element okay and now the final one we have is like six and the five comparisons we're going to be comparing our six and also the five so is six greater than or less than three so 6 is greater than three so we are going to be also comparing it with five is five greater than or less than three so five is greater than three and then we're going to be also comparing it with this one is three greater than or less than four three is less than four so we going to be putting that right here so finally we have to compare it with this two so is two greater than or less than three so two is less than three so which means like we're now going to be putting this three right here at the middle in this area and this is how we are going to be sorting our Elements by using the insertion sort so we have 1 2 3 4 5 and six element and they are now totally sorted so yeah that was the theory and now let's get into the coding part all right so first of all let's just create our function I'm going to give it the name of like insertion sord is going to be taking one perameter of array and now we have to pass our unsorted array right here and we have to pass that as the argument for this function just like unsorted array and now let's take care of the insertion source so the first thing that we have to do is that we have to iterate over through each element inside this array but we are going to be totally ignoring this first element inside our array so we're going to be starting Ouray setion from the second fourth six and so on and so forth so how we are going to be doing that well we have to just write like for let I is equals to one not zero but one and then I is less than array. length and then i++ so this is how we're going to be iterating over through each element inside our array and next we have to get the current element so how we are going to be getting there we just have to write like array and I and it's going to gives us the current element okay so I'm going to just remove that from here and I'm going to store there in the key and you can store there in either the current variable you can give it any name that you like but in my case I'm going to give it the name of like key and next we have to remove one element from the length of this array so how we are going to be doing that well we have to just write like I minus one so if you have 1,000 elements it's going to only gives us 999 if you have 100 elements so it's going to gives us like 99 and so on and so forth and now let's just store there in the J variable just like there now we are going to be comparing each element in the sorted part like the left side so we just have to write like the Y Loop and as long as J is less than or equals to zero and array. J is greater than the key so in that situation what we have to do we have to take the second element from the array just like this one okay so we have to take this element from the array and we have to set there to the first element okay so we are going to be taking like array and then J + one and now it's going to be equal to array and we are going to be only passing this J right here so that's done and finally we have to just decrement our J and now underneath that we have to just insert there to its correct position so I'll just write like array and J + one and now it's going to be equals to the key which we've created up above and finally we have to just return what we did so I'm going to save this file and now let's go back and this is how we're going to be implementing the insertion sort so this is how I'm providing the unsorted data and now if I store in the variable like cons r and now let me just log there to the console like pH sa my file and run there and here you can see we are now getting the sorted array right here so yeah that was it about for the insertion sord welcome to the final part of this course so in this section we are going to be learning about the merge sword so what is a merge sword and how is it even works so let's talk about it so we would have some kind of a unsorted array and now if you want to sort this array first of all we are going to be using something called the divide and conquer so how that's going to look like we will take that array and we will divide the or we will split there again and again until we have a single item array just like this so as you can see right here I have only eight items inside there we will split this array out into two multiple components then we will split it out into four components and we will do this process again and again until we have a single item array just like this okay so that's going to be the first process that we have to do once we split out our entire ire array so we will take two arrays and we will sort them and then we will combine them so how that's going to look like we will take these two and we will compare them with each other and we will say like is the left array greater than or less than the right array so if it is greater then the left array so we will swap this out just like this and then we will check these two out and we will swap these two out and these one are totally okay so you'll totally skip them out and finally we will also check this one and as you can see right here we are going to be doing this process again and again until we have our sorted array just like this okay so you only have to keep these two in mind first of all we are going to be breaking our array down into multiple arrays next we're going to be sorting our array and then we are going to be combining that back into one array just like this all right guys so now let's talk about the first function that we are going to be creating so the first function is called the merge function and then we are going to be also creating the sort function as well like the merge s function as well so now let's talk about this first function we will also code this out and then we're going to be jumping into that next one so how that's going to look like suppose we would have two arrays just like these as I said that we're going to be splitting out our one array into multiple arrays so as you can see right here I have two arrays right here which are totally sorted so what we have to do is that we have to provide a pointer for the first element of the first array and then we also have to provide a pointer for the first element of the second array as well so we going to be now comparing this item or this element with this element right here so we're going to be comparing the first element from the first array with the first element of the second array so we are going to be checking is three greater than or less than 9 so three is less than 9 so we're now going to be taking this item and we are going to be putting there right here inside another array next we're going to be taking this pointer and we have to point it to the next element now we have to check these two out so is 27 greater than or less than 9 so 27 is greater than 9 so we're going to be taking this value and we have to put it right here because this is the minimum value and now we are searching for the minimum value next we have to take this Temp and we have to point it to this 10 right here and we're going to be comparing 27 with and 10 is the minimum so we're going to be taking the and we have to put there right here we have to take our 10 we have to point that to 17 and as you can see we are going to be comparing 27 with 17 so 177 is the minimum we will take the value of that and we will put that right here and by the way this is going to be one array I'm providing a spacing I don't know why this is going to be one array okay so we have to take our pointer and we have to point there to this one so is 27 greater than or less than 82 well the minimum value is 27 so we will take that and we will put that right here then we will take our temp and we will compare with this value this one is less than 82 and then this one is also less than 82 so we're going to be taking this value and we have to put that right here now we don't have any elements inside the temp one array and we do have element inside the temp two so well we don't have to compare them with anything we have to just grab the and we have to put the at the bottom of this array just like this okay so this is what we are going to be doing right now okay so time to create our first function okay so we're going to be creating a function and I'm going to give it the name of like merge it's going to be taking two perimeters like array one and array two so I'm going to give it the name of like left array and also the right array just like this so we are going to be also creating a container where we're going to be storing the result of the sorted array so I'll just write like um result would be fine and next we have to create our pointers like temp one and also temp two so I'm not going to give it the name of like temp one and temp two and I'm going to give it the name of like I and it's going to be equals to zero and I'm going to also create one for the J it's going to be now still equals to zero so as you can see right here I Chang this one to I and I Chang this one to J just like this now we have to use our y Loop to iterate over through each element inside our array okay so we're going to be using the Y Loop and as long as I is less than the left dot length Okay and come on and J is less than the right dot length we're going to be running this y loop as long as we have something in the left array and as long as we have something in the right array so we're going to be running this Loop okay so I'll just write like if the left array and we're going to be passing our I inside there is less than the right array and we are going to be passing our J inside there so as long as that's the case we are going to be taking our result and we are going to be pushing our left and I to there and finally we have to take you know let me just undo all of these steps right here so now we are comparing so if the left value is less than now let me just provide a less than symol right here here so if the left value is less than the right value so we're going to be taking the value of this left one and we will put the inside our results array so I'll just give the level of results as you can see right here and that's the first thing we also have to take this pointer and we have to point there to this 27 as well so we're going to be using like I I ++ so now we are taking that pointer and we now pointing that to this 27 right here okay next we have to provide for the else Clause so for the else Clause we are going to be taking our results and we're going to be also pushing the right and also that J value for the right if that's not the case like if the value from the left array is not less than the right one so we're going to be taking the value from this right and we have to also put that to this array okay so we're going to be using this method for that and finally we have to take this pointer and we have to point that to the next element so for that we are going to be using j++ right here and once we totally do that like once we totally sort this array out just like this let me just provide all of them right in here and I'm going to also remove that from here and as you can see right here we only have one element right here inside this array and we don't have nothing inside the temp VAR so how we can solve there now our y Loop is totally done like we don't have any elements inside the left array so what do we have to do in that situation we have to use the result. push and we're going to be using the spread operator and we're going to be slicing out the I right here okay so now that was for the left array like like if there is something in the left array and we don't have nothing in the right array so this is the code for there on the other hand you don't have anything on the left array and we do have something on the right array so for that situation we have to still use that same function let me just duplicate there and I'm going to change that to the right instead of providing a I I'll provide a j right here and finally we have to return result so that we can see everything right here okay and this is the entire code that you have to write for this merge function and I call this function by providing these two arrays right here and now let me just log there to the console and see what's going to be the result so I'll just loog that to the console like R I'm going to save this file and run there and here you can see we are now getting 3 9 10 17 27 38 43 and 82 which is completely sorted so now we are taking these two arrays and we are combining them with each each other and we are also sorting them out and that was the first step in our mod sort welcome to the second part of our mod sword so in this section we're going to be taking our entire array and we will split this out into two or multiple arrays just like this so how we're going to be doing that now let me show you how we can do that we already created our merge function now it's time to create our merge sort function so I'll just write like merge sort function and it's going to be taking some sort of array and now inside there the first thing that we have to do is that we have to provide our BAS case because in this situation we're going to be using our recursion function so for that we have to provide our base case so we're going to be providing our base case like if the array. length Okay if the array. length is less than or equals to one so in that situation we're going to be returning that entire array okay so if that's not the case so we have to divide that array into two halves okay so first of all we're going to be taking the middle so I'll just write like middle and now it's going to be equals to array. length and divide it by two so it's going to gives us the half but in some situation it's going to gives us the floating Point number so we don't want this so we will just use like math. floor on there and now it's going to give us the whole number next we have to take out the left array so we're going to be using like left and it's going to be equals to array. slice and we're going to be providing zero and also that middle as well and now we're going to be also getting the right so we're going to be using array. slice once again and we will just provide our middle value inside there and finally we have to use our callback function and also the recursive functions as well so for the Callback function we're going to be providing a merch function which we just created and it will recursively sort the left and the right halves okay so how we can do that we can just provide our merge sort once again like this function which we just created right here inside this merge function so it will just recursively sort the left and also the right halves okay so now we are going be providing the left value and also for the right we have to provide that merge sord once again and we have to provide the right value to there and that was it about for our entire merge sord function okay so first of all we created the merge function which will allows us to combine two arrays and first of all it will sort this out and then we have the merge sort function which will allows us to split out our one array into multiple arrays okay so now let's just test this out so I'm going to remove that from here and I'll just provide unsorted array which looks something like this and I'm going to be using like uh merge sort function in this situation and I'll just provide that unsorted array in this case and I'm going to be also storting that in the sorted array and now it's going to be equals to this function and now let me just log to the console my sorted array and now if I sell my file and run my code and as you can see right here we are now getting the result of the sorted array and it is now only one array right here okay so yeah that was it about for this entire course and thank you so much for watching this entire course that was a long journey and I hope you enjoy this video If you do so please don't forget to subscribe to this Channel and I'm also thinking about making an Instagram page so if you want to follow me there I will highly appreciate there otherwise I'm going to see you in the next course bye-bye and love you all e