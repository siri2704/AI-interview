hey guys so this is going to be a short video on the stack implementation I would be implementing this the stack data structure both through the link list and the array so I will be creating a separate video on the implementation of stack in the standard librarian C++ but this video will only be restricted to an arabas and a link plus space implementation for the stack data structure so I would be opening my folder and now uh inside this folder I would be creating my file and naming it as stack array so my first code would be an array based implementation of the stack data structure so now as you all know that it follows the first and and last outout methodology so the element that is pushed in first at the stack is the last one to go out so what we need to do is that I have to included the stream and now I will use the name space and now what we need to do is that we need to create a stack class and now inside this class I need to create my private member variables so my member variables would be the top of the stack and then I would have the capacity which I would use a Constructor to initialize it to the size of the stack and then a pointer to the array so now moving on to our Constructor our Constructor I will pass it the size and inside this what I can do is that I can initialize my pass to be equals to size and my top to be equals to minus one and I also need to dynamically increase the size uh of my stack so I will use the new keyword so array is equals to new in uh capacity yeah so this should be it for my Constructor now moving on to our first function which would be to add a value or to insert an element in a stack so I it would have the return type of void and I will name is that name it as void push I will pass it the value so what we need to do is that we need to do that we need to just increment the top and replace it with the value so basically I have what I need I'm to say is that we need to do this for this function so most probably what will happen is that oh I missed the spellings of the array yeah so this will basically uh push any element into the stack in order of the first and last out strategy but we also need to uh do some error handling if the stack is full we need to tell the user that we could not add more elements into the stack so what we what I can do is that I can use a next statement that if is full which we will create this function later we would just simply print that stack overflow and this would be uh yeah and then we also need to return basically yeah and this would be executed in the else case so our next function which we need to create is to remove an element from the stack which would be a pop function I will again pass it the value by the way for this function uh what we need to do is that we do not need a value as we will just be deleting a value from the stack and in in this case for the uh error handling what we can do is that we can we again can use a n statement that if it is empty what we need to do is that we simply need to print stack underlow and again we need to return we can return minus one to indicate an error so else what we need to do is that we just need to return the arrays to minus minus so moving on to our next function our next function would be a peak function so what what basically a peak function does is that it just Returns the element that is on the top of the stack so for this what we just need to do is that we need to return and there is top again you could use an error handling check over here that if the stack is empty you could return no element exist and uh same is the case with other functions too and now I need to create the functions uh the is empty and the is full functions and then we would move on to the function to print the Stu so this function would be a function would type Bo so Bo is empty in this function what I need to do is that I simply can return top is equals equ minus one it will basically check if it is true it will return zero and if not in minus one and now my next function would be to create it full function and again now for this is is full function what we need to do is that we do not need to check directly what the top is we just need to check uh what the size minus one indicates if there is an element so basically if the if the value after size minus 1 equals to the capacity of the of the stacks so we can simply return a true statement otherwise it will directly be false so I will just write return top is equals to equals to vacity minus one and now my last function would be uh to print the stack I will name is at I will name it as void print and now inside this function what I need to do is that I can I just need to print so I will just indicate that stack elements in this stack are so now what we need to do I just need to add an end line over here so what we need to do over here is that we need to run a for Loop uh that would run from uh I is equal to 0 till the top of the stack and we will print out the elements of the array on each of the IES so for n i isal to z i is less than or equals to top uh what we can do is that we can increment I and now what we need to do is we simply need to print the arrays index and for better formatting iput give a space yeah so this should be it for the implementation now I will head on to the main function so now inside my main function first of all I need to create an object and and initialize the size of my stack which would be five in this case and uh I could push uh elements basically I start push I can push five then again uh s do push yeah so I could add multiple uh 5 10 15 20 and 25 so now what we can do is that I could call uh the print function to see if the elements are successfully inserted yeah so now I will run my function yeah so upon running the code uh we can see that the elements are present in the stack starting off from five and then going on till 25 so now I will use the pop function to see if it successfully removes the element of Stack so now in this case when I print must stack should end at 20 rather than ending at 25 so upon running the code yeah so it successfully pops the element from the stack and now uh what I need to do is that again we can just again use it pop function and again push a new value which would be 27 and now I will use the peak function to see what element is in my stack at the top of the stack so element at the top of the stack is yeah so now it should return 27 it hasn't returned 27 what is wrong just a minute yeah so now it should work yes as you guys can see uh element at the top of the stack is 27 so now this is basically a really easy implementation of Stack data structure using an error okay so now uh I would be writing the code to implement this tag using a link list which is a bit more challenging but it's really worth it so I will name my file as stag ll. CBB again I would uh create my header files and yeah so rather than creating stag class directly I need to create a class node first and now inside this node class I need to create the members which I would make it make them public so in data and node start next and now I would be creating my stack class and now inside this stack class uh I would be using my private member variables which would be node start top and uh size of the stack yes just a spelling mistake in the size and now in my public uh M variables I would create a Constructor first to ize things on this code so in this Constructor I would initialize the top to be equals to null pointer and size to be equals to zero and now I would be uh moving on to create the functions so our first function again would be as usual to push any value in the stack so to push a value in the stack I would be creating a new node I would name is at I would name it as 10 and new node yeah so what we need to do is that we need to so basically the data in this new node should hold the value and the next to what this node is pointing to should point to the top of the stack so temps data should be equals to value and uh temps next should be equals to top I hope we are doing it right uh so now we again need to update the top to be equals to temp yeah so yeah we also need to um increment the size of the stack so our next function uh would be to pop any element from St again of uh return type integer so uh I will not be using any error handling statements in this linkless code specifically uh because it uh just makes understanding a bit more difficult so just to directly Implement uh the pop function I would um create a point to Temp again name my no temp so again and I would initialize it to top yeah so it should have a single B so node uh star temp is equals to top and what we can do next is that uh hint pop value I I can name my value as the pop value and we can in this we can store T data and uh update the top to be uh tops next and now what we can do is that we can directly delete temp yeah so this should be it oh so we also need to determine the size and uh return popped value yeah so this should be it for the pop function and my next would be to implement the peak to see the top element of this tack so for this what we need to do is that we just need to return the data which top holds which would be just the value at the top of the stack and uh to get the size of the stack we can Implement a get size function and this function we can simply return size what is wrong in this function yeah so this is fine now and uh our next function so basically our last function would be simply to print the stock so to print a stack it's basically uh very easy just as you print a linkless a singly linkless so I will create a node to store the top of the stack so I will name is I will name it as current is equals to top and I will use a while loop so while current is not equals to null what we need to do is that we simply need to print the data for each node and with that we need to also update the current pointer so that it moves forward after printing the data of each of the previous node yeah so this should be it and uh I will now implement the main function so inside this main function I will again create an object uh I will name it I will name it as s and now what we need to do is that we can simply perform multiple operations stack. P again uh four and uh stack. push so so basically a good use of the link list is always that it is not fixed like an array your stack could be of any size uh you could insert as many elements as you want in your stack rather than uh to be bound with an array that has a fixed size as dynamic memory allocation becomes a bit more so basically what dynamic memory allocation in in an error does is that it is not that optimized uh like how the link list works so so the link list code would always be faster than the code that contains a dynamic memory allocation using an array or a 2d array so I will insert further elements uh 16 and I will end with 20 so I could now print so why do not I add the statement over here that see out elements and the stack are yeah so now I can just directly call the print function uh start print so now upon running the code you would be able to see the elements that r r stag yeah so so using this what uh basically it has done is that due to the reversal of the elements you guys can see that uh the pop the push function uses this strategy or the way to insert the node at head so if we change this and directly uh so if we change this and write it in the way to insert a node at the tail of the link list so these U elements would be printed in U ascending order rather than descending order so what so with this code what we can also do is that rather than inserting them in an ascending order we could insert them in a descending order at the head of the link list then print so that they are printed in the so that they are printed in sending uh so that they're printed in ascending order so if we write them in this way now you would be able to see that it works pretty fine yeah so again what I could just use the pop function so now my uh stack link plus should just end at uh 16 rather than 20 Yeah so basically it just removed four as four was at the top of the stack and now uh again what we can test is that we can use the s. Peak function which will return the top element of the stack so the top element of the stack would be obviously eight so I could just write that the element are the top of the St is yeah so it should print eight in this case yeah so as you guys can see this code is working uh very fine so this is the code and I hope you guys enjoyed my video it's basically uh relatively easy it looks easy but uh it is used widely in many applications and uh networking too so I will create a video shortly after some few after a few days on the standard Library implementation of the stack data structure and again I would be creating a video on the Q data structure also so that's it from my side and do like share and subscribe