the difference between someone who has done 0 and someone who has done even 5 or 10 is enormous algorithms are the number one insecurity for every developer type of haven't met before it's not just friend it's the main reason why we stay at these jobs that we don't love anymore year after year long after they've expired I've been in literally hundreds of interviews mostly as an interviewer but also quite a few times as the interviewee as the candidate the technical interview process is damn stressful for both parties and you and I both know if you had a ton of confidence in your ability to solve all those problems algorithms you know in person or online that you would be shooting for a much higher position in your career a lot quicker or at least more often when it comes to algorithms and data structures as a UI guy for the longest time I was a non-believer actually worse I was a hater I thought the tests didn't make any sense more on that later until I had to face the challenge myself and not too long ago what I realized was the complete opposite of what I thought for the past 15 years and I want to share that with you specifically as a hiring manager like I said I've experienced both sides of the interview process for many many years and here's my perspective on algorithms as part of the interview process so here we go here's the truth about time someone said so I'm gonna jump right into it but please let me finish okay I know that you might think that you know what I'm about to say and what my arguments are gonna be but please let me finish okay cool I learned programming as a creative visual guy I was a musician the art school type I only studied computer science for one year before I switched to multimedia because it was you know just more creative I got to have more fun with animation video audio flash photoshop things like that but I like coding too and I was really good at it from the beginning and so I didn't want to give that up and there was a huge career outlook in computer science and it was really obvious to all of us even back then by the way this is 2005 anyway so I combined the two my understanding of computer science and logical programming with my passion for the presentation layer and visual work and creative word like that and I became the UI guy pretty much at every company I worked at there was a lot of fun you know I'm talking about all the visual work that had a programming side to it everything UI UX related but what I missed out on was the conventional algorithms and base structure training that I never got really so I ended up skipping that part of the craft and I never really needed to do them I mean as a front-end person you don't have to deal with those things on a daily basis right until you go to do an interview at a company that cares about that and interviews with that format somehow Google made it the industry standards to test people's ability to sort arrays from scratch so for the past 15 years of my career I thought that was complete nonsense I have array dot sort and that does it for me and if I have a particular sorting logic I can just put it in the function and it does it for me or you slow - what's the point of knowing different kinds of sorting methods you know quick sorts bubble sort this sort that sort I never had to do any of them and probably never will either and that's a good argument right most of you watching probably have the same viewpoint which is if I never have to do this on a day to day basis why do I need to know it and most of you watching refuse to do those interviews or just avoid them altogether so first let's get that out of the way I understand you and I am one of you use but stop okay everybody just stop we've all been completely wrong about this whole thing point number one and this is the most important one to purpose of algorithms is not to see whether or not you could traverse a tree because you might have to do that on Wednesdays the point is to see whether or not you can think through a abstract problem that is one level more complicated than the basics of your job whatever the job is when someone interviews you they you'll be looking for one thing only the skill required for you to be successful at that job do we agree on that I hope so so the question becomes what is the skill required to be a successful programmer coder today the job of the today's programmer is not to memorize an API and know everything by heart although we used to think that that was the job it's to be able to navigate a problem find multiple solutions and then find the best solution and then be able to reason for that best solution and explain it to the people around you and then ultimately write it in code and that is exactly what algorithms force you to do every time I mean think about it we are problem solvers we are not memorization machines your ID already does that part for you when you type array dot you get all these beautiful methods with their explanations and sometimes with some examples we're so spoiled so we don't interview for those things anymore I mean we used to back in 2009 I remember asking candidates to name me methods on strings and that was kind of dumb but that's what the industry was doing back then but the job has evolved and so should the interview process in fact I think part of the job description for every job out there for every coder should be the ability to solve problems and that's where algorithms come in they are these self-contained isolated many problems that you can throw at someone and see what they do with it for the next 45 minutes if I ask you to build me a reactive component that won't really tell me a lot about you all that's gonna tell me is whether or not you've built a react component before we met and honestly I could care less about that you having done react before is almost meaningless if you can't adapt and adjust and evolve with the technologies that that job requires you to know so the technology is not the point it's your ability to solve problems I mean react is a good example because they are actually notorious about changing their IP I and one day it's Redux and then tomorrow we have hooks and Redux May or may not be relevant anymore I hate to tell you but it was never about vetoes to begin with so when an interviewer asks you to solve an algorithm problem with them it's because that's the way they learn the most about you and how you think through problems and how you go about solving them I've worked with so many developers who were lovely people who dare I say memorize an API or learn the framework and came in and got the job but they didn't know how to solve problems independently and sadly they failed because code just like in life is nothing but a series of problems thrown at your face to see whether or not you survive Wow that is dark but also true so to wrap up point number one a good interviewer doesn't care if you write the perfect algorithm with the perfect own notation the perfect space-time complexity although some do and I'll get to that more importantly they want to know how you approach a problem do you ask questions do you ask for help do you collaborate how do you collaborate how do you communicate do you get defensive do you get offensive do you get offended do you think about edge cases what do you think about the input output format how do you handle errors for example these questions say so much about you and your thought process they're essential for placing you in the right place and the right team for the right project it's okay if you don't know the answer to some of these questions if you have never experienced these before that's fine some of them you can study for and others you just pick up along the way as sort of as scars as you get more experienced but it's not crazy to think that your future potential future employer wants to know the answer to some of these questions right they say quite a bit about you and your general mentality towards problem-solving sidenote certain interviewers at certain companies which which company is that right was that obvious they missed the point that I just made they forget that they forget why they're asking these technical questions to begin with and if you don't nail the perfect algorithm with the perfect space-time complexity in minimal memory usage and all that good stuff in 45 minutes under pressure while two people or three people sometimes are watching over your shoulder they will reject you for that job and that's too bad but you know what the reality is in real life you have more than 45 minutes usually plus you can Google things and you don't have people watching order over your shoulder so they're bad interviewers to is what I'm saying so don't beat yourself up about it if you if you get one of those do it gingers the best point number two if you ignore the fact of algorithms and the fact that they're a part of our industry standard right now you will end up missing out on a lot of great opportunities most cool companies with cool products that you and I use on a daily basis for better for worse algorithms are part of their interview process so you'd be cutting yourself from so many amazing places to work if you just simply refuse to learn these damn things and refuse to go on these interviews right so just go and learn these things okay tell us little harsh point number three you get good like real quick I remember I did a 11 day sort of algorithm training and it was crystal clear to me how much better I was every single day than the day before I'm not even kidding here I'm not just saying this it was it was actually actually very noticeable to myself every single problem you solve you improve when there are late code or hacker rank or whatever you use they're all pretty much the same it instantly makes you a better engineer no doubt about it for me at the end of the 11 days I was a different person honestly I was a different level coder I thought I knew so much more than less than two weeks before it's a bizarre consequence of doing these exercises by the way but I used to think you had to do these things for years and years before you got good but the difference between someone who has done 0 and someone who has done even 5 or 10 is enormous so get going if you're wondering how to start also I have courses and other material that I'll throw at you at the end of this point number four they're fun they're actually really really fun and I'm not just saying that as a nerd just sitting here going algorithms are fun because I have nothing else to do no I have a lot of to do like I live in New York okay and I am like a really social person I know all the cool places and it's true and I'm still telling you these things that are actually really fun once you know what you're doing which comes to you quick after a couple of days and you can explain them they actually become a huge boost to your confidence and that alone is really fun to experience I don't know maybe it's because I've always had this guilt about you know skipping them and not really spending too much time on them no more than a few hours here and there at a time it was like a huge weight off my shoulders when I did the investment for those again eleven days only and you know what even if they weren't fun or even if the first few aren't fun for you all right they're a part of our craft they're part of our industry standard and you know let's go it's time to learn with that said there are multiple ways to learn anything right there's stupid ways and there's smart ways you can be efficient or you can just waste a bunch of time so question is you know how do I start how do I get better what exercises do I do first what is the flow that I need to follow to make sure I don't skip any steps what are the different types of algorithms that are out there anyway well funny you should ask I documented everyday I spent learning algorithms in my training and I kept all the code and I kept even some of the thought process that I had going approaching a lot of these problems I've accumulated a lot of material that I'm actually gonna post a majority of it here on YouTube so if you're interested subscribe to my channel if you haven't already if you want a step-by-step process like an actual course with an instructor and homeworks and things like that go to color code il go to my site and sign up there it's free and you actually can message me there you have a chance to work with me directly and I'll work with you I want to make sure that you don't make those dumb mistakes that I made you know wasting some of the time that I did there's a lot of material out there you want to make sure you cut through some of the boat and get to work or otherwise you can stay here and watch the algorithm series that I'm gonna post right here on this YouTube channel okay with that sending you much love and let's go it's time to figure these things out once and for all okay until next time see you later [Music] [Music]