okay so today we're going to go over how to detect a loop in your linked list data structure and the data structure itself is pretty simple it's just a value and a pointer to the next node in the structure right there's nothing Fanci here if you want to look at how we uh wire all this up as you can see we have five nodes and we manually set the nodes next pointer so for example here we have node one is pointing to node two node two is pointing to node three etc etc all the way down to node 5 which is pointing to node four which is what makes this a loop right so this makes a loop so node 5 is going to point down to node four which is going to create the loop for us so if you want to iterate through this list it's just going to keep looping back to no4 and you'll never get to an end right so uh to detect the cycle we have this handy algorithm here right how does this function work so we have a slow pointer and we have a fast pointer right and both these pointers Begin by pointing to the head right so they both start at the head and on every iteration so here's the key Point here right every iteration of this Loop what they're going to do is the slow pointer is going to move over by one and the fast pointer is going to move over by two right and if the slow pointer is equal to the fast pointer then we simply return true pretty simple right so why does this work well here's here's my way explaining it so the slow pointer right it moves over by one and then the fast pointer moves over by two so the difference between two and one is one right so on every iteration of this Loop this slow pointer and this fast pointer should be one more apart right so they should grow in Distance by one and if if there's a loop in this list then eventually over time the slow pointer and the fast pointer will intersect so that's pretty much it this is a very simple Loop detection algorithm and I hope you enjoyed watching this video and I will see you later