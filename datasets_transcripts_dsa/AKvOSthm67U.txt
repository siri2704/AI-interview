hi there and welcome to code framer in this video i will give a quick walkthrough of the topics that we are going to cover in this tutorial this course will explain the data structures and algorithm concepts from basics to advanced level so i highly recommend not to skip any of the videos when you move from one section to another so now let us have a look at the topics that we are going to cover in this tutorial first one is the introduction in this section i will explain what is data structure then i will explain what is an algorithm and then we will understand why understanding data structures and algorithms are so important then we will have a look at types of data structures and types of algorithms then i will give you a short quiz to test your understanding the second topic in this tutorial will be about recursion this topic is extremely important as it is used in many algorithms also this concept is frequently asked during interviews and hence i will explain about this concept in detail and also we will solve many problems to get comfortable using recursions in fact we will have a separate section to crack interview questions using recursions this section will help you to solve recursion problems which can be asked during most of the interviews the next section that we will be understanding is about the big o notation the big o notation is a way of describing and analyzing the performance and efficiency of a code it is an extremely important concept using which you can establish the time and space complexity of your program we will also cover different interview questions that are usually asked about the big o notation then we will go to the next section which is arrays in this section i will explain about different types of arrays such as one-dimensional arrays two-dimensional arrays and i will also explain about how arrays are represented in memories and then we will understand about the time and space complexities of arrays operations the next topic will be about the python list which is very similar to the arrays with a small difference and i will explain the differences between an array and python list then finally we will also solve many problems related to arrays and python lists then from here we will continue to explore the built-in data structures of python like dictionaries and tuples we will also analyze the big o notation to calculate the performance of various operations that can be performed over these data structures then we will continue to the next section of this course which is the linked list here i will cover all the operations which can be performed over different types of linked lists for example singly linked list circular singly linked list doubly linked list and finally circular doubly linked list i will explain about all these different types of linked lists and in the end we will also go through all the interview questions that can be asked on this topic so be ready for some good amount of practice from here we will continue further to more data structures in python which are stacks and cues these are extremely important concepts as they are widely used in solving different problems and hence it is extremely important for you to get hold of these concepts we will understand their implementations and in the end we will also see various interview questions that can be asked on these topics from here we will go to learn more advanced data structure which is a tree in this section we will understand about the binary tree and concepts like pre-order traversal in-order traversal post-order traversal and level order traversal so here we will extensively use the big-o notation and recursion to solve many problems then after understanding these concepts we will move forward to understand the binary search tree and then avl tree in the avl tree i will explain about the concepts like left left condition left right condition right right condition and right left condition we will understand how we can insert or delete nodes in an avl tree using these conditions after understanding these concepts we will solve a lot of challenging problems in this section then we will move forward to understand about the binary heap it is a special case in the tree section and i will explain about the common operations of binary heap and finally we will move towards the last type of tree which is tri the tri takes characters as the nodes of a tree so this becomes extremely useful when we are developing applications like dictionaries then the next topic will be the hashing this is an extremely important section because here we will understand how various data structures are built and implemented behind the scenes in python and also we will understand how we can build our own key value paired data structure so after completing this section we would have completed all the topics related to the data structures now we will move towards the second part of this course which will be about algorithms so i will explain about different types of algorithms which are extremely essential to understand in computer science so first we will start with understanding various sorting algorithms so the first sorting algorithm will be the basic and the easiest one which is the bubble sort then we will understand about the selection sort then we move to the insertion sort then bucket sort shell sort merge sort and then quick sort some of these sorting algorithms will involve use of recursion and we will also analyze the big o notation of each sorting algorithm so remember that if you want to understand this section well then ensure that you have gone through the big o notation and recursion section of this course finally we will also have a look at the heap sort algorithm from here we will move to the next section which is graphs this is an advanced topic in data structures and algorithms and due to which most of the developers are intimidated by this concept so here first we will start with graph data structures we will see how to implement them in python then we will move on to understand various graph algorithms like breadth first search and depth first search which are used in graph traversal then we will continue to understand the topological sort in a graph after getting all the conceptual understanding about the graph data structure and also its algorithms we will solve some problems to further deepen our understanding for example we will solve problems like single source shortest path problem and all pair shortest path problem we will solve these problems using four different algorithms which are breadth first search dijkstra algorithm bellman ford algorithm and floyd warshall algorithm and finally we will also understand why we should not be using the depth-first search algorithms to solve these problems from here we will continue to the next topic in graph which is minimum spanning tree which is a special type of graph and we will solve these problems using two different algorithms which are prim's algorithm and kruskal's algorithm here we would have concluded the graph section now we will be moving to the next section which is understanding greedy algorithms so here we will understand which algorithms use the greedy algorithm we will also solve various problems related to this topic like activity selection problem coin change problem and fractional knapsack problem then we will move to the next section which is the divide and conquer algorithm here i will explain about the main properties of divide and conquer algorithms and also we will understand how we can identify and solve problems using divide and conquer approach we will solve various problems in this section to deepen our understanding after completing this topic we will move towards an advanced topic which is called dynamic programming so first we will understand the main properties about the dynamic programming like optimal substructure property and overlapping subproblems property then we will continue to understand two methods of dynamic programming which are top down with memoization and bottom up with tabulation we will also learn certain steps to convert a divide and conquer algorithm to a dynamic programming algorithm then we will move on to solve various problems related to dynamic programming in this section these will be extremely hard to solve and i will highly recommend you to solve all the problems on your own the students who will be able to sustain solving problems related to dynamic programming are the ones who love pain and misery and finally i will give a lot of coding exercises for you about all the topics that have been covered in this tutorial i will also tell you about various online platforms from where you can get more and more problems on all the topics for practice i once again welcome you to this course i will keep uploading topics as and when they are recorded so let us begin