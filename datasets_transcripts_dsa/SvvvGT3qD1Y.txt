hey everybody welcome to your video on sets or hash sets I'm actually really excited to do this video I've been looking forward to it so you probably came across this video one of two ways so the first one you've been watching my data structures and algorithms series and if that's the case you probably have a really solid foundation to understand this content if you searched this material maybe you were in a discrete math class or something you're probably getting into sets and realizing that it's a pretty math heavy topic so this video is not going to focus too much on the math but more on the the practical uses or how they work in the computer science perspective on this stuff mainly because I was in a discrete math class and when I got into the the sets the the math part of it just made me question everything in my life and I just left class thinking I'm just gonna stick what I'm good at stay in my career path I'm gonna be a professional vegetable peeler and that's all because the math stuff just really challenged me so I'm gonna try to keep it simple so what in the world is a set well it's very similar to like a list or like a dynamic array and that it can contain a bunch of elements but there's a key difference and that is there are no duplicates so that is the primary thing with a set so let's say and I have some videos Python videos on sets if you want some hands-on examples with that but the example I gave is having a set of colors so here's what it might look like colors in Python you use curly braces and you can just pass in the values we're going to use strings so what colors do you guys want to go with let's go red green black blue and purple so this is pretty much what it'll look like if you're in a different language it might be a little bit different or if you're just doing set theory it might look a little bit different but right now we have a set of five elements red green black blue and purple if you were to put red in here numerous times that's not going to persist so if you put red comma red comma red and then you printed out colors it's only going to have one red element in it so there are no duplicates now there's another key difference between a normal array and that is there is no order for these elements it's not like red comes first or green comes first or anything in fact it's considered unordered and you cannot be sure that there's any order with these elements and I'll explain why here soon but let me just get back to what we were saying there are no duplicates here so the key difference between a list is a list you could put numerous elements that are the same so you could put red and then another red and we'll just assign that to a variable see if you were to print C you would get red red and that's fine that's just how lists work sets have a different purpose and oftentimes in computer science they are used just to determine whether or not something is in that set or not there's no concept of a count if instead you wanted to count the number of times red occurred or something like that you would want to use either a list or a dynamic array or a hash table to keep track of occurrences because a hash table you can have a key and then a value so that key could be red and then the value could be the number of times so if you want three Reds there you go so that is a hash table structure which you can check out my previous videos on hash tables if you're interested so let's say these are my favorite colors and let's say we create another set and these are going to be her favorite which is my lovely wife's favorite colors and I'm just picking random colors here so we're gonna go with blue orange purpose and grieve so we got some variety some of them overlap and that's going to be seen in a minute when we talk about some of the different set operations but for now the main thing you need to understand is that there are some similarities such as green there's also some differences such as orange a way you can think about sets is using Venn diagrams which are basically circles that overlap which is a much cooler name circles that overlap and this come up when you start doing set operations so what we're gonna do is we're going to use this left circle to store my favorite colors this right circle to store her favorite colors and then this middle section to put the ones that are shared in both of them so let's take a first look at red is it in hers no it's not so we're just gonna keep that over here and I'm not gonna use quotes just to keep it simple so we got red what about green well Green is actually in both of these so I'm gonna put that here alright what's next black mmm that doesn't look to be in hers at just mine so I'm gonna put black over here on the Left blue blue is in both and then purple purple is in both and then we'll go do the same thing with her favorites so blue it's already there orange that's just hers and then purple and green are already there so again this circle is everything I like and this circle is everything she likes the first set operation I want to talk to you guys about is the Union so a union is taking both of these sets and taking all of the elements from both of them so that result would be red black green blue purple and orange if you're doing this inside of programming there might be some operator to do this so for example inside a Python it's the pipe symbol so you would say my fave pipe her face alternatively there might be some method so for example you could say my fave dot Union and pass in her faith and this will return a new set that you can assign to some variable like so those are just examples this is going to vary from language to language so don't worry about it too much but just so you get a taste of how you might do something like this inside of code the next operation I want to share with you guys is the intersection think of an intersection on roads you got two completely distinct roads and the intersection is where they cross and there is some shared road so same thing here the intersection is this section right here so purple blue and green so if you want a systematic way to choose for example wedding colors why don't you put all the colors you like in a set and all of the colors your future spouse likes in a set and then get the intersection so we could go with green blue and purple boom and there we're all happy the next operation wanted to talk about is the difference and it works similar to how the difference works and in math which is just another word for subtraction so the difference when it comes to sets is taking one set such as my favorite colors and subtracting all of her favorite colors so that's going to also get rid of these shared ones so if we get the difference here we're just going to be left with red and black so my favorite - her favorite red and black so if you wanted to figure out just the colors I like and nothing she likes then look for example if you wanted to surprise her with a wedding and choose the absolute worst colors which by the way you shouldn't surprise anyone with a wedding but you would do that to get red and black if I wanted to do it the other way around I would just take her favorite and then some tract my favorite similar to how 10-7 and 7-10 are two different operations it just depends which one is on the left and which one is being subtracted from it now this last operation is this a little weird but it makes sense and that is the symmetric difference so this would be like the ultimate blend of colors that neither of us can agree on because it's going to take all of the colors only I like and put them with the colors that only she likes so we're going to be left with red black and orange beautiful wedding colors it's like a Halloween wedding with some like red mixed in cuz why not have some clashing you know who knows I'm not a designer there's probably tons of awesome looking red black and orange weddings out there so you can think of the symmetric difference as the difference my favorite - her favorite plus the difference her favorite - my favorite so that's another way you can think about the symmetric difference or you can just think about it as everything except what's in the middle if it depends on if you're more of an algorithmic person or a visual person so those are the four important operations I wanted to teach you guys about sets now I wanted to talk a little bit more about how they work from a data structures and algorithms perspective actually we're not gonna really talk about algorithms here beyond a hashing algorithm which actually works exactly the same way as the hashing algorithm for hash tables so with a hash table it's the key that gets hashed with a hash set we don't have a key so we just hash the data itself so red is going to be hashed and then the result of that hash is going to be used to determine at what position to store it in memory so let's just go through an example of six doesn't really matter just an example here the reason we can't have a duplicate is because if we store it another red well this is the same exact data so if we ran it through that same hashing function we're going to get that same exact position Oh sixth and there's no way to distinguish between red and red not to describe why they're unordered is because these could all give different results for a hash and that's used to determine their order now the limitation of a set is that the type of data that you use in a set must be hashable for a hash table only the key had to be hashable the actual value could be a custom object that has no hash implementation but because the data itself in a set is hashed it has to be hashable so all of the primitive types and any immutable types are usually hashable and if you're working with custom objects you can actually create your own hash function so the way you do this depends from language language inside a Python you override underscore underscore hash and then you in and then inside of here you have to calculate it and return some hash value so this would be defined as a method inside of your custom class similar thing inside of Java you just do an override this is going to be for the method called hash code and then you would just return the hash code so that's your introduction to sets again I'd recommend you watch the hash tables video and yeah that's all I got for you guys so hopefully that was helpful stay tuned for the next one be sure to subscribe [Music] you