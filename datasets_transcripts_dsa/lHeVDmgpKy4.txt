everybody welcome back to my channel and if it's your first time here my name is josh and i do a lot of videos on it cyber security career and some education stuff here and there but today's video is going to be about data structures and algorithms too which is part of the western governor's university computer science program or the computer science bachelor's degree i recently completed the computer science bachelors from wgo a few weeks ago and i'm just now kind of going through and making videos about it and talking about my experience and talking about some of the more difficult classes and data structures and algorithms too is is one of the more difficult classes of wgu so i kind of thought i would make a video not really like telling you how to do it but kind of explaining how i approached it that might kind of help you understand it a little bit better and be i guess maybe less afraid of it because there's a lot of requirements in this really big course so if you're thinking about getting into the computer science program or you're already in it this video will definitely be useful for you so go ahead and watch it at the end set it at 2x if you need to but yeah let's get started so just a disclaimer i want to throw out there wgo has like sufficient material that you can use to kind of study and then learn what you need to learn to pass this course but i i didn't really use any of it because before i even registered for the program and started paying i i kind of pre-studied this course on my own so the material that i talked about that i used is is going to be the material that i used and not necessarily wg use material so if you're kind of wondering about that that's why i kind of studied this course before i even registered for the program this is part of a kind of pre-gaming strategy that i use to complete this degree basically what that means is i completed a lot of classes and courses outside of wgu like study.com and straightaline.com completed those transfer them into the degree and the courses that i had left i kind of just pre-studied them before i even registered like data structures and algorithms for example this course i kind of studied it before i even registered so then i could just kind of register study them register and then just complete everything as fast as i could so from the time i registered at wgu for the actual computer science degree i only spent like two months completing the remainder of the coursework so i spent two months and then got my bachelor's degree so that's kind of why the resources i used are like outside of wgu because i was kind of studying this course before i even registered at wg if that makes sense but again you can kind of learn more about that strategy in this video i go into it like pretty in depth uh but yeah let's get started data structures and algorithms to strategy so here we go so basically the idea behind this class without giving away too much is you essentially have to programmatically deliver a whole bunch of packages all across utah and there's a lot of constraints that you have so basically you have a given number of trucks and you can load up a certain number of packages per truck and then you have to deliver all the packages within a certain amount of time only driving like a certain amount of miles if that makes sense so you can kind of guess you have to do some maybe delivery route optimization in kind of a way to keep track of the packages in a way to keep track of which trucks have each package in them and there's some other kind of pretty difficult requirements and constraints that go into it but one of them is you have to be able to look up the status of any given package at any given time you also have to implement your own hashing algorithm or your own hashing function which you can't use one that's like native to python so there's kind of a lot that goes into it it seems really insurmountable when you're just like reading the requirements for the first time i can't share the actual requirements but maybe you can kind of get an idea from this so yeah it's basically just you it's like a delivery simulation route optimization kind of thing that you that you have to do at wgu so yeah i'm going to break this strategy down to a bunch of different steps you can just kind of see them here but i'll go into them more in depth one by one so kind of the first step is priming your python ability python's a programming language for those who didn't know this whole program there's a requirement to use python for it and it's a really difficult application to build so a lot of people might be like okay i gotta get like super good at python to do this but like honestly like python syntax and using python as a language is like the absolute least of your concerns there's a lot of difficult constraints and you have to implement your own data structure so you have to know python like you know a little bit maybe even like at a superficial level but more importantly you have to like understand what you're doing in the application you have to understand uh big-o notation time complexity and you have to understand like a lot of different data structures which i'll get into but for python um what i would recommend and what i personally did is i just used a code with mash's python course i i didn't even use it like all the way through you can kind of see my progress here like how much i actually used it but this course is like really useful it's really efficient in the way that it teaches you and it got me up to the level that i needed to complete this application you can see i didn't even do i don't i didn't even do like half of it this course if you purchase it it also comes in handy when you're doing the computer science capstone final because there's like a machine learning module at the end of this program that really comes in handy there so i would recommend just using this there's a lot of free python tutorials that you can use online which are probably good as well i just happen to use code with mosh for everything because it's so well put together and i really like saving my time so first step just prime your python don't worry about it too much just pick a tutorial and kind of go through it and don't worry too much so the next step you want to do is prime your data structures and algorithms skills and ability i guess this class has data structures and algorithms too and not only do you use quite a few different data structures for this particular project you have to implement one as well which is a hash hash function or a hash map i guess specifically i'll just tell you what i used again i use code with mosh data structures and algorithms to kind of get myself ready to understand the things that i needed to do in this class specifically i used um you'll use like i used anyway like lists cues sets hash map and specifically graphs and maps and you really need to understand what an adjacency list or an adjacency matrix is because you'll use that pretty heavily in this assignment so personally um i don't even actually know again i don't know what wg's material was for this class because i didn't even look at it because i kind of studied this class before i even registered and i just used code with mosh um especially the adjacency matrix sections were like really helpful so yeah get get used to data structures and algorithms i'll put like a bunch of links in the description but yeah that's pretty much step two get ready prime yourself in data structures and algorithms so the next step after getting used to python and after getting used to data structures and algorithms now is kind of the time to start writing the actual application so the first thing that i would do is kind of go and watch this video and learn how to implement a hashmap because you have to you have to manually like implement your own hashmap for this program you can't use one that's native to python and this video is like really useful because it really like breaks it down for you and kind of explains what you need to do to make like the hashing function and how to handle collisions and all of that kind of thing i deviated mine from this like a little bit this might mop this might not make sense to a lot of people but you don't have to have like a super efficient hashing mechanism it's okay if you have a whole bunch of collisions you just have to handle the collisions well this will make sense more after you actually watch the video but yeah go ahead and watch this video kind of learn what a hashmap is and go ahead and implement one in code for your application and the next step in the process is to kind of read in the data that they provide and put that data into some kind of data structures in your program so for example they give you like a bunch of kind of excel documents one document contains like all the package information like the where the packages are going like the address and stuff and the weight and all that good stuff and other files are the destination names and then the destination data kind of the destination names as you might guess just includes the names and the addresses i believe and then the destination data it's kind of like this table that shows the distances between all the different destinations if that makes sense so the distance between for example destination a and b a and c and d a and e and then all the way down through the whole the whole kind of destination so you can kind of see like how far it is from place a to place b for like every single destination so basically they give you these kind of data files and they're they're all kind of messed up they're they're in like a way that's not really readable for the computer so what i would recommend and what a lot of other people on reddit do is they kind of take these files and then turn them into just kind of raw csv files and get rid of like all the other crap and like pictures and junk all over them and just turn them into kind of raw csv files to make them easy to read into your program so you want to read these in and then put them into the appropriate data structure and after you do that you want to create an adjacency matrix or an adjacency list whichever one you know you decide to implement based on your feelings at the time i guess you want to create an adjacency matrix and the adjacency matrix like i said it just contains essentially it's like a list of every single node that you're going to deliver packages to and then with the distance from that node to like every other node if that makes sense so it's kind of a table that you will use later to kind of calculate the best path or not the best path but an optimal path when you're trying to figure out how to deliver your packages so again just to recap on this stage take the data files they gave you clean them up so they're a nice raw csv read those into your program and put them in the appropriate data structure and one of the data structures will contain your adjacency matrix that will be used to optimize your delivery routes i'll go ahead and put a link in the description that shows how to read csv files into python so the next step after you have loaded in all your package data and you created your adjacency matrix that shows the difference between all the nodes the next step is to kind of load the trucks that is or choose like which trucks have which packages on them and i know a lot of people tried to do this programmatically and it tends to take a lot of time you'll see why this is when you actually read the requirements but a lot of people like including myself kind of manually loaded the trucks which is we just had a bunch of line of codes that that just manually added like each package to each truck it looks really janky but it tends to save a lot of time trying to worry about the best way to like write some kind of algorithm to manually load the trucks so for me i actually had actually created like a complete truck class and you can imagine something like there's a truck class and then maybe it has some kind of data structure in it like a set or something i don't know to kind of hold each package and then there's like a function on the truck class that adds packages to the truck class so you might have like truck one dot add and then the object for package one which would take that package and then add it to you know the set or list or whatever data structure that i chose so pretty much in this step you based on the constraints that they give you just add manually load all the packages onto the trucks you'll have to like mess with this a little bit once you start delivering them you'll kind of notice that maybe one truck takes too long to deliver the packages or one of the packages is late based on the constraints so you'll kind of have to i had to kind of massage my trucks and the loadout like a little bit but just pick you know just do for the initial load just load the trucks up and you'll kind of adjust which trucks have which packages later but yeah this step load up all your trucks manually i would recommend doing it manually but you know load them up however way you want i guess and the next step now that your trucks are loaded now is the time to kind of choose which algorithm you use to kind of find the best route i shouldn't say best route but you need to choose an algorithm that at least optimizes your delivery route for each truck so for example we'll just say you loaded up truck one and truck one has 10 packages on it for example so i'm just going to show you like a little visualization of of what i mean by choosing the algorithm and what that means essentially so this is just this is a website i'll put the link in the description but it kind of shows uh pathfinding and for the traveling salesman problem so we'll say truck one has ten packages this is salt lake city so maybe these ten packages need to go to ten different cities so we have our ten different locations so we have six seven eight nine ten and this kind of orange dot right here this is where this is you can consider this the hub like the home base for the truck so i'll save this these are all the places we have to deliver them and say that we do so we'll do like a depth first or brute force search and what this is it it checks every possible path that the truck can take and it finds the absolute best path to deliver all the packages and you'll see there's kind of a trade-off so we'll check this one first and this is kind of what the algorithm is going to look like it's going to go through every possible path and try to find the absolute best route to deliver the packages and you can see it's kind of it takes a while right to calculate and someone correct me if i'm wrong on this but um i think depth depth first brute force uh it's something like n factorial which means there's a total in this case we our n is 10 because we have 10 nodes it's going to be it's going to check 10 factorial pathways if you don't know what that means just go to wolfram alpha and then if we type 10 factorial you can see it's going to check essentially 3.6 million different pathways and at the end it's going to find the absolute best route to take so it takes forever to figure it out but our kind of reward for that is that it's going to give us the absolute best path so brute force is one way you know if the the path it's absolutely imperative that you have the most optimized pathway but another kind of um algorithm that you can use and this is the one that i used is uh nearest neighbor so basically this operates in a time complexity of just n you can see it's like boom finished right away let me slow it down so basically nearest neighbor as you might guess it just starts here and then it just says where's the next closest one and it's like okay it's here and then it checks the other nodes where's the next closest one and it you know you can see it it just kind of keeps picking the closest node and then it finishes like instantly it's not necessarily the best path but the time to calculate it was like super fast as you can see so it just depends on what you want to do some of them are you know those trade-offs nearest neighbor is like super easy to implement and it's super fast to compute an optimized path but the drawback is you don't get the absolute best path and then there's brute force which takes eons to compute but your kind of reward in the end is you get the best possible the most optimized path possible and whichever one you pick there's like a kind of uh paper component to this course so whichever one you pick you kind of have to justify it there's not a right or wrong answer so just pick one implement it and then you have to justify it and then you have to talk about a couple other algorithms that you didn't pick and kind of talk about you know what are the benefits and drawbacks of those so there's kind of a bunch of algorithms in here i use this kind of website to to pick my algorithms from and i use this website for screenshots and i used it to kind of help me understand what was going on i guess so this is you know convex whole it's kind of interesting to see you know i think this operates in something like n squared time complexity uh but yeah basically the next the step the next step you just have to pick your algorithm and then kind of implement it and you might be asking like well what do you mean like how do i implement it so basically you use that data that we read into your program on step five and remember we loaded the trucks up in the previous step so each truck will have a kind of list of packages in it meant and then you use the data we read in to kind of figure out where each one of the packages are and then you have a starting point which is the home base so for example if you're doing nearest neighbor you just you know you assume you start at the home base and then you look at the list of packages that you have on the truck and you use your adjacency matrix and figure out which package is closest to where you are and then you go to that package and then essentially what i i used a queue so i went to the the next closest package and i added that package or that that node to the queue and then from there you go to the next closest node and you add that to a queue and then you go to the next closest one you you add that to the queue all the meanwhile you're also kind of calculating the time and distance it takes to go to each one of those nodes and you you can calculate the distance easily because remember you have your adjacency matrix which keeps check inside of the adjacency matrix it you have the distance from every single node to every other single node in there and you can also calculate time from that because in the requirements they'll give you something like the average truck speed is like for example 10 miles per hour you take the distance and then you use the average speed to calculate uh how long it takes to drive and you know as well as the number of miles like to each node so in the end when you're kind of you load up the trucks and you're using your algorithm to calculate the time and stuff you'll just keep track of everything from the time the truck leaves the hub and delivers all the packages and when you deliver the last one it has to drive back to the hub and then you can kind of keep track of the time and distance based on the data you read in from the the csv files i hope that makes sense maybe like watch this again or like read the these other reddit posts i'll put them in the description but yeah i hope that kind of makes sense this is kind of the the meat of the the coding part in my opinion and the next kind of thing to worry about is you have to keep track of time and like the status of the packages so basically one of the requirements is i'll just say this because it's kind of well known already but you have to be able to look up any package at any given time or you'll have to be able to look up you know the status of all packages at any given time what this means is like what i personally did is i just kind of for the last step as the packages were being delivered whenever packages whenever a package was delivered i i kind of took a snapshot of all the packages during that particular time like whether the packages were still in the hub or they're they're on route or they've been delivered already so i i kind of took a snapshot every time package was delivered i took a snapshot and i kind of stored it in a dictionary if that makes sense and at the end of the delivery i kind of have this whole like data structure full of package status information at any given time and at the end in your kind of command line interface you you have to kind of implement the ability to look at packages at any given time and kind of display them on the screen if that makes sense so what i personally did for this is i used a nested dictionary or a dictionary within a dictionary so the kind of main key for the dictionary was whenever a package was delivered i took that time and used that time as the key and then for the value was just another like a full dictionary set of all the packages and then their given status at that time so for example at 9 00 a.m would be the key and then the value would be a total list of all the packages in all of their statuses at 9 00 a.m or maybe another package was delivered at like 10 32 so there'd be another key that's like 10 32 and then the value would be like all of the packages and their statuses at 1032. so when you're using the cli to kind of look up packages for any given time you would just enter a time and it would kind of pull all the packages and their status for that time so that's pretty much all there is to it um aside of this kind of difficult coding of the algorithm keeping track of everything you have to kind of write a command line interface for the user to be able to like interact with the program and you know deliver packages and look up packages at any given time but all that is relatively easy compared to creating like an adjacency list and creating your own hashing implementation and all of that kind of thing but yeah i guess some general advice would also be don't be afraid to manually do a lot of stuff in this class for example like manually load the trucks and manually do this and that where of course you would want to like generalize it and like make it into some fancy algorithm normally the class will be like much easier if you kind of manually do a lot of things this probably doesn't make sense but maybe once you start doing it it will it will probably make more sense and of course of course take advantage of your course instructors that's what they're there for they're really smart i didn't use one for this particular class because i kind of studied it like before i registered like i said but they're really smart and they'll they'll be really helpful and there's a lot of other reddit threads about this course i'll kind of put some of the best ones i i saw in the description below but uh don't give up this class is definitely doable especially if you kind of break it down like this and just take it one step at a time just don't worry about like anything else just when you're focusing on learning python just learn python the best you can when you're focusing on learning the data structures section like your priming just focus on that don't worry too much about it the next step when you're focusing on implementing the hashing algorithm algorithm don't worry about the rest of the program just kind of focus on that and just kind of focus on one step at a time and then before you know it you'll kind of make your way through the program and it's not it's not that bad it was hard for me of course but you know it's it's doable for sure just use this video and of course use reddit use your ci and i think you will come out okay so yeah i hope this was helpful i'm sure there's going to be a lot of questions so please don't hesitate to leave questions in the comments section i 100 respond to everybody's question if you look at my other videos i always respond so please leave comments or questions if you have questions about anything i'd recommend watching this video again it kind of goes through my journey i guess at wgu computer science and talks about like a really manageable way to deal with it i'll put some affiliate links in the description for code with mosh i i use it i really like his product but again there's a lot of free stuff on the internet too but yeah thank you so much for watching i really appreciate it leave comments and we will see you in the next video see you later [Music] you