welcome to this episode of Dev questions with Tim Corey join us as we tackle the questions you are asking about a career in software development understanding the industry and new technology if you are just starting out or you want to grow stronger as a developer this is the place to get your questions answered now here's your host expert developer and online educator Tim Corey does knowing data structures and algorithms benefit a c-sharp developer well that's we're going to get into in this episode of Dev questions and if you have a question go to suggestions.im Corey ask it there and hopefully you'll see your question answered on a future episode of Dev questions now this question did come from a suggestion site it's one that is a pretty common one when you go to an interview for a developer job you'll often hear about you know horror stories of having to create a linked list on a whiteboard or creating data structures and binary trees and all the rest in order to prove that you're a real developer so do data structures and algorithms benefit c-sharp developers or are they just an interview topic well I think the answer is yes yes they do and no no you don't so let's talk about what we're really uh the heart of the matter here we're going to start with definitions because these are big words data structures and algorithms what does that actually mean let's start with data structures a data structure is just a way to house data inside your language inside C sharp this is where it's not as an example so a data structure could be an array it could be a list it could be a dictionary we've used these and if you have been inside c-sharp for any period of time you've probably seen most of the things I just mentioned so they don't have to be really scary they're just a way to store data and yes when you comes to interviews things you don't talk about lists or arrays they thought more advanced and Edge case type things we'll get to that but a data structure itself is just a way to store data or hold data to process it inside of c-sharp so what's an algorithm an algorithm at the very core of it now there's been a lot of things add on to algorithms but the very core of an algorithm is just a a logical way to solve a problem it's not a necessarily a rule it's not a even a pattern patterns can be algorithms but algorithms don't have to be patterns they're just a way to solve a problem and in software development that's really all we're faced with is logic problems we're faced with okay I want to do this how to make my code do that logic well that's you create an algorithm to do that you create a pattern to do that and some of these things we have kind of defined into design patterns where we say okay we've seen this problem often enough and we have solved it with an algorithm multiple times we look at those algorithms and said they're all kind of similar because similar problem similar solution for the most part and so we kind of boiled it down to oh let's create a design pattern that will kind of encapsulate our thoughts on the best ways to solve a problem like this generically so I have a generic problem like this here is the general idea of how you would solve it and that's where we kind of mix in design patterns and and principles into algorithms but an algorithm is just a way to solve a problem and it's it can be unique to your specific situation so that's what design Pat I'm sorry that's what data structures and algorithms are that's not really that scary right it's just a way to work with data and work with your application and how to work with the logic of your application and when it comes to evaluating a person's ability to perform the software development role it kind of makes sense do you know how to work with data and do you know how to work with logic that makes total sense and so from that perspective yes you should absolutely know data structures and know how to work with and create algorithms this is where things get off the rails a bit though so a lot of things are simple okay and actually with.net.net core even and Dot net 6 and Beyond things got even easier when it comes to working with our our data structures because we've got a lot of great data structures and really for most cases the data structure is a pretty common one we'll use a list or we'll use an inumerable but that's a pretty common one to use we don't necessarily have to deviate from that standard type maybe if we you know have a certain use case come up we'll use a dictionary or they're all generic and they just work and maybe we work with an array once in a while but not often because we have the generic list so we don't have to deal with too many decisions on the data structure side because most of those things are re-performance and it's only a very very edge cases where we have to make good decisions about one specific type versus another specific type I'm not saying you shouldn't know more but really for a junior developer a mid-level developer even up to almost a senior developer you don't have to worry about it that much it's only when you get into those really edge cases where you start to think yeah maybe I should figure out how to optimize or micro optimize this because I'm doing it a hundred thousand times and a micro optimization becomes a macro output value macro Improvement so we don't normally have to deal with knowing too many data structures but that's hard to test it's hard to evaluate hey you know dictionary is yep good cool so is everybody else so how do I evaluate you well we bring in edge cases we say okay how would you create a linked list did you know the last time I used a linked list was intentionally like an actual linked list in C sharp I'm not sure I have okay because I've done line of business applications where it wasn't really necessary and for the most part list works just great and I enumerable works just great and the other types that I need do what I need them to do there is a time and a place for Linked lists and I'll probably cover that in a future video but I don't use it that often so why would I need to know that for an interview how often do you use a linked list in your organization and that's one of the questions you should probably ask is is okay first of all there's a you should learn the five minute version of linked list in C sharp and how it works and know why it works sure and that way when you walk into the interview you can say here's how I'd create and they say well how would you create a whiteboard well how often do you create code on whiteboards don't you use an editor and don't you use the built-in C sharp stuff and really I haven't used a linked list in let's say five years but Google has the answer and I could just Google it and and implement it once so they try to some companies try to kind of get the tricky questions because I think that it gives a better um they can see a better depth to a software developer what it really means is you study for the interview so there's a lot of things like that the same thing with algorithms you start getting into well do you know how to implement this design pattern which again is an algorithm um but it's kind of down the road from algorithms into specific design patterns and so the question comes up well should I learn design patterns should I learn these algorithms that have been kind of refined and built over time and as a junior developer no no you shouldn't as a mid-level developer yeah you should start to understand them and then by the time you're a senior developer you should know at least what they are and generally how they work so that if you need to implement one you can and you can identify that situation when to because here's the thing the purpose of a design pattern is to really make something less complex but design patterns are often very complex themselves so there it's a complex solution to make something less complex than the solution you're putting in so if you're a junior developer you're not writing complex code and if you're a mid-level developer you're starting to write some complex code and you might write some but you might be running a ton of it and when you are those patterns start to reveal themselves and that's one of the things people often miss is design patterns really reveal themselves because again what's a design pattern it's just the kind of accumulated knowledge and boiled down essence of a solution to a given General problem that people create algorithms for and you can create an algorithm to solve that same general so that you know problem and go oh that kind of feels like this and so you kind of take some of the lessons learned from those design patterns and Implement them that's why you should at least know about them at that point because design patterns are there to help you they're designed to bring some institutional knowledge in some knowledge we can build on top of that help us make better decisions our code because we are making decisions based upon the collective knowledge of multiple Developers so it's one of those things where if you're interviewing for a junior level job you really shouldn't have to know a ton about Edge case data structures and you really shouldn't have to know a ton about uh design patterns however and this is the key here you're gonna have to in order to get through certain interviews so what do you do well you learn the basics okay don't don't base your career on these things but learn the basics so you can talk about them so you have this this discussions about them but don't decide that in order to become a junior level developer you need to understand about linked lists binary trees and know about the factory pattern in c-sharp you don't need to know all those things that's too much burden to start out with but as you grow as a developer those things will naturally add to your skill level they will naturally grow your abilities and they will naturally come into play as you grow in your experience so there's been over a time thing as far as actually using them but as far as learning them in order to pass an interview just learn enough to pass the interview okay so concentrate on c-sharp itself know enough to pass an interview that's my encouragement to you especially if you're starting out again as you grow as a developer these things become more and more necessary more and more helpful to you so you should continue to expand your toolbox learn these things learn how they work learn when you might want to implement those and then when situations come up you can recognize that and you can Implement a data structure or a design pattern or another algorithm that helps you write better code but until you've written enough code to really understand that and really recognize those situations it's not really going to help you in fact it's going to hurt you and discourage you okay so should you learn design pattern I'm sorry data structures and algorithms not a first but eventually and if you end for the interview go ahead and learn the high level knowledge of them all right thanks for asking the question if you have a question go to the suggestion site and leave your suggestion for a future episode of Dev questions thanks for listening and as always I am Tim Corey foreign [Music]