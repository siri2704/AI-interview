so let's just see how we can delete a node at a particular position in the circular W link list so here is the algorithm to delete node at a given position so first of all we have to check if the list is empty or not that means if the head is pointing to null then the list is empty so in that case we're just going to Simply return otherwise we have to Traverse the list so we have to use the temporary pointer which will initially point to the Head then we're going to use one Loop to Travers to that particular position where we wanted to delete the node now suppose in a case the node is the only node in the list our list has only one node so in that case we have to delete this node simply we're going to free that Noe so we're going to free that Noe and we're going to return null otherwise we have to update the link so suppose we wanted to delete this node then we have to update the link of the previous and the next node that means the previous nodes next pointers should be updated to point to this note and the next nodes previous pointer should be updated to point to this note so we are basically isolating the note to be deleted and lastly before freeing this node we have to check the node that we are deleting if that is head node or not if that is the head node that means we are deleting the first Noe in that case we have to shift our head pointer to the next Noe and then we can free the memory of that pointer otherwise you don't have to modify the head we can just simply free the memory of the temporary pointer and we can return the new head so that is the simple algorithm to delete a node at a particular position so currently we have three nodes in the list now here we can write the function to delete node at a particular position so we're going to call the function delete at position so the function will take a head pointer and also we're going to pass the position where we wanted to delete the node so first of all we have to check if the list is empty or not so if the head is pointing to null that means the list is empty so in that case we can just simply print list is empty and we can return null otherwise if we have multiple notes in the list in that case we need to use one temporary pointer which will initially point to the head so let's just create one temporary pointer which will initially point to the head and now we have to Travers to that particular position so we need one counter to reach that particular position so we're going to use the while loop so while the counter value is less than the position we're going to continue the loop and in every iteration we're going to shift the temporary pointer to the next node and also we're going to increase the counter value so that means in each itation we're just shifting the temporary pointer to the next note now after Shifting the temporary pointer if we found out that the temporary pointer is pointing to the Head node so that means the temporary pointer is Back To The Head node after circling the whole linked list so in that case we can just return because here the position is invalid so here we can print position invalid and then we can just return the old head without doing any and modification now if we have the valid position then after the end of the loop our temporary pointer will reach to that particular position now here we're going to check if the temporary Pointer's next node is the temporary pointer itself and also the temporary pointers previous node is also the temporary pointer so that suggests we have only one note in the list so in that case we have to free that temporary node and we're just going to return null so that is in case when we have only one node in the list otherwise suppose we have multiple nodes so in that case we have to update the links of the previous and the next node so here we're going to update the links of the nodes so here we wanted to delete the node 200 so we have to update the links of the node 100 and the node 300 that that means this previous nodes next pointer should be updated and the next pointer should point to the node 300 similarly the next noes previous pointer should be updated so this is the next Noe and its previous pointer should be updated and it should point to this node 100 and this way we can successfully isolate the node to delete so here we're going to update the previous nodes next pointer and and it should point to the next node similarly we have to update the next noes previous pointer and it should point to the previous node now before deallocating the memory of that node we have to perform a simple check we're going to check if the node that we are trying to delete if that is the head node or not if that is the head node then we're going to shift the head to the next node so here we're basically checking if the node is head or not and now we can free the memory of the temporary node and then we can return the head after the modification so that means our node is successfully deleted from the list so currently in the list we have three nodes now we're going to call the function delete add position first of all we're going to pass the headp pointer and the position so first of all let let's just delete the first node now we can print the list again so here the first node 100 is deleted from the list similarly we can delete the third node of the list so here you can see the third node 300 is removed from the list so this way we can delete any Noe from a particular position in the circular W linked list so hope you understand the concept see you in the next one take care [Music] he [Music]