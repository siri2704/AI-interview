hi engineering janta I am weav Shukla and today we'll understand how to convert infix Expressions into prefix expressions using stacks for those who are new to this video you can go ahead and watch in this playlist how to convert infix Expressions to postfix Expressions because that will make this process easy for you fine this is another video in the free DSA series that we are building so that you thrive high in your career fine let's dive in deep and you'll understand why I was saying that you should go ahead and watch the previous videos first because in this the previous two videos the previous two videos to this video will be used very specifically fine just consider that you're having an infix expression now you have to convert it to prefix in this case the first thing you need to do is reverse that in fix expression once you reverse it if you are having parenthesis in it then interchange parenthesis once you've done this convert the obtained expression to postfix using the reverse expression whatever reverse expression you got convert it into the postfix you know how to convert infix to postfix I have taught it earlier in the two videos and now once you've done it reverse the obtained postfix expression and that would be your prefix expression fine now for all those who do not know what prefix expression is consider that this is an infix expression and I have told what infix prefix and postfix expressions are in the previous two videos so you can go ahead and watch them but again for your reference I'm explaining what prefix expressions are however it would be better that you go and watch those videos because you'll have a base of it fine now if I consider that this is the tree of this particular expression then the pre-ordered reversal of this tree would give me the prefix expression what is the pre-ordered reversal you Traverse root then left sub tree and then right sub tree so basically first is root then left sub Tre and then right sub tree so this is the prefix expression for this infix expression fine however not every expression would be this simple so we'll try and we'll apply these rules what to do while converting infix to postf fix because when you reverse the expression and then you get one expression you'll be converting it to post fix first now so for that you have these rules and I have in detailed manner explained these rules in the first part of infix to postfix conversion you can go ahead and watch it out fine now let's consider an example this would make things much simpler for you fine so first of all reverse this reverse this expression fine so I reverse this expression once I start reversing this expression what do I get from this parenthesis to this parenthesis this expression is I'll start from this end and I'll write reverse of it so closing parenthesis then closing parenthesis then F Then star which is multiplication operator then e then opening parenthesis then plus then D then again opening parenthesis then minus then closing parenthesis then C then plus then closing parenthesis then B then divide operator then a and then opening parenthesis and opening parenthesis so if I do this in this case I have reversed the expression but remember the Second Step I had told you interchange the parenthesis because these parenthesis make no sense at all there's no meaning to them so I interchange them what I'm trying to say is if it is closing make it opening parenthesis if it is opening parenthesis make it closing parenthesis I'll show you what I'm trying to do tell here so this was closing parenthesis make it open this was also closing parenthesis make it opening parenthesis F star e this was opening parenthesis make it closing parenthesis plus d opening parenthesis make it closing minus closing parenthesis make it opening C plus again closing parenthesis make it opening parenthesis B divided a now this is opening parenthesis make it closing again opening again make it closing so this is the infix expression you obtained after reversal and interchanging of parenthesis fine now you convert it to postfix very simple use a stack fine what did we understand in the infix to postfix we understood that whenever I encounter this particular opening parenthesis I'll push it inside the stack so I push it again I encounter this again I push it fine now as soon as I scan an operand what I'll do I'll print it so for the postfix expression I'll print it f got printed fine now comes multiplication operator push it fine then comes e again an operand printed then comes a closing parenthesis now as soon as I reach the closing parenthesis remember whenever we used to have a closing parenthesis at our disposal the first thing you have to do is that print the things first of all pop whatever lies in your stack until unless you encounter a opening bracket so I pop it out I pop the multiplication out fine I pop it out so it gets popped out and then what do I have I also pop this out fine so I pop this out and basically as soon as you encounter an opening parenthesis you have to stop so I discard both of them as it was the rule and I print this particular operator here fine so this has been done now I go further I scan and I find another operator now anything which is inside the stack should be checked so it is an opening parenthesis Whenever there is opening parenthesis push the operator directly so I push it fine then I find D great as soon as I find D I print it which is an oper hand then comes closing bracket again when I reach closing bracket I start popping out so so I pop this out I even pop this particular opening bracket out and as soon as I encounter this opening bracket I stop I discard both of them pluses printed here all of these steps that I'm doing here are just infix to post fix conversion this has been explained in the earlier videos I'm doing that only once I have obtained this postfix expression I'll just reverse it out and that would be a prefix out fine so now I printed this plus fine now I encounter minus there's nothing in stack so I can push it minus is pushed then opening bracket is to be pushed opening bracket is pushed then comes C now C is an upper hand so I print it then comes plus now if you correctly remember if there is an opening bracket on the top of the stack all you need to do is push the operator inside the stack so I encountered plus I push the plus then I encountered opening bracket great again I pushed it I encountered B which is an oper hand great I'll print it now I encountered division operator again there is an opening bracket inside stack and there is a division operator here so I put this division operator pardon not like this I put this division operator inside the stack once it is done a a a is nothing but an upper hand so I print it out here now I encounter a closing parenthesis as soon as I encounter a closing parenthesis I start popping it out until I encounter an opening parenthesis so I start popping out this division operator comes out then opening parenthesis pops out and then I stop once it is done all you need to do is discard them and print this division operator fine now after this I go further and again I find closing parenthesis so again I'll pop it out when I'll pop it out these two will come out fine plus operator will come out and then this opening parenthesis will come out as soon as opening parenthesis comes out I have to stop as soon as I stop I discard both of them and I print plus here fine now once it is done if you correctly remember the whole expression has been traversed after the traversal of complete expression what was to be done if there is lying something in the stack pop it out empty the stack and till you are popping everything should be printed in the output so here I'll print minus because this will be popped from here and the stack becomes empty fine once the stack becomes empty all you need to do is you got your postfix expression all you need to do is reverse this postfix expression so the final output final output or the prefix expression I would say expression would be reverse of it which basically means minus plus and then division then a b c and then plus and then D and then star which is multiplication operator then e and then F so this is the perfect prefix expression for your infix expression that you started with for this this is the prefix expression am I clear easy peasy no big deal so this is the final prefix expression that you got fine now whatever doubt you have whatever doubt you have tell me in comments fine because this is very easy implementation all you need to do is watch the previous two videos so that you understand it better fine now your homework is try implementing this because I have told you I have given you the implementation of infix to postfix all you need to do is plug in the code for reversal fine so you need to write the code for that and until unless you start writing nobody can teach you coding fine so my whole uh effort my whole effort that I'm putting here is that you guys try you guys write code yourself fine whatever I'm trying to teach you is good only if you try it yourself fine so dry run this on paper and then try start writing the code make mistakes no worries because this will be available on prepa.com the code for this would be available on prepa.com don't worry but first of all try yourself and in the comment sections tell me that what code you've written if it is right then I'll check it if it's wrong then I'll also respond to it if you're facing any doubt in that go ahead comment below this video tell me in the comment section I'll solve that doubt for you fine in the next part we'll understand its code implementation and top three comments stand a chance to win the prep insta Prime subscription for free so that's another advantage of commenting below this video and never miss any hiring update and for that you should follow these social media handles so that you are always ahead in the hiring updates game fine all I can say is keep doing good without any expectation good will come back to you fine thank you so much have a wonderful day ahead