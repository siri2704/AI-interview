I promise you that this video will get you a job at Google even if you are a complete amateur because after months and months of hiring freeze Google has decided to buckle up and restart their hiring process in the next five to six months and when that happens the vacancies are going to fill up really fast because they're going to hire in bul so it's in the best of your interest to start your preparation right now the moment you end up watching this video because this video I assure you is going to be the best guide to crack Google L3 or L4 interviews so let's go hi I'm shaki and currently I'm working as a sd2 at Amazon last year I received five offers from some of the tech Giants and one of them being Google for which I even decided to write a tweet around its preparation strategy and all and I think it received around 3.5 million views because maybe people found it extremely practical and well structured and I think that's where my strength lies you know in helping people prepare for complex coding and design rounds from scratch and that's why I think I would recommend you to you know subscribe to my channel right on so you're not left behind coming to this video it will be entirely about how to prepare for all the interviews that happen when you apply for Google software engineering roles L3 or L4 so let me give you an overview of what we all going to discuss uh firstly we'll talk about the interview pattern in detail uh then we'll dive deep into the technical rounds and basically how to prepare for them it will include questions like what study material we should use what topics to prepare what topics to leave you know the difficulty of these rounds what special strategy to follow her preparation with what mindset should we you know go into the rounds because that's also very important what mistakes to avoid and how to compensate for a mistake that you have done within the round you know and stuff like that and then we'll hop into the preparation of cultural fit or managerial rounds lastly I'll share with you some of my bonus tips for which you have to stick till the end so let's commence so the interview pattern for both sg1 which is L3 and sg2 which is L4 will be exactly the same a total of five rounds will take place first one will be the telephone screening round the next three will be the on-site or online coding rounds and the last round will be the googliness round and each round will be of 45 minutes each round's feedback will be one of the following strong higher higher leaning higher leaning no higher and no higher for L3 I would suggest you to get at least one Higher feedback in one of the rounds or above and for L4 I would suggest you to get at least two higher feedbacks or above in some cases even if you know get a leaning no higher in exactly one round then they will give you one more chance to prove yourself by taking one Ed coding round of yours but in that round you have to make sure that you get at least a higher or above otherwise you know it will result in your downgrading from L4 to L3 or even no selection at all now coming on to the first four rounds that will be entirely technical uh they may have different names but they all test your coding skills the tone screening round will be exactly similar to the on-site coding round so don't worry in these rounds you will be given either a single DSA question that will have multiple levels with increasing difficulty or you will be given two questions that will be entirely independent of each other or all of which you have to solve under 45 minutes and these questions you know they mostly feel like all the other questions that we have prepared in various platforms like lead code Geeks for geeks Etc but sometimes they might even ask you a question you know which is based on a real life problem okay that you need to solve by creating a custom data structure and use an algorithm to implement regardless of whatever question they ask one thing is for sure that the problems difficulty won't be more than easy medium or at worst case medium you know it's not going to be very tough problem because I mean go other days you know when Google's problems were the toughest in the market and only a few handful of competitive programmers were able to solve it now it's very much doable within 45 minutes and also one thing you know we have to prepare no matter what we have to prepare in a holistic manner because you know we have to be ready for even the toughest of problems because in worst case we don't know what happens in a Google interview because it is Google it's not a joke firstly I'll recommend you to you know practice the programming language in which you are going to code within the round for me it was C Plus+ I think I revised all the concepts related to C++ such as what pointers what is the difference between pass by value pass by reference what are the meaning of structs classes virtual functions you know and all the important stuff like that even memory allocation Basics I also read somewhere believe me proper knowledge of the coding language is a must I remember one instance where the interviewer literally tried to trap me within a particular line of code that I wrote I was trying to free up a memory allocated to a set had a not you know cleared my concepts of C++ and all the syntax related Concepts I would have really fumbled for strengthening my C++ I read the C programming language book by Dennis Richie who also happens to be the creator of this language it is a 200 Page book and the best book on C language as of now you can read it entirely in a week and it's worth giving time too um post that for C++ key features and stls I watched multiple YouTube videos and read many blogs online also practice oops concept of your desired language as the question of the second type where you have to you know basically Implement a custom data structure for solving that problem they really want you to you know Implement that by using proper you know oops language for example writing proper classes and child functions and private methods or public methods and all that stuff I've pasted links for all the resources in the description so do check them out now I would suggest you to go through all of these algorithms as well as the data structures that may be needed to implement them pick these one by one and watch multiple Theory videos on YouTube for each of these algorithms to understand it really accurately just deeply go through their Theory and do a couple of standard problems for each of it I assure you nothing will come from outside of these topics these topics are the must and these are the official ones from which Google asks questions and for all the cury related videos as well as the standard problems I have attached it in the description now once that is done I would suggest you to solve all the questions from this interview bit platform form till level seven you will find epic problems of very difficulty levels here the problems are well structured topic-wise and you can Master topics one by one all of these problems are popular and epic they cover basic complexities of all the algorithms and build a solid foundation for you and whenever you get stuck on a problem now take 30 minutes to think of it and eventually you can look into the editorial for the solution once this all is done and you have invested one and a half to two months in it I would suggest you to do a onetime investment buy lead code premium subscription for a couple of months uh it will cost you around $30 to $60 per month and you may find a coding partner who is also preparing for the interviews with whom you can you know share the expenses I know it may be too much for many but believe me with the right kind of strategy that I'm going to show you if you execute it properly it's going to be worth your time and money now on lead code premium open the Google problem set that they have provided sort the problems based on the frequency with which they were pass in the past 6 months that to in decreasing order and start ups solving I'm not asking you to solve all the problems but at least these popular ones rest of problem statements you can read and if you're able to come up with their solution in your mind and are confident about it then no need to practice implementing it being consistent in up solving these problems for at least one to one and a half months will do magic for you so I think this much is sufficient for the preparation of the coding problems you now have done enough coding problems and understand the concepts related to programming language as well as the algorithms very accurately while your skill of solving a problem in the interviews of Google is of utmost importance the way you explain it to the interviewer with the proper choice of words matters a lot too you have to communicate effectively don't try to rush a lot while you speak instead try to listen to the interviewer what they are saying be calm and polite interviewer sometimes leaves the problem statement wake so that you can clear your doubts first and clarify the question further while you write the code keep explaining them at regular intervals about what you're doing actually you may even ask them like whether they want you to First implement the code and then explain it to them or you explain them while you're implementing the code also note that the primary mode of communication in this interview will be English so be ready and if you're not familiar with English then you know you try to give a lot of mock interviews so that you get used to it you can even give your interviews at your own time zone so that the interviewers of your country are allotted to you because this plays a huge Factor as for some people American or British accent is very tough to understand and even in some cases like if you have a very strong accent then even they might find it very tough to understand you so always remember that you know communication gap can lead to improper discussion which results in improper results the other important thing is code quality try to write a production ready code that covers all the Practical edge cases for example if you're writing a method it would look better if you you know wrap it around a proper solution class make proper private public methods and modularize it always remember they're not hiring you for solving some competive programming problem it is a software developer role and when they give you a question you have to solve it just like a software developer does and code it in their way only let us look at this code for reference here the solution is wrapped in a solution class where the method which is public is the one that will be called by the user for a particular set of inputs and the private method is called internally so that regardless of anyone having context around what this class does nobody will be able to access the private method directly not to forget no matter how modularized or well structured your code looks it will still be untiy and complex if your code is not verbos so name your methods and variables properly it shouldn't be too short or too long just precise variable names should be such that they clearly specify what they do for example prefix of a method mostly should start with a verb if the method validates an input its name should be something like validate uncore input or if it calculates the factorial of an input it should be like calculate underscore factorial and so on or also whether you have to use proper camel case or snake case annotations depends a lot on the programming language you using for example in Python class variables and methods are named using camel case annotations and the external independent variables are named using snake case I have added a link in the description from where you can learn all about code verbosity so these are all of the things that must be taken care of at any cost failing to do it might even lead to your downgrading from L4 to L3 even if you solve the problems correctly within the given time frame now coming on to the last round which is also important googliness round it is a hybrid of both cultural fit and managerial rounds don't take it lightly even though it's a nontechnical round and it is kind of light in most cases but still here the check how receptive you are to your own mistakes basically how humble you are your leadership skills your critical thinking etc for Googling this round I would suggest you to you know memorize a couple of your projects by heart in which you should know like what were the managerial as well as the technical aspects that were under your control you may tell about like what initiatives you took on your own what could have been improved in that project and what feedback you got from the manager how did you tackled any miscommunication between you and any team member that was involved in that particular project how did you respond to a negative feedback by the manager if you fail to deliver it on time or something like that and any other questions like this so you should have all these answers ready also don't try to fake scenarios in order to show yourself as very brave or something that you are really not because more than that what the interviewer actually you know wants to know about you is how humble you are and how many times you have done mistakes and learned from it know that is the most important aspect be real in the interview but also in the same time you should portray yourself as someone who is always eager to learn from their mistakes and grow as a better individual also most importantly answer all the real and hypothetical scenarios that the interviewer throws at you using the star framework you can read it from the link I've provided in the description for it it is a must it easily leaves a lasting impression on the interviewer that you have come well prepared now coming on to the last section which is the bonus tips section and here are some of the bonus tips that I want to give you tip number one practice lingl and dynamic programming questions comprehensively most of the questions that are asked in the rounds now they revolve around these topics only tip number two during the coding round always ask the interviewer whether they want you to directly jump onto the most optimal solution or iteratively jump from a brute for solution to the most optimal solution because it saves hell lot of time for both you and the interviewer because the interview is just 45 minutes long and if you try to follow an iterative approach without asking the interviewer then in most cases they won't stop you Midway they will think that even you are trying to figure out the most optimal solution as you code and once you literally come up to the most optimal solution and code it a lot of time might have elapsed and that same interviewer who was looking to ask one more coding problem from you might end the interview because of lack of time so even if you give the most perfect presentation of your single solution to a single problem that was asked in the interview you might not get a strong High because the interviewer's intention was to ask a couple of problems and he thought that you yourself was trying to figure out like how to jump to the most optimal solution of the first coding problem and that's why you laap so much time in that hence this is a point that needs to be taken care of by you on the other hand if you solve all the coding problems that were asked from you in the interview and you have still some 5 10 minutes left then you might give them alternative approaches towards the same problems that were asked to you you know just for icing on the cake you may also discuss about the various data structures and algorithms that can be used to solve the same problems that you coded using some different data structure and algorithm and can have a wholesome discussion around the trade-offs between them so I hope you all likeed this video I'm coming up with more such content on interview preparation and how to improve your coding skills and coding knowledge you may comment below and tell me about what all other topics you want me to make a video on also don't forget to like this video And subscribe to my channel so that it motivates me to make more videos and be consistent I'll be sharing a lot of tips and tricks on how to improve your coding skills efficiently and also how to Master System design and lowlevel design till then stay tuned