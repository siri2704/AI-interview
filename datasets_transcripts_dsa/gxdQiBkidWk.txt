hey my name is Forest welcome back so there are eight data structures that you should know as a programmer this is a followup kind of to my three types of algorithms you should know as a programmer and just as I did in that video we're going to dive into each one show what they are and look at real world use cases so why are these data structures you should know because they're either the most commonly used data structures Andor they form the foundation of efficient algorithm design as well as problem solving and optimizing code performance data structures are the fundamental building blocks of programming and understanding them is better for you than grinding out overly complex Edge case leco problems unless you're trying to pass a Fang interview and if you are then you don't know what data structure to use just throw a hashmap at it and hope for the best anyway I guess we should start with the actual definition of a data structure and that is a specific format for storing accessing and organizing data let's start with arrays arrays are the simplest and most widely used data structure they hold a fixed number of values of a single data type and con memory locations let's break that definition down though fixed number of values that means the array is of fixed length which was defined when we created these arrays of a single data type that means you can have an array of integers but only integers you can have an array of strings but only strings you can even have an array of arrays but only arrays in contiguous memory locations this means the elements or values are stored in adjacent memory addresses for quick access in the elements are indexed which means they are stored in such a way that you're able to access anywhere within the array also known as random access one disclaimer though don't let JavaScript trick you they have what is called an array and languages take their own Liberties on how they want to format their data structures or or name their data structures and in JavaScript an array is not a by definition an array it's an array like object if we want to be Technical and that is because an array in JavaScript is dynamically resizable and can contain multiple different data types so you can have integers and characters whereas Again by definition a true array is a a fixed length a fixed number of values is the best way to say I don't want to say fixed size because then you're getting into memory and things of that nature but a fixed number of values of only a single data type and code does change from language to language but this is just serves as a broad example if I wanted to create an array I could do something like this call it my array and that would equal an array that contains value 10 55 9 32 and 86 and these would be index at 0 1 2 3 4 and then if I want to access an element in that array and print it out then what I could do is access element in the one index which would be 55 right here so the output would be 55 in fact I can do that for you right now by running python arrays pi and that first print is in fact 55 or if I wanted to to modify the element so in place of what is that index 2 which is N9 I could replace that with with 17 and now the output should contain 17 in that number two index and sure enough we print out the entire array and that is in fact the case and then we can get the length of the array and while the index is 0 1 2 3 4 the length is in fact five so the output of the length which this is a built-in function we want to print it out would be five that's an array you can all sorts of things with an array like store financial data of let's say historical stock prices if you wanted to do some financial analysis and arrays have constant time or bigo of one to access Elements which means it's excellent for grabbing data at any position remember earlier we talked about random access however inserting and deleting because it is not dynamically resizable by definition actually has a big O of n which is fair according to this graph but it can get sluggish as the data sets grow because if it's a big data set you're constantly shuffling things around you can see how that could take a long time unless that is it's on the end then it's Big O of one because it doesn't have to shuffle anything around but also if you do have large large amounts of data it is very memory efficient to store those so just like with anything with data structures with algorithms with what language you want to use to build a project it all depends on your specific use case for what is better than what is not if you have to insert and delete en large data sets then then maybe it's not going to be that great but if you just need to store and you need memory efficiency then maybe it is anyway that's an array now on to linked lists unlike arrays link lists do not store elements in continuous memory locations it's a linear data structure that contains a series of nodes with each node containing both a value and a pointer or sometimes pointers are called references just depends on what programming languages you use but I'm going to refer to it as a pointer and that is because it is pointing to the next node in the sequence also all of this meaning you have to access the data sequentially really l level stuff like operating systems or memory management and what's actually very interesting is that under the hood of many programming languages you will find linked lists like Java's linked hashmap uses a linked list for ordering or Python's deck which is implemented as a dou linked list of block nodes or cues which we'll discuss later often use some form of linked list which there are a few what we've discussed is a singly linked list there's also a doubly linked list which the only difference is that instead of just pointing to the next note in the sequence it is also pointing to the previous note in the sequence which is easier for things like reverse traversal and things like that and circular link list which is exactly what it sounds like it connects the last node back to the first linked lists are great for frequent insertions and deletions especially at the beginning of the list as these operations are constant time big of one however accessing an element by index is Big of in because remember you have to access it in order sequentially you have to Traverse the list from the beginning that's why if it's closer to the beginning it'll be shorter if it's all the way at the end it'll take longer now stacks these are the easiest to understand they adopt the last in first out principle just like a stack of plates you put the plate on top of the stack when you need a Clean Plate do you go to the bottom and try to shimmy it out or do you just grab the one on top last and first out and there are two main operations when it comes to a stack that is push and pop push you are inserting something to the top of the stack and pop actually deletes what's at the top of the stack and returns its value you can also check the status of a stack using the peak function which does the same as Pop where it Returns the value at the top of the stack but does not delete it like pop and then there are the is empty and is full functions which do exactly what they sound like check to see if the stack is empty or fit is full and all five of these functions push pop Peak is empty is full have a Time complexity of Big O of one and all that means is that regardless of the size of the data structure the size of the stack these operations will take the same exact amount of time and when I say size again me memory stuff I mean how many values are stored in the data structure Stacks are used in many algorithms and are particularly useful for tasks like tracking function calls in recursion or implementing undo redo functionality which I made an entire video about because I just thought it was interesting a lot of cool graphics and Motion Graphics in there as well that I actually wrote entirely in typescript not like the code examples in typescript the actual animations in typescript I don't know I thought it was pretty cool I never told anybody that until just now or have you ever heard of the shunting yard algorithm if not look it up Stacks are using that as well now Q's Q's follow the first in first out principle unlike Stacks which are the last and first out principle Q's are exactly what they sound like which is a q it's like a line at the grocery store the first person in line is the first person served and there are two main operations that you perform in a que and that is on Q and DQ on Q you are inserting an element to the end of the Q in a DQ you are deleting an element from the beginning of the queue and returning it these operations are constant time big of one unless you're using a simple array implementation without a circular buffer where on Q would technically be big of n if you had to resize it don't ask me how I know where cues are used well that's pretty straightforward when when anything has to wait in lines like when you drag a bunch of photos to upload they're waiting in a queue or when you send things to your printer to be printed out those are waiting in a queue because the first one you send will be the first one that gets printed out once that is printed out it is deleted and then the next one in line will then do what DQ and they're also used to manage multi-threading fun fact now a hash table a hash table is a data structure that is used to store key value Pairs and because of that is very efficient as long as we know the associated key with whatever value we're trying to find and the way it does that is via a hash function but I'll talk more about that later think of it like a like your contacts contacts not your contacts but your phone a phone book where you have a name as the key you want to look up so and so's phone number the phone number is the value so you know so and so's name and you look that up in your in your phone contacts or a phone book and you're able to access the value associated with that key being their phone number that's the idea name and phone number is the key and value pair now we use hash tables to really avoid direct addressing which is what regular tables use a onetoone mapping between the key and the value when stored and the problem here is that when the amount of key value pairs grow a regular table to store these would just become practical it would just be too big that's why we use hash tables and more specifically the hash function to overcome the issue with direct addressing let's say using that previous example of the phone book we want to retrieve a number let's say we know the key and the key is my name farce Knight so what happens is that key is inserted to the hash function and that hash function will output based on that key the index for where the key value a pair is stored let's say it's at index 42 so what we'll do is we'll take a look at index 4 2 we'll find our key value pair of far Knight and whatever the value phone number is now hash tables are average case of time complexities typically constant time for things like accessing and inserting and deleting so that makes them extremely efficient for large data sets they're used in databases and to implement associative arrays and to implement the set data structure however there is an issue with hash tables and that is sometimes two different keys can go through the hash function and output the same index that is called a collision and hash tables need to have something in place a strategy to handle said collisions chaining is one of them where each array slot contains a linked list or open addressing where you just find the next available slot hash tables also have something called load factor which is what helps uh decide when you need to resize it and that's because collisions are more likely as a hashtable fills up in each bucket that's the proper term for hash tables and each bucket containing a single key value p pair or a pointer to a data structure containing multiple key value pairs trees are another data structure they are a hierarchical data structure consisting of nodes connected by edges the elements are organized in a parent child relationship similar to a family tree and I only say similar because each person is a node and each node can have multiple children but each child can only have one parent anyway in computer science we use trees to represent hierarchical data efficiently now there are different types of trees right now let's focus on the binary tree a data structure whereas each node has at most just two children and the children are referred to either the left child or the right child and each node comprises of four attributes the pointer to the left child the pointer to the right child the value stored in that node as well as a pointer to the parent and a binary search tree is a special type of binary tree where every single node on the left of the node contains a value less than that of the parent node and every single child on the right of a node has a value greater than that of the parent node this organization of nodes makes the binary search tree incredibly efficient when it comes to searching inserting and deleting the data it's not exactly the same as binary search but they do both continually divide the search space and I only brought up binary search to show this because I mean look how beautiful that is if you haven't watched my video on three types of algorithms every programmer should know cue that one up to watch next see what it did there Q is in is in the data structure I thought it was pretty clever trees especially binary trees are used in various programs like expression parsing and compilers or implementing efficient searching and sorting algorithms they're really used when uh data is constantly entering and leaving and if you use a particular language well you may already be using a binary search tree are you familiar with the map and set object what about Java tree map well there you go the thing here is that it it's just got to be balanced because if it's not that's where you run into some issues it goes from average case of Big O of login to bigo in and that is exactly why we have self balancing variants of binary search trees like AVL and red black tree map and Java by the way uses red black you watch any of my videos there's probably going to be some Java mentioned I'm just saying now a heap now we can consider this its own data structure it's a special case of a binary tree where the parent node values are compared to their children values and are arranged accordingly and then there are two types of heaps a Max Heap and a Min Heap in a Max Heap every node has to have a value greater than its children's in a Min Heap it is the exact opposite where the children's values are going to be larger than the parents these are also referred to as the max Heap property and the Min Heap property heaps are using algorithms like H what's that one called Heap Sort yeah right on the nose with that one but they're also used in implementations of priority cues they're also used in jvm to store objects see you're not going to escape Java watching my videos now inserting an element into the Heap deleting the root and heapify which is rearranging elements to maintain the Heap property so like Max Heap or Min Heap you got to rearrange to make sure the values are greater or less than those all take Big O of log in time and building a heap from an unsorted array when you want to do that is big oldin and that's due to how the heapify process works from the bottom up now a graph it is a nonlinear data structure consisting of a finite set of nodes and a set of edges connecting those nodes however do note in graphs they aren't actually called nodes they are called vertices because why give everything the same name as each other when you can actually give five different names and just confuse everybody the order of a graph is the number of vertices in the graph and the size of the graph is the number of edges in the graph and two vertices are said to be adjacent if they are connected to each other by the same Edge you have what is known as a directed graph if all edges have a direction indicating what is the start vertex and what is the end vertex you have an undirected graph if all the edges have no Direction but that also means it can go both ways between vertices in fun note there are also things called isolated vertices or an isolated vertex and that is if you there no edges connected to that vertex it just s sits out here all lonely graphs are used like with any examp you've seen of a graphing algorithm so graphs are used to represent locations and routes in a GPS to model social networks and connections and in computer networking for routing algorithms and web pages and links by search engines and that's it but if you really want to understand these data structures and you're serious about learning I highly recommend taking the algorithms and data structures course on brilliant they are the sponsor of this video but that's because their computer science and math and other learning paths and courses are second to none because you learn by doing that's thanks to their thousands of interactive lessons like these that are designed to develop your critical thinking skills through problem solving not just memorization or watching a video like mine more interactions with Concepts like these do help but actually solving the problems yourself is the best way to submit these topics in your brain so you can become the best programmer you can and the best part thanks to these lessons you can learn just a little every day building a powerful habit that will keep you learning and your skills sharp so if you're serious about learning brilliant is a perfect place for it just just visit brilliant.org sfar night and get a 30-day free trial and 20% off an annual subscription and whatever your primary programming language is I want you to take a look at what data structures they already have built in make sure you learn those so you know which one to use in your programming language in order to well do everything I just said be make your code better the key here is is really to understand the properties and the tradeoffs of each if you found this video helpful don't forget to like the video subscribe if you like content cont like this and if you want me to make more like this because I do love making these videos just let me know because the more you show love for these types of videos the more I'll make