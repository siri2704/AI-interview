welcome back everyone another video another problem solving question for today we have 24 days recording this video 24 I believe yeah can't believe we've been doing it for this long my computer though though she is freaking out right now she would can if she could rent another fan from the house she would man she is struggling struggling with all these software open when I started recording these videos I remember it's an Intel 2019 or something it was pretty good I mean you know it it did the job now it's struggling to put some videos and some web browsers and stuff out there but anyways man let's go ahead and get these done today we have an interesting very cool question it's a Microsoft question how many of you are applying to Microsoft hopefully me soon right okay let's go ahead and see what this problem is about we probably yeah we solved this problem before but we might have a different solution today let's see the good thing is that I saw this so long ago like 4 months and I don't remember really the actual you know walkth through you know I understand the problem we'll find out now let's go ahead and check this is the problem you guys valy seduko or seduko Microsoft Uber Apple Amazon Cruise automation question and the question statement goes as follows determine if a 9 by9 soku is valid only the f c need to be validated according to the following rules number one says each row must contain the digits from one to nine without repetition each colum must contain the digits 9 to9 without repetition and each of the nine 3x3 subboxes of the grid must contain the digits from 1 to 9 without repetition note as aaku Bo partially filled could be valid but not necessarily solvable only the field cells need to be validated according to Dimension rules cool we have a visual representation here and then we have the actual input here as the array and then we have five threes a bunch of Dots and a bunch of num the output's true basically none of these numbers repeated in the same row or column okay as we can see up here we also see that it's an array of arrays right or a list of list if you're in Python or a vector of vector if you are in C++ anyways that's that's pretty much it the cool thing here is the fact that the dot represents an empty box in the suduku board or suduku board and then we have another example same thing with a bunch of numbers and dots representing the dots the empty spaces returning false it says that number five in the top left corner be modified to eight since the eight are two eights in the the left 3x3 it's repeated so even though we cannot appreciate it here I assume these let's see eight right here these two eights are in the same subbox and our task here basically is to navigate this Matrix and find out where these numbers repeat or if they don't the cool thing is that it says let me go ahead and get straight for it says here that for Let's see we only need to check the field CES so that's going to make it easier because honestly that's just going to be a loop iterating over these array of arrays and every time we see a DOT we are probably going to skip that okay because we just need to check if in that particular row or column or box we have duplicated numbers I want to basically point out here that you know technically what we need to check here they're talking about rows and columns so let's say you know these are our individual rows here they go all along the board in that manner okay same one here and here so these are the rows right they're going horizontally across the board and technically our task is to make sure that if I have a five here that same number doesn't repeat anywhere in that row now we also have columns that go all across the board and we also have to check vertically if these numbers are repeated we know that for this board the result is true so we know as we can see here just by you know eye comparison that at least five 6 8 4 and seven are not repeated horizontally or vertically so that's why the board is true we see a seven for instance down here and we see a seven up here but there are no in the same column nor row okay now there is another thing here that we could check and it's the fact that it's talking about grits so 3x3 subboxes of the GD or subboxes right so technically that would be this whole subbox in here so the numbers have to be unique in this subbox this is here okay and talking about the data structure the first thing we need to identify that this is what we call a matrix okay and the reason it makes it makes it a matrix is the fact that we're dealing with first a 2d array or two-dimensional array okay and that 2D array has rows and columns and each of these rows and columns have let's say a coordinate that we could explore at some point okay but we need to identify these rows and columns and then we also need to identify the sub boxes in here and I'm marking this sub boxes as I speak with the reason that I want to show right that these are also index boxes here so we could say that the coordinates for this boxes inside this array are going to be the following and there are indexes just like any other index in our array down here okay so these are let's say the address of these subboxes and obviously I started with a zero index since we're using python but here we need to check right that as we iterate over each of these boxes the condition remains true for not only rows and columns but also for these subboxes and we technically have to build this okay because we could iterate I would say we could iterate over these rows and columns very simple with a nested Loop yet we need to form we need to build this subbox and find its address or its coordinate so we know you know because for instance let's go ahead and just take an example I'm going to delete this make it less ground let's say we have a five here and when we're checking columns we see that in that column along five is not repeated and so forth right so even though we have a five in the same box in here horizontally and vertically it doesn't interfere because they are situated diagonally right so that is why if we have a five here we would have to build this subbox okay and then check for uniqueness within that subbox okay and obviously if that would be the case that's false because it repeats within that's supposed to say false sometimes the computer won't let me type but anyways if that's the case that's false okay so yeah I would say for this case Cas we can keep and let's talk about a solution now I was trying to you know dissect the problem we have to find a way to keep the elements we have seen right because we know that we're going to basically skip everything that's empty but every time we find an element we want to check if that element belongs to something that we've seen either a column or a subbox in this case right so if that's the case you know if that seven belongs to one either this row right here this column or this box then we can immediately return false because you know it then meet the three conditions accordingly right so we're going to need a data structure to keep track of that the main thing here would be to remember that we're tracking uniqueness okay we only have to worry about nine elements for every time we check which makes it easy to we use something like a set because we would only have to keep track of nine unique elements from 1 to nine right and same thing for the subboxes the 3X3 obviously you know building this subbox here would be something we have to think about maybe using index division we can find that as we Traverse that array I want to check the constraints because okay the length of the board is going to be equal to 9 so yeah as we said here earlier these are nine boxes here you know three here three and three okay that's the length of that box or every array we see or or 2D array and the length of the every element inside of it's also you know equal to 9 so all the way up to 9 from zero or from 1 to 9 so also the board at that I and J and see that's a little hint right there that is telling us we're going to have to explore oops I didn't want to zoom in there we're going to have to explore I's and JS to find either digits or dots okay but the reason I think this is a little hint that is giving us right here is the fact that we're going to have to iterate over rows and columns okay so cool let's see the step by step of the code I'm going I'm going to go ahead and close this right now and proceed with the steps for the code the first thing we probably need to do here create and now let's go ahead and start building our solution I'm going to expand this a little bit we don't need that description anymore we can reference our graphic down here so the first step we need to do here it's initialize our data structure to store the numbers we've seen for every column every row and every 3x3 squar we already said that sets are efficient data structors for this because it would help us keep uniqueness another good thing about sets is the fact that we could do checks right existing checks very Rapid or very quick so since we already know we're going to use the sets another good way to keep track of the numbers is to use a default dictionary we don't have to import it here since we are in ide all these things have been imported for us already at least the collections model but we're going to create a default dictionary from the collections model and we're going to try to access every row and column and a good thing about that is the fact that if we find an element that is not present in our dictionary theault dictionary would automatically add it to that data structure so the way we're going to do that is we're going to say columns equal default dictionary and within we're going to create a set this is what's going to keep track of the columns and inside of that dictionary we're going to have a set of unique numbers okay so the way we can imagine this data structure is the following so it's going to look like a dictionary in Python and the key is going to basically be an index from 0 to 8 okay and this is what's going to represent the index of that column and that's going to be the key of that dictionary the value now it's going to be numbers between one and N okay because this way we're going to know at which index we saw the number so for instance let's say here we're going to have two as our index and here we're going to have any number from 1 to 9 so it could be five right so at that column at column number two we're going to see that we have number five if as we iterate through the same column we see that there's another five we could rapidly use in set check back here and see if that number exists within this column if that's the case we immediately return false now we have to do the same for rows also so it's basically the same process we're just going to say rows equal default dictionary and create a Seth within that dictionary and it looks going to look the same way as up here and finally we need to create our subbox or grid we're going to do that the same way we're going to say box equal default dictionary creates a set okay so same thing here now now we have an index for columns rows and box and we're also going to have the numbers we've seen within that particular area of the grid okay so we initialize our data structure so the next thing we're going to do is iterate through the board and check the index for the row and the index for the column the way we can accomplish that is through a nested loop as we mentioned before so we're going to do that now since we only need to etherate over nine elements we don't really need need to call any data structure here we don't need to iterate over the direct board because remember these elements all of them are divided by pairs of three right so when we multiply that we get nine elements so if we see here we have three elements three elements three elements that's nine for every column same thing for every row when we go horizontally so so as we have nine rows going horizontally here and nine columns going vertically here we also have nine rows and columns in here so for every case we're always going to be iterating over nine elements so we could say that for r that it's going to represent our rows in the range of nine let's go ahead and also check the columns remember we're going to have to check rows and columns these and a little thing here that would lead to that is the fact that we're dealing with a 2d array right an array of array so the first iteration is going to determine which one of these arrays in here we're going to be checking the inner loop is going to be inside of those arrays particularly checking or looking for those numbers and that's why we need these two indices or indexes to check for these values so now we're going to say four columns same nine here great so now that we Loop through every single cell row by row column by column let's say we're going to start at column and row 0 0 which would be this one up here okay and then as we move forward we're going to be iterating one by one with this Loop now we can start to check if the values in these boxes are either a number or a empty box and here to make things easier we're just going to grab the value of that current cell and I'm going to add that here as a comment get the value of the current cell and we can now create a variable here named current value which is going to be equal to whatever number we have at that point in our board at that particular row at that particular column index okay and here we're simply just Gra having the current value that we are iterating on with this then we can start doing our check great so here now we're going to check if the cell is empty if it is we're going to skip and move into the next cell because we're looking for numbers if it's not empty then perfectly we'll stop there and check for that number so if that current value which just created it's equal to a DOT and a DOT is represented here between quote marks so it's a string so we got to make sure we are comparing that to a string okay so this is how we're going to do that equals dot so if that's the case then we know that cell is empty and we can simply say continue into the next cell basically an empty cell doesn't violate any of the previous rules we're checking against so these three right here so that's the reason why we could move forward in this case so now at this point we need to check for duplicates okay we're checking rows and columns but how are we going to build this subbox right here this grid how we're going to create that so the way we're going to calculate that as we mentioned earlier and I'm just going to jump into the graphic on the right side here real quick is the following we know we have this rows and columns indexes we're iterating over so we have these rows right here 0 1 and two and you know python 0 Z base index we have 0 1 and two I'm going to move these up here uh maybe next time and then 0 1 and two for my columns okay and these is the way we're going to find the coordinates for which the index we're iterating on okay so to make that clear we're going to say here basically R is going to be divided or floor division by three okay because we want to deal with integers whole numbers not floating points so R / 3 is going to say I don't know at this point let's say we're in row one so right here these row right here so that's equal to one and now we need to find the column we're going to do the same thing for the column so the column is going to be floor division 3 equals let's say 2 okay so if these are their coordinates you know index one for my row and index two for my row then I'm you know checking here these are my rows so I'm in one so right here and then two so I would be here this is empty at this point okay so our iteration down here would skip that coordinate okay but that is how we're going to build that basically okay so I'm going to say here for my box index and I'm just going to call it like that that's going to be equal to my index Road and we said floor division because we want to deal with full integers by three and then we also have to do the same thing for column as we mentioned floor division by three and this right here see how this is a set okay we're putting it into parentheses so you know the resulting index here would go and form our set here which is going to be you know part of our dictionary telling us remember when I was explaining this is going to be the number we're looking for great so at the Box IND this we need obviously both indices to create our box great so guys I just realized that my camera died in the middle of the recording so I'm just going to proceed to finish the problem you're just not going to see my floating head on the screen anymore over here I guess my camera was a little battery low so anyways we're going to continue so great so now that we have that index where the 3X3 Square it's going to belong we're going to see which square of any one of these that particular row and column index are going to be okay so from there I can start checking for duplicates and here we're going to check for the duplicates and the way we're going to do that is basically with a nested condition in Python and what I mean by that is we're going to say if and I'm going to open parentheses here click enter and within this check statement I'm going to drop all my condition the first thing I need to check if it's my current value is within my rows at that particular row that's the first check I need to check if that current value we computed up here it's already part of my rows in here okay the next thing it's basically the same thing but for columns okay so I'm going to say my current value in columns at that particular column okay and finally I need to check my current cell so I'm GNA say if my current value is in my box at that particular box index I calculated up here okay so I'm just going to paste that there and here we're performing our check in our three hashmaps okay if that current value is in our rows at that particular row or that column at that particular column or that box at that particular index if is in there then we can return false because we're for uniqueness and if it finds it then it means it's not a unique number okay so great till that point we check for all the duplicates within our data structures here I'm missing something though and I don't want to insert box on my code but basically I have to do you know semic have but basically I have to do column there obviously to create the indentation and here I'm going to click tab okay good thing that leco has is that you can format your code here if you need to so you make sure you're not making any mistakes now notice that this for an interview is not it's not an option you're not going to be on an ID like this but know that you can have that there so besides that I think we check for all duplicates here now if not duplicate was found we need to add that to our data structure so in the following check once we go to the whole thing if it doesn't find our number in either of these data structures then we have to add it as a seen number we have already seen that number so that's going to be done like this columns at that particular column we're going to add it with do add and it's that current value perfect so we're going to do the same thing for that particular row add that current value great lastly we need to add the same thing for buckss or our upgrade at that particular bux index we calculated up there add that current value also perfect great so if we go through the whole Loop we check and add all the numbers and none of them are duplicate then we can safely get out of these four Loops here that's the four loops and return false cuz basically sorry and return through because that basically is going to say that our board was valid okay so notice how these three conditions or checks I'm doing here exactly match my three given conditions here okay and that is basically where the magic happens also you know if we find the number we return false if not this is something that it's very important too the fact that we are adding the numbers if the Not Duplicate was found and I'm going to add that comment that too to make sure we keep that organized and finally down here we can say that the board is Bid great so I think up to this point we are done with our code we can submit and see if we get that job at Microsoft and we did not as a top one here 5.87 Solutions 5 milliseconds of round time I normally like to go back here and check but these guys are submitting that's pretty cool there okay sweet anyways this would be enough for us and yeah this was day 24 we' H we had some hiccups we lost the camera in the middle of the recording but that didn't stop us from finishing our code and completing it so so yeah thanks so much if you found value in this video please subscribe thumbs up I really appreciate it and I'll see you in the next one