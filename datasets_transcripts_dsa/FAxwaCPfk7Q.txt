[Music] what is going on guys welcome to the algorithms and data structures tutorial series in today's episode we're going to talk about what data structures actually are and why they're important and also why they're interconnected with algorithms so let us get right into it so let us talk about the first question which is what is a data structure now data structure is essentially just a way or a format for accessing storing managing organizing or as the name suggests structuring data or information for example from programming you already know what an array is an array is just a collection that has a fixed size for example here we have an array of size 6 and an equals 6 and this array has certain elements for example a b c d e and f and this array the array is a data structure so the array okay ugly a again array data structure now this data structure has certain advantages and disadvantages for example an advantage is that i can access each element without going through all the other elements so what i can do in order to access uh this element here is i just say i want to access index 4 i think it is 0 1 2 3 4 5 yes i just say i want to access index 4 and i can access e without a problem i don't need to go through a b c d to reach e i can just go ahead and say i want index four and i get it directly uh this is called i can access e in constant time we're going to talk about runtime complexity in a future episode as i already said but this would be an example of constant time i just say i want to get to index four and i get to index four it's not not hard i don't have to iterate over uh all the elements that come before e uh disadvantage here would be that i would uh i'm not able to just go ahead and and append a new element and increase the size of the list i'm not just able to say okay let's change n to seven here and uh let's increase the size of the array it's not possible with an ordinary array i cannot just say okay i have a new index here and let me enter a g here this is not possible with an ordinary array and this is the reason why we have different data structures depending on what you need on what you prefer you have to choose a certain data structure that fits your goals and in this video i'm not going to talk too much about the different data structures we're not going to explain the different data structures because the data structures will be explained in detail in separate videos but i'm going to introduce to you today the concept of a linked list just so you see uh roughly speaking we're going to talk about linked lists in detail um as well but today i'm going to just give you a rough explanation of what a linked list is so that you can see why we use different data structures and what a linked list essentially is it's just a list that's composed of notes and the notes have values for example this could be a and each note has a pointer to the next note so again i'm not going to explain too much detail just roughly speaking you have a value and a pointer to a next value or to a next node that again contains a value and points to a next note and this contains a value points to an x note so having that structure allows you of course uh and the last element points just to nothing to null so to say so this structure allows you a dynamic to have a dynamic size so what you do here in order to add a new element is you just say okay remove this null pointer here and just let it point to another note you just have to create another note and this note then points to null of course um [Music] i think the camera is maybe blocking the view here um abcde and then to null it's very easy to just remove elements or uh insert new elements it's not a a static size here you can just go ahead and add new elements you don't have to add them in the end you can also go ahead and just say okay i want to have a z here and this z points to a it's not a problem you can also just go ahead and enter a new element i don't know x here and let b point to x and x point to c whatever you want to do and then of course you have to remove uh you have to remove this connection here and essentially this is what you can do with a linked list so you have the benefit of a dynamic sizing however if you want to access the element c for example it's not that easy you cannot just go ahead and say i want to access this element here with index 0 1 2 3 4. it's not just as simple as it is with an array and that's disadvantage of a linked list because what you would have to do here is you would have to go if you wanna in access index four what you do is you start here and you count okay this is index zero then go one step further this is index one go one step further this is index two three and four now we're here so in order to access index number four you have to go through zero one two and three in order to access four this is the diff uh the the disadvantage of a linked list again the focus here is not on linked lists or arrays the focus is on understanding why we need different data structures why it's not enough to just have the same data structure over and over again for example if you want to search if you want to have an efficient search you want to have a binary search tree for example you have different data structures for different purposes now you might be asking where is the interconnection between algorithms and data structures why are these topics always taught together why are they not taught separately why do we not have a tutorial series on algorithms and then one on data structures separately why are they interconnected and the answer is because you need both of those in both ways so data structures need algorithms and algorithms use data structures it's just they are deeply interconnected so for example let's take the example of a linked list whatever you do with a linked list you have some values here a points to b and b points to c and so on whatever you want to do here this demands algorithms so if you want to find an element if you want to access an element if you want to add an element these operations are not just adding it's not just adding a new element inserting a new element behind the inserting a new element there is a set of instructions an algorithm essentially so if i decide that i want to create a new um a new node here x and i want to add it right in here what do i do i first of all delete the connection from b to c i let b point to x and i let x point to c again don't get too confused about linked lists we're not teaching linked lists yet i'm just showing you that algorithms are necessary here because inserting a new element into a linked list needs a set of instructions that is different from a set of instructions that is needed for a binary tree or in or an array so it's a very different thing adding a list uh adding an element to a linked list and adding an element to an array and it's the same for finding an element in a linked list as we already talked uh talked about it you need to go through all the notes until your region notes so the algorithm is next count up next increase the counter next increase the counter and so on whereas an array in an array you just go ahead and say access this memory location so it's different runtime complexity it's a different efficiency accessing an element or adding an element removing an element from an array then it is from a binary tree than it is from from a linked list this is this way so data structures need algorithms but algorithms also need data structures if you want to solve a problem you will need to make use of data structures and depending on the problem you're going to need different data structures sometimes you might have a queue of items that need to be processed by an algorithm so you might use a stack again if you don't know what a stack is don't get confused we're not talking about the data structures yet but the stack is essentially you know you add items you get items in the in a queue sort of way in a queue-like way so you just um push some items onto the stack then you pop them out of the stack and then you process them and if you have a certain algorithm that needs to do to process elements in in that way in in a so-called last in first out or a first-in first-out kind of way you're going to use a stack as a data structure to help as the data structure that your algorithm uses to solve a problem so algorithms need to make use of data structures and data structures all the operations inside of data structures are based on algorithm on a set of instructions so that's it for today's video i hope you learned something i hope you enjoyed it it was a pretty short episode just explaining the interconnection between algorithms and data structures because a lot of people are confused in the beginning why these two topics are taught together now you should know it now you should have an intuition as to why this is the case again if you like this video if you learned something hit the like button leave some comments in the comment section down below and subscribe to this channel for more future content for free other than that thank you very much for watching see you in the next video and bye [Music] you