in this video we are going to solve a very famous machine coding round of interview problem that is nested checkboxes Okay So you know I was going through the comments on my previous video and you know there a student commented that we want a solution for this nested checkboxes problem Okay This was the question he wrote Uh this checkboxes can be nested at any number of levels and there are functionalities that we have to build So what I'm trying to say is if you comment down under my videos then I pick up pick up problems and solve it in my upcoming videos So if you have any problem that you want me to solve in upcoming videos then please write down the comment comment down a question or whatever you are stuck in I would love to solve that in upcoming videos Now we will understand this question a little bit more in detail but let me walk you through a LinkedIn post Okay So I was going through LinkedIn and there was a guy Anul Agarwal from SD2 at Uber He said that this problem has been this same problem has been asked in Amazon and Flipkart and you know when he was working in Dshaw he also figured face similar kind of a challenge Okay he had to develop this feature So basically this is a very famous problem I think and this is a hard problem also When I say this is a hard problem let me tell you my dear friends that this problem requires your React skills plus your data structure skills also Basically three data structures is you know if you have worked with three data structures it would become easy for you If you are good with recursion it would be easy for you If you are not good with recursion and trees react plus data structure knowledge If you are not good with React or data structure or trees or recursion then you would face a lot of problems while solving it I would suggest you to pause this video over here and solve this problem yourself Try it out and come back and then see how I am solving it That's a best way to solve U let me now solve it Let me first of all explain this problem statement to you Then we will move ahead and solve the problem And let me before I am you know solving any problem let me also tell you uh whatever approach I might take in solving this problem or any other problem is just the one solution you know every question can have multiple solutions multiple ways of solving it So you know whatever I solve in my videos is what is coming to my head at that point of time So that is what I am writing in code So uh that can differ right so your solution can be different my solution can be different So you know try to solve it yourself Uh but you know I have seen some people giving me hate in the comments that ash you are not solving this way you are solving that way So you know that's what I'm telling you that everybody can have their own different solution for the same problem Okay So I will solve it by whatever is coming to my head Okay And then uh let's go ahead and solve it up Now let me just show you this question If you watch the video there are three problem statements three tasks that you have to do So you are given a configuration a sample data and then you have to form a you know generate a recursively nested structure based on given configuration Okay So uh this is the demo which is there So I opened this link over here Right so basically uh you have to develop this kind of a scenario Okay I have zoomed it out uh for you all So basically this kind of a structure with checkboxes we have to develop where if you check right see now what you have to develop is this kind of a structure out of the data Now suppose if you are checking the parent suppose if I'm checking this parent see child three is parent of child four and child five See if I'm checking the parent all the children should also be checked If I'm checking the parent all the children and nested children should also be checked If I'm checking the top parent all the children and all the nested checkbox will be checked This is the this is the second thing First you have to render this Second step is this The third the third the third follow-up question that will be asked by interview is suppose if you are checking the children if you have selected all the children then your parent should also be checked Okay So suppose if you have checked all the children your parent should automatically be checked Suppose if you have checked all the children so parent should automatically be checked right So this is a thing and it should work partially impartially something like that See if I am now you know if I am unchecking this child five So all the parents have gone now So something this kind of a behavior that we have to build Now let's go to code sandbox Now this code sandbox is a new code sandbox that I have opened up in react Okay So you can try it out here Why I choose code sandbox is because most of the time in your interviews you are uh asked to solve it on code sandbox or some similar kind of a environment So always be whenever you are practicing for machine coding round of interviews practice it on code sandbox That's the best way to practice Okay So uh that's a good suggestion for you all Uh let me close this sidebar for now We will write code over here So uh and you know I have taken a dummy data for you all uh something very similar to this right we have parent children nested kind of a thing So uh your interviewer can give you this data or you or the interviewer can ask you that build your own data right so something similar would be the data So this is a array of objects each object represents a node When I say a node that means this is one node this is one node So each of these you know this is kind of a tree data structure for people who don't know much about trees and recursion and all that stuff please read that out that would be very helpful for you all So this is how you build a tree kind of a thing So here you have a array of objects each object represents a node and each node has a ID and a name uh and a children right So there can be children properties there cannot be children properties So see uh there is a node fruits and fruits have children citrus and berries Now citrus can have children orange and lemon Now orange and lemon does not have any children but if you wish to give it then there can be childrens over here as well Right but I'm not adding any childrens over here So this is the data Now we have to kind of build this kind of a structure So let's build it up Right uh for that let me write some react code over here So let's build it up over here First thing that is you know see I have not solved this problem beforehand Just before shooting this video I have just made this data so that it does not take a lot of time It's not a time waste for you all and me like I am boring you with forming data and all So uh let's solve it together by seeing this data What is coming to my mind is whenever there is a tree data structure and I want to render something like this I'll have to use recursion recursion is must over here you have to loop through each of these and render it onto the page right so that's what we have to do whenever there is a recursion uh you have to think in an individual node level okay so uh you have to see that how you would render this tree this tree this sub node and then there are child nodes there are parent nodes How would you handle that let me just show it to you how right so let's create a component This is a child component This will be recursed Basically recursion means you are calling that component within itself right that's what is known as recursion kind of a uh problem right so this is how you do recursion Let me just show it to you So I am building checkboxes or I would say checkbox right uh basically uh over here checkboxes Okay So checkboxes is a component Let me make it as an arrow component Uh okay So see I might run into issues I am just solving it right now So bear with me Uh I will also communicate my thought process while I'm solving it Okay So it has checkboxes Now checkboxes in an arrow component Uh what we'll do now is we will pass all this data to checkboxes Right Now we will pass this data This is an array Okay So this is an array and for each object we need to build this kind of a checkbox right so how would you do first of all we will pass some data over here right we'll get some data Now with this data I need to return some piece of JSX over here right so let me return a div In this div what I'll do is I'll just maybe map through this data because this is an array right so we'll keep checking this is an array and over here we have objects right so array and then we have objects Let me close the children so that it's much visible See this is an array and there are three objects over here See this three objects So we need to basically write a map over here Right how would we write data dot map right now this will map through all these Right and now we will basically uh what we'll do is in the map function we will create these nodes How would you create these nodes uh data map for each node what I'll do is for each node just see what I'm writing how I am writing what is coming into my head I am creating a div right for each node I'm creating a div Now inside this div I will create my checkboxes right So what would a checkbox be checkbox is kind of like a this checkbox plus this kind of a label or some text right So how would we create it i will create a input box input type checkbox input type checkbox So this will give me a checkbox over here And then I can have a span tag to add that label Right so either you can use a span tag you can use label tag also Whatever you wish to you can use Right span tag over here See in my span tag what I will do is I will just have to write see this is one node over here right so I'm mapping through this list now what is there this is the node and this node basically is this item this array so I would write node dotname right so I will write node dotname over here right and what I'll do is return div what's the problem over here right let Let me just see what is the problem Okay I think I have not closed it Uh okay So just give me a moment This map function and what I'll do is I'll just return my div over here right i think I have typed something wrong This happens Don't worry So div over here is closed What's the issue i think I'm not closing or opening things correctly over here So this is a div Inside my div I have data.m map I think I have putting this extra No no So I have my Just a moment Right over here I need to do data dot map See you know you should be fluent with writing this for each node What I'll do is I'll just return a div over here And this div should be closed Not sure what the issue is here div And then inside this div I can have my input box and span Not sure what the issue was over there Right So let me just remove this Cool Is it cool now I think the error is gone Now see first of all let's you know let's visualize if it looks good or not Let me just remove all of it This is my app component Over here I will call my checkboxes component and I will pass in data over here This data will be my checkboxes data This checkboxes data is the data that we need right uh cool So now as I render it so it it should have probably rendered right so it's not rendering We'll fix it up Don't worry So over here uh we have got data I think this should be like this Cool So now this has rendered because see I am pos pass passing it as a prop So I'll have to extract it using these brackets So now see fruits tropical and apple has been displayed Fruits tropical apple has been displayed Now for each of this node I also want to display children So basically now I want to display children How would I do that for that I will use recursion See what I'll do is I have passed this array over here See this I have passed this array over here and it has rendered all of it Now I will call the same checkboxes component over here I will call the same checkboxes component and over here in this data what I'll do I'll add children right I'll add node dot children array and this will render my children also right so this should render my children also node dot children am I writing it correctly node dot children okay so right and now I will only do this I will only do this when children are here right otherwise it will throw an error I will only do this when the children are there If the children are not there then it will give an error because node dot children not found So now do you see we have rendered all these fruits over here but it is looking very ugly right so how can I give it CSS to make it look something like this what we'll do is for each parent right I can see one more issue over here is whenever you are using map always make sure you are adding key over here right so first of all I have not added key so let me add node dot key over here and you know uh node dot id not key node do ID right and let's also open the console if there are some errors in the console we'll fix it right so let me refresh it let's see if there are some errors over here in console See there are no errors in console So if there are some errors we'll keep fixing it also side by side Okay So now we have got this key What we will do now is we want to add some CSS to make it look better How would I make it look better first of all for each of this parent node right this is the parent node right let me give it the name parent node What I'll do is I'll just shift it to the left a little bit of left So parent node and then let me go back to my style How would I Oh my god I have closed this up Let me open it Style dot CSS over here First of all let's remove this center I don't want it to be in center And then I want my parent node to have my padding of padding of 20 Padding left of 20 right and this will make it look better I guess right let's experiment Cool This looks better isn't it isn't it is it look is it looking cool right So we have fruits inside fruits We have citrus We have orange lemon we have berries strawberry strawberry blueberry tropical mango banana and then we have apple and something like that Right so we have added this CSS Let's go back Now let's go to the next thing Uh see over here we have input type checkbox right so we have basically finished the first thing right we have basically finished the first task over here generate recursively Now we'll move on to the second task The second task is if we are clicking on child it should select both of these children Right it should select both of these children also If we are checking this it should select both of these So how would we develop it first of all we will have to think about state management What is coming to my mind over here is first thing is that we need a central place to maintain you know we need a central place where we can maintain the uh uh you know uh basically the ids of um uh ids of or maybe a list where I can find out whether lemon is selected or not We need a place where we need to know right whether orange is selected or not We need a state variable where we need to know which item which node is selected and which node is not checked checked or selected whatsoever you may call it as so and I need to do it in a central position right so if I do it over here the major mistake I have seen a lot of people making is they don't know where to create state variables so what I am what is coming to my mind over here is that we will not maintain state of each checkbox over here right I will not use a new state over here Instead I will make a central state And to make a central state I will make it in app maybe Right so basically I will create maybe a state variable Uh and I will create a state variable How do you create it in React you use state and then we give a default Right so now how to store the state whether which one is active and which one is not active So basically you can keep it in a very simple object kind of a structure right so object something like this right So suppose if object and then you can do something like this Suppose ID and then true or false right so suppose if I say if my uh if my id is selected if my fruits is selected that means ID that means one is true right something like this right and then suppose if my second is selected then I can say ID2 and then true or false right if it is false that means not selected something like this right so we can maintain something like this right So uh and then we can call this as uh maybe let's say checked data or something checked checked array or checked objects just checked Okay let's call this as set checked Okay Now what we'll do is now we need to pass this checked data inside my checkboxes also In fact we need to pass both of them right because we might have to modify also So we pass both of them So basically checked is equals to checked We'll pass this as a prop checked and then set checked is equals to set checked Okay So we'll pass both of these things as a prop People who are not understanding all of this If you are not good with react he will not understand This is what I'm doing is I am passing this as a prop So this is a state which I'm maintaining on parent I am passing this props This is known as props drilling I'm drilling these props into my child component Okay So people who are not good at react I would suggest you to go check out Namaste React If you are not good at react if you want to brush up your react skills in namaste react course in namaste react series I have you know uh taught react in deep everything very small things like how do you maintain state how do you use use effect uh we have and you you know I have started from scratch and taught advanced concepts in React how to scale your application how to use redu uh redux store how do you you know uh write Tailwind CSS There are a lot of things that I have covered over there Performance optimization how can you make an application faster so many things I'm just plugging a small promotion of namaste react because why not it's a very amazing course I have put my heart and soul into building Namaste React So I would obviously recommend you all please go and check that out If you are not good with React skills people who are good with React skills then you already know what I'm doing over here So here I am passing these checked and set checked checked and set checked over here So this checked gives me which of these items are checked Right so basically uh suppose this item one is true That means my uh item one should be ticked Right so how would I do that so in your input box there is a variable checked Right and over here I will need to add when should that data be checked So basically what I'll do is I'll get it checked of my node do ID right uh so what I'll do is suppose if my node of ID that means suppose if my node of one is true that means this this input box should be checked and if but see this now what about the others there is no two id 2 ID3 ID 11 so what should be done right for others right suppose if the data is not present inside checked for others just do it false right basically all the others are false right they are not checked So what's the issue over here reading two cannot read properties undefined of two Why it is happening because see checked and node ID false Why it is throwing error because see I have passed this data over here checked and said checked but I have not passed it over here in this recursion Right so you should be good at finding out errors otherwise you know uh things will be messy for you Right otherwise it will take a lot of time for you You provided a checked prop to a form field without a onchange handler We will add onchange also Don't worry Don't worry my dear friends Okay So see now my first ID is true Suppose if I make my apple suppose if I want my apple to be also checked So what I'll do is 11 equals to true So my apple should also be checked Right see this apple is also checked now So similarly this is how I will store data Now let me just make it empty for now Right uh everything is non-checked Now let us write code for suppose if I am clicking on lemon So now see it is not doing anything Right so if I click on lemon so my checked should be updated right I want this to be a controlled component Okay So uh if I am clicking on lemon so my checked should be updated So how will you do again the same error which is coming up I have this checked but I don't have onchange So let's add on change So basically on change will event will emit an event and this event let's call a function handle change over here and pass an event over here Let's pass an event over here Okay So this is my handle change function So over here I will handle my change operation Right so handle change handle change function So what I'll have to do is I took this event over here Right now I want to basically you know now I want to check that item How would I check that item i will have to set checked Right Basically I will have to update this checked variable How would I update it i will do set checked Uh and then now for people who know React this set checked will take a previous state Basically this will give me a previous state of this checked variable And then you can update whatever you return over here will be the new state Right whatever you will return over here will be the new state So basically what I can do over here is I can say that okay so my uh you know over here I can say see this previous right now will be empty object Right this previous right now will be this empty object Basic state right this previous would be right now empty object But suppose if I have one and true over here right suppose if I have one and true over here So what I have to do is I have to suppose I'm ticking on lemon right so sorry my bad the code is broken that's why So suppose if I'm I want to click on lemon So my lemon should be updated without changing fruits So what I will do over here is I will first of all create a copy of my uh you know checked variable right basically what I'll do is I will create a copy of this checked right basically or previous state How would you do that you can say new state right new state or new checked Let's call this as new checked or new state right So in my new state what I will do is let's write new state That uh sounds better In my new states what I will do i will copy the previous state I will copy the previous state Now what I'll do is I will add the Now I will add the current state So see previous state this will be added one true will always be there and then over here I will add a you know I will have to add where which one I want to check Suppose the handle handle change is sending me E I will also send a id right from here which will be node do ID right so this id basically suppose if I'm clicking on lemon so it will send me the id of lemon So my handle change will basically take e and then id and what I can do now is I will set this id to true over here or not true basically e.target dot checked Okay so if you do e.target checked it will tell you what exactly it is right and then over here I will return the new state when you return the new state from here So it will update your pre m main state right it will update your main state that's how the set functions work in react now suppose see let me just check lemon if I check lemon see this now you can check lemon orange and something and now let me just refresh the page right so let me just first of all remove this right let me remove this let's make it empty for now or let's keep it uh and let me also do a console log of checked state right and let's see how this checked behave and we'll see if everything is working fine or not See this initially my you know I'm not sure if you are able to see this or not Can I zoom it no I cannot zoom it more So sorry for that So see one is true one is true means fruits is true Now suppose if I'm clicking on lemon if I click on lemon see this one is true fruits is true and my four is true Four is lemon If I click on orange then then it will be three is true See this one is true three is true four is true So now it is basically my checked variable is maintaining it properly Suppose if I uncheck lemon So it says that one is true three is true four is false Got it so this is how we can make it a controlled component Okay this is what we wanted Now we have basically implemented it Now let's implement a tough scenario This is the you know basic problem statement If you reach till this point interviewer can give you a little bit of brownie points not brownie points it can give you a easy this is a easy problem to solve just rendering it The tough problem starts from here right the tough problem starts from here Suppose if I click on citrus suppose if I click on citrus so my orange and lemon should also be checked This is tough to implement For this you need to know recursion plus a little bit of tree traversal Okay So we will see this very shortly Let's implement it Okay So see basic thing that you have to understand my dear friends is suppose if I am checking the parent over here So I need to take care of all the children So what I'm doing is whenever I am clicking on any parent over here Suppose I am clicking on this node ID Right basically this is the node ID Now what I want is I want to basically uh see this is the node and I'm clicking on this node ID So what I want is all the children should also be checked So what I'll do is whenever you are clicking on any item if that item has children so basically see whenever I am handling any change right whenever this input box is changed so if children are there if children are there then check children's also okay so whenever you are setting the checked over here so basically what I have to do is if children are present Check them all Check them all What do you mean by check them all add all of them to new state Add all of them to new state Right This is what it means So this is a this is the logic that we have to write So how would I write this logic for people who understand it can quickly write it All right Uh let me just show you how to write that logic For this also we will need recursion Okay So basically let me write a recursive function What I'll do is I am on the current node Suppose that node is you know let me refresh the page Okay we have error over here But we need to write update children right so update children This update children function will take that particular node right that particular node and it will check and it will update the children also right it will update the children also Okay So how will we get the node also so suppose if I'm clicking on citrus So I need this node first of all Right so how will we need this node so over here instead of passing node do ID we can directly pass in node Right so instead of passing node do ID I can directly pass in node Right so I can pass the full node and here I can write node do ID Okay So this is a slight modification I'm doing Instead of passing the ID I can just pass in node do ID Right and in fact we can also you know we can directly pass in E.target target target dot checked from here right why I'm doing so it makes my function cleaner right so over here I'm passing see whenever I'm calling handle change think it like that it is telling me whether I should check or uncheck and then which node should I check or uncheck right so uh over here let me get is checked should I check it is checked is checked so see nomenclature is also important interviewers look for that I want to see whenever I'm changing something I want to check is checked is it true or false and which node I want to check right so if if that checked and then I can put pass in over here so it will behave the same way right uh orange orange citrus citrus fruits fruits now see now let me uh you know let me remove this default behavior and let me show you one thing right how will my checked variable behave right so see now My checked is empty This checked state is empty for now Whenever I am clicking on citrus it is saying to true right it is saying two is true That means citrus is true But I if my children is present So I want to update my children also How will I update my children i will pass in node I will loop through all these childrens So I will do node Basically see if I'm clicking on this citrus I will loop through all the children of citrus children right so basically what are the children of citrus children of citrus are orange and lemon and I will do a for each for each of my children for each child what I will do for each child what I will do I want to add that to my new state also right how would I add that to my new state so basically my new state of my child do id child do id right of my child do id will become is checked will become is checked right so if I if checked is the state so whenever my node is called so my is checked will be called right so basically it will update my children now I have I have not called this function update fun update children I will call this function update children and then I will you know uh I will call it with node right I will call it with node I have called this function now so now let us just see the behavior okay so if I'm checking citrus it will check my orange and lemon amazing right so if I uncheck my citrus orange and lemon are gone if I check my citrus orange and lemon are doing good right so we have implemented it good but there is a bug in our problem that suppose if I check my fruits it is just checking citrus and berries it is not checking orange and lemon Why because we have we have done the immediate childrens but not the children of children Basically your array is nested So you have to do it recursion over here also Right you have to do recursion over here also So what we'll do is whenever you are updating the children I have added the new state is checked over here also And for each children if the children right if that child suppose I'm taking fruit if that child also has child then update the children for that also right so basically what we'll do is if the children are present basically uh if my child if my child has its children right children just listen to me carefully see it is doing one level right now I want to check if this child See fruit is the node If my child has children if the childrens are present then what should you do call the update children right call the update children with the you know with that particular node with that particular child Okay So this is what you write So now update the children of children also Okay So this is recursion Take some moment and think about it that why it will work Uh just you know let me check it once like let me just refresh the page and see if it works or not See if I click on fruit See all of them are checked now See this all of them are checked now Right All the things are working If I checked on fruits everything is cool right okay Okay See it's failing Why because it's failing because it does not have children Right I think it's failing because it does not have children So basically if my children are so basically I will have to only update So because it's saying that uh suppose if it does not have children so basically this will throw an error right because for each will not be there So you have to fix it Now everything works fine Okay So uh this is my second problem statement I have done till here So see if you can do till here also in your interviewer interviewer might select you might not select you but over here till here you have to 100% do otherwise interviewer will not select you right if you are able to approach this problem right then see because see this problem is a little hard a lot of people don't understand recursion that's the problem you know and uh if you want me to make some videos on data structures and recursion and all that stuff on tree data structure structures because see this in this video I cannot explain recursion in depth to you right it will take some uh time to solve it and this video will become very long but if you want write it down in comments I will bring more videos on recursion maybe data structures or something even you know I was planning a course in data structures let me know if you want a course on data structures I would make a course on data structures where I'll cover everything right it's very important right very very important all the big companies right you already know them Amazon Flipkart Dshaw all of them Uber Microsoft Amazon everybody is good like they want people to have good data structure skills Okay So this is what you do You have basically updating the children and then you have to recurse it to update the children of children So something like this So uh now this is the second problem statement I have solved it Till here if you solve it If you are SD1 then probably you might be selected If you are a SD2 or senior senior software engineer you will not be selected till here Right you have to solve the third problem statement also The third one is if I suppose select lemon and orange my citrus should also be selected automatically Right so basically see this if I am selecting see if I'm selecting my child five child five child four child three is also selected right see this it is automatically selected right so if I am unchecking child five see all the parents are unselected So something like this right child four child five if I'm just checking all of them see this all the parents are selected something like this right so basically right now if suppose I was clicking on citrus if I was clicking on citrus my orange and lemon were selected if I'm unchecking it it is unchecking if I check lemon and orange my citrus should also be checked okay so this is what we need to build So how will we build that basically we'll have to update the state once again and you know this can be a little tricky A hacky solution is coming to my head but let me take a moment and think about it once So uh how we'll do that seriously right sometimes this is a little tricky for me as well I'm solving it right away So updating the childrens were straightforward But suppose if I'm checking the orange right so how would I know whether I should whether the lemon is because see this checkbox is see understand a very small thing that is coming to my head right now How this checkbox suppose if I am clicking on orange that means I am on that see this this checkbox component is for that orange it does not know about your outside environment It does not know whether your lemon is selected or not What is the parent so there are two solutions which are coming to my mind Either I can keep a track of parent right so I can keep a track of parent So I can pass in parent something like that that suppose if I'm checking on orange I also want to know what my parent node is That way I can solve it So basically whenever I am checking my orange I should also know what my parent is uh and then their parent and something like that I should know the data of hierarchy The second solution which is coming to my head is that whenever any item is getting checked over here suppose I I'm checking orange So just check for all the elements over here and check and check mark all the parent nodes which have all the children present So basically it's very tough for me to explain also as a teacher but wait for a while right uh let me just explain you uh what I'm trying to solve is whenever any whenever any item is checked whenever there is a onchange event that happens check on all my tree and you know if all children are checked check the parent basically mark the parent as checked mark the parent as checked basically this is what I want to do if all my children are checked mark the parent as checked suppose see if I'm clicking on citrus check for the whole tree if sorry if I am checking lemon check for the whole tree if any of the you know any of these uh so basically what it will do is it will check for fruits It will check for see what algorithm that I have to write is uh I will check for fruits I will go from the top one by one If I will check for fruits all the children are checked or not I will check for citrus is citrus checked is berries checked if and then uh once my so see for checking if all the children are checked basically all the immediate childrens that means citrus and berries are checked If citrus and berries are checked that means I have to mark fruits also as checked Okay And similarly if suppose my citrus is checked berries is not checked then I will not mark it Right so similarly uh if I am checking my fruit I have to check citrus If I have to check whether I should check citrus I will have to check for orange and lemon also So basically it's a tricky algorithm to write but it is a bottom up approach that we have to do So basically if in tree there is a top to bottom that we did over here This is kind of like a top to bottom approach but there is a bottom up approach that I want to follow I will check for uh each of these node whether all the children So I will basically see all the children are checked mark the parent as checked something like this right So basically I will write a function So I will write that function and let me call that function um as verify checked Right basically I will verify for the whole tree verify checked and this is a function right constant verify function and I will check over here for a particular verify checked for a particular node suppose I have got a node uh and let us assume this node over here is right let us assume that this node over here is fruits so what I have to do when I have to check if my right if my all the uh all the childrens are selected right so basically how would I check my childrens are selected uh are all uh how will I check my childrens are selected basically I will check for all children basically I will do children uh dot and then there is a function every right in JavaScript uh you have a function every so if every child is checked that means my node should also be checked Okay so this is what I'm doing If every child is checked how would I check whether the every child of this node is checked i will loop through all the children's every and I will check for each child If my child is checked how would I find out my child is checked or not to find child is checked or not I have to do something like this right so basically this is my state over here new state So I can just use my uh new state or previous state previous state of my child do id right Basically if my ch all the child are checked so what we have to do is uh that means all children checked right so basically it will give return me a boolean if all my children are checked So what will I do now right tell me if all my children are checked basically see I'm verifying checked if all my children are checked So what will I do is I will update my new state and I will say my new state of this particular node or the parent right of that node of ID node do ID right node do ID is equal to my is checked state right so if my is checked state right whatever is coming over here is checked I will just update my uh node dot ID right uh sorry no so basically it will be all children checked basically it will suppose see if all the children are checked so my all children checked will be true and my new state do ID will also be true something like this right and now what we'll do is but there is an issue with this uh thing right so and then see if I call this verify checked function if I call this verify checked function verify checked function right for a particular node right suppose if I want to call this verify checked function for this fruits how will I call it and basically I'll have to call it for each of these nodes so how will I check every time for all the nodes I can just you know uh suppose see I have this data right checkboxes data so I can just call it for checkboxes data of zero so that means this verify checked will be called for my fruits right but I want to call it for everything So I can just call this function in a loop So I can do something like this right checkboxes data dot for each right for each checkbox for each basically for each parent parent nodes I will just call this verify checked function Right for each node I will call my verify checked function For each node I will call this verify checked function Okay So what I'm doing is to initiate this function to initiate this function See right now we have an array over here right and I want to check for all the parents over here So what I'll do is I'll basically check boxes data for each for each of these nodes it will basically verify check for that particular node So now this will call verify checked function for fruits It will call verify checked function for tropical It will call verify check function for apple Similarly like that right will this will this solution work the answer is no It will not work because I know that and let's just see what happens if I check this It's it's just showing every right So basically there are problems with this solution A lot of problems that I can see First of all I am verifying this node right i am verifying this fruits I am verifying tropical apple But who will verify the children of this node so I'll also have to check for the children of this node Right so I'll have to check the children of this node So what I'll do is whenever I'm doing a children right so what I will do is I will just verify check my children also So over here I will do uh let me write the code up and let me see if that code works then only I will explain it So basically I will verify check my child over here and what I'll do is I have verify checked my child If my child is checked then select it and if suppose the child is not there if suppose the child is not there right if my child is not see and what I'll do is if and I will do is over here is I will just return my new state dot node code right return my all children checked and if my child is not present if my child if my node dot children suppose if my ch node does not have children right if suppose my node does not have children let me first complete the code then I will explain it to you if it works if my node does not have children then I'll have to give the present value of that node right So probably I will have to give it previous state of that particular node right node dot children right basically of that particular node do ID I'll have to return that so basically I'll have to return my previous node do id u and if my previous node do ID does not belong so I will return just false okay something like this uh let me just try it out I think this will work let me just check it once So I'm just looping over all the check boxes over here all the parent nodes and I'm checking the node right and what I want is if my if my node is see when I'm checking this recursively so I will reach a point where I am at lemon So lemon will not have any children If it does not have children then return me the value of this lemon Otherwise if the children are present then we'll have to check whether all children are checked This is the code to check for all children right if the all the children are checked then basically I want to check the current node And cool I think this should this should work Let me just refresh the page If I'm checking my lemon and orange it should have checked my citrus also No this does not work Let me just check it once So what I'm doing is I am just verify checked my node and then I'm just for each node if for each child I am just checking verifying check and all checked new status ID Okay I think this is what's happening Let me refresh the page If I'm checking lemon So what's happening it's adding lemon orange So citrus should also be checked So basically what should have happened is it should have just give me a moment Let me just check it Checkboxes dot for each See this is what happens I have not solved this problem before I am coming directly and solving it And probably I am running out of time also if I was in interview It's a I told you right it's a tricky problem checkboxes dot for each node uh for each checkboxes for each node I'm checking my verify checked as node if my particular node is present I will just check for all the childrens are checked or not if all the childrens are checked how will I check node dot children I'm writing this correctly or not let me just see this every every child I want to check for verify child right okay if My node children is not present If the node return previous Okay I think I'll have to put new state over here Let's see if this works Cool Do you see this do you see my dear friends so because see previous state is old state I want to check the current state the new state right so basically according to the new state see when I click on lemon right so I want the new state to be I want to read from the new state not the previous state because this uh previous state is the old state right I want to read from the new updated state okay so uh this is what it is got it the issue was here I think this will work now if I click on blueberry strawberry do you see this if I click on blueberry strawberry it automatically changes I think we have solved this problem cool right let's verify it once again for all the cases I rendered it correctly If I check my parent it is checking all the children If I check my parent it is checking all the children If I check my parent it is checking all the children If I am checking the children it is updating my parent If I'm checking my children it is updating my parent If I checking my children it is updating my parent Cool This is what the solution was My dear friends I know it's tricky I know that you are confused with this solution You might be confused but people who are good with DS or something might have got what I'm trying to do over here Let me explain this once again and let me refactor the code also for you all otherwise this solution works for me So what's happening is see I am trying to write a function over here They go what I'm trying to do this much you understood right if you did not understand this update children then go back to the video watch it once again this thing I am just ex I am just explaining you the logic for the third problem lemon orange parent should be checked okay so how will that happen so I am looping over the whole tree first thing is I am looping over see whenever you are checking something suppose if I'm checking on orange I am looping over fruits and I'm checking whether the citrus and berries are checked or not and then I am checking over orange and lemon are checked or not and I am using the bottom bottom up approach bottom up approach approach recursion right so basically I'm using the bottom up approach where is the tree something like this right so uh if you know this bottomup approach you would understand what I'm trying to do if you don't then please read it it will make more sense to you here I can explain see suppose if I want to check for my parent whether I should check my parent or not see What I'm trying to do with this code is let me try to explain you in a different scenario now right so it's very tough for me also to explain I if I had a paper and a pen or my uh you know drawing sheet I would have explained you a little better u okay so let me take some time and explain you also maybe let me just open my uh you know good notes good notes good notes okay so here I have my good notes Let me just bring it up over here for you all Just give me a moment Right So something like this Cool Here is my good notes Uh okay So what I'm trying to say is listen to me very carefully This video is going a little longer but see this is my tree right this is the parent and this is the tree And when I am making tree so understand that Okay just give me a moment understand when I'm saying fruits citrus orange lemon So fruits citrus and then these are orange and this has lemon Okay So what I'm trying to see so I want to check whether should I should I check this should I check this value right should I tick mark this I can only tick mark this when this is tick mark and this is tick mark to find out whether this is tick mark I want to check whether the this is tick mark or this is tick mark understood this is what I want to do so this is a recursion so first of all suppose if If I am doing over here suppose if I'm doing verify Okay So let me make it a color here So verify basically Okay I'll I want to change this color to white It's not visible I should have prepared before This is what happens when I just make the videos and I don't prepare it beforehand Random things happens right teaching is tough you know i can just randomly come and teach you It's a little tough but I'm trying out right Uh if I have planned before if I have solved this question before I would have explained you very easily right but suppose if I have this verified uh check sorry verify verify node right or verify checked Is this what the function is called yes verify checked So I want to check verify checked of my current node that is suppose fruits right if I check verify node of fruits So suppose if I want to check verify checked fruits I want to check I will have to call over here right I have to call verify checked of my citrus I want to check my verify I want to I I'll have to call sorry I'll have to call my verify checked off berries right and to check for citrus I will have to check for uh check for these children also so what What I'm doing over here is I'm trying to check this for each and every logic right so I want to check should I mark whenever I'm clicking on lemon right I have clicked on lemon so now fruit will check should I mark this as tick so to check this I will have to check should I mark citrus as checked if I have to check for citrus I'll have to check should I mark this citrus as checked I'll have to check whether the children are checked or not so similarly this is what we are trying to do suppose I want to check verify node for fruits right so I'll have to basically check for all children checked okay if all of these childrens are checked uh right and we have some children already so I'll have to check for their children first right and if all the children are checked and it returns me true so I'll update my true and I will return all childrens are checked okay so this is how it works So understand this maybe do a dry run for this you will understand it better So uh uh how will the call stack will be okay So let me show you the call stack if I can over here Can I show you call stack over here uh watch Can I show you call stack okay This is the call stack right yes Let me show you the call stack if it works Right Um this is not visible for you right uh how will I make it visible let me just put it over here Let me just show you the call stack over here So uh and I will just show you call stack of my verify checked Right where is my verify checked do you have verify checked over here oh my god This is code sandbox p js Okay I don't think I can can I run can I put a debugger either over here not paused okay it's not pausing on debugger also So see I'm not able to explain you over here but see let me explain you without that also See let us just think about citrus See if I'm checking citrus So I will check one by one whether I should check fruit or not How will I check fruit or not so it should basically check itself Right it it should basically check itself and its children Right so basically it's checking for all the children of that particular node Suppose if I am checking for citrus it will check for all these nodes right u and their children also so this is why I am doing this verify checked uh write it down yourself you will understand it trust me try to dry run it uh right now I'm not able to show you the call stack try to put a debugger over here right breakpoint over here and try to just see what comes into call stack how this is being called so you would understand the recursion kind of a thing right u uh this video will be very long if I try to explain you or something and I was not ready also The main aim of this video was to solve this problem I have solved it Uh it has taken a lot of time for me to explain it also Uh hope you would have liked this solution If you want me to explain this in a uh different video with a diagram then please comment it down I would love to explain you with diagram also I'll bring my notebook and pen right and then I will explain you by drawing some diagrams That will be very easier for me Data structures without pen and paper doesn't happen cannot explain it actually right so uh but this code is very easy uh if you try to wrap up your head you will understand it or you can you know even if I have to simplify it simplify it I can also write it something like this maybe this makes it more readable for you all uh you know something like this see what I'm trying to do I'm checking for my state so I will update my current node as tick if all the nodes are ticked and then I will return whatever the value will be whether it was checked or not checked right so this will also work somehow and then I will have to check for the base case of recursion this is kind of like a base case or I would say when children are not there this will end the uh basically this will end the recursion right so this is the base case hope this will also work I will give you the link of this uh you know I will give you the link of this uh code right uh if you want this code or maybe just watch this video try it out yourself and enjoy Right so but this is a hard problem A lot of people might not be able to solve this in an interview If you have if you are not well-versed or something but I want to suggest that if you're going in an interview please practice it before going to the interview If it comes in an interview then you might probably not be able to solve it in a particular time Okay So that's all in this video my dear friends And uh if you want more videos in machine coding round of interviews then please comment down each and every comment matters I read all my comments If you are liking this series please write a little bit about your experience Write please comment down If you comment YouTube will promote this video even more Please each and every comment matters Write down if you are liking it or not Tell me in comments I will read each and every comment Please if you have some suggestions for upcoming videos give it to me I'll make more videos on it And thank you so much for watching this video I know this video has become a very uh got very long but thank you for being patiently uh waiting for me to complete it Uh thanks for watching and see you in the next episode very soon Bye-bye