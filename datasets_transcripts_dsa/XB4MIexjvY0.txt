topic is dtra algorithm this algorithm is for single Source shortest path problem if a weighted graph is given then we have to find our shortest path from some starting vertex to all of the vertexes let us say I'm selecting starting vertex as one then I have to find out shortest path to all the vertexes maybe a direct path or via other vertices and I can select any one of the vertex as a source vertex as we have to find out a shortest path so it's a minimization problem and the minimization problem is an optimization problem so optimization problems can be solved using greedy method greedy method says that a problem should be solved in stages by taking one step at a time and considering one input at a time to get a optimal solution and in Greedy method there are predefined procedures and we follow that procedure to get a optimal solution so Dix algorithm gives a procedure for getting a optimal solution that is minimum result that is shortest part in this video I will show how a dixar algorithms works and the disra algorithm can work on a directed as well as non-directed graph and also I will show you the drawback of dixa algorithm let us see the approach of dixar algorithm for that I'll show you the base basic thing that is followed by dexra so for that first of all I'll take a very small example and show you to show the approach of Dix algorithm I have taken a very small graph here from this we will understand what is the approach of thra if I say one is the starting vertex and I want to find the shortest path to two as well as three so if you see from this graph there is a direct path to Vex 2 so its cost is 2 and there is no direct path to three so we don't know what is the path first of all we consider a direct Edge path but now if we follow this algorithm we'll be selecting first the shortest path vertex so this is shortest because this is two that is infinity so we'll select this one and Di says that once you have selected one of the shortest path then check via that vertex from that vertex there is any shortest path to other vertices so let us check who is connected to two so from two we can go three this is 2 + 4 that is 6 and right now it is infinity yes this Infinity can be changed to six this means that there is a shortest path from verx 1 to 3 of distance 6 no doubt it's not a direct path it's coming via two but there is a path that's how the Dix algorithm always select a Vertex with a short shortest path then it will update the shortest path to other vertices if possible and this updation is called as relaxation let me show you how this relaxation works for that I will call this vertex as U and this vertex as V and this is distance of U and this is distance of V initially it was Infinity now it is change to six and this is cost of an H from U to V so here relaxation means if the distance of vertex U + cost of an edge U comma V is less than distance of vertex V see here the distance of U was 2 and the cost of an edge was 4 and this was initially Infinity so this 2 + 4 is less than infinity yes so we have modified this to six so we'll modify this one that is distance of V is modified to distance of U Plus cost of an edge U comma V this what we followed and this is called as relaxation and we do relaxation for the vertices whenever we select a shortest path we will try to relax other vertices now let us follow this procedure and solve this graph problem to find the shortest path let me solve this graph problem for this I will select this vertex as the source vertex starting vertex s starting vertex now I will give the distances for all the vertices by considering just single edge so I will label the distances above those vertices only this distance is zero and this distance is two this distance is 4 from 1 to 4 there is no direct catch Infinity from 1 to 5 there is no direct Edge Infinity similarly six is also Infinity except two and three all are Infinity this is the initial thing that we should do for any graph now let us start the repeating steps now the steps will be repeating First Step select a shortest path out of 2 4 infinity infinity infinity this is smallest select this one once we selected this we should perform relaxation what is that check who are connected three and four are connected just check the distance of U that is 2 + 1 3 and this is 4 3 is less than 4 modify this then this is also connected 2 + 7 7 is this is N9 and this is infinity modify this nine that's all some vertices are relaxed they may or may not relax but we should check this one now second step now the step is repeating same thing I should do select the smallest one 3 Infinity 9 Infinity which one is the smallest shortest this one select this one now check if any vertex get relaxed so there is only one connected it's 3 + 3 6 this is infinity so change it now select the shortest out of what 6 9 Infinity which one is shortest this one select this one and see who are connected and try to relax them so 6 + 2 is 8 and is 9 so this is more smaller modifi it 6 + 5 is 11 this is infinity modified so two vertices are modified they are relaxed now who are remaining four and six who is minimum eight select this one and check if anything gets relaxed 8 + 1 is 9 it's already 11 modified so here I have taken an example most of the time the vertices are modifying their distances are modifying they may or may not modify now the last one is remaining is six so now we have the shortest part from starting vertex one to all the vertexes so what are the other vertices 2 3 4 5 and 6 what are the distances I got for 2 it is 2 and three it is three and four it is 8 five is six and 6 is 9 these are the distances of all the vertices and these are the set of vertices these are DVS and these are vertices so that's how a Tex algorithm works on a graph to find the shortest path let us little bit analyze and find out the time complexity of this algorithm if you analyze what it is doing it is finding shortest path to all the vertices how many vertices are there these are the vertices or we can also say n number of vertices so for all vertices it's finding shortest path while doing so what it is doing it is relaxing relaxing which vertexes when it is on three it is relaxed it has relaxed only five when it was on two it has relax only three and four so total how many veres it may be relaxing we don't know it depends on the graph okay at most how many vertices it may be relaxing all n vertices suppose two is connecting to all then it may be relaxing all of them it may be checking all of them so again it is V so it means n into n n for vertices and N vertices are relaxed so when it will happen that from two all are connected then again three all are connected that will be a complete graph in case of complete graph it will take n into n time and this will be n² so this is the worst case time of this algorithm maximum time it may be order of n² I can write it as Theta of v² or Theta of n² the worst case time and I can use Theta there once I know that function that is n² and it belongs to some class that is n sare class quadratic class so this is Theta of n² here I have a weighted directed graph commonly found in textbooks on this we will run the extra algorithm to solve single Source shortest spot problem so I will not be updating the distances upon the vertices itself but I will be writing them in the table so let us see how I can prepare this table so instead of writing there I'm writing here so initially I should find the direct Edge passs to all the vertices so for two it is 5 53 it is 45 likewise all the parts are given and one thing to mention here the starting vertex is one so in the graph you can see 1 to 2 50 1 to 3 45 1 to 4 10 1 to 5 no Edge 1 to six no Edge so 50 45 10 infinity infinity already given let us solve it the smallest vertex is four so I select vertex four so the selected vertex is four then once the vertex four is selected see from four five is connected so can we relax this one so four is is a 10 10 + 15 25 yes five can be modified and we got a path that is infinity so it is 25 now and this remains infinity and this is 10 which is already selected 45 and 50 they remains as it is now select the next smallest one so this one Vex 5 is selected so Vex 5 when it is selected there's an H to three and there's an H to two so if I take two how much is five 25 now so I did not mention here 25 + 20 45 and this distance is already 50 This Is 50 but now we have a shorter path V five that is 45 so modify this 45 and this is also 45 this 10 is selected 25 is selected this Still Remains Infinity now I have to select the next shortest one so I have 45 45 Infinity so I can pick up any one so I'll select the second vertex 2 once vertex 2 is selected from there the connected vertex is three so + 10 45 + 10 55 but already the distance to three is 45 so 45 + 10 will be 55 so this is smaller no change so this remains as it is 45 is already selected this remains 45 only 10 is selected 25 is selected and infinity now select next minimum so three three is selected now from three there's an edge coming towards five but five is already in the selected vertex don't check it if you check also it's of no use see 30 is how 3 is how much 45 45 + 30 will be uh 75 so already five is having its weight as distance as 25 so no use of ch it so nothing is relaxed and this is selected that's all so 45 selected 46 this also selected 10 selected 25 selected Infinity now who is remaining Infinity is remaining so six is also selected so the path to verx 6 has remained Infinity only because there is no incoming Ed on six so we cannot reach six the path to verx 6 is infin only this is how the extra algorithm works the extra algorithm can work on non-directed graph also suppose you have a graph simple example I will take here simple example I have taken here now how it works on this one so if you're not comfortable with non-directed edges you can convert them into directed by adding parallel edges so you can say this is three and this is also three now it becomes a directed graph so you can convert a non-directed graph to directed graph right so it can work on both directed well as non-directed graph now I will show you the drawback of dixa algorithm let us see the drawback of dixa algorithm for that I have taken a very simple graph and it is having a negative weighted Edge the weight of this Edge is negative so weight of an edge how it can be negative see it is not distance so distance is not not measured in POS negative right but any problem or any business problem we can represent it using graphs like usually when we want to explain something to our friend then what we do we just take a paper and draw something so what is that it looks like a graph only so most of the problems from Real World are mapped in the form of a graph so when you are representing something in the form of a graph it may have positive and negative values also so this is not exactly distance that is measured by tape but this is some value so those values can be negative also so actually drra has not considered that if there are negative edes then what we should do he has not considered let us see what happens if you follow his procedures on this one let us start if I say this is the starting vertex then the distance is zero the direct Edge path is three and the direct Edge path is five and there is no direct Edge path so this is infinity this is the initial setup of JRA now let us solve this one which one I should select the smallest one the shortest path is two select this one are there any connected vertices to this one so that I can relax no there is no outgoing adj just from to leave it next select the next smallest so five and infinity so five is smallest so select four if we select this four then will it relax any vertex yes the connected vertex is three so what is that part 5 + 2 7 so this is 7 now both are selected third one is remaining select that one also once this is selected shall we relax that one no no need already we learned that when already vertex is already relaxed no need to check it let us check it once 7 - 3 is 4 no already it is three so that's better so all the things are perfect the answer is perfect so this algorithm has worked even when there is a negative weight Edge now I'll make a small change I'll restart again I'll start over again and now I will make this Edge as minus 10 let's see what happens now I'm again finding the shortest part to all the vertices this is the source vertex so it is zero and this is three and this is five and there is no direct Edge path Infinity I'm performing this TR once again because I have changed an edge now let us see select the minimum one so two is minimum selected anything get modified no next minimum is this one anything get modified that's 5 + 2 is 7 modify this next minimum is this one and this is the last one shall I Rel that no it's already selected but let us check it once 7 - 10 - 3 now actually the path we found was three but now we realize that when we come along these vertices and reach here it is minus 3 so we were in a hurry to select the shortest path to vertex 2 and we select it as three it was wrong if you would have tried the other way we would have got the better answer so actual correct answer is minus 3 but distra has given us the wrong answer and also ask us not to check those vertices which are already relaxed we should not check them because no need to check you will not find any better answer but here we are finding a better answer the reason is we have a Negative Edge so Dix algorithm may work or may not work in case of negative edges that's all about single Source shortest spot problem and the approach was greedy you can see you can see the greediness here that see it is not trying all possibilities and selecting the minimum one it found that this minimum selected right this what the greedy approach so greedy approach has failed here when there are negative edges all right there's another solution for this single Source shortest paath problem that is bman Ford's algorithm we will see that in dynamic programming all right so next video will be on dynamic programming these are the topics I have covered from gry method leave your comment so that I can know how you are following the videos right if any suggestion just give me I'll try to implement them in my next videos