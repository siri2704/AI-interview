Bellman-Ford algorithm, A* algorithm and Floyd
Warshall algorithm. If you have never heard about any of these,
don’t worry about it. You see, I have interviewed at all these companies
and got offers from Google, Facebook, Amazon and some others. If there’s one thing I have learnt from
my experience, it’s this. You do not need to know every algorithm in
this world to crack coding interviews. In most interviews, they are asking you very
similar kinds of questions. And if you have heard of the 80-20 rule or
Pareto’s principle, you know that 20% of algorithms will be asked in 80% of the interviews. In this video, I will tell you the top 5 algorithms
I was asked in my interviews so that you can pick the top 20% algorithms by yourself. I will also share exact problems where these
algorithms can be applied. This video is going to be very information
dense. At number 5, we have the “top k elements”
algorithm. “top k elements” algorithm shows up in
many different problems. Finding k largest or smallest numbers in an
array or finding the k most frequent numbers in an array are some examples where you would
need to know this algorithm. It also shows up in some “Sliding Window”
problems. We will cover “sliding window” shortly. For the purpose of this video, let’s look
into finding k largest numbers in an array. Sorting the array and taking k largest elements
is one way of doing it but it’s not optimal because the big O of doing this would be nlogn. That’s why, in the “top k elements”
algorithm, we use a heap data structure to track top k largest numbers. Now if you don’t know what a heap is and
want me to make a video on the top 5 most asked Data structures, let me know in the
comments. For simplicity, just know that a heap makes
getting the maximum or minimum number very efficient. In the “top k elements” algorithm, we
add the first k numbers of the array on a heap. For every number after that, we put it on
the array and right after doing that, we remove the minimum number from the heap. This way, we maintain the heap size of K and
the heap always contains the largest K numbers we have seen so far. This step of adding and removing the number
from the heap has a big O of logK and we do this for every number of the array which is
n times. So, the big O of the “top k elements”
algorithm is nlog(K) instead of nlogn. At number 4, we have the “Sliding window”
algorithm. This algorithm shows up in many problems like
Largest Substring without repeating characters, Maximum Sum subarray of size k and Largest
substring with k distinct characters etc. Here, we will learn the “Sliding window”
algorithm using the Largest Substring without repeating 
characters problem. You can pause the video if you need some time
to understand the problem better. In the first step, we initialize two pointers:
left and right at the beginning of the array. Now, we increment the right pointer to expand
the window between left and right. As we do this, we store the information of
all the characters present inside the window. We keep incrementing the right pointer and
updating this information until we find a character that’s already present in the
window. We have reached the maximum window size because
the right index can not be part of this window due to the repeating character. So, we will update the answer and start shrinking
the window by incrementing the left pointer until the repeating character goes outside
the window. As we increment the left pointer, we will
remove the characters that are no longer there in the window from the stored information. Once the left pointer reaches its final state,
we start incrementing the right pointer again to expand the window and repeat this process. To help you understand this algorithm better,
I will provide the link to this code in the description. At number 3, we have Backtracking. In Backtracking, we explore all possible solutions
by building them step by step. When we reach an invalid state, we backtrack
or go back and start exploring other possible solutions. Backtracking is usually implemented using
recursion. I know that none of this makes sense right
now. So, let’s understand backtracking with the
help of this very famous problem called Combination sum. In this problem, you are given a list of positive
numbers and a target sum. You need to pick some numbers from the list
so that they add up to the target sum. In the end, you have to return all unique
ways or combinations that satisfy this condition. You are allowed to pick a number more than
once. In this example, 2, 3 and 3 add up to the
target sum of 8. So, it’s one of the combinations in the
answer. Pause the video if you need more time to understand
the problem. Let’s create different combinations from
scratch. We start at index 0 with an empty combination
and current combination sum of zero. Wherever the total sum of a combination is
more than target, we backtrack or return because adding more positive numbers to the combination
will only increase the combination sum and can’t lead to a valid answer. If the combination sum is the same as the
target, we add it to the answer and return. Otherwise, for every number that comes after
the current index, we add it to the combination, update the combination sum, update the current
index and call the function recursively. Updating the current index ensures that we
only get unique combinations in the answer. I will link this code in the description for
you to check out. Backtracking is used in many problems like
Word Ladder, Permutations and Sudoku Solver. At number 2, we have Dynamic Programming. In Backtracking, we explored all possible
solutions from scratch piece by piece. In Dynamic programming, we are more thoughtful
about the solutions that we explore while still building our solutions from scratch. And we do this by breaking a problem into
smaller subproblems. Let’s take the example of Combination sum
and see how we can solve it with Dynamic Programming. The problem asks us to find all possible unique
combinations that add up to target sum using all the numbers or candidates. But let me change this problem a little bit. Imagine that I give you all the combinations
that add up to target sum, target sum - 1, target sum - 2 using all the given numbers
except the last one. And now, I will give you the last number. Can you use this new information to find all
the combinations that add up to the target sum using all the numbers? You can pause the video and take a moment
to think. You can start from the left. Until you reach the target sum equal to the
last number, do nothing. For the target sum equal to the last number,
you can simply add the last number by itself as a new combination. For the target sum equal to last number +
1, you can just add the last number to all the combinations that add up to 1 and all
those combinations would now add up to the last number + 1. Add the last number to all the combinations
with target sum equal to 2 and all those combinations would now add up to the last number + 2. And you can keep doing this until you reach
the target sum. And voila! You have found your answer. If you look at the code, you keep track for
all sums from 1 to target with this array. For target sum equal to 0, add a combination
which is an empty list. Now start with the first number and keep adding
more numbers with this for loop. And for a particular target sum, just add
more combinations by using all the combinations for target sum - current number. I will leave a link to this code in the description. At the very top, we have Breadth First Search
and Depth First Search. I have kept them together because both of
them are used for graph traversal and are very similar. Let's start with Depth First Search or DFS. In DFS, you start from a vertex and explore
as far as possible along each branch. If you reach a point where there is no unvisited
neighboring vertex to explore, you backtrack and try to find another branch that is unvisited. In BFS, you explore the neighboring vertices
first before moving onto the other deeper univisited vertices. DFS is implemented using a Stack whereas BFS
is implemented using a queue. That’s because in DFS, you want to explore
the neighbors of the last vertex that you visited first. So, you want Last in First Out which is what
Stack does. In BFS however, you want to explore the neighbors
of the first vertex you visited first. So, you want First in First out which is what
Queues are for. I will link a couple videos in the description
that explain this in much more detail. BFS is used to find the shortest path from
Vertex A to Vertex B. Another famous algorithm that does the same is Dijkstra’s algorithm. An algorithm that is closely related to DFS
and is a must for coding interviews is Topological sort. I recommend you to read Dijkstra’s algorithm
and Topological sort on your own. To master all the algorithms we discussed
today, you need to have a deep understanding of Data Structures. And you can not crack coding interviews just
with these 5 algorithms obviously. If you want to know how I mastered Data Structures
and Algorithms, watch this video. My name is Sahil and I will see you in the
next one.