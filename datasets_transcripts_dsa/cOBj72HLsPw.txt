hello my name is haar Abbas I welcome you to this one short video on Java Basics fundamentals of java wherein we are going to start from absolute scratch to all the fundamental concepts which you need to know before you get started with DSA data structures and algorithm can be learned in any programming language but one of the favorite or the most popular language which people use in order to learn DSA and to solve any of the problem is Java so some Java fundamentals we need to understand before you start the Journey of DSA by keeping that in mind I'm going to cover all the fundamental Concept in this one short video fine again I'm going to come up with one more Java playlist from absolute scratch how programming came to the advanced concept of java the new feature of java I'm going to cover in-depth Java series on the same YouTube channel t-shaped skills YouTube channel very soon not uh know uh very far very soon I'm going to come up with that Series where you'll understand everything about Java but whatever Java I'm going to cover here by considering the Journey of DSA the basics of java which why we need to have a variables need of data types data types concept operators which is unary operators relational operator arithmetic operator logical operators F Els conditionals switch case tary operator Loops need of the loop for Loop while loop dowi loop logic building with pattern programming then will understand what is a class why do we have to create the class object creation and also the concept of methods the fundamentals very fundamentals of java so that you are familiar with the syntax of java style of coding and once you are familiar with that then you can easily start the Journey of DSA and other concept by default you will understand again I would like to highlight in the Java series also I'm going to come up with on this channel very soon where in I'll cover everything from this class to the absolute Advan level fine so now let's start the Journey of learning the fundamentals of java hello and welcome back as we have discussed that we are going to start this from absolute scratch in this video I would like to cover what is a variable and what is a need of data type or you can say what is a need of learning data types how important they are to start with whenever you have some data or information and if you want to store that in your program in your application variable concept comes into picture irrespective of a programming language for an instance I have 18 and maybe 18 is a age of a person this is some information it is a data if you want to work with this data or if you want to store that in your program the concept of variable comes into picture I will put here semicolon that means delimeter that is the end of it this 18 assigned to a variable by the name age this is a name of a variable this is a assignment operator that means 18 please give it to a variable by the name age so behind the scene on your memory when your program is executing on your RAM for age memory would be given and inside this age variable 18 will be assigned making sense maybe you want to store some number whatever variable name you want you can give I will give the variable name as num num one you can give number whatever name few of the participants especially from the third or second Tire engineering colleges from non csis background even if they have phobia with the variable names which I have come across with my experience I've been training the candidates from 2016 it's been eight plus years of me training Java programming DSA or spring boot or any of this concept to the professionals I have come across people with the you know phobia with the variable name such as temp count they consider these names also of something High sort no this is just a name num is just a name inside this variable I'm going to assign one value called as four the moment you say this four will be assigned inside a memory which is getting created and name of the memory is num which you have told inside this four has been assigned whenever you want to use this data you need not to say for maybe you want to print something on your screen I will say here print whatever is there inside this variable called as num right how to print in different programming languages we will talk on that for an instance I'm using this if you want to use this data use this variable for an example I have one more variable this is num one I have one more variable by the name num2 I have given it as six six has been assigned there is one more memory on your computer which is by the name num two six has been assigned maybe I want to perform some operation on this these two datas I need not to know take this data or consider this data what I can do is I will say here num one plus num 2 that means I'm referring to what data is there inside this variable please add with whatever data we have inside this variable and whatever is the total result I will get stored that in maybe one more variable by the name result and whatever this variable names are there maybe going forward I'll talk in my Java series also whatever name you want you can give except Reserve words what is reserve what what name we can give we will talk on this give a name which is relevant to the data which you storing give a relevant name whatever it could be you can give your girlfriend name you can give your boyfriend name you can give your crush name not a problem but give a name which has some meaning to it example num one number one that means what data is there inside this four we have plus what data we have inside num two variable we have six what is the total result 10 10 we are assigning back to this so This variable name I have given result on your memory there will be one more variable which gets created results and inside this 10 will be assigned so variable is all about storing the information in your program in your application application program both of them are referring to same so variable is all about storing the data storing the information now when it comes to programming languages there are two major types of programming languages number one happens to be statically typed programming language or you can also call this as strongly typed programming language statically type programming language both of them are referring to same one more we have something called as dynamically type programming language or you can say Loosely type programming language so we have two types of programming languages Let me just keep Point here let me add that here as you can see on your screen statically type you can also call it as strongly type that is also fine multiple names but meaning is same strongly typed programming language or weekly typed programming language dynamically typed programming language you need to understand this suppose I have a data I want to store someone's age in my program program whatever program I'm going to write I want to store some information for which I will create one variable whatever name of the variable you want you can give since I have a plan of storing someone's age the relevant name of the variable would be age I have given here to this age I'm going to assign one data Maybe the data is 18 fine same goes with maybe I'm using one more programming language there also I want to store a data which is 18 someone's age I'll give the variable name 18 behind the scen when memory by the name age would be created equal to operator in any programming language it is the assignment operator assignment means whatever is there in the right side that will be assigned to the left hand side so inside this age 18 would be assigned fine so there are certain programming language whenever you are working with some data whether you want to store the data or whether you want to per perform some operations type of the data which you are working on the domain of the data which you're working on you need not to specify such programming languages we call it as dynamically type programming languages where type of the data you need not to specify explicitly what data you're working on what operations you're performing you need not to specify there are programming languages wherein what whenever you store some data or if you want to perform some of of the operations on the data type of the data is must for an instance I'm going to store 18 to this variable age inside this age variable what type of data I am going to store that I need to specify must and should for an instance here it is number number means most of the programming language we have a data type called as int about the data types moving forward again I'm going to come up with one more video on data types which you will get the idea about data types in Java for now in means you're going to store number now type of the data you have to specify must and should whenever you working with right now I want to store 18 in my age and if I'm going to use any of these strongly type programming language for you it is compulsory to specify what is a type of the data such programming languages you can also call it as statically typed programming language or you can say strongly typed programming languages example for all of such languages are C C++ in fact your Java also typescript and so and so when it comes to dynamically programming languages we have python which is a dynamically type programming language we have JavaScript also which is our dynamically type programming language type of the data you need not to specify explicitly now since this entire series we are going to do in Java for us it is mandatory to learn about about data types because whenever we are going to work with some data using a Java language which is a strongly typed programming language type of the data also we may have to learn what type of data also it decides example if I just have to say here maybe integer types of number one I'm going to give here as four that means behind the scene on your memory number one variable memory would be created inside this assignment right to left I have given it as four similarly I want to store five here which I'm going to store in a variable by the name num two what is the type of data I have to specify since I'm using Java the type of data is int number right so now one more memory will be created by the name num two inside this you're going to assign five five is being assigned here fine so this type of the data domain what domain this data is all about what is the type of the data so this is the concept of data types that means type of the data which is very very crucial so before we go ahead in this series we need to understand about data types also why because we are going to use a strongly type to programming language which is Java and since Java is strongly typed programming language we have to learn about data types we cannot create a variables or we cannot perform any of the operation without specifying the type of of the data for an instance I have specified that this is of integer type it is not just about storing the data it also defines for number two whatever data is available inside a variable called as num two whatever data is available on the variable called as num one on this what type of operations we can perform what type of operations we can perform that also gives the meaning that what type of operation also you can perform on a particular data that's where we need to understand on the concept of data types now let's understand what are data types in the upcoming video make sure you like the video you share with your friends and please do subscribe this YouTube channel also if you want you can connect me on my LinkedIn you can just search haer Abbas on the LinkedIn you'll get my profile you can connect me there thank you so much for being with me in this video we will meet again in the new video hello and welcome back in the last video we came to one conclusion that Java is strongly typed programming language hence understanding data types is very crucial here whenever we are going to work with any data or information we may have to specify what type of data we are working on hence data types become very important by keeping in mind whatever is required to understand or to go ahead in our course I will be discussing the fundamentals of data types again there can be a detailed discussion on data types as well which I am going to have in my Java playlist for now to proceed further let me talk on the primitive data types with Java supports to start with we have a primitive data type by the name bite and then we have short we have integer primitive data type what they are how to work with them I'm going to you know speak I'm going to talk on that now then we have long followed by float then we have double and also we have Boolean alongside that we also have car data type all of these are the primitive data types using them we can directly store the value in the memory alongside that we do also have a non-primitive data type we have arrays and string which going forward separately we are going to have discussion on array and string is not primitive data type in Java they are considered as object when it comes to primitive whatever I have listed here only those are the primitive data type now whenever you want to store any of the integer value any of the whole number then you can use bite short int long so whenever we have a whole number whole number means a number without any decimal point without any fractional point for an instance we have a data 45 or maybe we have data 5545 any range we have have any of these data types can be used what is the significance why we have all four different options I'm going to talk that so whenever we have a whole number which you want to store in a variable in your program in your Java application then you can use either bite short int long when to use bite when to use short why we have four options all these things we will try to discuss here so whenever we have integer type of value a whole number then we can go with either of these data types whenever we have a real number whenever we have a real number then we can go with any of this data type float or double why we have float why we have double we will understand separately in this particular video but to start with if you have a real number with a fractional point maybe I have 45.5 54.6 whenever we have this decimal point then you can go with either float or double whenever we have something called as true or false to be stored a Boolean data true or false then you can go with Boolean data type again this also I'm going to talk this is just a start when it comes to care if we have any character type of data then we can use SC primitive data type in order to store this particular value how we are going to store it what why there is a difference and why we have so many options I'm going to talk again I would like to repeat here Java supports these many primitive data types we do have nonprimitive also what if I want to store collection of data in one place we have a concept of arrays we have a concept of collection which I'm going to talk what if I want to store collection of characters not just one character we have a string which is not a primitive data type in Java which is considered as object then what is object what is non-primitive there is no Clarity yet I'm going to give you the clarity so now in the last video what we have come to a conclusion is Java is a strongly typed programming language hence whenever we store a data or work with some data we may have to specify what type of data we are working on hence learning the type of data or data type is very very crucial because of which Java supports these many primitive data type let's understand one by one to start with first I would like to discuss the integer data types whenever we have a whole number to be stored we can go with integer data types if we have any whole number without any decimal point fine so let me just talk on this so whenever we have a whole number to be stored without any fractional point or decimal point example this is a whole number we don't have any decimal point here any it could be any any number normal number without any decimal point all of them are considered as whole number so in your Java application if you want to store a data which is of this then you can go with either of these data type you can go with bite you can go with short you can go with int also you can go with the long what is the difference among this why we have four option that is very crucial and we may have to understand now for an instance I have a data I have a value maybe age I want to store someone's age so I can do one thing I can just create a variable like this maybe I'll say here age is a variable name data which I want to store is 45 great so behind the scene on your memory age memory will be allocated inside which you are specifying you're storing 45 45 will be added now since I'm going to store this data in Java programming language I have to specify what type of data it is the data type now since it is a whole number I can use bite also short also int also long also let me use bite now if you use bite what happens if you go with short what happens we may have to understand whenever you use bite data type in order to store a whole number behind the scene on your program on your memory one bite of memory will be allocated Ram is consist of bytes 8 gabes 16 gabt GB 16 GB it's all about RAM and it is I'm talking about the memory when your program is executing program gets executed on the Ram from the ram only instructions will be given to the processor processor will execute this this fundamentals you should be knowing it so if you use bite data type to store some data behind the scene on your memory one bite of memory will be occupied the first thing if you go with shot behind the scene on your memory two bytes of memory would be occupied if you go with int data type in order to store any value maybe one whole number you're storing and the type of the data which you have specified is int usually very often we go with int data type in most of the programming language including Java why so I'm going to talk when it comes to int four bytes of memory will be allocated behind the in the memory if you go with long8 bytes of memory that is the first difference between them so let me just give a memory representation so the first difference which you have understood is with respect to memory occupancy if you use bite one bite of memory would be occupi and short two bytes integer four bytes and long eight bytes that is the first difference second difference if you go with bite you can store specific range of number when it comes to whole number it could be of any range right if you go with bite you cannot store every number there is a specific range between one to that only you can store how do we calculate range when it comes to bite one bite of memory would be occupied right one bite of memory equal to 8 Bits if you know already well and good if you don't know now you understand one by is equal to 8 Bits fine now the formula is - 2 power n -1 2 2 power n -1 - 1 where n is n is number of bits number of bits now one bite means it is 8 Bits so the range is minus 2 power 8 - 7 n is 8 8 - 1 is 7 sorry 8 - 1 is 7 2 2^ 7 - 1 that means - 128 8 to 127 if there is any number between this range which is a whole number then you can go with bite data type and if you go with this behind the scene only one bite of memory would be occupied and easily you can manage any number between this range for an instance on your screen you can see I'm trying to store 45 variable age 45 comes within the range ofus 128 to 127 there is no problem here however if you try to cross the range which is 127 it is not acceptable that is a difference number two same goes to short two bytes means it is 16 bytes so that means 16 bits that is 2 power 16 - 1 is 15 2 2 power 15 - 1 whatever value you get here that is a range you can go with if you go with the short data type when it comes to integer it is 2 power 32 - 1 which is 31 to 2 power 31 - 1 whatever result you will get here that will be the range you can store if you go with in when it comes to long it is 8 bytes that is equal to 64 bits so 2 power 8 bytes 1 by is equal to 8 Bits 1 byte is equal to 8 Bit And 8 bytes that means 8 into 8 then we will get the result as 64 8 bytes into 8 bit so of course it is 64 so you'll be getting the result here 2 power 64 - 1 which is 63 2 2 power 63 - 1 it is 64 because I'm already considering n minus 1 here it is 2^ 16 16 - 1 because n minus one here so whatever range you get that is a range you can can store if you go with long that is the second you know difference so basically if there is a whole number without any decimal point or fractional value and in my Java application in my Java code if I want to store the data then I have four options available with me and the difference is first is memory optimization there is a difference with respect to memory occupancy if you go with bite only one bite of memory would be occupied if you go with long then eight bytes of memory would be occupied and the second difference major difference is with respect to the range now if you want to store maybe small value if you want to store someone's age then definitely bite is sufficient bite can store someone's age I don't think so someone can live more than 127 years so of course within this bite only you can manage maybe if you want to store a more data which is within the range of 2 power 15 minus 2^ 15 to 2^ 15 minus 1 whatever value you get here which I will be listing out in a minute here that range you can use with respect to short that is the difference between them not just that if there is any number in your Java code which is a whole number and if you have not specified any data type then the default data type of any number in Java is a int what do you mean by that I'll be showing you right now by opening the IDE as you can see here I have opened the Eclipse IDE and there is a basic one Java program here if you are aware of java fundamentals also you know what is there on your screen if you are new to the world of java you need not to worry just understand this is a starting point of your program here here is where the program execution begins not more than that fine so inside this let me just write the code here more on this the first know class of java I would like to talk going forward also in the Java playlist now please don't focus on that so when it comes to data we have 45 and let me give the variable name as maybe N1 equals to 45 45 comes within the range of - 128 to 127 so of course you can store there is no problem now in place this is of course 100% valid there is no problem in it now in place of 45 maybe I will try to use 130 you can see we are getting one compile time error Eclipse IDE intellig IDE these IDE has the auto compiler the moment you write the code Java code gets compiled you need not to automatically compile explicitly I mean you need not to explicitly compile it usually whenever you write a Java program you may have to compile then you have to execute fine but for now it is not needed because of autoc compilers anyway we are getting one error here compile Ty error it is not with within the range of bite if I just give here 13 no problem 13 is within the range of bite same goes with respect to the short also let me just give it as short data type and if I have to specify maybe N2 equals to any number if I give which is within the range of short there is no problem see here it is outside the range of sh if I give here two no problem see 23 if I cross 30 approximately it is 32,7 68 is the range if you calculate 2 power No 2 power 15 to 2 power 15- 1 it will be around 32,768 approximately you can also calculate so if it is within that range there is no problem you can store it but if I cross the 32,000 part maybe I'll write four it is out of the range you cannot store right so memory 2 bytes here one bite of memory and behind the scen specific range of data you can use when it comes to start two bytes of memory would be occupied and more than that a specific range only you can store you cannot surpass that range when it comes to integer if I go with integer type maybe number three equals to any range see here there is no problem the range is higher 2 power - 63 to um 2 power - 31 to 2 power 31 -1 fine so that is a range the range will be higher when it comes to in but behind the scene since I have used in data type on the memory four bytes of you know data four bytes of memory is occupied if I surpass here you can see here it is out of the range again you'll be getting the comp error so everything has a limit within that range only you can store the data when it comes to long you can of course store higher range data N4 equals to see here I'm storing higher range of data but still I'm getting error here whenever you want to store integer value higher than the range of in data type inside the long must and should you may have to add one suffix called as L here must and should you may have to add whether it is a capital l small L doesn't matter you may have to add here the moment I have added the error is gone fine so if you store a whole number with a range higher than integer range whatever range we get in the in data type if I surpass that range and if I want to store that data inside the long must and should as per the rule of java you may have to specify one suffix suffix means after value after literal this can be called as literal value variable name type of the data type of data variable name and the actual value after actual value I'm going to add at the end suffix and behind the scene how many bytes of memory is allocated here eight bytes of memory and every data will have a specific default data type for an instance I'll go with 445 and 445 maybe I would like to specify some variable maybe I'll say it is some number variable name I've have given it as num now I have not specified type of data 455 of course you cannot store within the bite because bite maximum value is 127 positive maximum value but it is within the range of short in the int also long also you can manage it now if I have to go here and if I say create the field you can see here what is the default data type my eclipse is generated in I have not coded it I have asked my Eclipse to generate which shows the default data type of any whole number in Java is int if you don't specify any data type the default data type is in it also shows that whenever we work with any of the whole number it is required it is recommended to go with int data type unless the value is of higher range because it is the default data type not just that if you perform any of the operation on the whole number the resultant is always integer what do you mean by that for an instance I will say here by type of maybe number one equals to 45 great by type of maybe I'll say a number two equals to 4 so 45 maybe I'll say here result equals to number one plus number two so inside number one we have 45 plus inside number two we have four 45 + 4 45 + 4 is 49 49 is within the range of bite however you cannot use that whenever you perform any of the operations on the whole number type of data in Java then resultant is always integer if I try to store in bite please notice here I'm getting one compil time error how can you store in bite you might say that 45 + 4 is 49 49 is within the range of bite but it is not recomed fine so the resultant is always integer so the point here is the default data type of whole number in Java is int Point number one point number two is whenever we per per any of the operation on the whole number the resultant is always integer this is what you have to understood now I hope the fundamentals related to the integer data types that means whenever we have a whole number if you want to store that or if you want to work with that what type of data we can use is clear to everyone fine now let's talk on the real data type real number data type we have float and double when it comes to real number if we have a real number which you want to store in your Java you can either go with flow data type or you can go with the double data type real number referring to such a number which has the decimal point which has the fractional Point example 45.4 maybe 44 4.5 any number it could be where a decimal point is involved that number called as real number if you want to manage maybe someone's percentage how many percent you got in your metric in your college in your graduation you might say I have got 70.5 such data if you want to manage in your Java application I have to create variable maybe I'll go and create the variable as average that's the variable name I have decided and I want to store the variable maybe 72.4 great now this is the data which is going to get stored inside this variable since I'm using Java programming language I have to specify what type of data I'm going to store here the type of the data I can specify here is either float or I can go with double because these two data types if you use you can store any of the real number however if you go with float must and should after the literal after the value you may have to add f as the suffix if you don't add then it will not consider fine so maybe if I have to store a real number I'll say 44.5 if I want to store without any suffix then I can go with double so the first difference is if you go with float then must and should you may have to use F and if you go with double you need not to use any suffix or prefix second point if you go with the float data type in order to store the real number four bytes of memory would be occupied when it comes to double eight bytes of memory would be occupied if I use double data type in order to manage work or store the data which is of the real number then 8 bytes of my memory would be occupied apart from that the default data type of any real number in Java is double that means if you don't specify any data type and if you store then Java compiler will suggest you or will consider that type of the data is of double type let me show you the same in the Eclipse IDE by opening it as you can see here let me just write here I'll say a flow type of maybe average equals to 45.5 if I don't specify C I'm getting one error here the moment I write one suffix F then there is no problem fine now if I go with double double type of maybe some data I'll say average two I will consider 44 4.5 see I have not added any prefix or suffix still it is able to manage it however behind the scene for this four bytes of memory is occupied behind the scene for this eight bytes of memory is occupied that you need to understand here fine now apart from that if I don't specify maybe I'll say some random number this is a real number right and I want to store I will give here maybe I'll say here a real number that is a type a variable name I have given it is just a variable name type of data I have not specified and since we are using Java in this so in Java C C++ a strongly type programming languages it is compulsory for us to specify the type of the data I'm going to just do one thing I'll say here create a local variable see the default data type if you don't specify it is double so if there is a real number we can go with float and double if you go with float 4 byes of memory if you go with double 8 bytes of memory and the default data type if you don't specify explicitly for any of the real number is always double that's about the real number now let's talk on the boan data type using Boolean data type you can store only two values one is true or false example if I have true to be stored then I can go with the maybe any variable name I'll say maybe a it is of Boolean type or I can go with false apart from these two things you cannot use anything you cannot use anything here either true or false nothing apart from that no number nothing within the double code single code nothing only true that two in the lower case only false apart from this nothing can be used but if I go with Boolean how many bytes of memory would be occupied there is no fixed bytes here it is jvm specific there is nothing called as fixed number of bytes which will be occupied here there is no documentation also for that available so if I go with Boolean I can use true or false what will be situation which you will understand going forward in the you know operators class also it is also very crucial data type whenever you want to check if something is happening or not we may have to use it it is very crucial data type which we will understand for now Boolean me true I can store false I can store that is more than sufficient for you to understand apart from that we do have one more which is care whenever we have a characters to be stored any character it could be it could be alphabets it could be numbers it could be any special characters whatever special characters anything anything within the single code is considered as a character this is a character if I write even number but if that number is there within the single code it is a character it is one character and if you want to store that in your Java application and if you want to use any of the primitive data type then you have the option of car variable name maybe I'll give it as uh same character whatever the variable name doesn't matter so let me use it as a and the type of the data is car so this is value this is the variable name and this is the type of data behind the scene two bytes of memory would be occupied here two bytes of memory and here also it is not considered as a number now it is a character maybe I'll store in a variable called as B with car can we write a multiple characters within the single code no it is invalid it should be a single character it must be in single codes writing the single code is also mandatory and how many bytes of memory behind the scene two bytes of memory this fundamentals for now is sufficient again in my Java playlist I'm going to talk detailed on the data type what is the difference between asky format unic code format what is the need of character data type what is the work of the data types I'm going to specify in detail for now in our series to continue in the DSA part this fundamentals on the data type is more than sufficient if you have whole number go with int if you have a real number go with double or float if we have something to store in know true or false go with Boolean if we have any characters then we can go with car what if we have a collection of data which is of string what if you have large volume of data in one place we may have to specify which is AR about this separately we are going to have the discussion they are nonprimitive they are considered as objects in Java how to store collection of data how to store collection of characters within double quotes arrays strings collections link list all those things we are going to talk going forward in this series this is about fundamentals of data types why we have to learn data types what is the data type how we can use it what is the difference among them fundamentally I hope you have got the clarity it is more than sufficient to go ahead in this series again there is a lot of scope to talk in data types also in my paid batches if you already part of it if your friend is part of it you can ask I will have a detail uh hours of discussion on data type not needed right now maybe in my Java series if you want more than this to be learned that will be discussed I felt this is more than sufficient to go ahead in this series so thank you so much for being with me in this video let's learn more in the upcoming videos please do subscribe this Channel please do like the video and also share among your friends thank you so much for being with me in this video hello and welcome back so far we understood what is a variable need of data type and data types in Java especially the primitive data types which Java supports now it's time to understand one more important and crucial topic which is operators which are there to make developers life easy operators data types variables these are the generic concept most of the things are same irrespective of the programming language operators are there to make the developers life easy whenever you want to perform certain operation you can use you can perform those operation without using the operators but if you go with operators your life will be easy so Java supports there are certain unit operators assignment operators arithmetic relational logical and bitwise operator which we are going to explore one by one for an instance to start with suppose I have a value here I have created one variable number whatever name you want you can give to this variable I'm going to attach value five no problem so since we are learning Java we are into Java type of data we may have to spe spe ify must and should for us and I would like to go with in great behind the scene for you memory will be created by the name num whatever variable name you have given you can give I have given num nothing technical here you can give your girlfriend n also not a problem fine but give the relevant name so inside this assignment operator equal to means whatever is there in the right side that will be assigned to left side that means inside num five will be assigned great now now there is a requirement I need to perform one operation whatever current value of this variable is there I may have to increment that by one maybe the initial value is five and the situation arises wherein I have to increment the current value of this particular variable by one what is the big deal in this what I'm going to do is take this variable num that means whatever data is there inside this variable plus one very simple whatever is the total result I will store back in this variable that means when control comes here equal to operator equal to means always first right side inside num we have five + 1 which is six and six will be assigned inside this variable now here inside this num variable five will not be there six will be there also I hope you're aware at a time a variable can hold only one data one value if new value adds to a variable old value will be overridden old value will not be there anymore fine I hope it is making sense now the moment you do this five will become six very easy right I can just increment the existing value of a variable by one however this operation is very common and we may have to perform many times as a programmer to make our life easy Java or any programming languages says that such common operations if you want to perform we support you with the concept of operators for an instance whatever operation I'm performing here if I can do in Java if I have to do or if I have to increase a existing value of a particular variable by one instead of me writing this entire expression I can just say whatever data is there inside num please increment by one by just adding Plus+ if I want to increase the value of a data which is there inside num variable I can say minus minus which is called as decrement operator which is called as increment operator about these operators separately I'm going to have a proper discussion to start with I hope I'm just trying to make you understand the purpose of operators what are operators and why they are there just to make the programmers life developers life easy most or all the programming languages supports with the concept of operators so that the common operations you can perform easily by making use of such operators one such example you have seen here fine so likewise we have other operators arithmetic relational logical bitwise one by one we may have to explore let's start with the operator called as increment and decrement operator and then we shall move ahead in this journey please please make sure to like the video please subscribe the channel and also let your friends know who want to learn Java fundamentals and DSA going forward anyway I'm coming up with the detailed Java series onstop solution for Java verying I'm going to talk you know start from the absolute scratch to the advanced level all the new features in very detailed way fine so thank you so much for being with me in this video we will meet again in the upcoming videos and explore more on the concepts of operators in Java hello and welcome back let's start the Journey of operators with increment and decrement operator which comes Under The unary Operators category unary operator means such operator which will be applied on single operand that means if you want to perform any of the operation on single operant operant referring to the value or you can say data for an instance if I say 10 + 2 of course the result is 12 here 10 and 2 is operant and plus is a operator I hope you are understanding these terms which are very very important plus is a operator 10 and not two this value is there no that is only called as operand now right now in order to perform this particular operation we have used two operant 10 and two two operant are used that means plus comes under the binary operator category it is an arithmetic operator which we will see going forward now increment and decrement operator they come under the category of unary operator which operates on single operant that means if you have single data on this only you may have to apply what exactly this is let's understand whenever you want to increment the value like the way we have seen in the last video for an instance I am going to create one variable which is a number int is a data type variable name I'll give it as a inside this variable I'm going to add the data F behind the scene what happens here inside this variable a five will be added now the requirement arises we may have to increment the existing value of this variable by one this operation is very common operation in Java what is the big deal as we have discussed in the last video I will say whatever data is there inside the a add one increment by one right the total result I can store back in a so inside a we have 5 + 1 total will be six six are storing back inside the a so right now we will have here six now if you want to increment the existing value of a variable by one you may have to write this expression say since this operation of increasing the existing value of a variable by one is a common operation in Java what they have done is instead of writing this entire expression we can go with a operator called as whatever is a variable name variable name you just have to use Plus+ the operator name is not A++ a is a variable name since I have given the variable name a the operator is Plus+ if you have given the variable name n it is n n++ now the moment you say Plus+ A++ the existing value of a will increment by 1 it will not increment by two or three it will increment by one that means whatever is happening inside this expression same thing will happen here now my dear friends to add this operator that means to operate on this variable we have used this Plus+ operator now wherever this Plus+ operator is implemented have we used two operant here no we have applied this particular operator on single operant operant means value on single operant we have applied this operator hence we call this as a unary operator however in the process you have understood Plus+ means the existing value which is there inside this variable will be incremented by one same goes with respect to decrement if I say variable name any variable name in that matter minus minus if I say whatever data is stored inside this variable will be decremented by one example if I want to decrement the value of a by one I just have to say a minus minus making sense we also have something called as post increment post decrement what is the difference here and post uh pre-increment pre decrement how they are working and we may have to understand that which is very very crucial here before I even get into that let me show you whatever we have done here let me open the ID here for an instance I will say here integer type A equals to 5 integer type maybe the variable I give it as a = to 5 great and I will say a ++ now you can see after I assign a I will print system.out.print Ln a system.out.println is a statement in Java which we Ed to print something on the console right as in when you use the Java it is very easy it's not very lengthy also there are shortcuts available in every IDE which we use in Eclipse IDE the shortcut is very simple sis out control space sis out control space that means I want to print whatever values there inside the A on my console when I run the program that is the meaning of it fine now after a increment again I would like to print the value of a before I increment let me print first let me just go here right click I'll say here run as Java application I'm going with basic by considering the no voices for very beginner absolute beginner in this journey with us so you can see on the console we have got the result as five after I told A++ I'm going to do here system do out. print a now please print the value of a let me just execute my Java program right click run as Java application and I'm going to just print here you can see we have got six that means whatever value data was there inside a that got incremented by one same goes with minus minus so let me just go here A minus minus minus minus means decrement the value of a by one Whatever existing value is there inside the a we may have to decrement that by one so let me just go here right click these are very simple operators but again very crucial you should have the clarity so only I'm putting here some efforts by considering the absolute beginners you can see initial value of a was 5 later I have told A++ after I said A++ I'm trying to print I got the value as four these are the unary increment and decrement operator now here only we have something called as post increment post decrement pre-increment pre decrement we have post increment we have pre-increment we have post decrement we have pre- decrement fine what do you mean by that first variable first operant maybe El say here then if I say plus plus it is post increment operator it's a variable name a is variable name not a part of Operator Operator is Plus+ whatever variable name you give that variable name Plus+ it is post increment first you use the value operant then increment pre-increment plus plus a post decrement use the variable name minus minus later the operator pre- decrement minus minus later variable name what is a difference let's try to understand with respect to the code here I would like to go here and you can say I have told a minus minus if I say a minus minus it is post decrement if I go here and run my Java application you can see here initial value of a was five it got decremented to four wonderful now if I say Min - - A that is pre- decrement pre decrement now if I run here if I run here run as Java application on your screen you can notice we are getting four whether I say a minus minus or minus- a pre or post both of them are decrementing the value of that particular variable by one that particular variable by one right now same goes with A++ I'll say here Plus+ a that means first I'm using pre-increment operator I'm applying here I'll go here WR click and I will say run as Java application on your screen you can see here five later that value got incremented to six if I say A++ if I say A++ I'll go here right click run as Java application and you can notice the output initially was five it got incremented to six now the question comes here is whether I use pre-increment or post increment both of them are incrementing the existing value of that variable by one same goes for decrement also whether I use pre decrement or post decrement both of them are decrementing the value of that variable by one but where is the difference why we have post and pre the difference comes whenever you want to assign the data into a different variable and this is one of the common quote Snippets during the interviews also try to understand here for an instance if I say integer type of a variable inside this I'm adding five behind the scene variable a will be created Five will be added great again I'm creating one more variable integer type of b a b variable is created no data right now what I'm going to do is A++ I will say and whatever is the result I will assign back to B great again I'll go here let me write one more quote snippet here please observe it as you can see on your screen I have told plus plus a here what happens please understand since you have told here the first line inside the a five will be assigned second line you created the variable here third line you have told equal to operator that means first the right side then the left know left side uh part comes into picture right hand side what are you doing you have told increment the value of a that is fine understand here is it post or pre if it is post whatever value of a is there no that will be used first later the incrementation will happen so the value of a is five five will be assigned to B five will be assigned later a value has to be incremented so a value will become six fine what happens here first line inside the a five will be assigned second line B variable created third line equal to operator right to left right and side you're telling plus plus a increment the value but you're using pre-increment that means first you increment the value of a later that value you assign later six will be assigned here making sense I will take more you know examples here also post means first use later you increment pre means first increment M ment later you use it however whether it is a post or pre existing value of that particular variable which is a that is getting incremented here also from five it is becoming six here also from five it is becoming six when you're trying to assign that in a different variable that's where the difference is coming into picture here let me take one more you know or two more quot Snippets we will try to understand here and same quote Snippets we will try to run and execute and check whether it is matching our understanding or not allow me a minute let me just write that code snippet here as you can see on your screen I have taken two basic code Snippets here what happens here in the example number one inside a variable number a variable Name by the name a five will be assigned second line you're creating the variable which is B third line equal to operator first right side then the left side know part comes into picture right what are you telling increment the value of a by 1 A++ means whatever values there inside the a you increment but is it post or pre it is post first use the value of a I will use it later you increment that means five value will be incremented to six this plus is there addition plus as it is I will keep it next part I am going to say here increment the value of current value of a by one but is it post or pre it is post use the current value current value of A6 later you incremented that means six will become seven so here both the cases a value from five to six is became 6 to 7 that is incrementing plus is there plus as it is is it pre or post it is pre first increment the value of a by one that means what is the value of a currently 7 7 will become 8 later use that eight now if you add 5 + 6 it is 11 11 + 8 it is 19 19 will be assigned here if you say system.out.print l please print and show me what is there inside the variable by the name a system.out.println what is there inside the variable by the name here the output will be eight here the output will be 19 let's take example number two in example number two inside a five is been assigned b as of now nothing equal to operator first right side now increment is there is it pre or post it is pre first increment the existing value of a by 1 five will become six later use that six here plus is there plus as it is then it is decrement but is it pre or post it is post use the current value value of a as it is six is the current value of a later you decrement it that means six will become five decrement means existing value should be decremented by one so 6 became five plus is there plus as it is now decrement it is pre- decrement first you decrement five will become four later you use it again plus is there plus as it is now again A+ plus here that means first you use the value of a current value of a is four later you increment it it will become five now if you add 6 + 6 12 + 4 16 + 4 20 20 will be assigned here if you try to check system.out.print inside the a the output will be five system.out.println inside the B no B the output will be 20 let's check if this is the case I would like to write the code and let me show you let me open the IDE as you can see the first code snippet which we had written there I have included that here let me just run here right click run as Java application if I just run this you can see here the value of a is 8 the value of B is 19 that is what we had DED from the first Cod snippet when it comes to Second Cod snippet what we had got it I have told b equals to it was let me just cross check what is that c snippet and write it down here as you can see I have included the same code snippet which we have taken in example number two and let me just run this here if I just right click run as Java application on your screen you can see we have got a value five and B value 20 which is exactly what we have understood if there is any ambiguity you can re-watch this video also you can watch this video in 1.5x speed whenever you are rewatching you'll get the idea here it's not the stop there is lot even if you want you can explore more Cod Snippets and try to understand this but I hope fundamentally what is increment operator what is decrement operator what do you mean by un operator what is operant what is operator what is Operation I hope this Clarity you have got in this video in the process of understanding increment and decrement operator thank you so much for being with me in this video make sure to like the video subscribe the channel and also share with your friends so that they can also understand this thank you so much again we'll meet in the next video hello and welcome back in this video we will understand about arithmetic operators which are very basic it comes under binary operators that means in order to use this operator two operant are required that is two values are required for an instance if I want to use plus operator plus comes under arithmetic operator I need two operant two operant means two value example 10 + 2 only then I can perform the addition here so this operator can be applied on two operant operant means such a value on which operator is used to operate or to perform the operation fine we have discussed this in the fundamentals of operators also however this comes under the binary operator that means two operant or two values are needed in order to perform per form the operation here we have addition subtraction multiplication division and modulus very simple they are addition to add two numbers division to I mean uh subtraction to subtract two numbers multiplication it will multiply two numbers division it will divide first number by second and then we have modulo which will give us the reminder whenever you perform the division let's directly understand by opening the eclipse IDE and see what happens here very quickly let me open the Eclipse IDE as you can see I have opened the Eclipse IDE for an instance if I have two values here integer type number one equals to 10 and integer type integer type number two equals to 20 and if I want to just perform the addition very simple number one plus number two whatever is the result I will store back inside a variable called as Rees which is again of integer type this is the addition operator which comes under arithmetic they are very basic no addition subtraction division multiplication what you have learned in your primary school days same here also I will print system.out.println and if I just have to print here system.out.println r s that means result and if I run this program you can see on your screen you'll be getting the result as 30 which is 10 + 20 is 30 fine directly also you can check directly by printing the values every time you need not to store in a variable and then perform the operation right now we are here to just check the operator so directly let me write the values here if I just say here 10 minus 2 of course the result will be 8 here so if I have to just run this application let me run it which you can see on your screen let me say always save okay and if I just run you can see eight we are getting similarly if I have to perform the other operations let me just write down the code here as you can see I have written the basic code here 10 - 2 is 8 10 into 2 is 20 10 / 2 it is five right so 2 5 are 10 so hence it is 10 ID by 2 is 5 there are basic addition subtraction and multiplication operators which you can perform Whenever there is a need of Performing such basic operations these operators can be used one important operator here which is modulo operator or you can say modulus which is important here which you need to understand so modulo operator will give you reminder for an instance if I say system.out.println if I say here 10 and I will say mod 2 10 mod 2 if you divide 10 by two what will be the reminder which you be getting it so let me just run this application if I run this application you can see on your screen you are getting zero zero is the reminder what do you mean by that in your childhood in your school primary math you might have learned this a way to divide the numbers I want to divide 10 so I'll say here by two two 5 are 10 the remainer is zero modular operator will give you this reminder for an instance suppose I have 20 here and I want to divide by 10 I'll say here 10 2 are 20 the REM remainer is zero the Modelo operator will give you zero making sense now if I just have to say here for an instance I will say here three and I will say here three 3 is 9 the REM remainer is one so modulo operator will give you one this result will be given by the modulo operator same thing you will see let me open the eclipse ID now you can see 10 mod 2 the REM remainer will be zero the output here Will will be zero if I have to say system. out. print Ln I will say 20 mod 10 that means if you divide 20 by 10 10 2 are 20 the REM remainer will be zero here you can notice the output also if I just have to run this and we can see output is zero again now if I have to say system.out.println and I would like to just say here maybe uh 10 mod 3 10 mod 3 of of course if you try to divide 10 by three the REM remainer will be one because 3 3 is are 9 the balance will be one the REM remainer will be one that will be the output here let me just run here see we are getting it one more important part which you need to understand here is whenever the numerator value the first value is greater than the second value the denominator Value First value is greater than the second value then it will divide and give you the reminder how if I have to say here maybe 10 and I'll say Mod 20 10 mod 20 if the first value is less than the second value then it will not give the reminder whatever is there is the first value that will be the output here I will say here the output here will be 10 for an instance if I just have to say here three mod three mod maybe I'll say here five the output here will be three so whenever the first value is greater than the second value then it will divide the first value by second value and whatever is the REM remainer it will give you for an instance 10 mod 2 that means 10 will be divided by 2 and whatever reminder you will get that remainer will be the output if you divide 10 by two the remainer will be zero nothing will be balanced if you divide 10 by 3 3 3 are 9 1 will be the remainer fine however right now the first value the numerator or you can say first value is less than the second value then the output will be the first value itself it will not give you the reminder let me just uh run this uh program and you can see here 10 we are getting three we are getting why because the first value is less than the second value this also about the modul operator which you need to understand which will be helpful for going forward that's all for this video These are very basic operators when it comes to especially the arithmetic operation if you want to perform any of the basic arithmetic operators or operations then definitely you can use either of these operators thank you so much for being with me in this video we will meet again in the next video hello and welcome back now let's understand about assignment and compound assignment operator it is basic assignment operator and compound assignment what they are about the assignment operator we have already seen example whenever there is a variable inside this if I want to assign some value we use assignment operator basic assignment operator which is equal to equal to operator will assign whatever is there in the right side to the left hand side since it is a Java I have to specify the type of data I have specified here as 10 so behind the scene one variable will be created by the name a inside a 10 will be assigned so this equal to operator in Java is use to assign whatever data we have on the right hand side to the left hand side fine however compound assignment is slightly different before I get into this I want you to understand this also for an instance I have a requirement that I may have to store marks of five students I can create five variables integer type of maybe M1 integer type of M2 integer type of M maybe three similar I'll create till M4 and M5 option number one since all these variables has same data type I can declare the variable in this style also inte the type of M1 comma M2 comma M3 comma M4 and M5 this M1 M2 M3 M4 M5 they are the variable names whatever names you want you can give that is not a matter of concern and this is called called as variable declaration fine we have not yet initialized the value variable initialization means you have declared the variable you have specified there is a variable which is of integer type that means inside this variable we can add integer type of value now there is something called as variable initialization I will say here M1 equal to 10 that means now I'm initializing so two ways you can do directly you can declare a variable for an instance and also initialize at one point fine there is a difference comes into picture which you will understand going forward in instance variable local variable but for now this is both declaration and initialization now if I just say integer type of n it is just a declaration and to that n if I assign some value it is initialization declaration initialization this is both declaration as well as the initialization I hope this fundamental also is clear also we have one more option whenever you have maybe multiple variables which will hold same value this may not very often you come across in the real instances but just in case this option is also available I'm trying to talk on that maybe all five students have same marks first of all you have created five variables of same type to store students marks and all of them have got same marks so what you can do here is I can say maybe all of them have got 45 I'll say 45 assign it to M5 whatever is there in the M5 assigning back to M4 whatever is there in the M4 assigning back to you know M3 M2 like this also you can assign all the variables will have same data 45 for which let me just show you on the Eclipse IDE I have opened the eclipse ID also there are multiple suggestions to use the vs code or intellig ID IDE is not a major matter of concern you can use any of the IDE of your own choice especially for the core Java DSA unless if you want to develop some application since Java developer very often use eclipse or intellig IDE ID so I going with Eclipse there is no problem even if you want to use some other ID that should not be matter of concern fine so let me just create some variables here M1 as you can see I have created the five variables now I can assign like this maybe I'll say here m M5 equals to maybe 44 and whatever his data is there inside the M5 I can give it to M4 which again I can assign back to M3 and again I can assign that back to M2 and again I can assign that back to M1 fine this syntax is also a valid synta syntax very often you may not come across but this option is also available now you can print and check all these variables it will have the same value let me print and show you as you can see I'm going to print now if I just have to run this program and you can notice the output all of them have the same value of 44 this is also possible here and in order to assign a data in Java we use equal to operator whatever is there on the right hand side that will be assigned to the left hand side and from the beginning this assignment by default we are trying to understand likewise we have one more operator which is called as compound assignment or you can say compound assignment operators what exactly this is please try to understand here when it comes to compound assignment operator if you want to increment any value of a variable by one of course we can go with plus plus if you want to decrement then minus minus you can use it which is increment and decrement operator now assume that inside a variable I have five that means inside a five is there the requirement is I want to add 10 to this five that means I want to make it 15 so what you can do a whatever data is there inside the a plus 10 what is a total result I will store back inside the a that means five is the existing value + 10 15 will be assigned back to a inside the a we will have 15 here so instead of writing this expression what you can do here is you can say a + = 10 you need not to write this expression that means while assigning this 10 to a add this 10 to the current value of a then assign while you assigning please make sure you add this 10 to the existing value of a then you assign it so whatever is happening here same thing will happen here also similar to this we have a if you want to multiply something that means 10 will be multip M with the current value of a right for the division also we have for the subtraction also we have for the modulo also we have this compound assignment Operator Let Me Show You by directly writing the code on the IDE as you can see I have opened the eclipse ID let me just create a variable a equals to 5 and if I just have to print maybe system. out. print Ln what is the current value of a of course you know very well it is five by default now the requirement is I want to make it 15 I'll say here a plus 10 that means whatever value of a is there add 10 to it and finally store back the result in a and now if I have to check back system.out.print please print the value of a you can check here you'll be getting the output as 15 that means a already five was there + 10 15 totally assigning back to a instead of this I'm going to write here you can see here a while assigning equal to 10 I will say that means 10 at the time of assigning to a add the 10 to the existing value of a current value of a is five here and to the five please add this 10 of course the output will be 15 here let me run this program you can see the output is 15 here fine initially it was five and later it is 15 similar to this we also have a current value of a okay at the time of assigning multiply with 10 that means 10 at the time of assigning to a multiply with the existing value of a consider this is commented that means it is not a part of the code still the current value of a is five only so five is the current value of a so at the time of assigning 10 multiply with the value of five which is value of a which is five 10 into 5 and then assign the result so what will be assigned 10 into the current value of a is 5 so 10 into 5 is 50 50 will be assigned here so if I have to just run this you can notice on your screen see we are getting 50 here say now same goes for the division also if I have to say here maybe I will say here uh you can say the same goes for the division and subtraction also in fact I will say a minus equals to equals to I will say 10 here fine so 10 you can run this program and check if I have to run this program you can notice we are getting it as minus5 that means of course a value is five 5 Min - 10 is of course minus5 making sense if I have to make it maybe 15 15 minus 10 is of course it will be five this time if I have to run this program you can notice it is five making sense now let me just make it division a maybe I'll say divide equals to Maybe by three I will say fine the current value of a is 10 divided by 3 at the time of adding please divide and add if I have to run this program you can see on your screen we are getting the output okay there is an error because I have not used the semi column let me just use it and if I just have to run this program you can see on your screen you are getting the output as five that means 15 divided by 3 is 5 so at the time of three getting assigned to a whatever the current value of a that will be divided by three and the final result will be assigned here this is only called as mod I mean this is only called as compound assignment operator we do have this for the know modulo operator also for an instance I'll say a I'll say mod a I'll say mod equals to maybe I'll say here three that means 15 if you try to divide by three what will be the remainer REM remainer will be zero because three 5 are 15 and the remainder will be zero the output will be zero here if I have to just run the this and if you just notice the output it is zero and if I make maybe a value as 10 10 if you divide by three the REM remainer will be one 3 3 is are 9 and the REM remainer will be left out is one modul operator we have understood in the previous video so if I have to just run this we can notice we are getting one now I hope you got the clarity on the know compound assignment operator we have seen simple basic assignment operator and the compound assignment operators thank you so much for being with me in this video please do like subscribe and also share these videos with your friends and peers again we'll meet in the next video and try to understand more on operators hello and welcome back in this video we will try to understand relational operators which are very crucial before I get into this I would like to highlight that whatever fundamentals we are learning right now we are going to use that it is start of the journey it is not that one video we have understood any of these Concepts whether it is a variable data type or any of the operator that is the end that is the actual start of the journey these operators I'm going to use very often going forward in our classes so you will be used to it now coming to the relational operators it comes under the category of the binary operator that means if you want to operate using the relational operators un you need two operant that means you need two values apart from that these relational operators results in Boolean value true or false what do you mean by that let's try to understand when it comes to relational operators we have double equal to operator which is used to compare two values we have less than we have greater than operator less than or equal to operator greater than or equal to operator not equal to operator how they are working we may have to see to it also one point I would like to highlight here you can join the WhatsApp channel the link you can find in the comment section also in the community post of this YouTube and you will get the channel for the regular updates what is happening how many videos have been uploaded in this WhatsApp Channel you will get the regular updates you can find the link in the community post also in the comment section also so now let's get started suppose I have a variable here integer type of N1 number one equals to 10 great integer type of N2 number two maybe it is 20 now I want to check whatever data is there in N1 is it equal to whatever data we have inside the N2 it is not comparing the variables it is comparing the data which is present inside this variables fine so so now it will result in true or false inside N1 we have 10 inside N2 we have 20 is N1 10 equal to equal to 20 the answer is false it will result in true or false that is Boolean Boolean can store only true or false we have understood that in the data types concept now directly also you can check you need not to store every time this is just one of the example maybe you can just say here e is 10 equal to equal to 10 of course this will result in a Boolean data called as true because this is true so basically what I'm trying to say here is double equal to operator is used to compare two values whether they are equal or not coming to the less than it will just check for an instance whatever data we have inside the variable by the name N1 is it less than whatever data we have inside the N2 so inside the N1 we have 10 inside the N2 we have 20 is 10 less than 20 it will result in Boolean value now which Boolean value it will result in it will result in true Boolean value making sense similarly is N1 whatever data we have inside this variable is it greater than whatever data we have inside this N2 variable of course not inside N1 10 is 10 greater than the 20 no it will result in false I hope it is making sense now also we have less than or equal to operator is data inside N1 is it less than or equal to N2 this less than or equal to it will take either one condition for an instance N1 which is 10 right is 10 less than N2 which is 20 if it is less than it will not check for the equal it will just check any one here it will give you true let me give some value only instead of N1 N2 whether you store the data inside N1 and then use the N1 or directly use the value that should not be a matter of concern here now what I'm trying to say here is if I have to just go and let me just uh try to explain you here if I say is 10 less than or equal to 10 now is 10 less than 10 no it is not less than 10 at least is it equal to 10 yes it will result in true is 10 less than or equal to 15 is 10 less than 15 no or at least is it equal to 15 no both the conditions are false here the resultant is false fine similarly is 10 greater than or equal to 10 yes it is not greater than 10 but at least it is equal to 10 it will be true is 10 greater than or equal to 5 any one condition is satisfying here it is true because 10 is greater than 5 so this greater than or equal to less than or equal to it will check for two things either one it will not be like both of them will not be applied together if either one is satisfying the resultant will be true if both of them are not satisfying the resultant is false here that is is 10 less than 15 yes it will not check for whether it is equal to 15 since already it is less than 15 here only it will result in of course here it is not false this will result in true fine here is 10 greater than or equal to 10 is it greater than 10 no then it will check whether it is equal to 10 yes any one condition is satisfying it is true making sense let's see if this is the case we'll try to understand by using the ID let me open the eclipse ID here as you can see I have opened the ID I'll do one thing here integer type of N1 equals to 10 and similarly integer type of number two equals to 20 is a data and now I'm check I'll be checking here is N1 equal to equal to N2 the resultant is Boolean if you want you can store that inside a Boolean data type I'll say here Boolean type of result and if you want you can just just system. out. print Ln print whatever is there inside the Rees and right now whatever data we have inside this is N1 this is 10 equal to equal to 20 no this will result in false false will be return returned to this variable and if you print here the output will be false so let me just try to run this application if I just run this and you can notice here you will be getting the output as false if you want you can just compare result you can store in a boan data type and directly you can print or else you can just go here and check in this way also not a problem directly values I'm checking because we are learning here the operator whether it is resulting in true or false now I'm going to check is 10 less than 10 is 10 less than 10 now what will be the answer here it will be false again it will be false again I will check system.out.print Ln is my 10 greater than be five is 10 greater than 5 so output will be here true which you can see here let me just run and you can notice here we are getting it as false for this false for this and true for this as you can see I have written few Expressions here and I expect you to answer here see now is 10 greater than 10 no I am using here greater than or equal to any one will be checked is 10 greater than 10 no at least is it equal to 10 yes any one condition is satisfying fine the here the result would be true fine now is it 10 greater than 14 no is it equal to 14 no both the conditions are not satisfying the resultant will be false here okay and again here is five less than or equal to four no both the conditions are false here the resultant is also false is five less than six yes if it is already less than six it will not check for equal any one condition will be checked and here it is true now not equal to is 10 not equal to 10 no that will be false here so it is false because 10 is equal to 10 right so now let me just run this application and you can notice here starting we have false false if I have to go here two false then true true again false false and true false the last fine as per our discussion the same is the output also fine so now this relational operators are there to relate two numbers and the resultant is Boolean it will just check or compare two numbers whether they are equal whether they are less than or equal greater than or equal not equal just compare and check between two operants and the resultant will be a Boolean data now what is a use case of this will be the question the use case we will see in the conditionals in our Loops in our pattern programming logic and going forward in our programming also whatever logic which we are going to develop so this is the start of relational operators going forward we are going to use it fundamentally if you have understood what is relational operator and if you have picture in your mind that is more than sufficient so thank you so much for joining me in this video please make sure to like the video subscribe the channel also comment so that I'll get the motivation to create more videos thank you so much guys we'll meet again in the next video hello and welcome back in this video we will try to understand logical operators which are very crucial one point I would like to highlight going forward we are going to use these operators or whatever fundamentals we are learning extensively and you'll have a good hold on this for now just try to understand how they work fine now to start with and operator is represented in Java with double ampisid symbol and what exactly it will do please check here and operator in Java if you want to use this it is double amped suppose you have some expression here some operation you're performing again you're performing one more operation it could be any number if I'm writing three it is not three it could be n what is the result we may have to understand suppose the first operation which you will perform here is resulting in false right the second also and and second whatever operation you perform here that is also resulting in false and the third is resulting in false and the fourth so on whatever operations you're performing if everything is resulting in false then the end result will be false what do we mean by that for an instance I'm checking here is 10 less than 10 of course this will result in false and is 10 greater than 10 10 is not greater than 10 right some expression something you're doing here which is resulting in Boolean value fals and maybe I'll say here five is not equal to 5 five is not equal to five or any other operation which you are performing doesn't matter what if all of them are resulting in false and in between if you have used ampet no ENT symbol then the end result is always false first point about it the second Point here which you need to understand if some expression you're performing the resulting in true and second expression true similarly all the expressions are true one expression is false then in that case the entire result will be false the real use case in the conditionals if else also in my pattern programming logic extensively I'm going to use this fine just try to understand how much ever I'm telling here that is if I'm telling is is 10 less than 8 and is 10 equal to equal to 10 and is 10 greater than maybe 12 this is true 10 is of course I mean this is false so what I'm going to do here maybe I'll make it here eight okay maybe this is false 10 is not less than 8 and is 10 equal to equal to 10 it is true and is 10 greater than 8 it is also true so on if all of the operations are true if even one is also false then the entire result will be false here fine now again if all of them are true suppose some operation will perform here which is resulting in true and one more operation I'll perform which is resulting in true and one more operation resulting in true all the operations are resulting in true then the end result will be true so what I'm trying to say here is and operator the entire resultant will be true if everything is true in between if one is also false the result is false making sense if all of them are false the result is false so it will give you true if all the Expressions which you are performing if it is resulting in true for an instance if I say here is my 10 equal to equal to 10 it is true and is 10 less than 14 it is true and is 10 greater than 8 of course it is true this is also resulting in true and true and true so the resultant will be true here what is the real case of this very soon you are seeing going to see in the conditional if else also in my pattern programming logic also extensively so this is about the and let me just code this and show you in the Eclipse IDE as you can see I have created two variables here inside a 10 is there inside B2 we have so let me just try to print here I will say system.out.println system.out.println now I'll write some Expressions here is a equal to equal to B let me write some expression here you can see here I have written three Expressions here is a equal to equal to B please check the values inside the a inside the B there are two different values so this is false false and is a less than b yes it is true so false and true is a greater than b no false false and true and false it is resulting in false you can check here as we have discussed and means if all the operations all the expressions are resulting in true only then the end result will be true if one expression is also resulting in false then the entire result will be false here of course this is false false and this is true of course a is less than b and false false and true and false it is false only let me just run this program and you can notice you'll be getting the output as false so let me write two more Expressions here you can see here one more example I have taken is a less than b current value of a is 10 10 is less than 20 so this is true true and is a less than or equal to B this is also true right based on whatever value we have stored inside the A and B so both of them are resulting in true true and true if everything is resulting in true the entire end result will be true you can check here if I just have to run this and you can notice here we will be getting the output as true so what I'm trying to say here is if all the expressions are resulting in true the end result will be true and if all of them are false the end result is false if one is also false in the entire expression then the entire result also will be false it will be true only in one case if all of them are resulting in true then only the end result will be true what is a use case of this how we are going to use practically in the again I'm repeating pattern programming conditionals going forward I'm going to use these operators extensively so this is about ENT and logical and operator when it comes to logical or operator please understand here logical or operator let me write down here which is represented by this symbol vertical bar or you can also call it as the pipe this double time you have to use it two times you have to use fine so this is our operator What Happens here suppose we have some expression here expression one Expression 2 Expression 3 it is not just 32 it could be any number okay what is the final result so if first expression is resulting in true or second is also resulting in true or third is also resulting in true then the total end result will be true if all of them are true it is true suppose some operation you're performing here which is resulting in false or this is also resulting in false or this is also resulting in false then the entire result will be false now what if we have mixture maybe some operation some expression is resulting in true one more expression is resulting in false one more expression is resulting in true then the end result will be true what if if all of them are false false or false or maybe false or if any one is true in the entire expression still the entire result will be true here so in case of or operator whatever Expressions you are writing here if all of them are resulting in false if one is also true the end result is always true if all of them are true it is always true if one is true many of them are false if maybe all of them are true one false still it is true it will be False only in one case if all of them are resulting in False only then it will lead to false let's try to understand with respect to the code here whatever we had written let me open the eclipse ID same thing I'm going to do here I will just reuse this code now you can see in place of and I'm going to use this R operator okay I'm going to use this R operator this vertical bar you can use here here also I'm going to use or operator fine now please here is a equal to equal to B this is false is a less than b it is true is a greater than b it is false here false or true or false now in case of or operator if one expression is also giving you true this is false this is false but one expression is giving you true then the entire resultant will be true fine now of course is this true true or true this will be true let me write one more expression here you can notice I have included one more expression now tell me guys is the value of a greater than the value of B no this is false or is it greater than or equal to B this is also false is it equal to equal to B this is also false if all of them are resulting in false then of course the end result will be false making sense so if even one is true the end result is true if all of them are true it is true and if all of them are false only then this will be false this is about the r operator when it comes to the not it is exactly opposite if I just have to say here not true not true means false not false means true okay not true means false you can just see here if I have to run here true true false these three things whatever we have done here okay true true false and of course the final result if I have to print here you can see false not true means false not false means true exactly opposite so use case of these logical operators we are going to explore in conditionals very soon and in the pattern programming and whatever logic I'm going to teach you involves extensive use of operators conditionals which is if and else and the loops the purpose is to make you good in these fundamentals so that moving forward you can be very strong in in these fundamentals to develop any logic which is there in front of us so thank you so much for joining me in this video we will meet again in the next video hello and welcome back in this video we will try to understand conditionals in Java to start with first we will explore if else statement which is very important basically this concept comes into picture if you want to perform some operation or if you want to execute certain piece of code based on the condition if the condition is satisfying then you would like to execute that else you want to do something else example if your parents are asking you to go and get something you will put one condition if you give me money I will do it if not I will not do it something similar can be done in programming also the syntax is very simple here you have to say if and whatever is your condition you may have to put here let me put some condition of your own choice if this condition is true if it is satisfying then whatever piece of code you write inside the if blog that will be executed if the condition is false then whatever you write inside the else block that will be executed in case of if else ladder all the blocks will not be executed only one block will be executed if this is resulting in true then whatever piece of code you write inside the if block that will be executed if it is resulting in false FAL then whatever you write inside the else block that will be executed for an instance I have written one piece of code in the ID let me open as you can see I have created a variable by the name age inside the age we do have a data 177 now I'm checking if in case if the age is greater than or equal to 18 that means whatever data we have here if it is greater than or equal to 18 then I would like to execute something else I would like to do something else so let me write one piece of code here I will say system.out.println and I would like to just write here you are adult as you can see on your screen I have written the piece of code so right now the age is 17 so of course is age is 17 greater than or equal to 18 false so this is resulting in false if it is false then whatever code you write inside the if block that will not be executed and whatever you write inside the else block that will be executed inside the else block I have written not eligible for driving license so let's run and see if you're getting else block or if block you can notice here we are getting the result not eligible for driving license that means whatever was there inside the else block now let me make it 18 or maybe 19 here now whatever data we have here is it greater than or equal to 18 yes it is greater than 18 then whatever you write inside the if block that will be executed you can see here we they getting the result whatever we had written inside the a block it could be anything not just one statement it could be whatever code you want to execute not just system.out.print we will explore with more example one more point I would like to highlight here whenever you have a single line statement inside if block or else block writing this curly bracket is optional you can ignore this though it is not recommended but however you have option to ignore you can write directly like this there is no problem here fine but however if it is having only single line statement if you have more than one line then must and should you may have to write this curly brackets though it is recommended to use the curly brackets for the good readability however you do have an option to write it or ignore it also I hope you have observed in case of if else only one block is getting executed though we have code inside the if block also we have code inside the L block also based on this condition whether it is true or false one specific block is getting executed not just this we can put multiple conditions also here not one condition you can write any number of conditions and you can execute let me write some code here as you can see I have written some piece of code on your screen within a variable score which is of integer type I have stored 85 also I have created one more variable which is grade by a type character now I'm checking if in case if the score is greater than or equal to 19 whatever data we have inside the score then I want to execute whatever code I have written inside the if block fine then if it is not greater than then then I have to execute whatever is there inside the lsf now I'm putting the multiple conditions here automatically whatever is there inside this that will not be executed again I'm putting one more condition now you can see here the score is 85 it will be checked here is whatever data inside the score variable is it greater than 90 the answer is yes it is greater than or no it is false actually it is not greater than 90 it is 85 here so of course this is resulting in false if it is resulting in false then of course whatever piece of code you have written here that will not be executed the matter will not go to L's block directly again it will come and check here else if again you're checking is it greater than 80 yes it is 85 right it is greater than 80 now whatever piece of code you have written here that will be executed in the previous example I was directly printing using the system.out.print length inside the if and else block right now inside this I'm performing certain operations maybe this data I'm storing inside this variable later at the end I will print it there is no problem both of them are equal you need not to print here if you want you can print here also great a great B there is no problem in that I would like to just store the data inside some variable based on certain conditions fine so now based on this of course else if this particular block will be executed inside the great variable B will be assigned and the remaining blocks whatever you have written that will not be evaluated that will not be even considered then of course control will directly go outside the if Els ladder and you have here system.out.print your grade is whatever data is there in inside this variable now based on whichever particular block is getting executed the grade value has been assigned right now since this block is satisfying the condition so that means this block will be executed so inside the grade we have a grade by the name b let me execute this program here if I execute you can notice your grade is B now if I just give here example 65 we can see here is the score greater than 90 no so this will not be considered again I'm thinking is it greater than 80 no this will also not be considered is it greater than 70 nope this also will not be considered finally the great F will be given if all of the blocks conditions are resulting in false then the finally we have else block which will be executed now if I have to run you can notice your grade is f I hope you able to observe one point here based on the condition only one block block is getting executed fine now there will be one situation what if more than one block is satisfying the condition for an example I will write here 75 fine here also I will write greater than 70 now you can please here the score inside this variable we have a data 75 whatever data we have inside this is it greater than 90 no so this is resulting in false so whatever code you write here that will not be executed again you're checking is it greater than 70 of course 75 is greater than 70 so this is satisfying now this condition is also satisfying both of them are true right now which will be executed will both the blocks will be executed no the first block if this block is already satisfying the condition the matter will not even go ahead it will not be even checked the further the you know the other blocks will be checked only if this condition is false example if all of them are maybe greater than 90 you have written a condition which may all of them may result in true if first condition is already satisfying it will not be evaluated the other conditions will not be evaluated that will not be even considered so if this is already satisfying if the score is greater than 70 since it is already true the other blocks will not be even checked that will not be considered that is not a part of execution even though this is also true it will not be even consider whichever the first block which is satisfying that will be considered now if I have to execute you can see you'll get the score as B you can see your great is B whatever code we have written here though this is also true this is also true but of course whatever is the first that will be executed I hope it is uh making sense let me just make it normal fine not just that you can also do the nesting inside the if you can write one more if else else if else if there is no problem inside this also if you want you can write again if else for an instance I will just check here and and score is score is maybe I'll say here less than or maybe I would like to say here less than 95 or maybe I would like to do one thing here it is greater than 85 greater than 85 and if it is less than 100 or maybe I would like to say greater than 85 or let me do one thing here let me just erase it if it is greater than 85 directly I'll not assign great a I'll do one thing again I'll put the condition fine so I would like to put the condition if it is greater than if it is score is if the score is greater than 85 greater than 85 and and if it is score if the score is less than of course it is already greater than 85 it has been checked here now I would like to check only this much if the score is less than or equal to 90 I would like to to assign maybe some grade else else I would like to do something else maybe I'll put one more condition here if it is of course if it is greater than 85 only then the matter will come inside the if block again if the in the if block I'm checking one more condition is it less than 90 then I would like to assign maybe it is as a I would like to say here it is a grade fine else if I will check else if I will check here if the score is less than 95 less than or equal to okay less than or equal to 95 then I will assign the grade grade equals to I will say here maybe E A or maybe I'll say here uh instead of me storing that again because in a character in Java we can store only one character not more than uh one character I would like to directly print here system.out.print Len I would like to say here A+ fine else else finally finally I would like to just print whatever data we have inside this particular variable so I would like to just erase this and I will say yes system.out.print Ln I will say here A++ similarly right now maybe I will write it rewrite it once again I would like to just directly printing because in a character we can store only one data let me just rewrite this as you can see here I am directly printing here instead of storing in a variable because you know very well that in Java car can store car data type can store only one character not more than one character so I'll not be in a position to assign A+ or A++ what body is there that is not a matter of concern whatever is there inside the if block whatever is there inside the else block is that getting executed now let's try to analyze here the score right now is 75 is the score greater than 85 whatever data is there inside this variable is it greater than 85 no so whatever code you write inside the else block that will not be executed so whatever you write here that will not be even evaluated now again you're checking here is this score whatever data you have inside this which is 75 is it greater than 80 no so this also will not be executed again is it greater than 70 so of course it is greater than 70 hence whatever code you write here that will be executed directly I'm printing here and you can see here you will be getting the output as C you can see I'm getting the output as C fine so let me just make it 85 fine now please see here is it greater than or equal to 85 yes this is satisfying right now at least it is equal to 85 so then whatever you have inside the else if else if else that will not be evaluated that will not be executed so of course because this condition is true if it is already true then the matter will not go further now in order to execute since the condition is true in order to execute whatever piece of code you have inside the evlog it will go inside again you're putting one more condition is it less than or equal to 90 yes it is less than or equal to 90 and this will be executed the other else if within the if block will not be executed so please uh see here so whatever code we have here that will be executed now let me make it maybe I'll say here 95 now maybe say here 96 fine if I give it 96 now whatever data we have inside this variable is it greater than 85 yes if it this is true then whatever code is there inside the if block that will be executed and whatever you have written here that will not be even considered fine so now it will go inside the if block again you're putting the condition is it less than 90 no it is not less than 90 so this is false again is checking is it less than 95 nope it is not less than 95 again the matter will go to L's block this will be executed right now whatever you have written here so you can see here A++ I hope you are able to understand you can put multiple condition you can do the nesting also inside this else if also you can write if else if else there is no problem inside this if block also if there is need arises again you can write if else if else there is no problem here I hope you could able to understand the if else ladder based on the condition it will execute certain statements or certain piece of code whatever you want to execute fine everything will not be executed I hope now you're able to understand the if else ladder I want you to write the code I want you to practice it so that you can have a good hold on this again this is just the start of this conditionals moving forward we are going to explore or we are going to use these conditionals very often you'll have a good hands-on experience now to start with I hope you got the basic picture of how this if else ladder works fine so thank you so much for joining me in this video again we'll meet in the upcoming video and learn the remaining basics of java thank you so much again for joining me in this video hello and welcome back in the last video we have understood if else letter if you want to make a decision to execute certain piece of code based on condition how we can use f else same thing can be achieved concisely using the tary operator also tary operator is the only operator which works on three operant the syntax is very simple here the syntax is you have to put the condition which will result in Boolean value whenever we say condition in Java conditions always result in Boolean value whether they are true or false now we will check is this condition true or false if it is true then whatever we write before the colon that will be returned if it is false whatever we write after the colon that will be written this result you can store back inside some variable this is the basic syntax here for an example basic example if I have to take I will say integer type of number one equal to 10 fine integer type of number two equal to 20 great now I will check is number one greater than number two is number one greater than number two if it is yes if it is true I want to return whatever data is there inside the number one else I want to return whatever data is there inside the number two then the total result I will store in a variable called as Rees if you check system.out.print what data is there inside the Rees then in this case you will find number two data now please see here number one which is 10 is it equal to 20 no of course this is this expression is this condition is resulting in false if it is resulting in false then whatever piece of code you write after the colon after the colon that will be returned that will be executed so N2 will be given and inside the Rees whatever data is there inside the the N2 that is present so basically here the output will be 20 very simple it is for an instance if I make it 100 here and I'm checking here is N1 greater than N2 the answer is yes this condition is resulting in true if it is resulting in true whatever piece of code you write inside the N1 before the colon whatever is there before the colon that value will be returned here let's take one or two examples and try to execute in the ID let me open Eclipse as you can see I have opened the IDE and same piece of code I have written here which you can check so inside the number one I have 10 number two I have 20 I'm checking the condition is number one greater than number to of course this expression this condition is leading to or resulting to false if it is false whatever is there inside or maybe say after the colon whatever is there after the colon that will be written so N2 value will be returned and it will be stored again in this variable which you have created so if this condition is satisfying if it is resulting in true then the piece of code which you have written before the colon that will be written if this condition is resulting in false whatever piece of code you have written after the colon that will be executed fine so of course if I run this whatever is there since it is resulting in false if it is resulting in false then then N2 code should be return to RS and if I'm printing Rees 20 should be the output you can see here 20 is what which I am getting here fine so let me take one more example here to check if the number is even or odd I will be writing that using the if else also same thing I will convert to tary operator let me write down here as you can see on your screen I have written simple code to check if the given number is even or odd even number means 2 4 6 8 odd number is 1 5 3 9 7 all of them are odd numbers I hope those fundamentals you are aware fine now number that means inside this 10 is there 10 mod 2 if you divide 10 by 2 What will be the remainer the remainer will be zero so hence this expression this particular condition will result in true if it is resulting in true whatever piece of code you write inside the if block that will be executed hence the output will be even here so let me just run this you can notice I'm getting even here if I make it maybe nine if you try to divide 9 by 2 right so of course the 9 mod 2 then the REM remainer will not be zero the REM remainer will be one so if it is one then of course this is resulting in false if it is resulting in false whatever is there inside the else block that will be executed so let me run here you can see we are getting whatever is there inside the else block which is odd same thing how we can write within the you know by using the tary operator if you have to observe here I will say here string type of result equals to okay let me just have that number here let it not be commenting this number let it be there now I'm just checking it fine is whatever data is there inside this variable mod 2 mod to if it is equal to Z if it is equal to Z then if it is equal to Z then I will right here if it is equal to zero it is a even number else else that means after the colon I will return odd I will return OD that's all fine and finally I will just print system.out.print in Rees so now please check here the number inside this is 9 if you try to divide 9 by 2 What will be the REM remainer the REM remainer will be one so this condition is right now false if it is false whatever you have written after the colon that value will be returned so after the colon we have odd odd will be written here and if you try to check you can see here we are getting it as odd making sense now if I just make it maybe 10 so if you try to divide 10 by two the REM remainer is zero so this is zero so this is true if it is true this condition is resulting in true then whatever piece of code you have written before the colon before the colon that will be written so so inside the Rees we have E1 and if you just try to print here you are seeing here E1 fine so same thing can be done using the if else also same thing can be done using the tary Operator tary Operator maybe you will not be able to find the readability but same code you can write concisely you need not to write so many lines can be done using the single line also how we have written multiple conditions here if else else if else if can something same be done using the tary operator also the answer is yes that can also be done for an instance I have a code here integer type of let me consider a few numbers here you can see I have created three variables here and I have stored the data 10 20 and 30 I want to check which is the largest number among three for which let me write the tary operator here so what I'm going to do here is I will put the condition here I will say is N1 is it greater than n two if it is yes I want to return return the value which is there before the colon if it is no I want to return return the value which is there after the colon fine now right now is N1 value greater than N2 no of course whatever is there after the colon that will be executed so N1 is not the largest value but I do have N3 also directly I cannot return N2 number again I have to check the condition here I will check here is N2 greater than N3 if it is yes then of course I will return return N2 if it is no I will return return N3 that means whatever value is there inside this N3 variable fine now if it is N1 is really greater than N2 of course whatever code is there before the colon that will be executed again we have number three also here directly I will not return directly N1 I will again check here one more condition is how we have done nesting there something similar I'm doing here I will say here is N1 also greater than N3 is it also greater than N3 if it is s then I will return N1 if it is no I will return N3 making sense here so let me just write one full expression here I would like to just write down in this style fine so let me just write one full expression here all right and finally I will store back the result inside one variable called as integer type of re s and let me just print here system.out.print I will say here the largest number is then whatever data we have inside re so if I have to run this of course you can see we are getting 30 so what exactly happening here let's understand first this will be checked is number one which is 10 is 10 greater than 20 no so of of course whatever is there after the colon that will be executed so if this condition is true only then the code before the colon will be executed fine right now this condition is false N1 is not greater than N2 so whatever is there after the colon that code has to be executed so directly I'm not returning n to here I'm again checking is N2 data inside number two is it greater than number three no so whatever is there after the again that will be return so N3 will be return so inside Rees we have N3 and you can see the largest number is 30 which you are getting a right answer here so whatever nesting you have done in case of if else same thing can be done here also again readability wise it is not so friendly but it is not difficult also it is also easy if you want to make a decision and execute certain piece of code based on the condition you can go with if else also and also you can go with tary operator but the way tary operator works the basic syntax I hope you are aware of it if this condition is true then code before the colon will be written if this condition is false then the code after colon will be returned that will be executed and that will be returned back and again that you can use it I hope now you have understood at least fundamentally the tary operator if there is any flaw you can reverse the video you can try to practice and I'm pretty sure you will be having good hold on that going forward we are going to use these operators extensively so thank you so much for joining me in this video please make sure to like the video subscribe the channel share with your colleagues and friends and also join our WhatsApp channel for the regular updates I'm going to come up with the multiple serieses I'm also recording design patterns spring Boot and indepth Java series there will be a separate Java playlist also coming up which where I'm going to teach in depth from the absolute scratch to the advanced level of java also for the regular updates please do join the WhatsApp Channel you can find the link in the description also in the comment section thank you so much again we will meet in the next video hello and welcome back in this video we will try to understand one more important topic switch case statement whenever you want to execute different case based on the equality then we go with switch case statement the syntax is very simple we will try to understand this with different example also we will see how it is different from if else ladder which is also very crucial for you to make the decision when to use switch case when to go with if else now the syntax is very simple here you may have to start with switch followed by you can write here a variable that means directly you can specify the data of or any expression fine then you have to open the curly brackets you may have to close it you have to write multiple cases fine you have to write multiple cases one case 10 cases 20 cases there is no limit in this fine then whatever we have written here expression or a variable if it is matching with whatever I write here whatever expression or a data I write here if it is matching with that then that particular case will be executed we have to say here colon and whatever statement you want to execute that statement you can write that is the basic syntax here let me write down here as you can see here whatever you have specified here if this is matching with whatever we write here that particular case will be executed if it is matching with this particular case wherever whichever case is matching with whatever expression or a variable you have written here whatever data we have here that particular associated case statements would be executed fine let's try to understand this practically we will try to take two to three examples and we'll get a better at it let me first open the Eclipse IDE and write down some examples so that you can have a better idea on this suppose I will store uh I will create a variable by the name day inside this I will give the number one based on the day maybe inside this day variable I will store the numbers from 1 to 7 based on the day number I want to print on my screen which day it is if it is a day one then Monday should be printed day two Tuesday should be printed day three Wednesday similarly day seven Sunday should be printed on your console I have to decide based on what is the current day day number I should decide and then based on it I have to print which day it is fine this can be done using the if else also there is no problem you have already understood the if else ladder let me write the code wherein I'll try to execute the same logic using IF else as you can see here I have written the if else ladder you know very well you have understood in case of if else only one block will be executed not all based on whichever blocks condition is matching that particular blocks code will be executed of course you may have to write within the curly bracket however we have also discussed whenever we have a single statement writing the curly brackets is optional fine now right now whatever we have inside the day it is one right so is 1 equal to equal to 1 of course so this is matching it is resulting in true so whatever code you write here that will be executed let me just run this So currently it is day one so it is Monday if I give here day four of course this is false this is also false is day that means data inside this variable is it equal to equal to two no it is false so this will will not be executed this is also false it will not be executed and this is true of course whatever we have here that will be executed so Thursday will be the result on your console which you can see here fine one more point you have to understand here is this if else will evaluate based on the Boolean this will result true or false Boolean data that is not the case with respect to switch we can also directly specify the variable and we can see if the data inside this variable if it is matching with any of the cases that particular statement will be executed also in case of switch case we can execute multiple cases also two or three examples we will try to see and we will understand for now let's convert the same scenario using the switch case let me comment down and write down the switch case statement here as you can see on your screen I have written the switch statement inside the variable by the name day I have stored four right now or maybe let me give it as seven fine now I am putting this variable here within the switch now whichever case is matching with whatever data we have within the switch that particular case will be executed right now inside the day we have seven is this day matching with this case it is not the case number it is the data it could be anything is this matching with this one no because inside the day we have seven so this is not seven it is not matching this case will not be executed similarly it is not two because inside the day we have seven not the two so this case is also not matching it will not be executed case this also will not be executed finally if you go this particular case will be executed because it is seven and inside the day variable also we have seven this is matching with this particular case hence whatever statements you have written which is associated with this particular case that will be executed so let me run here if you can notice here we are getting the output as Sunday that means this is the result now one more interesting fact you have to understand here if I give it four fine so is it matching with this this case will not be executed is this matching with the two no because inside the day we have four this also will not be executed finally it is matching with this particular case and whatever statement you have written Associated to this case that will get executed not just that all the statements or all the cases below this also will be executed so matching case and all the cases below that will also be executed whichever case is matching four is matching right now right so this case is matching this statement will get executed and all the cases below that will also get executed now if I have to just run this you can see here we are getting the output Thursday Friday Saturday and Sunday if if you don't want that to happen if you want this also to act like f else that means you want to execute only particular case not all the cases then you may have to use break statement here I will say here break that means if this data is matching with this particular data this particular case then execute this particular case statements and break stop this don't go further don't execute any other cases I want to execute this particular case only if this is matching with this then whatever case statement we have written here I want to execute that I know want to execute the remaining cases if that is the case you may have to apply break so let me just give break to everyone here I'll go and say here break and let me just add same to all my cases as you can see I have added the break now whichever statement is matching with this whichever case is matching with this only that one particular case will be executed because of the break statement all the cases below that will not be executed right now it is 4 so of course only Thursday will be executed unlike the previous output we will not be getting Friday Saturday and Sunday if I have to execute this you can see we are getting only Thursday this is possible because of this break statement if there is a requirement that you want to execute only single case you have to write the break statement now in case of if else only one block will be executed not all if this this is matching then whatever code Associated inside this block whatever code we have written only that will be executed no matter what other blocks will not be executed but in case of switch you can execute one case also you can execute multiple cases also if you use break statement only one case will be executed because whatever case whatever you have written here the expression or the variable if it is matching with any case that particular case will be executed and usually all the cases below that also will get executed but if you apply break if you have written the break statement then all the cases below that will not be executed only single case which is matching with this will be executed now you can write here one single variable also but in case of if else you cannot write it should be evaluated to a Boolean value true or false it should lead to true or false nothing as such I have you know declared one variable I have initialized that variable and I'm just using one variable also here there is no expression there is no matter of true or false here making sense that is also difference with respect to if else let me write one example wherein I will show we can execute multiple cases also whatever example I have shown so far it is executing single case maybe if I just have to say here one now inside the day we have one it is matching with this so whatever code associated with this case that code will be executed that statement will be executed and then you are writing a break statement if you write the break statement all the cases below this will not be executed if you don't write you know break then cases below that also will be executed that is what we have understood now let me take one more example wherein I will try to you know execute maybe two three cases at a time as you can see I have considered one more example for switch case now here based on the month number you may have to tell which weather condition it is which season it is fine so right now inside the month we have eight fine so if I say switch month that means we have eight here is it matching with 12 no is it matching with 1 no is it matching with two no then of course whatever we write here that will not be executed none of the cases are matching here also none of the cases are matching and of course 678 9 all of them are ma know matching here if I have to just execute this code you can see on screen we are getting Monsoon so for multiple cases we can execute common statement if you want you can give different statements also no problem you can write here maybe again and again for all of this you can just you know take it here and for all this you can write the same code there is no problem since for all these cases I want to execute a common statement you need not to write again and again you can just specify like this and for all these cases I want to execute Monsoon whether it is a 6 7 8 9 all of them I want to execute the same statement this is also possible with respect to switch case statement now let me just give here as maybe 10 if I give here 10 you can see the output we are getting Autumn here fine now if I just have to give here three you can see here month three is it matching with any of the cases here nope is it matching with any of the cases here yes it is matching and of course whatever we have written here that will be executed you can see here summer and everywhere I'm not applying break now I hope you are able to understand the different how different it is with respect to if else also in case of if else we have to evaluate to a Boolean data and also only one block will be executed at a time here you can see you can execute multiple cases and you can know write the break statement wherever you want if you want you can write in every case like the way we have done previously in this particular example or you can decide how many cases you want to execute fine in both ways you can use this switch statement not just that what if if I give here maybe 14 do we have any case which is matching with 14 no case which is matching with 14 right so of course there will be nothing nothing will be executed here I want something to execute like the way we have else block if none of the conditions are matching at last in case of if else ladder we have else block block similar here similar to that here we have something called as default case if none of the cases are matching automatically whatever you write within this default that will be executed so let me write down here as you can see I have written the default statement also so whatever we have specified here if none of the cases are matching then whatever statements you have written within the default that will be executed fine so let me just write down here you can see we are getting invalid month because for it is not matching with any of the cases so this is about the fundamentals of switch case I hope you could able to understand and also you could able to drive one difference between if else and the switch case all the possibilities which you have within the switch case thank you so much for joining me in this video again we'll meet in the upcoming videos and explore the fundamentals of java hello and welcome back in programming repeating the task is very common activity very often at given point of time you may have to repeat the same task again and again it could be anything it could be writing some piece of statement or it could be invoking some functions or you can say calling some method or printing something doesn't matter at given point of time at one place same activity if you want to repeat again and again for an instance the requirement here is I want to print five stars one below the other what is a big deal I can say system do out. print Len within the double codes and ask please print star I'm printing one star here the requirement here is I want to print five stars one below the other fine so what is a big deal in this I'll be writing the code I will just repeat this I will reuse the code whatever I have written here for five times five times Stars will be printed one below the other let me just run this here if you see five stars are getting printed not just five stars maybe I want some statement with I want to execute again and again it could be printing five stars or maybe I will just write my favorite quote here I will say focus is the key if you want to learn anything if you know if you are focused then it is very easy to learn so let me just I want to print this five times at given point of time at same point at same time I want to repeat the exact same activity for five times it could be 10 times it could be 100 times let me just do it for four times here you can see here four times I'm printing it and if I just run this you can see four times I'm writing here fine now whenever you have a repeated task which you may have to do again and again at given point of time instead of you repeating that statements again and again you rewriting that same code again and again you can write that once and make your program automatically do it for you how much ever time you want for an instance I want Focus is the key to be printed for 100 times I will not be writing that 100 times I will write only once and I'll make my program repeat for me for 100 times for 1,000 times 2,000 times 10 times doesn't matter I will be doing that activity once which I want to repeat at this point only then instead of you writing that multiple times write it once and make your program to repeat for you how much over time you want that's where the concept of Loops comes into picture in any programming language not just in Java when it comes to Java we have a for Loop we have for Loop we have y Loop and also we have do while loop okay do while loop and we do also have uh you know for each Loop or you can say enhanced for Loop Advanced for Loop now we will explore for Loop y Loop do y Loop what is the syntax and when we may have to go with what and once we get into the concept of arrays collection we will try to explore for each Loop for now we will start the journey with for Loop then we will explore while loop and do while loop fine so whenever you want to iterate or you want to repeat certain task for a finite number of times easily you can go with the for Loop and maybe you want to repeat certain task for infinite number of times maybe you don't know as long as there is a data in the database I want to Fitch all of them keep fetching the records then easily you can go with the Y Loop so there are some differences but all of them the purpose is same how what they know the differences with respect to syntax and when we have to use what we will try to explore also we are going to start the Journey of pattern programming so that you can start the Journey of logical thinking wherein you may have to use the concept of Loops operators conditions extensively having said that let's start the Journey of Loops hello and welcome back in this video we will start the Journey of Loops to start with first we will explore for Loop when it comes to for Loop we have three things which you need to know number one we have initialization then we have to write the condition check and then there is a update so let me just write down here and the basic syntax is very simple you may have to start with four and all these three things you may have to write within this first you may have to write the initialization here you have to start from where you want to begin then you have to write your condition that means how many times you want to repeat this activity right and then there is a update how it works we will explore to it now whatever you want to repeat that is considered as the body of the loop you may have to write within the curly bracket basically what happens here is first initialization will be executed based on this the condition will be checked if this condition is resulting in true then the body of the loop will be executed after the body of the loop everything is executed then the update comes into picture after the update again the condition will be checked if it is true then the body of the loop whatever condition which you're going to put here if it is resulting in true only then whatever you write inside the loop that will be executed starting only if this condition is resulting in false then whatever code you write within this body of the loop that will not be executed for an instance I want to print you know star for five times on my screen so I'll be writing that activity only once and I will make my program to repeat for me I will make my Loop to repeat for me right so I'll say here system. out. println I will say here print this star I'm writing only once right I want this to be repeated for five times 10 times based on how much of time you want it could be anything else also not just printing the star it could be invoking the functions invoking the methods also now I'll be keeping this within the body of the loop because this is the activity I want to repeat for multiple times which I'll be writing only once and the syntax is very simple I will say here for integer type of maybe I equal to Z usually in Loops it is a convention that we write variables i j k it could be anything you can give your own name here that should not be a matter of concern this is just a variable name you can give some other variable name also you can say start no problem fine after which I'll say I should be maybe I'll say less than five and I'll say I ++ fine so as I have told you the first thing to get executed here is the initialization I will say the first thing what are you doing here to a variable I you are initializing value zero so inside I I have zero here number two condition will be checked I'm checking here is I less than 5 inside the I I have a value zero is 0 less than 5 is 0 less than five of course yes so this expression this condition is resulting in true if it is true if it is satisfying then whatever you write inside the loop the body of the loop will be executed control will go inside this to execute whatever code you have written here so on what are you repeating here system do out. print and I want to print star so on monitor screen you will be getting one star printed again after this update whatever you write here that code will be executed number four and what are you doing here i++ in the incrementation and decrement operator we have seen i++ means existing value of this variable will be incremented by one that means if it is zero that will become one fine if it is one it will become two after which again the condition will be checked is I less than 5 is I less than 5 current value of I is 1 is 1 less than 5 the condition is true again control will come inside the loop one more time the star is printing again update it will become two again you're checking is I value less than 5 that means is 2 less than 5 the condition is true again again the body of the loop whatever code you write here that will be executed again incremented to three is 3 less than 5 again after update the body this part will be repeatedly happening fine now again one more star will be printed again it will become four is four less than five Yes again one more star will be printed fine again it will become five now again the condition is checking is five less than five five is not less than five this is resulting in false if it is resulting in false control will come out of the loop as long as this condition is satisfying that many times whatever you write within the loop that will be executed the moment this condition will result in false control will come out of the loop whatever repetion you have asked for that repetion will stop and whatever again after the Lo if you have written some code that will be executed fine I hope you could able to understand the control flow here let's write the code in the IDE and try to understand this as you can see here I have written the same Loop here I'm starting with the zero then I'm checking as long as I value is less than five please repeat this activity fine so if I have to just run this you can see five stars on your screen and maybe I want 10 Stars I will just make it to 10 times that means I want starting from zero I want this to be repeated for 10 times since I'm starting from zero I'm telling less than time 0 to 9 is equal to 10 if you start your loop from one then it should be I less than or equal to 10 1 to 10 since I'm starting the loop from the zero and I'm giving less than 10 so that 0 to 9 it will be executed if I have to run this you can see you'll see the stars for 10 times fine now you can also do one thing you can declare the loop whatever I variable is there outside the loop so that it is not local to only for Loop you can do like this also iter type of I fine and then you can just initialize the I here and I less than instead of you giving the value you can specify inside the N integer type of n equal to 5 and you can say here n both of them are same because anyway inside the N we have five if I say I less than n example current value of I is four four less than the value of n inside the N variable we have five so four less than five we are storing that within the variable and then we are using it nothing you know complex here fine I hope you could able to understand the fundamentals of loop this for Loop we are going to use extensively we will use nesting of the loops and so many things in our pattern programming journey to start with what is loop and basic syntax of for Loop if you have understood it is more than sufficient fine so thank you so much for joining me in this video if you have any issue you can rewatch this video any number of times please make sure to like the video subscribe the channel also share with your peers and Friends hello and welcome back in this video we will try to explore why Loop and do while loop what is the syntax of while and do while loop how they are different from for Loop first of all whatever I have done using the for Loop same thing I would like to do using the while loop also again whenever you have a repeative task at given point of time you can go with for Loop also while loop also do while loop also when what to use you need to understand here fine now I will say I equal to 0 I want to start from zero and I will say while while this condition whatever condition I write here in case of Y Loop within this we may have to specify only condition we will not be writing the initialization we will not be writing the update here I will say as long as I value is less than five or four maybe inside N I have five so I can say here n because anywh inside n we have five writing five writing n both of them are same here and whatever activity you want to repeat within this curly brackets you may have to write for an instance I want to print five stars it could be anything right I will print five stars please print this five stars while this condition is true while in simplified English you can say as long as as long as this condition is true please repeat this activity fine now maybe after printing star I want to increment I value if not the I value will remain zero if you don't change and this Loop will repeat for infinite times continuously non-stop because you're not changing the value of I and I value is always zero and N value is always five zero is always less than five and it will act like a true if this is resulting in true then whatever activity you write here that will be repeated for infinite number of times to avoid that I am updating writing the initialization writing the update is optional in case of while loop unlike if there is any situation for an instance whatever activity we are doing here which we want to repeat in this case initialization and update is important there will be many activities which you will explore going forward when initialization or you can say update is not compulsory maybe I want to retrieve the data as long as there is a data in the table of database I want to keep on retrieving it you can just put the condition here as long as there is a records available in the table please retrieve the record that retrieving part you can write here you need not to write update you need not to write initialization which in my Java Series going forward you will understand right now just understand whatever we could able to do in the for Loop same thing can be done inside the Y Loop also I'm initializing the I value zero I'm checking e zero less than n inside n we have five so a0 less than five it is resulting in true as long as this condition is true please repeat whatever activity we have here I'm printing Stars after printing one star I'm incrementing the value of I2 I ++ that means if it is zero it will become one if it is one it will become two fine so it will keep on incrementing five times and at one given point of time I value will become five is five less than than n is 5 less than five no this will result in false and control will go out of this Loop whatever code if you write after the loop that will be executed if there is no code nothing will be executed and that's the end of the application fine so let me just run this if I run this program you can see same five stars are getting printed whatever was happening in for Loop same thing is happening in the Y Loop also only thing is difference with respect to the syntax we just have to specify condition here if you have any update right within the body of the loop and you can initialize before the loop again I repeat this part and this is optional when it comes to while loop which going forward in the Java series you will understand now whether it is a for Loop whether it is a while loop whatever body you write here that will be executed only if this condition is true here also you are initializing only if this condition is true that time the body will be executed even if you want to execute for once also for the first time to execute the body of the loop the condition has to be true for an instance I will make it six great now I'm checking is six inside I we have six right so is six less than five no it is false this will not be executed once also once also it will not be executed now if there is a situation I want to execute the body of loop once and for the next repetion I want to check the condition for the first time I know want to check the condition I want to execute whatever is the body but to repeat I will check the condition that's where the concept of do while loop comes into picture now when it comes to do while loop the syntax is similar to while loop we may have to say maybe I initialize I value to zero that's fine I will say do this activity whatever you want you can say do and within the bracket this is the body of the loop whatever you want to do it maybe I want to print and after printing the star I want want to increment the value of I okay and that's it after which after the end of this loop I will write here while as long as I value is less than n n inside n we have created here five so it is I value if it is z 0 less than five and I will put here semicolon the syntax is different that's it so what happens here is I'm initializing the I value to zero for the first time to execute there is no condition nothing will be checked first time whether the condition is true condition is false whatever you write inside the loop that will be executed for the second time onwards for the repeat it will check the condition fine now I value is zero it will execute without checking the condition one star will be printed and then I value incremented to one and now you're checking is I is I which is one right now less than 5 if it is true then the second time it will execute then it became three here is three less than five again it will repeat fine so now if I have to execute this you can see five stars we are getting it whatever was happening in for Loop y Loop in the doy Loop also same repetition is happening let me make it to six here I will make it to six fine now even before checking this condition in case of do while loop it will execute once and to repeat it it will check the condition now of course whatever condition you have put here I less than n inside the I we we have six inside the N you can see we have five is six less than five no it is false right this is resulting in false but at least once the star will be printed you can see here if I have to run which you can notice I'm getting the star at least once for the second time it will check second time it is checking is six less than five no it is false though repetion will not happen whether the condition is true condition is false at least once it will execute the body of the loop if you want to repeat it only then for the repeat in case of doy Loop the condition will be checked I hope it is making sense here now the difference is while loop and for Loop it will execute the body of the loop once or 10 times or based on the condition as long as this condition is satisfying whatever condition you write here as long as this condition is resulting in true whatever body you have written whatever code you want to repeat that will be executed n number of times as long as this condition is true fine in case of do while loop whether condition is true false it will not even check at least once it will execute the body of the loop and for the repetion the condition will be checked whether it is true or false fine now do y Loop and Y Loop we will explore going forward with different examples to start with now we are going to start the Journey of pattern programming for which we will explore for Loop extensively we will understand the nesting of for Loops how to write multiple for Loops so you will have good hold on F else for loops and all the operators which we have seen so far you'll be very good in writing the pattern programming the agenda is not to write some patterns not to print some star agenda is to have a good hold on whatever Concepts we have learned so far fine so thank you so much for being with me in this video please make sure to like the video subscribe the Chanel Channel also share with your friends and colleagues fine hello and welcome back in this video we will start the Journey of pattern programming in the process you'll understand more on Loops how to write Loops inside loop which is nested Loop also whatever fundamental concept you have learned operators conditional which is if else and Loops you will have good hold on that you'll be having the ability to think and write a logic to draw any complex pattern I'll be teaching you such a logic wherein operators conditionals and Loops are used extensively so that in the process you can also have good practice of all the fundamentals which you have learned so far before I get into this first there is a small topic which I would like to highlight here which is system.out.println and print you know very well if you want to print anything on your console using Java programming language you may have to use system.out.println that is the often we also have an option to use print also now we need to understand for first what is the difference between print Ln and print let me open the IDE directly here so if you want to print something of course based on the IDE you're using there are lot of shortcuts but the statement which we may have to write here is system.out.print len within the double codes I will say print one star whatever it could be not just star it could be anything fine print Ln means whatever you're printing that will be printed and you're asking cursor to move to the next line that means after printing this if you do something else some other activity printing activity that will happen in a new line example I will say system.out.print again I would like to print star here now again let me just print one more statement system.out.print Ln again star here now in order to print star on your console I am using print Ln Ln means print this after this whatever next printing will happen that should happen in the next line not on the same line if I have to run this you can see stars will be printed one below the other in place of print Ln if you go with print print means print this star and the next activity of printing should happen in the same line that means after printing this on the console this no cursor should not move to the next line it has to be in the same line it will print one star after printing the star cursor will be in the same line that means the next printing whatever you do on your console that will happen on the same line now for all this I have used print print print not the Ln that means print this star be on the same line don't go to next line Ln means print this go to the next line print means we have not used print Ln here only print print this star be on the same line that means next printing activity will happen on the same line if I have to run this you can notice print maybe after printing three star I want the other things to happen on the next line in the last line I will say here print Len you can see here I have told print here print this star be on the same line the next printing will happen on the same line again I have told print this star be on the same line one more star printed and again I'm telling print this star but you have told Len after printing the star go to the next line so three stars will be printed in the same line and curser will move to the next line please see here I'm printing three star will be on the same line but after this whatever next activity you will do it could be anything maybe I'll say here hi any printing doesn't matter this will be printed on the next line because while printing this star I have told print this but go to the next line after printing fine here I told print print this be on the same line print this be on the same line two star printed the third star also in the same line the cursor is still in the same line third star printed while printing the third star on the same line you have told please go to the next line after printing this so the next printing activity will happen on the next line if I have to just run this program you can see here it is printed on the same line but the next activity happened on the next line so basically print method head will print whatever you're doing whatever task you have given here on your console and the next printing will happen on the same line if you go with print method print Len it will print and the next printing activity on your console will happen on the next line that means print this go to the next line I hope this fundamentals you could able to understand now it's time to move to the nting off Loops more on the pattern programming okay the requirement here is very simple I want to print five stars or maybe four stars doesn't matter how much you want let's go with the five on the same line great now all of them are in the same line so should I go with system.out.print Len or print your answer must be print method because after printing the star I should stay in the same line to print the other stars fine and also should I write multiple system.out.print here or we should write only once using the loop we should make our program to repeat for us how much over time we want fine so I want to print five stars I will write the statement system dot out do print method I will use of course it has to be full I'm writing shortcut but I hope you can understand that print and within the double code I will print one star great but this printing the star print I have used here on same line should happen for five times not once you will not be writing multiple times in the loops we have already understood that we should write this once and make our program to repeat for us in that case whatever activity you want to repeat that you have to keep within the body of the loop okay this activity I want to repeat for five times now I would like to go with the for Loop which you already aware of I will say here integer type of maybe I please start from the zero Go up to five less than five me up to four 0 to four 0 1 2 3 4 totally five times I want i++ one by one please increment the value of I if it is zero make it one and check the condition if it is one make it two check the condition fine so now let's Analyze This I will start from here of course the I value is zero initially we have understood this in our for Loop class one more time before I get into the nesting of loop Loops I'm discussing this again the second part is I less than 5 that means what is the current value of I is Zer less than five it is true if it is resulting in true whatever body of the loop you have written that will be executed so on your console one star will be printed since you have told print after printing the star cursor will not go to the next line cursor will be on the same line again fourth part update will happen after body update I ++ current value of I is z 0 will become one it will increment the existing value of a variable by 1 so 0 became one again the condition is check is I less than 1 the current value of I is 1 is I that is is is 1 less than five less than five now this condition is true one is currently you know of course less than five so again the body of the loop will be executed inside the body of the loop what are you doing you're printing one star since you have used print while printing the cursor will remain on the same line that means next printing also will happen on the same line similarly I value will be incremented to two again 2 less than five one more star will be printed again I value incremented to three 3 less than 5 One More star will be printed because this is also true I value is incremented to four by following the similar pattern which we have discussed now in the for Loop video also fine I4 less than 5 so of course one more star is printed after which I value became five by incrementing this process will follow fine and five less than five no condition fails control will come out of the loop after the loop by chance if there is any activity which you want to do on the next line after printing five stars after completing this loop I will say here system do out do print Ln that means next printing activity I want in the next line so cursor will go from here to the next line so basically this Loop we have already understood right within when we have discussed the concept of for Loop now what we are trying to achieve here please see very carefully now the requirement here is I want to print five stars one below the other what do you mean by that this is my goal which I want to achieve as you can see on your screen this is what I want to achieve right now all of you know how to print five stars in one line fine for which we may have to write one loop I will say system dot out do please print five stars grade in single line so this activity I want to repeat print I have used here five stars on the same line so I will keep this entire activity within the loop I will say here for integer type of you can give any name to i j k start and whatever variable name you want want you can give I will give here J equal to0 I will say here J less than 5 j++ based on whatever we have discussed this entire Loop will print five stars in one line and this activity this activity I want to repeat for five more times because same thing I want to do for five more times you can see four more times totally five times this is one time whatever code you can see on your screen this will print five stars on same line fine so same thing I want to happen for four more times totally five times let's write the code in the IDE as you can see I have written the code maybe whatever variable name you want you can give it so that should not be a matter of concern so let me just make it J for this okay J so J less than n and j++ n means whatever value you have assigned here I'm using print Ln here it has to be print that means it will print five stars on the same line which you can notice here five stars on the same line after printing five stars I want the cursor to go to the next line all right great it will go now printing five stars on the same line I want to do it for four more times so I'll keep it for four more times you can see here three times four times totally five times so if I have to run this you can see I'm getting this agenda now whenever you have a same activity which is repeating again and again what comes into picture Loops comes into picture so instead of we manually writing this again and again this entire activity which I want to repeat for four more times totally five times can I keep it within one more Loop answer is yes so this entire activity I want to repeat so I will just say here maybe I have already defined I equals to0 Z I will say I less than n i++ that means whatever this entire activity is there I want this entire activity to happen for five times so all of you know this will print whatever you can see on your screen this will print five stars on the same line and get after printing five stars get the curser in the next line this activity of printing five stars on the same line after printing the cursor should come to the next line this entire activity I want to repeat again and again so this entire activity I have kept inside one more loop loop inside loop is called as nesting of Loops so same thing let me just explain how this will be executed now this activity I want to repeat right so same activity I will be writing for four more times totally five times so this activity after printing inting five stars I want the cursor to be in the next line so print Ln this activity I want to repeat so I'll keep it within one more loop I will see here for integer type of I equals to0 I less than maybe 5 I ++ I ++ so of course Loop execution will start from here number one I equal to 0 so inside i0 will be assigned great I'm checking the condition is I is I less than 5 inside I we have zero is zero less than 5 the answer is right it will go inside the loop third part is Loop right now it is encountering one more Loop here immediately then that Loop execution will start what are you telling here J equals to Z that means inside J we have zero again the condition is J less than 5 that means inside the J we have you know 0 is 0 less than 5 so this is true again the body of the loop in the body of the loop you are printing one star after printing the star j++ J value will be one and after printing the J value again this condition is checked one more star is printed again J value incremented to two is 2 less than five true one more star is printed so like the way we have already discussed this for three times this entire Loop will print five stars in one line at one position this condition will result in false the moment this condition is resulting in false by incrementing the know J value to five finally it will check is five less than five it will be false the moment it is false control will come out of this Loop the moment control is coming out of the loop you're telling system dot out do print Ln that means after this is over go to the next line curer is waiting here again the outer Loop value will be incremented which is I ++ I will become one e is 1 less than 5 the condition is true then again whatever code you have written inside the inner loop that will be executed that means one more row of five stars will be printed at one position inner loop condition will result in false for which control will come out of this inner loop it will come out of this inner loop system do out. print Ln again it will print I mean to say cursor will come into the next line again outer loop incrementation will happen it will become two now e to less than five yes condition is true again the inner loop will execute for one more entire loop I hope you are able to Now understand how this is working especially if you have watched whatever we have already you know discussed in the for Loop video and this video from the scratch I don't think so any issues you have you can take down the pen and paper and also would like to know analyze I want you to analyze how this is working the way I have explained fine so this is what you know whenever you want to repeat some activity we write the loop and this entire activity only I want to repeat keep this entire activity inside one more Loop the nesting of Loops comes into picture Loop inside loop now how this is executing I hope you could be able to understand if there is any ambiguity you can rewatch this entire video also same code I have written in the IDE also you can see here if I have to run this you can see five stars we're getting one below the other also one beside the other also so this activity will print five stars after printing five star c will be the next line and this entire activity I want to repeat for five more times I have kept it inside one more loop as simple as that fine so that's all for nesting of Loops but we will we have just started the Journey of pattern programming upcoming videos Will based on the pattern program we are going to explore so many examples I'm pretty sure all of you will be very much confident in a way that any pattern in front of you you can give the solution in fact if the interviewer ask you could you show your pattern programming skills logical thinking skills by drawing my face as a pattern you can definitely do that also such logic I'm going to teach where operators loops and the conditions will be used extensively if they are using extensively that means you will have have good Hands-On practice also on these fundamentals Concepts so we will be learning the pattern programming also in the process we will have better hands-on experience on the fundamentals of java thank you so much for joining me in this video please do like subscribe and share this video with your friends and colleague we'll meet again in the upcoming videos with pattern programming hello and welcome back now let's start the Journey of pattern programming in fact we have unofficially started the Journey of pattern programming the concept of loops and nested Loop we tried to understand loops and how nesting of loop works by drawing certain patterns we need to understand more here whatever logic I'm going to teach for this pattern programming I'm going to use the concept of operators relational operators The Logical operators if else conditionals and Loops extensively so before you get into this video make sure you watch all these fundamental videos which are there in this channel so that you can comfortably understand what we are discussing here fine so as you all know which we have seen in the last video this logic whatever is there in front of you this will print five stars on the same line right in one row that means five columns it will print five stars in the same row same thing I wanted for five more times so this entire activity of printing five stars getting the cursor to the next line printing five stars getting the cursor to the next line this activity I wanted to print the entire activity I have kept inside one more Loop because this activity I wanted to repeat at given point of time so I have kept it within one more Loop and we try to understand how this Loop is working fine so you can see if I just run this it is printing five stars everywhere fine now if you want you can give one space here so that in looks wise it will just look a little better if I just have to run here you can see Star followed know followed by the space it is just looking better now the agenda here is I want to develop a logic which will print this stars now you can see compared to whatever we have already developed which is printing Stars everywhere here there are no stars everywhere there are stars only at the specific places and in some places there is a space consider whatever you can see here all these rows are the part of outer loop outer loop means I'm referring to I so consider these are the I values which is outer loop this this is i0 I = 1 I = 2 3 4 and whatever you can see here all these columns consider they are the part of inner loop J as you all know J Loop will print this all columns I mean all the stars in one row that means these columns these Stars they the value considered as the J value inner loop value so here the value of J is z 1 2 3 and 4 fine now if you write the same logic what we have already written earlier it will print Stars everywhere I know want Stars everywhere here in some places I want Star in some places I want space fine now for which directly if you write the loop it will not work out you may have to put some condition if certain condition is satisfying I want to print the Stars if it is not satisfying I want to go and print the spaces fine so wherever I value is equal to equal to Z wherever I value is Zer I need stars or or wherever J value is equal to equal to zero all this you can see whenever J value is equal to equal to zero I need Stars whenever I values is equal to equal to Zer I need stars or whenever I value is equal to equal to 4 based on the values which I have given here I need Stars this is the value of I all these are the value of I all these are the values of J or whenever J value is equal to equal to 4 when the J value is these are all the J values right when it is equal to four I need star rest of all the places I need space so I'll put one condition if in case I value is zero or J value is zero or I value is four or J value is 4 I want to go and Print Star I will say system dot out dot please do print one star here fine else else remaining all the places I will say system do out. print it is not print Len it is print method you already know the difference between print and print Ln method I need space space means you need not to write anything just give one space in between nothing more than that space fine so this everything I will be keeping within my J Loop earlier I used to print my stars directly in the J Loop inside the J Loop now I'm putting the condition if in case these values are satisfying I need to print star if these values are not satisfying I need to print the spaces fine so let me complete this Loop here as you can see I have written the J Loop here once the J Loop is done I will say system do out. print Ln like the way we have already discussed then I will write my I Loop for integer type of I equals to 0 I should be less than five because I want to go up to four and I ++ fine so same program only instead of directly printing the Stars I'm just putting some condition if it is satisfying go and print the Stars if this condition is not satisfying please print the you know space here what is this R operator how it works we have already seen and also we have discussed the concept of the conditionals also fine so let me just open the IDE here same program I don't want to print star everywhere I'm just putting some condition this is fine if you just execute this program it will print Stars everywhere right all the rows all the columns it will print the star I'm putting the condition some places I need star and I'll say some places system.out.print Ln of course it is print not the Ln it is the same line I'll go and give two spaces here why because here after star I do have spaces it will just print good so two spaces if it is one star without space just give one space in between so some places I need star some places I need space everywhere I know one star so I will be putting some condition if in case if this condition is satisfying please go and print this star go and print this star else else if it is not satisfying please do print this page whatever space you have you know uh given here I want you to print this space fine great now I'll be putting the condition what is the condition if you just look at the pattern which is there here whenever I value is zero whenever I value is four I need star whenever J value is zero whenever J value is four I need star rest of all the places I want to print you know spaces so I'll go here and put the condition whenever I value is equal to equal to 0 or whenever J values equal to equal to zero or or of course let me just write here or whenever I values equal to equal to 4 whenever J Valu is equal to equal to 4 I need star let me just make the value of n is five n is five means it's fine four we can give it will print the right pattern I will make it you know dynamic also generic Also let's do that first let me just run this application here you can see we are getting the pattern as per the plan whatever we had you know planned the same pattern we could able to print here fine now instead of me giving the four here what's the value of n n value is five and how do we get four if the N Val is five that means inside the N we have five if we want to get the four if I write here n if I write here n n if I write here that means it is five I want to print less than five less than five 0 to four five patterns five stars if you want to print 0 1 2 3 4 that means it should be less than five because we are starting the loop from the zero so if I write n here it will go for five and the loop is not looping for five times it is looping for less than five it is looping the maximum is four here less than five means till up to four only and we cannot write here n so I will say n minus one N - one and here also I will write N - 1 what is the value of n the value of n right now is 5 5 - 1 is how much four 5 - 1 is how much four you writing the four here it is same right four I'm writing or you can write n the value of current n is 5 5 - 1 is 4 both of them are same fine so now if I just run this program you can see here we are getting the same stars without any problem here this is basic math I hope you can able to understand here so consider starting value zero if the value of n is five the last value is always N - 1 which is 5 - 1 5 - 1 is 4 I hope you could able to draw the logic here fine now suppose I want to achieve let's try to write more patterns so that we can understand this better the next pattern which the agenda here is let me draw the pattern here for which we may have to develop the logic now let's develop the logic for the given pattern which is there in front of us fine now same logic the loops will be you know you may have to write the loops it will be same I'll be focusing only on whatever we write inside the if block fine the remaining logic will remain same I will be just writing let's focus on writing this logic which we may have to write inside the if condition if that condition is satisfying we want to print the Stars if the condition is not satisfying we may have to print the spaces so let's focus only on what we may have to write inside the if Block in the nesting of the loops in this particular video we have understood how we have to write the full program now let's focus on the logic which we may have to build in order to get this pattern fine so whenever I value is equal to equal to z i value is equal to equal to 0 I want to print the Stars see here whenever I value is zero I want to print the Stars great whenever or whenever J value is equal to equal to zero When J value is zero I want to print the Stars fine or whenever J value is equal to equal to 4 four you can also go with n minus 1 fine nus one if the value of n is 5 it is 4 n mean of course n minus 1 that is current value of n is 5 5 - 1 is how much four you writing the four or you writing the N minus one both of them are same if you write n minus one it could be generic you can just change the value of n the same pattern will print maybe you can give value of n is 10 then it is 10 - 1 is 9 the last value it will print the last whatever column is there for that column it will print the Stars here better to go with the value of n fine so if you write J equal equal to nus1 that means the last column that's the last value is always n minus one the last value is always n minus one you can consider that fine this fine now I know what starts here when the value is n minus one I value is n minus one the last I know one starts everywhere here I want start in the middle fine so if this is n minus one if N - 1 is 4 n - 1 by 2 that means N - 1 is 4 4 by 2 is 2 exactly at second placee we can get it we can say I equal to equal to 2 I need star we can say that there is no problem instead of V seeing two we can also say n -1 by 2 what is the n n Val is 5 5 - 1 by 2 that means 4X 2 4 by 2 is how much 2 only so you writing n- 1 by 2 or you directly writing two there is no problem if you write directly two if in case if you want want to increase the size of the pattern you may have to make changes here also always so in order to make it generic if we change the size of the pattern n value if we change we want to change this pattern then go with the generic n so you write directly two or N - 1 by 2 that means exactly half if this is nus 1 by if this is nus 1 N - 1 by 2 half of this is Middle right so I will go with nus 1 by 2 so we will be able to get this this pattern let's go to the IDE and try to get solution for this and we have already seen this let me just comment this part so I would like to just write the same thing here and let me write the logic for the pattern which we have got it whenever I value is equal to equal to zero I need star J value is zero we need star and whenever J value is equal to equal to n minus one the last column we need star and whenever I values last column the last r we don't need Stars half of that we need star so whenever I values equal to equal to nus one the last value divided by two that means half if the last row is n minus 1 half of that is n - 1 by 2 I hope that basic maths everyone knows exactly at half and if I have to just run this program you can see on your screen as per the plan we are able to get this let's draw two or three more basic patterns and then we will go for the advanc so that you are getting comfortable for this so now the agenda here is the end goal here is we may have to draw this pattern so let me just write down that pattern here as you can see let's write the pattern for these three things these two things okay so you all know these are the value of I I equal to 0 here and the last value is always i = n minus 1 the first value is j = 0 here and the last value is nus one and of course if the last value is n minus one exact ly the middle value will be N - 1 by 2 half of that and if the last value is nus1 then the middle value exactly at middle we have n -1 by 2 by two of the last value the last value is 10 then 10 by two is five right 10 by two is five so of course it is the middle I hope that fundamentals you know so I know one starts everywhere I'll put I'll be putting the condition is if in case I value is equal to equal to Star let me just change the pen here I value is equal to equal to Star I need star that means I value when it is equal to zero I need star great apart from that do we need Stars when the I value is uh N - 1 by 2 or nus 1 no that's all great whenever J value is equal to equal to n minus one n minus one if you stop it will print last entire column will be printed I know want that n -1 by 2 N - 1 by two means exactly at the middle When J Valu is at this point I need Stars when I value is zero I need starts rest of all the places I need spaces we may have to put within the if block for this right now coming to this you can see these all the I values I value zero exactly at Mid I Valu is n - 1 by 2 the last is n - 1 here 0 N - 1 by 2 the last is n - 1 great so whenever J value is equal to equal to zero and it star when these all the J values okay when J value is zero I need star great whenever J value is equal to equal to n minus one that means the last value is always n minus one I need start great or whenever I value is zero I don't want I value is nus one I don't want whenever I value is at the middle these rows I value is equal to equal to n -1 by 2 N - 1 is Last by two means exactly at the middle whenever I value is equal to equal to n minus 1 by 2 and it starts rest of all the places we may have to print the you know spaces so let's go and write the same logic in the IDE here so of course uh this particular condition I would like to comment down I'll go here first let's write the logic for the T so whenever I value is zero and it starts and whenever J value is equal to equal to N - 1 by 2 at the half nus 1 is the last value half of that if the last value is 10 half of that is five at the middle I need Stars fine so if I have to just run this you can notice we are getting the pattern as per the need whatever we were expecting fine this is the most easiest one if you could able to get it now of course for the h also it is very very similar so I would like to say here whenever J value is zero and need star or whenever J equal to equal to n minus one the last value I need star if you write only this much then of course you'll be getting these two things and whenever I value is half I need star so what I'm going to write here I will say here or whenever I is equal to equal to nus 1 by 2 that means half of if n minus one is last value half of that is the middle value these all rows are considered as the I values which we have already discussed so if I have to just run this you can see we could able to get this pattern fine so before I even go for the any complex pattern I would like to show how do we write these patterns one beside the other we can write it by writing a big expression inside the if only by writing I J's all the logic together that will be complex but we can write one beside the other how do we write let's try to understand that here let me create a new program first of all you all know this particular logic which you can see on your screen will print H if I just have to run this please see here we are getting the H okay okay there is some so error exits so let me just know Rectify that of course we may have this extra one okay I think we may have to close the method we may have to close the class done the problem is solved let me just run this if I have to run this you can see we are getting this I want something beside that right so what I'm going to do is before system.out.print Ln before that same thing same J loop I will write once again I will write this once again it is in the same I Loop this is the closure of I Loop in the same I Loop before system do out. print Ln I'm writing this maybe let me write for one more I will go here and write for one more that means three alphabets we can print now in between if you want space I will say like the way you can see here see maybe I want two spaces so I'll give two it should be print between one J Loop to another J Loop whatever system. out. print I'm writing it should be print not Ln how much of space you want you can give here fine see here at the end we have system.out.print Ln within same IL Loop before system.out.print Ln I have written Three G loops this will print the value of hit and let's go here and print the uh value for the T maybe t means I equal equal to Z or I will say Jal to equal to nus 1 by 2 when the J value is at the middle this will print T and if I have to maybe print here let's print I value here I means whenever I value is equal to equal to zero or I values equal toal nus 1 that's great or Jal toal to N - 1 by 2 when the J value is at the middle I value first last and J value is at the middle fine so let me just run this application if I just have to run this program you can see we are getting the things in the same line with the required space Also h t i in the same row if you want to print the multiple patterns one beside the other how to write I hope you have seen you can rewat the video this is recorded video that particular part if you have missed you can just go to that part and reward watch it so I hope you are able to understand the fundamentals of patterns here fine so let's let's draw a little bit more complex in terms of alphabets only before we get into the complex pattern programming how to draw the triangle rombos all those things right angle triangle in fact you'll be in a position to draw someone's face all of that we will see to it let's go ahead here maybe I want to draw D here fine so I will say here this is my pattern of course as you can see it is looking like a d so you all know that these values are I values so I value here is zero and I value here the last value is always n minus one so of course by default the middle value will go for nus 1 by 2 same goes here J value here always zero the last value is this at here the J value is n minus one at the middle it is n -1 by 2 this you already know now if I say whenever I value is great no equal to equal to Zer it will print star from here till the last but I want till four When J value is n minus one here I know want Star I know want Star here if you write star it will be like the first pattern which you have developed I want it to go here and it should be like this so here I know one star fine these are the J values so when I equal to equal to Z I need star but at that time I'm putting and make sure J value is less than n minus1 all these are J values right when I equal to equal to Z I need star that time make sure this J values whatever you have it should be less than nus one less than nus one means wherever n minus one is there that where that particular place star will not be printed less than that before nus one so this place star will not be there before that star will be printed fine all or this is done whenever I equal to equal to n minus one if I say Stars will be printed from starting till the last here also start will be printed but I don't want here I want to stop it here right so I will put and I value is or J value these are J values these are J values right so J value is less than n minus one that means this is J is n minus one here it will be less than this before this that means still here only it will print this and of course here there is no problem so I'll say here whenever J equal to equal to zero I know start from starting to last no problem here now how about the remaining Stars consider these are the I values these are the rows these are the sorry columns J values these are the I values fine this is fine no problem I'll say R now whenever J equal to equal to n minus 1 if I say if I say J equal to equal to n minus one you will be getting the starts from starting till the last if you just say n minus one J value this is n minus one right it will print starting full row I know one starts here right so I'll putting the condition and I value make sure that time is greater than zero because this is I Zer right I is one here I is z here one here two here greater than zero that means after zero When J = to equal to n minus one this line I even star but I didn't I know I know want everywhere that time make sure when J Valu is n minus one I need star but make sure and make sure I value is greater than zero after this after Z and and J sorry I value is less than nus one this last value of I is nus 1 it should be less than this so when J value is nus1 one this row I need star but during that time I value should be greater than zero that means after zero I value is before nus1 less than n minus one so that line I want starts only here so when J is n minus one I value should be greater than zero j i value should be less than nus one only these places I need star so only I'm putting and here making sense one more example I will take here so that you can understand better so let me just write this logic same logic I would like to draw here so if I have to you know write here let me go back to the previous example and of course I may have to just change this part so let me just comment this part and let me write the same logic which we have already discussed let me write that logic here as you can see I have developed the logic here so whenever I is zero that time make sure the J value is less than the last value whenever I is n minus one the last row make sure that the J value is less than the last value of course it is not nus 1 by2 it is just n minus one it should be less than n minus one fine so whenever J value is zero that line full line need start there is no problem whenever J value is n minus1 that time also I value should be greater than zero When J value is the last n minus one I value should be greater than zero and I value should be less than the last value if I just run this program you can see as per the expectation we can get the result on your console you can see the result we are getting this t fine if you want you can stop printing this you know know space you'll get just Stars it is looking like a d only fine so let's write one more last alphabet logic here so that and or operator you can get comfortable before we get into the complex pattern programming this is just the part one of it so let me just draw one pattern for which we may have to achieve the logic here let me write down the pattern here now let's develop the logic for this like it is looking like a o or you can say circular shape I want to achieve this fine so what I'm going to say here is whenever these all the I values I = to 0 here I = to n minus 1 here these are the J values J equal to 0 here J equal to n minus one here great keep this in mind whenever I equal to equal to Z I need star if I say and if I stop star will be printed from starting till the last I know want here also I know want here also when I Z I want Star but not everywhere so I'll put and J value should be greater than zero these are J values right it should be greater than zero and and J value should be less than n minus one J value should be less than this these are J values so when I equal to Z I need star that time make sure J value is greater than zero and J value is less than nus one only in this place I want it fine this is one or if I say whenever J equal to equal to0 it will print star When J is zero from starting till the last so I know what everywhere so again I'll put the condition and these are the I values right I will say here I value is greater than zero When J is Zer I need it but I value should be greater than zero after zero not zero after zero here all this I should be printed and and I value should be less than nus one that means this should be less than nus one this is the last value is n minus one before this when J is zero I value should be more than zero and J and I value should be less than n minus one before this so all this I want Star great same goes the other two Logics so I'll say here whenever J value is equal to equal to n minus one this part is also same When J value is nus1 I value should be greater than z i value should be less than nus 1 before this after zero so again I would be writing the same logic I value should be greater than Z and I value should be less than n minus one great or the last value when I equal to equal to n minus one if I say only this much stars will be printed everywhere that time this J value should be greater than Z less than nus one only here I want that time when I is n minus one make sure J value is greater than zero after zero and J value is less than n minus one if you write this definitely you will be able to achieve that so let's write the same pattern here let me just write down the logic for the same here so whatever I have discussed same thing we have written here fine so let me just run this program and see if we getting the desired result you can see we are getting the desired results whatever we had planned we could able to get that result here fine so with practice if you just focus more you will be in a position to understand the approach which I'm trying to say fine we have to discuss more on this approach this is start of this journey fine I hope you could able to understand if you could be able to focus anytime you can rewatch the entire video again I say before getting into this video is you should be comfortable with the concept of operators if else and the loops which we have discussed kindly watch those videos If you face any difficulties First Complete that videos one more time and again get back to this video and you can also watch it in 1.5x speed 2x speed but with complete Focus you will be able to understand what is the approach I'm trying to say this is about the part one of pattern programming I hope you're also getting comfortable with the concept of loop if you know if else and The Operators also Now by keeping in mind that you have understood this by re-watching the videos by practicing it by listening to the focus I'll be discussing the part two of pattern programming where we we try to discuss little bit Advanced concept fine and also to make sure please do like the video do comment and also share with your you know peers and the CBS thank you so much again for joining me in this video hello and welcome back now let's continue the Journey of pattern programming I would be keeping in mind that you have already watched the part one of pattern programming and also you are very comfortable with the fundamentals concepts of java such as operators loops and conditionals fine so now let's proceed here I want to draw this pattern fine so let me just complete this pattern here you can see I have completed it is looking like a maybe diagonal fine so I would like to give a name to this pattern maybe D1 you can say diagonal 1 or D1 I want to draw something like this fine so let's drive how we can do for it so I would like to consider this is for my D1 and let me see what is the value of I wherein I need star what is the value of J when I need star so whenever I value all these are the I values all these columns are the J values fine so whenever I value is zero J value is zero I need star when I value zero J value zero I need star whenever I value is one this is one and J value is also one you can see here whenever this is the case I need star whenever I Val value is two J value is two and need star similarly whenever I value is three J value is three I need star fine similar to that whenever all the values of I is equal to all the values of J then I need to print star that means here also you can see value of I is same as the value of j i is also 10 J is also 10 I need to print star that means all these 0 1 2 3 4 till 10 and all the values here they are the values of I and J so I would like to say whenever I value is equal to equal to J value I want to print the star so if I just write this formula definitely we will be in a position to get this let me open the IDE and try to execute this program here I would like to open and you can see here I would like to just write here whenever I value is is equal to equal to J value I need to print star if not I would like to print the spaces let me just run this program you can see on your screen we are able to get this diagonal which you can see here fine currently the value of maybe you know n is 5 here let me consider the value of n equal to 11 fine so that's fine n minus 1 me 10 so till 0 to 10 it will Loop so let me just run this program and you can see the result we are getting one diagonal fine so now let's proceed further here very simple formulas you need to understand this and if you could be able to understand then definitely any complex pattern also you will be in a position to give logic fine so this is about the D1 now I want to draw Stars here maybe I'll give the name as D2 let me complete these Stars here as you can see on your screen this naming I'll give it as Maybe D2 I have kept the name of this diagonal as D2 diagonal 2 whatever you want you can call so I'll give it as D2 name of that pattern also you can say so let's check what is the value of I and what is the value of J when I need star fine I have kept here the N value is 11 here because 0 to 10 I want to print if you count from 0 till 10 it is 11 only so the last value is always n minus one I hope you have already know that because we have discussed this in our previous video also wherein exactly the middle value will be called as N - 1 by 2 and the last value is always n minus1 fine now first star when I want the first star that time the value of I is zero because here these are the value of I right it is zero that time the value of J is 10 great value of the second star when I want the value of I that time is you can see one one and the value of J at that moment is nine the third star when I want the value of I is two and the value of J at the same time is 8 the value of I is three here you can see here the value of I is three at the same time the value of J this is J right is s so the value of I is Four J is 6 similarly at the last you can see the value of I is 10 and the same moment the value of J is zero fine now if you just try to add what is the constant value which we may get here 0 + 10 is = 10 1 + 9 is = 10 and 2 + 8 is = 10 3 + 7 is = 10 4 + 6 is = 10 similarly 10 + 0 is equal to 10 all these are the values of I and all all these are the value of J so whatever is there inside the I if you add with whatever is there inside the J it will lead to 10 the value of n is currently 11 and if you want to achieve 10 11 - 1 is 10 that means inside n we have 11 Min - 1 is 10 so if we able to write this formula definitely we can get this D2 whatever pattern we have here which we have given the associated name D2 we will be able to get that results so let me give this as for D2 and this is our D1 fine so let me just draw one line here so that there is a differentiating factor so let's write the formula let me open the IDE here if I open this let it be there as it is I would like to go here or when I Value Plus J value if I try to add it should be equal to N - 1 if it is I value and J value if I try to add it should be n minus one if that is the case I need to print this star so let me just run this program if I have to run here you can notice I'm able to get this fine the diagonal two also we could able to achieve now since we are printing alongside star one space Also here also there are two spaces if you want you can just avoid this space and maybe you can also avoid one space here then if I just have to run without any spaces only star will be printed something like this fine now let's write uh you know same pattern maybe in one more way so what I would like to do I want to do that beside this so inside the same I loop I will copy this entire J Loop it is within the same I Loop before system.out.print Lin in the part one we have already discussed this I would like to write one more time J Loop this J Loop one more time I have written within the same IL Loop before system.out.print Ln in between I would like to give one space system.out.print it has to be system do out. print n no not Ln it should be print okay I would like to give maybe one or two spaces that's fine and here this is fine I would like to go with whenever I value is zero I need star or whenever J value is equal to equal to zero I need star or by now you should be position to understand what I'm writing here you have already understood the fundamentals of pattern programming fine where this is leading to you should be able to get one picture in your mind I will say whenever I value is the last value n minus one and you can say J value is equal to equal to n minus one which is R of course and if I just have to run this you can notice here I'm getting this pattern such a beautiful pattern which looks complex but in reality this is not the complex fine the other alphabets now you can able to uh draw the k x y z very easily what we have seen in the previous video now let's proceed ahead and understand few more things here I would like to open this let me open the board and now the end goal is I want to achieve let's have few more formulas here which are very very crucial I want to draw pattern maybe this is the pattern I want to achieve let me just draw for this okay and I would like to give the name of this line as maybe I would like to give it as P1 whatever name you want you can give so I need star here okay so let's let me write let's create formula for this I would like to give this as a P1 and let's check when I need star what is the value of I what is the value of J I need star whenever you can see this star I want right what is the value of I this time the value of I is zero and what is the value of J value of J is five great what is the value of I here value of I is 1 here and what is the value of J that time it is four what is the value of I it is two and in this star what is the value of J it is three great what is the value of I here here it is three here it is two here it is four here it is 1 and and here it is five here it is zero J value is zero here and I value is five so when you need star whenever I value is five J value is zero I need star whenever I value is Four J value is one and it star that is what I have written here can we get any common constant value here if you do something yes we can get it if you say 0 + 5 it is leading to 5 1 + 4 is leading to 5 2 + 3 is leading to 5 and again 3 + 2 again 5 4 + 1 is leading to 5 5 + 0 is also leading to 5 all these are the values of I I'll keep I as it is plus all these values are the values of J I'll keep J equal to equal to 5 what is the current value of n n is 11 N - 1 is 10 so if I want five 10 by 2 is 5 and I'll say n - 1 11 - 1 is 10 right 10 by 2 10 by 2 is 5 I think this will give us five fine so if I write this formula definitely we can achieve the P1 whatever we want here we can easily achieve so let's uh write the code for the same very quickly I would like to go here and maybe here only I would like to add I will say here I + J whenever it is equal to n - 1 by 2 if I try to add I + J value and if that is equal to nus 1 by 2 that moment I need to print star that's the meaning of it fine so if I have to just run this you can see we can easily get the line which we wanted see this line is getting printed fine if you want you can print individual also you can check it that should not be a problem so let me just take this from here and I would like to print that as a separate pattern so let me just do that here as you can see I have written one more J Loop before the system.out.print L within the same I Loop that means I want one beside the other so the formula which we have got here is whenever I value if I try to add with J value if it is leading to nus 1 by 2 I need to print star very easy it is I want all of you to focus here and try to understand and if there is any know any ambiguity you can always rewatch the video you can watch the part one of pattern programming also fine so let me just run this program if I have to just run it you can see we can get this fine very easy it is now let's go here I would like to open this board work again and this time maybe I want to achieve this pattern great I want to achieve this let me just go here this is fine I want to achieve this I want to print this I would like to give this name as maybe P2 now let's try to generate the formula for P2 okay so here I would like to write P2 and when I need star what is the value of I and what is the value of J when you need star so I want Star here so what is the value of I this time I think this is I all the rows are zero this is zero and what is the value of J it is five what is the value of I the time the value of I here I want Star right the value of I is you can see 1 and J is 6 value of I is 1 J is 6 what is the value of I here the value of I here is I guess two yep it is two and what is the value of J here value of J here is 7 what is the value of I here I value is three and what is the value of J it is 8 I value is 4 9 I value is five it is 10 if you do something we'll be a able to get any constant value I guess the answer is s here if you say 5 - 0 5 - 0 is 5 6 - 1 if you just try to do it it is again 5 7 - 2 is 5 8 - 3 is 5 9 - 4 is 5 10 - 5 is 5 that means whenever I try to take J value subtract that with whatever value of I is there these are the J values right and these are the I values it should give us five five referring to n minus1 11 - 1 is 10 by 2 fine so whenever J minus I if I do and if it is leading to N - 1 by 2 I need to print the star that is a Formula if you could be able to get these formulas then it is done we can draw any complex pattern fine so let me just go to my IDE here and I would like to just add this this formula which we have achieved I will say here whenever J value if I try to subtract that with I value and if it is leading to N - 1 by 2 if it is leading to this whenever this is a situation I need to print star if I try to take J value subtract that with I value and if it is leading to this value nus one by2 whatever is the value of n if the N value is 11 11 - 1 is 10 10 by 2 is 5 fine so if that is a situation I need to print the Stars rest of the places I need to print the spaces so if I have to just run this you can notice we could able to get this P2 also if I have to open this you can see we could able to get this great fine now let's try to understand uh maybe for P3 I want P3 to be something like this okay I want Star here create I want to print Stars here I want this to be act like a P3 for us I will say here this is our P3 fine so now what is the value of I and what is the value of J when we need star the value of I here is five what is the value of J here at this moment the value of J is zero you can see all them these things are there no they are J values what is the value of J here it is zero I is five what is the value of I here I think the value of I is 6 and what is the value of J it is 1 what is the value of I here it is 7 and what is the value of J that time two value of I is 8 and value of J there is three what is the value of I 9 it is 4 so if you try to subtract this 5 - 0 is 5 6 - 1 is 5 7 - 2 is 5 8 - 3 is 5 9 - 4 is 5 10 - 5 is 5 so whenever if we have I value all these are I values right if I try to subtract with whatever value we have all these are J values if it is leading to 5 five means right now n value is 11 11 - 1 which is 10 by 2 so whenever if I subtract I value minus J value and if it is resulting in whatever I get here one constant n minus 1 by two then I need to print the star how we have got this I hope you able to understand these are the values of I's and these are the values of J's and if I just try to subtract I'm leading to this whenever if this is the situation I need to print the starts that's the meaning of it let me just go ahead here and write formula for this I would like to go ahead and say whenever I value If I subtract with J value and if it is leading to nus 1X 2 if it is leading to nus 1 by2 I need to print the star you can see here if I have to run the program I could able to print the Stars here we are able to get the result for this fine now let's try to achieve for P4 let's achieve this for the P4 P4 I think we can get one or two formulas based on whatever you get you can write it there is no problem in that fine so it is P4 when I need star what is the value of I that time when I need star and what is the value of J when I need star that's the meaning of it so let me just write this this is where I need to have one star fine so that's fine all right so I need star here I'll give this as a P4 so this moment I need Star right so what is the value of I here value of I here is five and it is the last value I guess value of J that time is 10 value of I here is I guess it is six and value of J here by this time I guess it is 9 here it is s value of I that time is 7 and here it is 8 this is8 value of J this is the value of J and here it is 8 here it is 7 here it is 9 6 and here it is 10 and value of J that time is five any constant value we can draw here if I try to add I + J what is the value which we may get it and how we can align that to the value of n fine so 5 + 10 is 15 6 + 9 is 15 7 + 8 is 15 8 + 7 15 9 + 6 15 and 10 + 5 is 15 fine so if I try to add I value with all these are J values right J value it should result in 15 15 means if I say N - 1 N - 1 means n value is 11 right 11 - 1 is 10 + n - 1 10 by 2 that means this is leading to 10 and N - 1 10 by 2 is leading to 5 so 15 we can get it so this is one of the formula you can write one more Formula 3 into maybe nus 1 by some formula we will get it so I think this is more easier so whenever I value if I try to add with J value and if it is able to result in this value then definitely I want to print the star rest of the no places I want to print the spaces very simple this is I would like to go here and would like to write this formula I would like to say here whenever I value if I add with J value if it is resulting in N -1 I'll say plus n -1 by 2 I'll say N - 1 by 2 I need to print the STS fine so if I have to just run this you can notice we can able to do this we are able to get this very beautiful pattern fine now to the same pattern what I'm going to do here is I would like to take it in the same row only I want it same row before the system. out. print Ln it it is it is in the same I Loop multiple J Loops I'm writing before system. out. print Ln whatever in between I'm printing please observe it is print I'm space know printing some spaces to the same one what I would like to do here is I would whenever I value is equal to equal to z i value is equal to equal to Z or okay let me just write here one or I would like to say here whenever J value is equal to equal to zero okay fine great or whenever J value is equal to n minus one I'll say or whenever I value is equal to equal to n minus one I need to print the star fine so if I just have to run this program you can see we could able to get this beautiful pattern fine making sense now you can draw any pattern also very easy this is if you have understood the last video and this video I don't think so any problem before that if you have understood if else how it is working and the fundamentals of loop for Loop nesting of for Loop what is the use of this operators then this is not difficult if you watch with complete Focus anytime you can re-watch the video at any given point of time now let's do one thing here I want to fill the outer parts in this pattern whatever is there I want to fill it that means what I want to achieve right now is this let me just draw that pattern here as you can see on your screen we want to achieve this whatever this outer pattern is there no I want to fill with the Stars and in Center it should be empty this is what I want to achieve fine so all of you know that what is the formula for this P1 this is P2 this is P3 and this this is P4 we already know that formula by keeping that in mind I would like to proceed further fine so you can notice here we have got the formula for P1 P2 P3 P4 if you say equal to equal to then we will get this that means if I say I + J equal to equal to nus 1 by 2 exactly this one line I will get I will say I want this line and whatever value before this is there no I want to fill that also I want to fill that that also fine this is P1 right so let me just write the code directly on the you know IDE what I'm going to do here is I will take this maybe let's have that in my you know same row only I will write one more J loop with system. out. print you know space in between and whatever we have already achieved let me just erase that here all right that's fine great so what is the formula for P1 we have achieved I Value Plus J J value J value is equal to equal to n - 1 by 2 whenever this is the situation I need to print the Stars if I just have to run this program you can see we are getting this now whatever this part is there no I want to fill this up so I'll say here what equal to only that no I will say less than or equal to that means I need this also less than this before this whatever is there I want to print it I have told I want this line equal to less than or equal to equal to also need less than this whatever we have I want to print that less than this whatever we have I want to print it so let me just open the ID here and I do have written this and if I just have to run this you can notice I'm able to get this pattern on your screen let me just open the console you can see we could able to get this great now let me go for the P2 and you all know the formula for P2 which we have got it and against this is our P2 this line is our P2 I want this and all this to be filled and what is the formula we have got that P2 is J - I is equal to equal to N - 1 by 2 if I have to go back to my ID and this is I want it I'll say or J value If I subtract I value if it is equal to N - 1 by2 if this is a situation I need to print the Stars if I just have to print this you can notice I'm getting this line I want to fill the other part also this entire part I want to fill fine so I would like to say here maybe J minus I is greater than or equal to let me just check here greater than or less than let's let's uh run this and see to it yes it is greater than or equal to nus 1 by2 equal to also greater than that the other part everything and equal to it fine so we could able to get this pattern beautiful pattern fine so now only this much if you want I hope how you uh you know we have got this you could be able to achieve this so let me just go ahead here and what is the formula for P3 we have got i - J is equal to equal to N - 1 by 2 N - 1 by 2 is the formula for P3 right if I just have to run this you can notice we could be able to get this I want to fill whatever is there here everything has to be filled below this I want to fill that is the agenda right so I will say here it is less than IUS J is less than okay less than or equal to if I just have to go here and if I just oh my goodness I guess I have to go with greater than not the less than because I minus it is not the plus I minus fine so because after I value is five it is below part right P3 it is you can notice here I have to go back here and let me just tell you how why we are getting this part because this part I want to fill and this part is you can notice that time I value is greater here I value zero here 5 6 7 8 it is greater than this okay this one I want to fill so exactly opposite I have to do because it is printing the reverse which we wanted so I would like to go here and say greater than and if I just have to run this I'm pretty sure we will be able to get this you can notice here we could able to get this very close we are and what is the formula for P4 which we have got the P4 formula which we have got here is I will say I + J is equal to equal to n - 1 + n -1 by 2 if this is a situation I need to print the Stars N minus one if it is equal to of course only that one line will be printed you can see on your screen so we are getting this I want to fill this entire part I want to fill this I + J if I say greater than or equal to greater than or equal to 15 or less than or equal to 15 so let me just see here greater than or less than or equal to let's try the greater than or equal to I would like to go here and say greater than or equal to find I + J value should be greater than also that means below this or equal to this line so if I just have to run this it should work and you can see we are able to do that very great it looks great right see it's not so difficult you can draw any pattern whatever logic I am teaching here this is very versatile logic you need not to recall or remember any formula you need not to remember the upper limit formula on spot dynamically based on the pattern you can able to develop the pH looking wise of course it looks something great but it is not so horrible as how it looks if someone who is new to the world of programming who don't know Java who don't know one line of code for them if you just try to show these formulas of course it is AR index out of bonds for them it will be out of the boundary but it is very you know easy if you are watching this with complete Focus From the scratch making sense now let's try to develop for the triangle one last pattern and we are able to tell the triangle not here maybe this we have already done it I would like to go here maybe in the same Row the last pattern I would like to with within the same I Loop one more J Loop before system. out. print L whatever spacing I'm giving here it is print not the print Len great now what is the formula for this this is a P1 right okay this is a P1 of course and what is the formula for P2 let me just write this here the formula for P2 is uh which we have got J minus I is equal to equal to N - 1 by 2 N - 1 by 2 okay so if we just write this much if I just run this we can able to get this we just have to fill this and if you want only m then very simple it is I'll say or or I value is equal to equal to N - 1 by 2 of course let me just wrap this up n -1 by 2 exactly at half if I just have to run this you can notice we could able to get this if you want to fill this up then you may have to play around last time I have told here less than I want to fill I wanted to fill this part after less than now I wanted to fill the other part this okay so I have to say here greater than I have to just say here greater than if I say greater than or equal to this line and greater everything will be printed I want to stop at some point I want it to stop at some point if you want to stop at some point I have to use your and operator and I value should be less than or equal to n minus one n minus one that means half please don't put everywhere I want to stop at the half this part is there this entire part I want to stop at the half and and I would like to say here J value should be equal to or say less than or equal to N - 1 by 2 of course not nus 1 it is nus 1 by 2 for the case of I also I would like to just write here N - 1 by 2 N - 1 by 2 what I'm trying to do here is kindly understand this this greater than or equal to will print this one diagonal and below this whatever is there everything will be printed till the end I want that to stop at the middle When J value is n - 1 by2 I want to stop when J value at the half also I value is nus 1 by2 here also I want it to stop that is the reason I have written this same goes here also last time to print that okay I think we will not be in need of this right now because it is not needed for whatever logic we are developing last time what we have told greater than and now we have to say here less than we don't want the outer side we don't want the inner side and now to this I will attach and make sure J value is greater than or equal to nus 1 by 2 J value is greater than or equal to N - 1 by2 I will say here and I value is less than or equal to N - 1 by2 what do you mean by that why this extra things you may have to understand this let me open this uh board work just to explain what I have done there fine so this is what we wanted to achieve here so if I have to go here this is what I wanted to achieve right now if I write only this much earlier I have told this to fill now I'm filling this while filling this what I've done is because this is n value is Big right it will be printing here also it will be printed and the other side also fully will be printed while printing greater than I have told and also I have stopped and J value should be less than here n - 1 by 2 right and here I value is nus 1 by 2 I value also have stopped here please stop this all printing here please stop this printing here this moment also I have told while printing this make sure you stop the printing here J value is greater than from here greater than or here also have to stop I value should be less than because it will print here also to avoid that printing only I have stopped here fine the and part which I am writing if you could able to understand understand other all the patterns what I have written here what I have told you can easily understand that so if I just have to run this uh program here of course it is not nus 2 it is n minus one and you just have to run this program hopefully we will be able to get the pattern which we were Desiring for fine I hope now you could able to understand this the end goal here is not just to print the patterns which we could able to do easily to get you you know into the comfort of coding I want you to start the you know thinking I want you to start developing the Logics for which I have done this pattern programming now I hope you are used to the concept of Loops operators ifls conditionals and Al you could able to get into the zone of programming fine so thank you so much for joining me for this long video I hope you could able to enjoy anytime you can rewat the entire patent programming Journey if in case if you're feeling something difficult you can and always rewatch the entire video with complete Focus I'm pretty sure you will appreciate this approach and you will be able to rate any pattern which is there in front of you please make sure to like the video subscribe the channel also share with your peers and the colleagues thank you so much for joining me in this video thank you again hello and welcome back as you all know Java is an objectoriented programming language so we need to understand some fundamentals of objectoriented programming when I say object oriented program in we are discussing here what is a class what is an object how do we have to create an object and also about some fundamentals of methods fine so of course whenever you hear the term objectoriented programming the concept such as encapsulation inheritance polymorphism abstraction comes into picture these major concepts of oops we will understand in Java Series in depth alongside the memory map what happens behind the scene what exactly happens in Heap area and stack area right now the end goal is to learn data structures and algorithm for that whatever fundamentals are required what is a class what is an object and Method it is more than sufficient so having said that let's get started now whenever you want to write a code in an object oriented programming language it could be anything Java C++ it is very easy to convert any real world scenario into the code you just have to follow two rules first rule is to identify the object object for which you want to write the code first of all consider that everything you see in front of you as an object whatever you see it could be mic object teacher object student object bus object pen object laptop object building object it could be anything whatever you see consider that as an object fine now maybe I want to write code about student in Java so first I'll identify student as an object I will route no I'll write down here I will say here student fine I have identified the object for which I may have to write the code then for this object first tell what and all student has then you may have to consider what all things student will do the does part of the student and the has part of the student the has part what all student has maybe student has a name student has an ID student has an age it could be anything so on and so forth what all activities student does student make maybe sleeps student eats student study all the activities which student does now if you want to convert this first you have identified the object and you have also considered the has part of a object for which you may have to write the code and they does part of that object fine now for this whatever you have considered and identified you may have to write a blueprint you may have to create a template template blueprint in technical words we call it as class so how do we have to write the code first we may have to create the blueprint which is a class we need to start with a keyword called as class and for whatever object we want to write the code we have to write the name of that student it is a convention that class name must start with the capital letter if you write in small letter compile time error will not be there but it is just a convention industry standard that always class name must start from the capital letter fine I may have to open open the class I may have to close the first part I may have to write about the has part and then I may have to write about the does part fine has part is managed by the concept of variables and data types so I may have to write the has part first I I have identified student has an ID student has a name and student has an age whatever you have identified you can create the variables and Java is a strongly typed to programming language only creating a variables will not work we may have to write the type of the data inside this variable which we are going to store ID it is a number so I would like to go with integer what is integer we have already seen about it name collection of characters car data type we cannot use here it is a collection of multiple characters we may have to go with strings about strings moving forward we will understand right now age again I can go with int the has part is over then we may have to write the activities which student does by using the concept of methods method is similar to what we call functions in C programming language same thing we call here as methods nothing more than that about methods again detail we will try to understand the syntax if you are new to the world of programming if you have zero clue about the methods please don't worry on the syntax of methods which I'm going to write here again detailed from the scratch we'll understand what is the purpose of methods and as a Java developer what are the possibilities how we can write the methods the different syntax we'll try to understand in them for now D part we may have to write in the methods see the conversion part if you know the functions well and good if you don't know don't worry we will understand that in detail maybe student eats or maybe I'll say student study that activity using the concept of methods whatever body you want you can write here and no return type so I'll go here void why we have to write void why we have to you know write this open the curly brackets close it how we may have to write here in depth we are going to discuss about the methods also for now what all activity student does write that using the concept of methods the blueprint is ready the template is ready which we also call it Tas class having only class is not sufficient if you want something to happen with this class if you want this to be considered you may have to create object of an class for an example if you go to any of the engineer if you want to construct your home you'll go to the civil engineers and you'll ask them to please give the blueprint of the home plan of the home if they give you the blueprint of the home you'll have entire picture right where will be the hall where will be the kitchen where will be the bedroom if I ask you go and stay there is it possible no right it's just a blueprint it does not exist in reality same goes if you just write a class it does not exist in reality it's just a blueprint it's a plan if you want something to happen with whatever code you have written inside this class you must create object that means if you have a blueprint of your home in front of you looking at the blueprint you may have to construct the home if you construct the home then you can get that blueprint into reality similarly here also the class is ready you may have to create the object how we may have to create the object you have to use one keyword in Java called as new that means you're invoking jvm please do create an object of which class please create the object of a student class I'll say object of student class fine and for this object object is ready right now I'm going to give one name whatever name you want you can give I'll give the name as maybe St inside the STD this object address will be stored and what is the type of this we may have to know specify St is it of integer type string type float type double type no ST is referring to student object hence the type of this St St is the variable name I have given you can give any name I'll say here it is of a student type is of a student type fundamentally we are understanding here in our Java series we will understand in depth what happens in the Heap area about the constructors and the other important oops concept right now what is in class and how do we have to create an object of a class that fundamentally fine so now the object is ready maybe I want my student to study so whatever code I have written inside this study method I want that to be executed for which you just have to say St is a reference variable I'll say please go inside ins that object there's a method called as study please invoke that method if you invoke whatever is there inside this that will be executed fine this is a class and this is an object now let's go in the IDE and try to write the code so that we can understand fundamentally about the class and object before we move ahead here fine so I have identified student as an object for which I have to first create the blueprint which is a class I will say here class student great first I may have to write the has part so I will say here integer type of ID and again I will say string type of maybe I'll say here name and again integer type of age great then what all activi student does maybe I'll say student study I will say here system.out.println I will say here student students are studying or or maybe I'll say student need to study whatever message you want that should not be a matter of concern and since there is no return statement here I would like to go with void the syntax of method if you're new to the world of programming you need not to worry I'm going to teach separately in the concept of methods right now just see the conversion of a real into the code and how we may have to create in class and object fine now maybe I'll write one more activity which the student does I will say a student maybe sleeps and whatever message you want whatever body it could be one line 10 lines 100 lines or whatever activity you want you can write which we will understand moving forward I will see here maybe student is sleeping in the class fine now has part is over does part is over it is just in Blueprint if you want to give a life to this class then you may have to create an object how do we have to create an object I'll go to my starting point of my program which is a main method and I'm going to give here say please jvi create an ins stance object is also called as instance object creation is also called as instantiation instantiation means object creation object means instance both of them are same different way different people call it fine so say please create the instance or object of this student object of this student create and to this object I'll give the name maybe the name I'll give it as St you can give any name you can give student name doesn't matter whatever name you want you can give it is of type student object is ready now this is an object this is a name to an object which is of what type student type now I'll say St dot please go inside this call this activity from here control would go to this student I mean to this study and whatever code you have written here that will be executed maybe I want to execute the code whatever code I have written inside this sleep activity inside this sleep method for which I'll say here St dot please invoke this method please call this that means please execute the code whatever is written inside this method now if I just have to run this you can see we are getting the desired result so of course we may have uh some already you know class with the name student I'll go with the name as student one okay I'll say student one and student one maybe student one is also there uh student is already there okay maybe we have written some other code student one is not there if I just have to run this you can notice we are getting this whatever code we had written inside this methods that is getting executed right now we have not assigned any data here if you want you can assign also that should not be a matter of concern maybe you can write one more method which will assign the data into these variables we will understand more of this in the concept of methods what is the syntax of this methods how we may have to know write this more on the classes and objects by default will get you know clarified in that concept for now I hope you have understood fundamentally if you want to write a code as an object oriented programming developer how we can consider an object and convert that into the code first we may have to write the class which is a blueprint and then we may have to construct an object we may have to create a instance of the class and using the reference whatever name we have given whatever activities you have written inside this we may have to execute now what is this void why we may have to write this all these things we will try to understand in my Java playlist which is going to come very soon I'm going to discuss the concept of oops in the with respect to Heap area stack area what happens behind the scene and all the major concept of object oriented programming such as Constructor encapsulation now then inheritance polymorphism abstraction interfaces we will understand in the right now the end goal is to understand data structures and algorithms for that some basics of java we may have to understand so we are discussing what is a class what we have to do with respect to object more on this we'll understand the concept of methods while understanding the concept of methods we'll understand by default more on the class and object thank you so much for being with me in this video make sure to like the video subscribe the channel and share with your friends and peers hello and welcome back in this video we will understand the concept concept of methods in Java what we call function in C programming language we call methods in Java we will understand why there is a need to write the method how we can write the method the syntax of methods we will take four examples and have good hold on the concept of methods in Java again I'm coming up with a detailed Java series wherein all the oops Concepts I'm going to talk in detail alongside the memory map what happens behind the scene in the runtime stack area on the Heap area we will discuss everything whatever basic fundamentals of oops class object creation methods I'm talking by keeping in mind that all these videos are recorded as a prerequisite for our DSA playlist the end goal is to understand DSA and some fundamentals of java is what we're learning before we get into the concepts of data structures and algorithm having said that let's get started with the concept of methods first we need to understand why method whenever you have any activity any task any code which you want to write maybe I want to add two numbers any activity it could be I want to maybe you know print something on my console any task subtract something write pattern whatever you want to do in your program always we write inside the method directly within a class we don't write we Define a method method inside the method whatever activity whatever code which we want to execute printing something adding two numbers subtracting fetching the data from the database any activity which you want to do in your program we have to do within a method fine and in Java method will have four things number one we will have a name fine then we will have the parameters required what exactly they are we will understand practically with four detailed examples also then we will have the body body in sense whatever activity you are carrying out whatever task whatever code which you want to execute that code we also call it as body then finally we will have a written type it is fixed whenever you want to write a method in Java four things must be there number one name parameter sometimes you can write the param materi list you can keep it empty that also we will see number three body and then we will have our return return type these four things are there in any method in Java so if you have decided to do something in Java you have to write a method and whenever you want to write a method you may have to write these four things for an instance I want to print hello fine so I'll say here system. out. println the method which you all know that in Java if you want want to print something on the console we have to write system. out. print I will say here hello this is the activity I want to carry out fine so this will be considered as the body of the method I will enclose this great then whatever name of the method you want you can give except Reserve words that means it should not have any predefined meaning in Java for an instance in Java int has predefined meaning class has predefined meaning float has predefined meaning right all these things cannot be the name of variables cannot be the name of class cannot be the name of methods you can give any name you can give your girlfriend name not a matter of concern you can boyfriend name any name but give a name which is relevant to whatever activity whatever task you're writing here I'm displaying something on my console I'll give the name as display great naming is over then I will not accept anything I'll keep it empty you can keep it empty you can accept the parameters when to accept we will understand in this video this is over then we have a body last return return type for now to start the journey with again in this video moving ahead you will understand to start the journey if you see any written statement on your method in your method anywhere in the last line then you cannot write void here if you don't see any written statement right now there is nothing you're just printing are you seeing something like this written statement no if you don't see this any anywhere in your body especially the last line of your body straightforward just write void so we have a method name parameter list body and the return type four things this is how we have to write a method in Java we will understand better by considering few of the examples I will write four different methods I will try to explain the concept of methods in four different ways all the four possible ways which we can write methods in Java let's understand this fundamentals if you are a no wise definitely this video you have to watch till the end so that you'll have good whole on the concept of methods also called as functions in C programming language fine same thing in Java we call it as method maybe I have a requirement that I want to write a program to perform addition or multiplication very basic for which I will write one class in Java first we have to define the template uh blueprint which you can also call as class which we have understood in the previous video so I will give the class name as whatever name you want you can give I'll give it as Kelsey calcor you can give any name of your own choice since I'm doing the calculation I have given the name as caly great I will Define some variables inte iser type of number one number two and maybe result three variables I have defined number one number two number three what happens on the memory map in my Java playlist I'm going to to talk how memory will be allocated on the Heap area what happens on the runtime stack area right now here please understand with respect to syntax as the fundamental concept fine now I want to add two numbers so I can write a method to perform adding two numbers means some activities there right some code I may have to write and inside the class directly you should not be writing the code if you want to write the code you may have to Define within a method method will have name the first part I will write the name it can have parameter I'll keep it empty for now when we can write the parameters I will talk after which the body that means actual task inside the N1 variable I'm going to Define some data n maybe 10 N2 equals to maybe 20 and after which I will say result equals to whatever is there inside the number one variable whatever is there inside the number two variable please add it finally I will say system.out.println I will print some message adding 10 and whatever data I'm adding there 20 gives us gives us whatever is there inside this Rees variable whatever is there inside this RS variable I want to print whatever activity you want you can write so don't ask why we are writing like this it is just an example you can write something else also it could be anything whatever task you are carrying out same thing I will write in three different ways base also you'll understand have little patience fine great the body of the method is over the next part is the return type now are you seeing any written statement at the end of your method written statement I'm referring to this we don't have right now so there is no written statement so please go and write here void done fine now the class is ready in Java you know very well in the last video you have understood having only class will not be sufficient you may have to create instance of that you I have to create object of that class class is just a blueprint it's just a plan if you want maybe whatever activity is there inside this method I want that to be executed I have to invoke this method if you want to invoke this method first you may have to create object of this class if you don't create object of this class as though there is no class it will not be considered fine so whatever right now you have written that will not be consider because all of the things I have written here instance elements so I will go and create the object in the last video you have seen we have to create the object in Java with the help of new keyword I'll say new create the object of caly object is ready to this calci I will give the name I'll give the name as maybe C maybe calci only let's give the name as calcium of what type Cal that means this reference variable will hold address of this object which is getting created on your memory fine now caly is the name for this object for now because we are understanding here with respect to syntax not with respect to memory So Cal is the name of this object object is ready now I will say caly dot I want to execute this method I will call this method I will say caly dot add I will say caly dot add now whatever you have written inside this that will be executed because you have invoked this caly name of the object go inside this object please invoke this please execute whatever is there inside this fine so let me just run this program here if I have to run this you can see on your screen so we are getting the 30 of course maybe there is some error caly already in the same uh you know workspace caly already one name one class is already there so I would like to go and give the name as caly 1 because in my same project there is one more class with the caly name that is the reason I'm changing it to caly one if I change this I hope no problem will not be there and you can see adding 10 and 20 gives us 30 whatever code we have written inside this ad that is getting executed fine now I would like to write one more method please see very carefully let me just comment this out or maybe let me just take it I would like to comment this great now I'll do one thing I'll not be printing here after this I will say here return whatever is there inside the RS fine when whenever you see written statement in the last line of your method you cannot write return type as void we have name of the method parameters and the body at the end ofing return r s you cannot write wi whenever we have a written statement then what to write in place of written type I'm rning re inside the Rees what type of data we have you can please see here inside the RS we have integer type of data so what the type of the data which you are returning the type you may have to specify here whenever we have a return statement in the last method we didn't had a return statement so we had to write void right now we have written statement here hence we may have to write here it the return type is in fine now this is how we have to write the method now I would like to go back here and I will invoke the method again I'll caly dot please execute this whatever code is there that will get executed alongside that this method is giving you some data last method when you have invoked whatever code was there that got executed but in return it didn't give you back anything to the caller to the caller in the sense if I'm calling the method whatever task was there inside that method got executed but in return that method didn't give me anything but right now when I call add method it will execute whatever task is there in return return it is giving you whatever data is there inside Rees the return return type is integer that means if you invoke this method it will execute whatever code is written that will get executed after which it will return you it will give you back one integer type of value so I will collect it back on my left hand side I will collect it back I will just say here equals to maybe inte a type of R whatever variable name you want you can write here inly I'm writing R so that you should not think whatever variable it is returning the variable name also here it should be same nothing as this is a different class so it is returning you re inside the RS we have integer type of data by adding 10 and 20 whatever we have got that is what I'm ring here since the return type is integer if you invoke this method whatever code is there that will get executed and it will give you back something which I am collecting here and maybe uh whatever we had written here I would like to execute here this way also we can write the method now the question here should not be why why last time we have written that why we are writing like this no we are understanding here the possible ways to write the method if there is a need arises in Java you can write a method and write whatever activity you want which is not accepting any parameters the return return type is void which will not give you back anything if you invoke this method you just it will just execute this it will not give you anything and you can also Al write a method in Java if you invoke it will execute and in return it will give you back some value also which you can collect it here which I am collecting here fine so if I just have to run this you may get the same output here also but different way I'm writing adding 10 and 20 gives us the3 fine now you can also write the method in this style let me write one more style all the possible ways to write the method but whether it is this method or this we have four things name parameters body return return type fine now let's write uh one more way which we can write method in Java I would like to go here and write down this let me comment what we have already written here and this time I would like to go here and accept some data integer type of maybe a comma integer type of B great now I would not be assigning here 10 and 20 directly I'll say whatever data is there inside the a please give it to N1 whatever data is there inside the B please give it to N2 and then I would like to perform this now this method I have written a method with the name but this time it is accepting two integer values that means this is called as parameters two integer parameters now at the time of me calling it I will say caly do add whenever you call a method and if it is accepting some data must and should you have to pass the data passing the data is equivalent to passing the argument data we also call it as argument hence this is also called as argument list fine I may have to pass two values here because I am calling such a method it is expecting me to pass two values must and should you may have to pass earlier I used to call a method which is not accepting anything so at the time of me invoking that method I need not to pass anything here so I have not passed I've just called the method I did not pass any value but right now I'm calling such a method which is accepting two integer values that means you have to pass two integer values here I would like to pass some value maybe I'll pass here 10 and I will pass here 20 great now the return return type we don't have any return statement at the last line so it is void that means if you call this method you may have to pass to integer values I have passed it will execute whatever code is there inside this method but in return return it will not give you back anything making sense all of you present so it will not give you back anything it will just execute whatever task is there so I will not be collecting back anything because if I call it is void it is not giving me any value to me it will just execute whatever code we had here but I may have to pass the data because it is having some parameters so passing the data you can call it as arguments so I will just pass here and if I execute you are getting the result same in different way I have just written the method one more way also if you want you can write the method I would like to just go here and comment this up let me just write one more way this time I will just say here integer why because I will say return return re whenever you have a written statement can we write void here we cannot write then what to write is it int is integer fixed no whatever the type of the data which you returning right now I'm returning Rees inside the Rees we have integer type of value and you can see the data type of Rees is also Al integer fine hence we may have to write here integer now in Java if there is any need arises you can write a method which is accepting some parameter also giving back something to the caller of this method to invoker of this method now I have invoked the add method I'm passing 10 and 20 it will do the task and right now this method is giving me back something so I will collect it back here I will say here inte is a type of of maybe R fine I have collected back and then finally I would like to just print it here I would like to print here and if I just have to run this you can see we are getting the results now all of them give the same result what I'm trying to explain is in method or a function four things will be there name parameters return return type body four things are fixed now based on the need arises however you want based B on the situation you can write the method we can write a method which is not accepting anything we'll do the task and whoever will invoke this method it will not give anything no void there is no return statement here if there is need arises we can write a method which cannot accept anything it can do some task and give back something to the caller whoever will invoke this method I'm invoking this method right for me it will give something it will give some integer type of data so we can write a method which is a accepting some parameters will not return anything it's wide it will just accept some parameters it will do its task we can write a method which will accept the parameter do its task and give back to caller also whoever call this method for them integer value will be written four things will be there name parameters body return return type based on the need you can write in different different way based on the situations this is the fundamentals of methods I hope you could able to understand please if there is any any ambiguity any confusion you can rewatch the video any number of times this is a recorded video you can also rewatch The Other fundamentals know videos before you get into this I'm going to talk on the same concept of class objects what happens in the memory area Heap area runtime stack methods method overloading concept and we will also understand the other oops concept inheritance polymorphism abstraction inheritance in detail in our Java playlist right now by keeping in mind that we we are learning the Java fundamentals for our DSA data structures and algorithms I have discussed these fundamentals fine thank you so much for joining me in this video please do follow me on my Instagram you can find the ID in the comment section or the community post also on your screen and you can also connect me on my LinkedIn you can just search haar Abbas you can connect me on my LinkedIn also fine so thank you so much for joining me we will meet again in upcoming videos hello and welcome back now we have completed the fundamentals of java it's time to get into data structures and algorithm the very first concept which I'm going to discuss is very crucial which is time and space complexity if you are in hurry the entire video you can watch in 1.5x speed also you will not face any issues for some time forget what is time what is space you forget about time and space complexity forget about programming in general assume for a group of three or four people I'm asking one simple question please calculate sum of N natural numbers or you can say sum of five natural numbers again natural number refers to all the positive integer numers starting from one one you can say here 1 2 3 4 5 6 so on one lakh 10 lakh 1 CR 10 CR n numbers all the positive numbers are called as natural numbers if I ask you to calculate sum of N natural numbers N means maybe n values 5 six sum of five natural numbers or sum of six natural numbers very easy right 1 + 2 + 3 + 4 + 5 sum of five natural numbers 1 + 2 is 3 3 + 3 is 6 6 + 4 is 10 10 + 5 is 15 in your mind you can easily calculate and you can tell or you can just write down on a paper and you can easily calculate someone who knows basics of maths instead of they calculating manually like this they may write one formula the formula could be n into n + 1 by 2 N is number here if I say n natural numbers or five natural numbers five is n here fine so you can say here 5 into 5 + 1 by 2 which is of course 5 into 6 is 30 30 by 2 is 15 you can get this right and maybe someone can use the calculator and they can just type 1 + 2 + 3 + 4 + 5 and they can show I have got the result now if I ask you those who are calculating in mind and just answering me what is the sum of five natural numbers they may say I have taken 8 second of time for an example and those who are using maybe a mathematical formula whose maths is strong they you know they will try to give solution for everything by using the mathematical formula they may say I have taken 6 seconds of time and if I ask someone who might be you know writing on paper or maybe using the calculator they may say that I have done that you you know in 4 seconds or you can keep one timer stop watch and you can identify each one is taking how much time in order to calculate the sum of five natural number very easy right now I I want my machine to calculate and tell me the sum of five natural numbers machine referring to my laptop my mobile phone for which I may have to write the application I may have to develop one application or we can say I have to develop one program different ways you can write the program I have written the program in three different approaches fine now program is it's a way of you talking to your machine it's your communication to the machine what you want machine to do it for you making sense now I wanted my machine to calculate and tell me the sum of six natural numbers for which I have written the program here I have written the program in three different approaches let me comment this approach here fine now this approach don't worry on the code which you can see on your screen we will understand the coding from this class you need not to worry on this just see one of the approach to calculate sum of six natural numbers which is 1 + 2 + 3 + 4 plus 5 + 6 it should be around 21 let's see if I have written the correct program if I just run this you can see here the output sum of 1 to six natural numbers is 21 it is giving me correct answer no problem here let me commment this I have written two more approaches two more programs here let me uncomment this and you can see the style the way I have written the program is different here it is a different logic and here it is a different logic fine so let me just run this program you can see here I'm getting sum of 1 to 6 is 21 great now I have written one more logic here which will give us sum of N natural numbers n is six here that means sum of six natural numbers if I just run this application you can see here sum of 1 to six is 21 whether it is first approach second approach or third approach though I have written different different logics all of them are giving me correct results so whatever I wanted I got the results here sometimes it is not just about the results it is all about the efficient result with a better performance for which time is very important now how will I know that which approach is giving me efficient result that means which approach is getting executed very fast how much time the first approach has taken to calculate and tell me the sum of six six natural numbers how much time the second approach has taken how much time the third approach has taken can I put a timer and check stopwatch and execute this and see how much time it is taking no it is getting executed in fraction of milliseconds fine so there has to be some mechanism right if as a human if I am calculating I can put a stopwatch I can put a timer or I can say I have taken 5 Seconds 10 seconds approximately fine but right now the calculation is not done by by a human the calculation is being done by a machine I'm writing a program I'm asking my machine writing the program means you talking to machine right I'm writing a program so that the machine can give me a result now which program machine is executing fast which is executing efficiently which is taking less time how will I know there has to be some mechanism that's when the computer scientists the programmers they came with one of the tool or you can say one of the mechanism for which we call it as time complexity time complexity comes into picture whenever you want to know whenever you want to calculate a particular program how much time it is taking in order to execute and give you the result similarly we also have something called as space complexity if I execute this program at the time of execution behind the scene this program how much memory is occupying how much RAM memory has been allocated in order to to execute this program how many variables I have created example I have created two integer values here for integer in Java four byes of memories allocated if there are two variables that means eight bites of memories occupied so space complexity comes into picture if you want to know whatever program you have written which is getting executed at the time of execution how much space how much memory space has been taken by that program for that also we should have some mechanism that's when the concept of space complexity comes into picture so time and space complexity comes into picture whenever you want to know how efficient your program is getting executed that means how fast which approach see whenever you have a problem in front of you there can be multiple solutions for that earlier we have understood pattern programming in our Java Plus DSA series I have given you an approach if you go to some other YouTube channel some other videos you may say some other approaches so for every one problem if you want to achieve something there are multiple ways now you should be choosing such a way which is more efficient more efficient I'm referring to it should be more fast also it should occupy less memory space Also then only you can call this program is more efficient and your application will be with more faster I hope you are able to understand so if you want to calculate how much time your program is taking in order to give you the result and how much memory space has been allocated for your program that's where the concept of time complexity and space complexity comes into picture especially if you are getting into the product based companies this concept is very very crucial it's not just about writing the code writing the program getting the things done you may have to write the efficient program such a application which is very fast also it should occupy less memory also and if you want to check how much time your program is taking in order to give the result how much memory space you know it is occupying we should have a mechanism that mechanism is only called as time complexity and space complexity there are some important terminologies here Big O notation Omega TAA all these things we will try to understand you need not to worry I hope now to start the journey what is the purpose of time and space complexity why we may have to understand this is clear if you have that picture that is more than sufficient for us to go ahead now we need to understand how we may have to use this concept and how we can evaluate that multiple approaches are there which approach is good which approach we may have to choose which is more efficient fine I hope you could able to draw one picture why we may have to understand this Concepts so thank you so much for joining me in this video make sure you like the video please do comment also share with your peers and colleagues do follow me on my Instagram the ID you can me you can get it on the screen also you can get the ID on the community post also you can also get connected to me on the LinkedIn you can just search haer abas now in the upcoming video we will understand what exactly this time and space complexity how we may have to learn all the important terminologies which are associated with time and space complexity