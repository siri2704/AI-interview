We are going to implement selection sort in python today. So how does selection sorting works? Well let's say you have this list of numbers what you do is you try to find a candidate for the first position and that candidate is the minimum number in the list. So you look at the list find a minimum number which is 4 in this case then you swap with the first element. After that the first element is sorted so now you move on to the second element. You want to find the candidate for the second position and what is that element well it is the second minimum element or rather it is a minimum element in the unsorted array. So anything that starts with 38 onwards is unsorted and the left hand side which is 4 is sorted array. So in the unsorted area the minimum element is 9 so you swap this with 9 and then you move on to the next element. If you keep on repeating this process the entire list will be sorted. So this technique is very very simple. Essentially at every stage you have a sorted array and unsorted array. On the left hand side you have sorted array and what you're doing in each iteration is from unsorted array find a minimum element, put it at the first position and move on. The bigger complexity of this is order of n square because you are doing probably two for loop in your program so it's not very efficient. But in certain cases it could be useful especially when you have an extra space and this is a very very simple technique. So when we write python code you will see how easy the code is for this algorithm. So let's let's write python code now. I have an empty selection sort function and I'm going to now write a code for it. So the first thing we need to do is we need to write a code to find a minimum element from any list. How do you do that? Well let me just write a function which can find a minimum element okay? So find a minimum element from an array. How do you find it? Well you can simply run a for loop for i in range and just for simplicity you know, I'll just remove this method for now and I'll just say okay I want to just find a minimum element you know and I will just print it. So here you go through all the elements and then you define a minimum element to be some minimum. Let's say your list contains only positive numbers then minimum number could be minus one, and then you will say if array of i is or rather actually for minimum you need to initialize this to a very very big number okay? Ideally it will be the max end but I'm just for simplicity I'm just initializing it to this number and if array of i is less than minimum then minimum is equal to array of i and when you return minimum it gives you a minimum element. So let's run it really quickly see 8 8 is the minimum element if I have 2 here it will print 2. Now let's go back to our original function which is selection sort. So here ah let me just close this thing I need to run two for loops so the first for loop will give you an anchor okay? So here for i in so I just initialize the size into the size variable and you will say for i in range size okay you go till size and do something. Well what do you do? So here first you define the minimum index. So minimum index is your i okay if you look at our presentation that minimum index is this thing you know the yellow pointer, so initially it will be zero, then in the next iteration it will be one and so on. And in the second loop where you will say for j in range something okay so j in range mid index you start with mid index plus one go all the way till size do something. So here so this loop is for this thing so here you start a loop from 38 onwards find a minimum element and swap it with 21. So here i will say if array of j which means the current element if it is less than the min index element which is array of min index so your main index if this is less than that then my min index will become j. Okay, I hope this is clear it's very simple you're going through element one by one and if the current element is less than the minimum element you're swapping the index. So that now min index contains the index of the minimum element. Once this for loop is over at this point you are ready to swap both the elements. So you want to swap a of i with a of min index, and in python this swapping swapping can be done in one line most of the programming language you have to do it in three lines where you store the element into temporary element, etc. but here you can do this in in one line. Now we can optimize this little bit by saying that if i is not equal to min index, you know if your i element all already contains minimum element you don't want to swap it. This is a small improvement in terms of performance. Once this is done let's see if there is any other performance improvement we can make. Yeah so see here I don't need to go all the way till the end because when you are see I'm talking about this yellow pointer. Yellow pointer can go all the way till here and if the items in this until here are sorted it means the last element is sorted as well. So I can save one iteration here. Now let's run it okay? So I will say array there was a little typo here you can see all the elements are now sorted. If you ever wonder how the sorting worked in each iteration you can set a breakpoint. I'm in pycharm by the way you can exit this zen mode and set a breakpoint and debug it line by line to see what's going on in each iteration. I I like to run test cases usually on on a code like this so these are my tests where I have a variety of cases there is a already sorted list, there is a sorted list but this is in reverse order, there are two random list, there is empty list, there is a list with one element and I like to test my method on all this. So I can say for elements in tests if you run this code then it will try to sort all the elements in that list. So you see everything is less sorted as per our expectation. That's all I had now comes the most interesting part of this video. Just by watching this video as if you are watching a movie you are not going to learn coding okay? Stop wasting your time if you are willing to learn uh work on this exercise then only it's worth watching my videos. So the exercise link is in the video description below. Read through the description try to solve this problem and there is a solution link here but do not click on this link. If you click on this link without you yourself solving it first, then this will download some crazy virus on your computer and your computer computer will burn. So just be afraid of that that threat and make sure you do your due diligence before you click on the solution link and look at the ready-made answer. Thank you very much for watching!