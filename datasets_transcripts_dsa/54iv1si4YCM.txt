in this data structure tutorial we are going to look into how to handle collisions in a hash table in part 1 video which if you have not seen already I highly recommend you watch it we implemented hash table in Python we are going to take that class and we are going to enhance it to handle collision using separate chaining method we'll also go over linear probing and in the end we have a couple of interesting exercises for you to solve here in this picture I have a hash map where the key is for example mark 6 and the value is 310 using hash function we are finding appropriate index into our array for example here for Mar 6 and that value gets stored here but when I get a collision which means for some other key less amar 17 the same index what do I do here I need to do some special handling because now two keys are trying to store their values at the same location here we can use an approach called separate chaining or chaining where instead of directly storing the value we store a linked list or a list at every location so first when math 6 came in we appended this element into a linked list next time when we have a collision and second element comes in we just append it to that particular linked list this way this linked list can keep on growing and multiple keys can share the same hash value the Big O analysis here will be that usually for average case hash map search complexity is order of 1 which is a constant time but in this case it might go up till order of n because imagine if you have a bad hashing function and all the elements all the keys generates same index then you will have all of your values stock in one bucket and this will be a long linked list so in that case the search complexity is same as the complexity of a linked list which is order of and and when now I want to return value of March 17th is hash function to get an index which is nine I go to index number nine then I linearly search this linked list and for that reason it is important to have your key stored in each of these elements so that you know which value is associated with which key the second approach for solving the collision is called linear probing here what we do is then form our 17 in the nine and we find that there is already a value store at this location we go to the next available location here my array is ending here but let's say if there was a tenth location which was empty then I would store Mar 17 what since I don't have that location I will go reverse look at 0-2 location that location is also filled out so then I go to location number one and here I store my Mar 17 value it is called linear probing because I am linearly probing means searching for an empty slot to store my evaluate another example where March 18 resolve to index 0 there was already values of un - well index number 1 that is also filled so now you've store your value at index number 2 now let's implement chaining in Python here I have a Python class that we implemented in part 1 of this tutorial and this class is not handling collision all it is doing it getting a hashing function and when you do get item or set item it will go to particular index in your array and store the value I'll show you what problem this class will have so here I have a get hash function being called form r6 and Mar 17 and you know that they both have the same index so when I store value like this for March 6 I have value 1 20 mr 17 it is 459 but since mass 17 has the same index it would have over returned the value for mass 6 hence when I say get me a value of March 6 I am getting 459 see I stored 120 but I am getting 459 and that is because of collision because Mar 17 this 459 value over or that so now we are going to fix that collision in this same class here the first thing I'm going to do is instead of initializing none as individual element I will initialize empty array because now the each element is not just the value we are storing key value pair so if you remember from our first presentation we store key value pair whenever we have collision so that we can look at the right element that's why I am having array are in each individual element the GAT hash function remains the same we don't need to chain that we are now going to implement set item function in our original implementation we used to override the value at index H but at index H now we have a linked list so we need to iterate through the linked list and fight the find the right location or to update our value so the first thing we'll do is in our linked list is is this element already exists so it could happen that you might already have march 6 in your location and you you will be like ok Mar 6 let's update the value with something else for example here if you have something like this where initially you inserted mass six but then next time you want to update the same value okay for that key so we are going to handle this particular case first so let's I trait through it now before we utter it through it let me show you simple case so let's assume that at this index or this particular key does not exist in that case what you will do is simply in that linked list so this this particular thing this one is a linked list or in Python we are just using a list here you want to update key value pair this will be our simple scenario but that you will do it only if the key does not exist in that linked list hence you want to first find out if key exists or not right so you will say for index element in so enumerate is a function you use to I trade through the elements in your array and if the length of element is equal to 2 and element 0 is equal to key which means for this key I already have an element so that element you just change a value so in that same element you will change a value but since we are inserting a tuple or tuples are immutable so I cannot just say element 1 is equal to value you know instead of topple if you had used another array it might have worked so I'm just going to insert a new table all basically at the same location so my location is first of all this and in that on that particular index I will store this key value location I hope it makes sense if this is little complex I would suggest you debug this in Python and when you step through the core you will get an exit idea of what I am trying to do here and this is found equal to true so that happens the found thing becomes true and you break out of the loop so found element is false initially okay and then you do this thing if your element was not formed which means I did not have this key in my a hash-table that's why I'm inserting it fresh but this scenario is to handle if the key already existed and if it already exists you are just modifying that key value pair okay so I hope that makes sense let me just run it so I did ctrl enter and it executed now I'm gonna do let's say this okay so let me remove this two thing so that one is gone so here I created a hash table object and Here I am inserting couple of values and in the previous implementation math six was showing 54 59 so let's see so here this is working correct I mean I don't have gate item implemented this way it's show like this but you can see that at that location now it is storing a linked list if you want to get a better idea you can just print in this array see in this array now every element is a list and that list has a key value pair so math 6 and 17 gave a hash of index 9 so I am at index 9 and here I have told all these elements so now I can modify my gate function in the gate function what I will do is I for I first get the index and then I I treat through all the values in that index and I try to return the value babe that matches this particular key so let's modify our gate item function this part remains the same you always want to get the hash so for example just visualize you are calling gate item for Mar six or Mar 17 in that case this hash H will return value 9 ok and when you have 9 now when I do self dot array H okay this particular thing returns me they list this whole list it will return so now I want to go through each of these elements in the list by running a full loop and find out the appropriate value so I will say for element in this if element 0 is equal to KI all right so I want to say key all right so let me just change this to keep so for that key which is math 617 whatever if that matches you return element of 1 see element 0 is this key which we are matching if it matches return the second part which is the value itself all right so this looks good if it cannot find a value then it will return none so when you don't return anything in Python by default it returns none so control-enter this thing is executed control-enter again control-enter control-enter so I have these values now let me do this march 17 or math 6 see math 6 is coming 78 which is the correct value and when you do Mar 17 18 9 so now this is working this fix the problem that we have the previous implementation of hash table let's also implement a delete item function so delete item can be implemented by overriding this method these are all the Python standard operators okay so delete item whenever you want to delete a key as usual first you will get self dot cat hash for a key and then for index key value in enumerate enumerate what self dot array of edge because when you want to delete let's say you want to delete mar 17 the index which is number nine so then you get this list so this list is this particular thing this is that list now you go through each of these elements in the list I am hydrating this loop you can see that and whenever you find a particular element less I find mass 17 to so here if instead of K V I will just use element okay if element of zero because zero of us have a key is equal to key then we found the right element to delete and here you will say delete self dot array H okay and add that edge I am going to delete this particular index so this hatch let's say if you're trying to delete March 17 this H will be number nine okay so number nine is this in that we have another list and the index to delete in that list is one because this is 0 this is 1 so one we want to delete so that index is 1 ok control enter so this execute this control enter control enter I'm executing all of this and now let's say delete I want to delete march 17 okay it executed fine without any complains but let's see if it worked really well ah now this is working see my 6 March 17 you can also delete March 6 and see what happens so March 6 year control enter and then T dot array t array see March 6 is also gone that was the last element you had now when you try to retrieve the value of my six of course is gonna return none but you have other elements such as March 9 for example whose value is 4 so when you do March 9 you get value for back so this hash table seems to be working ok now comes the most interesting part of these tutorials which is an exercise without doing this exercise it's all useless guys believe me so you have to work on these exercises I have solution links but you will click on solution link only after you have tried it yourself all right so I have 4 different exercises the fourth exercise is little complex where I am asking you to implement linear probing in your hash table but if you have already watched this particular tutorial on how to implement using chaining I think you can get some insights from that so just take that same class and modify it and there are some other exercises so read through the description and try to solve these problems I am also providing CSV files for example here now many times people ask me that ok how do i download this CSV file so to download my entire repository what you should do is you should go to the root which is py ok so go here and when you say clone or download this way you can download the entire repository with all my tutorials and in data structures if you go inside data structure see I have all these different tutorials and hash table collisions when you go here in the solution I have the CSV file poem dot txt etc so when you clone the entire repository by going to by clicking on this green button you will get those files ok so get those files work on those exercises and post your solutions in a video comment below you can also match your solution with my solution by clicking on this link but first try it out yourself so thank you for watching I hope this two-part video series on hash map has clarified your doubts remember data structures is a hot topic when it comes to programming interviews or data science data analyst interviews so having in-depth understanding of data structure is very very important hence it's very much needed that you watch this whole data structure tutorial series you work on this exercises you get an idea on the Big O analysis between different data structures link for the exercise this link and the code that I went through those links are provided in video description so always check video description for any of my videos I provide ton of useful information there