 Let's move ahead in our DSA course and in this video we will learn about stack data structure  It is very important and many questions are asked if you go for any interview  If you don't go for an interview but if you are making a project then you have to use stack a lot of times  Now if you see the example now then you will understand it better  So if you are watching this video for the first time then let me tell you that we were learning DSA here  And we were quite ahead in the DSA playlist  20-21 videos are already done and if you have not accessed this playlist then I will recommend you to go and watch this playlist  You will get very good knowledge from here and you will also clear all the interviews  Let's move ahead and first of all I will tell you that all the notes are available here  You will get the link of GitHub from below and you can download it from there  So you don't have to worry about it and you understand the concept that I am explaining to you  Let's move ahead and there are some key points but you have to keep in mind the fundamental principle of stack  On which principle does the stack work?  So if we talk about the stack then it always works on the leafs  Last in first out  The element that is inserted in the last will first pop  Let's understand it a little here  Let's suppose that we have a box  Let's suppose that we have a box that is open from one end  This is the box  You understand this box  And the opening of this box is only from this left side  This is the left side  This is the opening  So if we insert an element then it will be inserted from this side  There are two ends of this box  One end is closed and the other end is open  If we have to insert an element then we will insert it from here  We can insert the data or elements from here  Now the obvious thing is that suppose we have to insert 5 elements  We have to insert 5 elements  So if we have to insert 5 elements then 5 will be inserted from here  And it will go here  Because the obvious thing is that if we have space from here then 5 will go here  And the first element will come  Now when you have to insert the second element then you have to think about it  That when the second element has come  So this gate is closed  This gate is closed  It can't come from here  So when the second element comes then the gate will come from there  So if you have to insert 6 elements then it will come from this end  And it will come here  So 5 has come  So there is no space  So it will come here  So 5 has taken its place  And after 5 it will take its place  So if we have to insert 10 elements  So 10 will come from this end  And 10 will come here  Because one is closed  So the gate is closed it can't come from there  The gate is open it can come from there  So the simple thing is  That you have a house  There are two doors in that house  One is front and one is back  And the simple thing of this stack is  That the back gate is closed  So if someone goes then he will go from the front gate  So this was our front door  And this is the rear door  And the rear door is closed  So if we have to insert 50 then 50 will come from there  And 50 will come here  So now  Because the stack  Works like this  Last in, last in, first out  So the one who goes last will come first  So the concept is the same  This door is closed  And this door is closed  So 5 can't come from here  So the one who went first  Will not be able to come  So who will come back  So the one who went last  If you delete  So this door is closed  So what will happen  There is no other way  You will delete the one who went last  So you will remove 5  Then you will remove 10  Then you will remove 6  That means insert is also done from one end  And delete is also done from one end  So the one who goes last will also go delete  Understood  So this is last in first out  The one who went last will go delete first  So this is the simple thing  For example  You have two books  Suppose this book  Suppose we have only one book  We have two books  Understand the thing  We have one book here  And one we have accepted as our book  Now you have to keep the book on the table  So first you have to put this book here  And above that you have to put this book  You have put two books here  Understand the thing  One is below and one is above  So in the last you have to put this book here  Now what you have to do  If someone comes after this  Then it will come above this  But  Because it is kept on the table  If you want to remove the book  Or you want to delete it  Then you have to pick the book  That you have put on the table  Suppose this book is above  So we will pick the one we have put on the table  Then we will pick the one below  This is the application of stack  It is a simple thing  You have kept the book  Then you have to pick the book  But if you want to pick the book  Then you will not be able to pick the one below  What you will do is  You will pick the book you have put on the table  Then you will pick the book you have put on the table  So this is a simple stack  Last in first out  Means the data that has been inserted in the last  That will be out first  This is our principle of stack  Many questions are asked about this  Like you can see the example  Imagine a stack of plates  You make a stack of plates  1st plate, 2nd plate, 3rd plate, 4th plate, 5th plate  You go to the wedding  You go to the wedding, you have to eat  So you see the plates that are kept there  They are kept in the stack  Means when someone keeps one plate, two plates, three plates, four plates, five plates  It is kept like this  But when you go and pick the plate  Then you do not pick the plate from below  What will happen if you pick it from below  Everything will be messed up  You will not be able to pick it properly  So what happens is  You pick the top plate first  The first one that has been kept  You pick that plate first  So there is a concept of stack there too  The same example is written here  Imagine a stack of plates  The plates you place on the top  The plate that you have kept on the top  Is the first one you take off  The same plate that you pick first  Okay?  And the key principle is last in first out  That will be first out  Operations  You can push the elements  At the top of the stack  Means the door that is open  You will insert the elements there  Pop, remove the element from the top of the stack  So here only one side is the top  It will be removed from that  It will be inserted from that too  So you will remove the pop  What will the peak do?  Returns the top element without removing it  So when you call the peak  So this is the empathy  It will check if the stack is empty  Or not  As I told you there are many applications  Like you see here  Expression, evaluation and syntax parsing  So many times you enable  Expression, evaluate  A plus B  So stack is used in that  Prefix, postfix, infix  So stack will be used there  Now we will learn this thing  When we evaluate the expression  Backtracking algorithms  May be stack is used  Then undo operations  May be stack is used  Function call management  So there are many applications of stack  And many places stack is used  Now  For example, I explained to you  That in the book college  When you keep a book on your table  You keep it one by one  But when you have to pick it up  You pick up the top book first  And then you keep it  The last one  You pick it up first  Now how will you implement  This whole concept  How will you implement stack in Java  There are two or three ways to implement it  I will tell you  You can implement stack  In multiple ways  Stack implementation  Stack implementation  Can be done in multiple ways  Let's talk about it  If you watch it, you will understand  If you don't watch it, you will have some problem  We have taught two data structures  One is array and linked list  We have taught three or four ways  Now we will learn all the data structure  So stack implementation  We can do it with array  And we can do it with linked list  Meaning  We can do its implementation with linked list  If you do it with array  Then you will have some problem  Let me tell you  If you do it with array  Then size will be fixed  Depends on the size  Static memory allocation will be there  But if you use linked list  Then dynamic memory allocation will be there  Notes will be dynamically created  So link list has its own benefits  And you can use both to implement stack  Let me tell you one interesting thing  We already have stack in Java  Stack is already  Implemented  Implemented  And Java  Stack is already implemented in Java  If you know the collection framework  If you know the collection framework  If you know this  Then you will know that  There is already a class named stack  You can use that stack directly  Without implementation  So you don't have to worry  That's why we say  If you know some data structure  Then you can use it  It's a complete library  That's why in Java  There is stack and every data structure is almost there  But still  We will implement it  We use array to implement stack  If you tell us in the comment section  Then we will make a link list program  And we will bring that video separately  Because if you ask in the hosakplan interview  Or if you ask  Then how will you do it  So let's implement it  And we will  We will not do it in the first link list  We will go to the file  And create a new project  We will do all the work separately  And we will give the name  4-stack  Means it's the fourth part  And we will make this in our workspace  So let me choose the workspace  Obviously  It's our DSA workspace  Where we were working  So we will put everything there  And the rest is Intel  So everything is perfect  And there is no need to do anything else  You create  I think we have already shown the stack  We have added another ender score  Open it in this window  Yes our project is ready  We will delete the main  Because we don't need the main right now  We will make it when we need it  So we are ready  We can make projects in this Rc  We can make it fast  For testing, if you want to make it  And if I show you  You must have come here  In folder  In DSA  Yes stack  I think this one is perfect  This one is not  Yes this one  So let's start implementation  So let's make a class  We will make a class called stack  Right click in src  And create a stack  This is our own stack  And there is already inbuilt stack  I have already told you  So don't pay attention to that  This is our own stack  Which is in the base package  And to do operations  I will make another class  To do operations  We will use operations to see the stack  And yes like this  We will write stack  Example  This is our main class  You will see  In stack we will do all operations  So first of all we need an array  Where we will store our elements  Array  So we will make an array  Of private integer  Because we will store integer elements  But guys it is not necessary  That always store integer data  In your stack  You can store double  Any type of data  So we will make an array  Make stack or array  Array is simple  Next  We will take a size  So we will take private integer  Max size  And we will make one more  Which will track elements  So we will make a variable  That is a top  This will be a tracking variable  That is whether data is there or not  This will track our top  So by default we will keep it  Minus 1  Minus 1 means we don't have any data  So these three  We have made elements  Or three variables  Let me explain you their work  So basically you understand  We have three variables  So this will be our stack  Let me create a stack  Yes let me create  So we will make a stack  So we have made a stack  This will be our array  Initially we have made three variables  This is our array  Which will have an array  We have made one max size  So tell me the max size  It's 10 so it can be 10  15 means it can be 15  Maximum size is max  We have made one top  Initially we kept top as minus 1  So we have kept top as minus 1  Top pointer is here  Ok  It's up  It's above the array  So there is no element in this array  If top is minus 1  It means our stack is blank  Now when we will push  First element  Suppose we will push 50  Suppose we will put 50  So if we will push 50  Suppose 50  So if we will push 50  So what we will do  We will increase top  We will make top 0  It's simple  Top will be here  It's 0th element  Bring it down  Top is 0  So top is here  Yes, I think you understood my point  To understand it better  We can  Initially we will write top  Initially we will write top  Initially we will write top  Now top is less than 0  It was down  Top was minus 1  So elements will come  And top will increase  If one more element comes  Top will be 1  If one more element comes  Top will be 2  If one more element comes  Top will be 3  So we will increase top  And push elements  If our element is deleted  So we will make  Operations  Suppose you initialize stack  If you want to use stack  We will say use its constructor  Use our stack constructor  It will not matter  And how many sizes  You are going to make stack  We will take max size  Our max size  Will be same as you gave  If you are going to make stack 10  Its maximum size will be 10  Array  Same size array  New integer  Max size array  Write max size  Or directly max size  Top is still  Minus 1  As simple as that  Top  Why is this?  We already have top variable  We have kept minus 1  Initially you can do 0  But you have to do it  Because there is a simple way  To make stack object  So you can't use stack  So as you call construct  This is the only way  So as you use this constructor  Top will be minus 1  And array of this size  If you pass 4  It will be 4 array  Now let's make data push  Push add or push  Push operation  We will make public void  We will make method  Public void  Void push  And we have a value  Take item or data  We will see  Obviously  We have to put data  Inside our array  But array is not full  When will it be full?  When top will be equal to max size  Obviously our length  Is equal to 0  So if our top is equal  Max size minus 1  It means our stack is full  You have already stored 10 elements  You can't come more than 10  We will add  Stack overflow  Or stack is full  And we can return from here  We can return  If it is not full  Else we can  Keep it  We will increase one  And add value on top  We will say top plus plus  And add value on top  Array of top  Is equal to  Our value data  Simple  One top will increase  Minus 1 will be 0  1 will be 1, 2 will be 2, 3 will be 4  And it will keep increasing  And we will keep value on top  Suppose minus 1 is 0  And our data will be on array of 0  Push operation is complete  To check this  First  Let's make  Display  You can make display  Let's make display  So that we can display all elements  Display  Public void  Display element  First we will check  Elements  Not like this  Not high  Stack is empty  To display we will check  If our top is minus  It means our stack is empty  So stack is empty  And we will return  If it is not like this  We have obvious thing  If data is in stack  How much data will be there  As much top will be increased from 0  We will check  Integer i is equal to 0  And we will check  Top  From 0 to top  i is less than equal to top  And we will give i plus plus  We will check  Top is tracking positions  And i will also track positions  If there is one element  It is necessary to check top  So i will do less than equal to  And i will do without print  I will print elements  Array of i  And then  When our loop ends  We will print a line  It will print all elements  This is simple  You can think  Suppose top is 0  If we add 60 to one element  Top value is 1  If we add 70 to another element  Top value is 2  Now we will print  0,1,2  We will go to the top  And we will print each element  If there is no value  Then our top will be at minus 1  We have checked  Now we will check  Make an object  New stack  I made a constructor  Suppose we have to make 4 size  Or make a stack  We will put data in stack  We will push 30  Then we will push  40  And then  We will do stack.displayelements  Not elements  There are many elements  Display elements  We have 30,40  We have 2 elements  30 and 40  We will put one more  We have put 30  We have put 40  We will put 50  I will show you  Stack.push  50  50  We will put 50  Delete will be from here  Pop will be from here  50 will be first  Then 40  Then 30  We can make more operations  Let me create some more operations  We will make pop  What we have to do in pop  We have to delete elements  And delete will be from top  We will do pop  Pop operations  We will do public void pop  We will check  If our list is empty  We will check  For empty  To check empty  You have checked empty here  To check empty  Create a method  Check empty  Public boolean  Is empty  And we will return  If our top is double equal to minus one  It means empty  Now we can call this empty  To check empty  If our stack is empty  We will check is empty  If this is empty  We will say stack is empty  And we will return  We can use same here  We can use same here  No need to  Check this again  If empty  We have to pop  It is very simple  If it is not empty  It means else  What we will do  In one of our  Stacks  First minus top  And then bring down  Because we can't delete it  So what you do  Reduce your top  And return  Array of top  You can do this in one line  I reduced one top  If our top was double  Now top will be down  One element is gone  Because we are considering value till top  And return  Do one more thing  First  We did little wrong  We did little wrong  First  Pop element  Which we have to pop  Store it  Array of top  Then minus  And then  Pop element  And what we will do  Because we want to return data  We will write int  And obviously  We don't have to return anything  We will remove return  Because if else  We are using  If else means  If it doesn't work  Then it will work  Is there anything else going wrong  If  One more thing  If  We can do  If it is empty  Then we can return minus one  If it is stack empty  If we pop it, then minus one  Similarly, there is peak  What we have to do in peak  We have to return last element  We don't have to delete last element  So make a  Peak  Operation  Public integer  Peak  And if we have to check in peak  Then we will say  If  It is empty  Then we will give message  That stack is empty  And return  Minus one  If it is not  Then we will return  Array of top  But we don't want to delete it  So we are not minusing top  We have stored pop element  Then we have reduced top  Ok  So that's it  All our operations are done  Push, pop, peak, display  Let's check all of them  All our elements  These are the elements  Now we will pop  So 50 should be pop  Stack.pop  And pop element will return  So I will say  I want to print pop  And then stack.display  How many elements are left  Ok, I will run  Let's see  So these were the elements  50 was added in last  50 is pop  So pop did its job  So the remaining elements  Were 30 and 40  If I pop again, 40 will go  So let's see  Stack.pop  I popped again  And again I will print  Elements  So stack.print element  What was it? Display element  And in this case  30 is left  So pop is perfect  So let's see  Let's remove all of them  So all elements are saved  All elements are  Stacked  Yes, all elements are saved  We are going to peak  I am not popping  I am peaking  I want top element  Stack.peak  So top element is 50  But it didn't delete  If you display stack.  It has peaked  So we will implement stack.  With the help of array  So we used array data  To make our stack  Ok  You can see  What is our  Complicatedity  We didn't have to run any loop  And this is happening at constant time  No matter how big  We are storing data in last  Next, even in empathy check  This line  Is not depending on our size  If you see pop  It is happening at constant time  We are not running any loop  Next, even if we are peaking  We are not running any loop  No dependency on input size  It is happening at constant time  Display element is running loop  To print elements  It is linear  If our array is internal  Which is maintaining the stack  It is linear  Our loop will depend on  Input size  So its complexity is  Big O of n  Now if we talk about  Some of our interview questions  How to ask interview questions  Let me talk you  That also  If we stack here  I will open my notes  So  Let's see  If you go to interview  You will see some questions  We will discuss these questions in next video  Because we have to make a program  For example  You can ask  Explain the leaf of present with real time example  You have to explain last in first  Like I explained book example  You put it on table  And then you explain that example  You have to explain that example  Here I have given answer  I have explained plate example  You put a plate on top  And then you put the top plate  Like this you can ask  Describe the difference between stack and queue  What is the difference between stack and queue  Stack works on leaf  Queue works on fifo  First in first out  Like this you will understand queue  And real time example  Then you will implement it  Main thing is understanding  What is common use of stack  What is use of queue  Then you can ask  Implement stack using linked list in java  What is simple  Simple is using array  Most of people know to implement  But when you go to interview  You can ask to implement with linked list  Here I have given the whole program  If you write yes in comment  I will teach you to implement with linked list  In next video  How to implement with linked list  You make stack  You can ask  How to reverse a string using stack  How to reverse a string using stack  Here also I have given the whole answer  And the whole program  How to do everything  Then you can ask  How can you check the balanced parenthesis  In expression using stack  I have given the program  You can explain it in comment screen  We will do practical  It will be good to understand  It is not a good idea to explain in notes  When we will do practical  I hope you understood  What is stack  What is the definition of stack  What is the principle of stack  What is the principle of stack  What are the key points  What are the operations  How to implement  Everything I have told  And we have made it here  Now you have an assignment  What you have to do  You have to make a program  Use stack operations  As I have done in a double linked list  I have done in a single linked list  Here also you have to do stack operations  By doing it  Through a program  And in comment screen you have to ask  I have done it  That's all for this video  See you in the next video  And don't forget to write your name  And where are you from  And simple  Our like game is going on  And completed it  For such videos  Don't forget to subscribe  See you in the next video  Jai Hind Jai Bharat