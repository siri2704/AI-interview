hi engineering janta I'm VAV Shukla and today we'll understand the code implementation of infix to prefix conversion using Stacks now this is the part two of this video and this is another video in the free DSA series that we building for you so that you thrive high in your career for those who haven't watched the part one I strongly suggest you go ahead watch the part one because I have explained in detail how the conversion happens how and what exactly the process of this conversion is also I suggest you that you go ahead and watch infix to postfix conversion first because the exact code piece would be used here I would not be going in detail of the postfix code which will be used here because I have explained it earlier so I will not waste your time and respecting that I will further go and explain the various other functions that are being used basically if I give you a quick recap of it how infix to prefix conversion happens first is you reverse the expression whatever you got then interchange the brackets then whatever expression you obtained by interchanging the brackets convert it to postfix then you get a postfix expression reverse it and you'll get a output which is prefix expression fine so for the conversion of that postfix I'll be using exactly the infix to postfix conversion that we were using earlier fine so if I show you the code it looks like this exactly the same as infix 2 postfix I have explained this code in infix to postfix you can go and watch that video same code even variable names and everything every statement here is same each and every statement now I'll go further this is also same this method is also same fine only difference that you would find is that in the last video it was covert in fix to post fix and in the final main section also I had written it Cort only because it was something that my design team was very curious about and they did some uh wonders to my slide but apart from them it is convert in fix to post fix and I have done this in this particular slide fine so in further functions wherever it will be used it will be used as convert infix to postf fix leave that this is exactly the same code no changes at all till this particular place now here it does change fine now if I tell you that you have an expression I'll explain you the reverse function and how it functions F so just take an example of what should be the example let's take an example of a + b and this is enclosed in Brackets fine why I'm doing it because later on I'll tell you how to Interchange the brackets using this example only fine now see carefully in this reverse function this is returning nothing so void you pass this particular expression using this string length method you declare a variable integer type of variable size you try and store the size of this particular string now if you check 1 2 3 3 4 5 five is the size string length will return five however let me tell you that in the memory the string would be stored something like this but this particular place would not be counted this would not be counted let me tell you so what happens here is this is the string length this would be returned by string length so string length will basically return you five fine so this is five that the value you'll get here and you store it in size now you declare an integer variable J which stores the value of size now I is zero now in this case again I is another integer variable you declare another array which is a temporary array and this temporary array is equal to the size of this particular string fine so if it is of size of this particular string then it has these values fine and this is 0 1 2 3 4 so again 0 1 2 3 and 4 but if you carefully see what's happening here is you store the you start from the value of size size is five so J Will Point somewhere here at another fifth index and here you will already store this particular ending character using the statement and then you post decrement it basically after storing zero what I do here is i decrement j post decrement happens after the assignment and J starts pointing here fine now when this happens what you do is you say while expression of I fine while this string that I have Encounters this particular character while it is not encountering this basically what I'm trying to say is till you're having characters in it and your character that you scanned is not equal to this particular character which is the ending character until your string has has not ended you have to run this Loop fine so I start from here when I start from here temp of J equals to exp of I I is actually zero I has initialized from zero J is actually at index 4 what I say is I is pointing here fine so I say that take this particular element store it here so I do it then I is incremented and J is decremented so first of all I'll decrement J because this statement is executing so I'll take this and I'll decrement the value of J J gets decremented J comes here then I increments and I goes to the next value fine and then again the loop functions because still the string is not zero it can still read another character now zero means the final null value fine so in this case again I take temp of J temp of J is temp of right now it is pointing at index 3 fine equals to expression of I I is pointing at 1 so temp of 3 is equal to exp P of this is exp fine so exp of 1 which is nothing but a so I'll assign this a here I'll put this a here and then I'll decrement the value of j i decrement it and it comes here I again increment the value of I fine and I comes at this particular location and so on this Loop goes on and the whole string is copied in a reverse manner if you carefully see it would be copied in a reverse manner fine so when it is copied in a reverse manner this is how your reverse expression would look like fine see after executing this full loop I get this particular string as my expression or my reversed string so if you carefully see this is exact reverse of this string now what I'll do I'll take the string copy method this is the S1 or the source is it no it's not basically what happens is source is written here destination is written here so this is S2 and this is S1 fine so what will happen whatever you have in temporary whatever you have in temporary you copy it in exp fine so now exp will become this t temm or temp so what I'm trying to say is now you have to just figure out or imagine that this particular array would be replaced by this array or the values of this particular temm or temp would be copied to the expression or the EXP of here system fine so what I'll do is I'll rather erase the names of it I'll just erase the name of it and now this becomes exp I have copied all the values to exp fine so this is the EXP now fine now in this case you have reversed the expression but your brackets aren't interchanged I'll erase it your brackets aren't interchanged so in this case if you carefully see this expression has now become this is this expression making any sense what are these brackets for what are they doing here what sense are they making nothing so what I'll do is I'll go further and I'll go ahead with this brackets function now I again give that expression here fine whatever you had basically you had this expression no b + a you had this expression now I initialize an integer variable I add zero again till you scan the full string you keep on going through the loop now if the character that you scan is an opening bracket change it to the closing bracket if else if it is a closing bracket change it to the opening bracket very simple code keep on moving forward don't care simple fine so I start scanning from here I get it that the expression of I is a closing bracket this is not true in this case this is a closing bracket so what I'll do is I change that particular bracket to the opening bracket expression of I or the EXP of I I is pointing out here right now so this should be changed or this should be replaced with an opening bracket so I replace it with an opening bracket fine then the exact same expression or rather I will replace it here only so that you get a better understanding of it so I replace it here only by I was pointing out here I replace it and then I increment the I as soon as I gets incremented I starts pointing here now both the cases are not there so you need not execute any case you just keep on incrementing I so again I goes here fine again it is not out of these two cases so I will just get incremented again it is not out of these two cases I will get incremented as soon as I gets incremented or rather make it like this as soon as I starts pointing to the opening bracket now now what will happen see carefully again I come here again I check and as soon as I check the condition if expression of I is equal to opening bracket this is true so what I'll do is I will execute this statement so this would be replaced this bracket would be replaced by a closing bracket right clear is it clear now if you carefully see I ++ this particular thing will happen and you will reach at this character which is not usually mentioned so this Loop will stop and if you see brackets have been changed brackets have been absolutely changed right and now this expression makes sense right so now what I'll do is I'll sub re this expression to say that I had got the expression a plus b only I'll go through with the simpler example so that you understand it well and then you can dry run things fine so a plus b was our initial expression now imagine that I had subjected this expression here fine to this particular method infix to prefix now we will come to this method now if I tell you that here I gave a + b in the brackets closed first thing we did was reverse the expression so here what you got a pardon B+ a not a plus b so I will go ahead and write this out so this was the first output if you correctly remember this was the output of reverse isn't it wasn't it the same output that we received so yes we are going good now we need to change the brackets when I change the brackets what I get here as the output a + b no b + a pardon this is reversed so this is B + a only thing changed is the brackets so if you carefully see we have just done that using this expression right now once it is done you need to convert infix to postfix and you will pass pass this expression this time because every time I'm I'm updating the expression so I pass this particular expression to this function fine now this is an infix function it will be converted to a postfix function fine what will happen simply using a stack it will check if it is an opening bracket push it if it is an oper hand output it so rather I would present its output here on wait so the output that we are having here that I'm representing with this orange color I'll choose the orange color fine so here whatever I'm representing with the orange color is the output of infix to postfix fine now I go ahead and I print B now I scan operator this operator can be pushed inside for those who know why am I pushing it inside great for those who don't go ahead watch the infix to post fix video I push it inside again I move further I find a coer hand I print it again then I find a closing bracket as soon as I find a closing bracket I start popping things out till I encounter opening bracket fine so I have en counted opening bracket after popping so popping has happened everything has been removed I'll discard both of these brackets I'll discard them and here I will present plus as the output to be printed so ba A+ is something that should be printed here fine and this is the postfix expression this is the postfix expression now for this reverse fine when I reverse this expression this is the expression that I have now fine or this is what I have stored in exp fine as soon as I get this I reverse it which is reversing it would result into plus a and this final expression that I have obtained C out expression if I go ahead this is the prefix expression fine so this is the prefix expression as simple as that now what you need to do is I have explained you using a very simple example how the functions are working what you need to do is take this example fine and I'm telling you it is a very simple example very very simple example fine all you need to do is let me do a few things for you here A + B multiplied by a bracket of C expon D minus E again bracket closed exponent and then F or this is raised to the power operator basically fine for those who aren't understanding what I'm saying now and again there is something minus I fine so minus I so what you can do is for this particular expression try and dry run it yourself tell me in the comments if you have any doubts fine I have explained you using a very simple example it is working in the same way fine let me tell you one thing what you can do I minus now this is a particular closing bracket then H then the multiplication operator then G then plus then F then opening bracket then again exponent then closing bracket then e then minus then D then again exponent then C then opening bracket then multiplication operator and then B and then a fine so these are the reverse expression so what we did what this reverse can do this particular reverse function this reverse function would rather I would erase all in here and now I'll show you that this particular reverse function delivers us this fine so if it delivers us this this is the output of reverse function what we will do is we'll go ahead and interchange the brackets fine so I interchange the brackets of it and if I interchange the brackets of it what do I get I'll write here so that Things become easy for you fine I minus now I change change this bracket to opening bracket fine IUS h g + f h star G + f and now I go forward again I need to Interchange the bracket I keep on interchanging the brackets and then e minus D exponent c e minus D exponent C or the ra to power C and then what's further I again change it to the closing bracket change it to the closing bracket then multiplication operator B and then what's there plus a so this is the expression that you get after reversing and interchanging the brackets once it has been done all you need to do is convert this into a post fix expression once you convert it into a postfix expression you reverse it and you get the final output I am leaving this for you because approximately in three videos I have explained the same concept again and again and again and this is the fourth video where I have explained you the working of this again so what you need to do is go ahead taking this particular string fine taking this particular string that you are having on the screen subject it to the infix to postfix conversion function and convert this particular string into a postfix expression then reverse it and get the prefix output and whatever output you get go ahead comment that output I'll check and tell you whether it is the correct answer or not tell me the correct answer or the correct output which will be the correct prefix expression of this particular string we started from here so if you correctly remember we started from here so for this particular string I have done half of your job you go ahead you tell me what will be the prefix expression for this particular string how will you do it I have reversed it I have interchanged its brackets all you need to do is subject this particular expression to the infix to postfix conversion you convert it into the postfix then reverse it and the answer will be the prefix expression that we want and whatever answer you get go ahead tell me in the comments I'll check it out and I'll respond whether it is correct or not fine so there is another advantage that you will have all those who comment can stand a chance to win free prep insta Prime subscription for 3 months fine so that's one added advantage and go ahead follow us on these social media handles so that you never miss any hiring update for your career that's all for this particular video go ahead keep doing good good will come back to you