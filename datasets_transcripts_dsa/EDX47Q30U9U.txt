[Music] hi everyone welcome to NCCAP Today in our video we are going to cover bucket sort as part of data structures and algorithms So this video covers what is bucket sort and what is its algorithm and how it works and we'll see the sample implementation of bucket sort algorithm using Java programming language So what is bucket sort So it is a sorting algorithm which separates elements into multiple groups called buckets So here the elements are uniformly divided into different groups called buckets and then will be sorted by any sorting algorithm like insertion selection or quick So what is the procedure for sorting So we are going to u fix the number of buckets uh by partitioning the range So we are going to put uh given element into a relevant bucket based on its uh element and the range we fix for the bucket So after that we are going to sort each bucket using any sorting algorithm As I mentioned before we can use any like quick sort or insertion or selection sort any algorithm So after that and again we are going to concatenate all the buckets so that uh we are going to get the sorted elements So what are the main advantages of bucket sort So basically it is going to reduce the number of comparison and it is also asytomatically fast due to uniform distribution of elements as we are maintaining the range for each bucket so that we can uh easily distribute the element into specific bucket So each bucket will be processed independently after the items are dispersed into the buckets So what are the disadvantages of bucket sort So it may or may not be a stable sorting algorithm So it is not going to be useful when there is a large number of elements in the arrays So it usually occupies uh requires some extra space for uh sorting the buckets and it is also not recommended to use this bucket sort on the group input data So basically this performance depends on the number of buckets So if we increase the number of buckets uh performance may deplete So mainly we are going to use this bucket sort for 14 point values and uh whenever there is a input is uh distributed over a certain range Yeah So next we'll see what is its algorithm So first we are going to take the given array so which is of certain length and then we are going to calculate the length and then we are going to initialize a new bucket array with the size of the uh array minus one and then we are going to iterate and we are going to get the each uh element of the given array and uh place it in the particular bucket based on the range So as we are going to fix the range or uh something So based on that uh we are going to place the element of array into relevant bucket and then uh we are going to iterate the array and then uh we are going to sort each bucket and then uh so as I mentioned so we can use any sorting algorithm okay like insertion selection or quick sort anything So we are going to sort each bucket with sorting algorithm and then uh we are going to find we are going to concatenate all the list in the order So after that uh so once this procedure ends like uh we are going to get the uh sorted order and then uh we'll see the sample uh array and it's uh how it is going to work So first uh as I mentioned we are going to put the given elements into the buckets So first uh we are going to take the elements and then we are going to scatter the elements into buckets So after scattering elements into the bucket so each bucket will be sorted by any sorting algorithms So for an example like uh we have given uh we have taken this array like 10 87 16 18 12 23 11 So these are my elements in the array and I'm going to cricket bucket So with each range like uh from 0 to 25 and uh I'm taking like bucket range is like 0 to 5 5 to 10 10 to 15 15 to 20 and 20 to 25 So as I see like uh number maximum number is 23 So yeah here once uh we have created the buckets with uh each of ranges and then uh elements will be inserted according to the bucket range So we are going to iterate this array So based on the element like we are going to place our element into particular bucket So example like if 16 is there so it is going to be inserted into the 1520 range bucket Okay So this phase we are going to call it as like scattering of array elements So once the elements are scattered okay or or placed in the required bucket and then each bucket will be sorted so that we will be getting the order in the each bucket So after that we are going to concatenate So here we can see so these are the given elements and then uh so I have created like uh five buckets So with each of range we can see 0 to 5 5 to 10 10 to 15 15 to 20 and 20 to 25 So here we can see first element it is 10 So I kept it in the 10 to 15 range bucket And next eighth element so I kept in uh 5 to 10 bucket range And then 20th element so it is kept in 15 to 20 Seven it is kept in 5 to 10 and 16 it is like 15 to 20 range and 18 so here we kept it in the 15 to 20 range and 12 it is in 10 to 15 and 1 it is 0 to 5 23 it is 20 to 25 and finally 11 it is in 10 to 15 range So here we can see all the elements are scattered into bucket Okay after that uh we are going to sort each bucket so that uh all elements will be in sorted order So first bucket it has only one element so it won't change So just it will be one and second bucket we can see elements are eight and seven So these elements need to be in sorted So use any sorting algorithm So elements will be like 7 and 8 And similarly third bucket it is having three elements 10 12 11 and 10 and 15 20 uh 10 12 and 11 So after sorting you can see 10 11 12 and fourth bucket it is like 20 16 18 So after sorting we can see 16 18 20 So and finally fifth bucket has only one element 23 So now we need to concatenate all the buckets so that we'll be getting the sorted order So first bucket is having one Second bucket 7 and 8 third bucket 10 11 12 and fourth bucket it is 16 18 20 and finally 23 So like this we can get the sorted order by using this bucket sort So and then we'll see the time complexity and the space complexity Yeah time complexity is like for the best case like uh no sorting is required So that means given elements are already in sorted order So in this range also like uh time complexity is order of n plus k So order of n is for making the buckets and order of k is like for sorting the buckets and average case complexity So given elements are in jumbled order like not properly ascending or descending So in this case order of comp time complexity is order of n and in worst case like all the elements are in reverse order So in that case like time complexity is order of nÂ² and coming to space complexity it is like order of n into k So since we are performing sorting on each uh bucket so it is going to consume one space Yeah Now we'll see the implementation of bucket sort algorithm using Java Yeah Uh so this is the sample uh program for bucket sort algorithm So first we have created one array uh with the given elements 90 45 15 30 and 9 So here we are creating one object u using this main class bucket sort demo So we are creating an object and before sorting like we are printing the elements of the array and uh here we are calling this bucket method So which is going to do this uh bucket sort algorithm implementation and then after sorting we are printing the elements So first for printing the elements like we are using simple for loop for uh by doing the iteration we are get printing the each element Yeah Uh so next uh for bucket we are calling this bucket method and uh we are passing the array Okay So first we are getting the length of the array and then uh we are getting the maximum element of the given array So for that we are creating another method get max So here we are uh taking the length of the array and then first we are considering first element is the maximum number and then iterating the array till the end of the point and then we are checking if the current element is greater than max So we are treating that as a max equal to that current element So like that we are written the maximum number and then we are creating a bucket of that uh required size So assuming here we are having 90 is the highest number So we are going to create bucket size uh with 90 max + one it is 90 + 1 and then uh we are uh initializing this bucket array with uh zero all the elements with zero and then we are iterating the element okay uh we are iterating the for loop i equal to0 i less than n So it is like uh array and then uh we are and then uh here we are uh calculating bucket a++ So like that we are incrementing this uh bucket uh array like and then uh we are iterating the i=0 is equal to0 i less than or equal to max i ++ So we are iterating the loop till it reaches the uh bucket array length and then uh if and then we are creating one for loop If bucket is if is greater than zero and then we are uh adding the element a of j ++ it is like index equal to i and then we are decrementing the bucket of i minus minus So like this uh this loop will continue and then uh finally after this we are going to get the sorted elements Okay First yeah we'll run this and we'll see how the elements are getting sorted Yeah So these are the given elements and then uh after sorting we can see elements are sorted in ascending order Yeah So we have seen like this So now we'll see like how the elements are getting placed in the each bucket So for this like uh we'll try to print the elements okay after the bucket of the bucket So by using this arrays dotstream and uh we'll run it So you can see like uh for each so we have created a bucket of like uh with max size of uh number So 90 So 90 is the size of the bucket and here we can see 0 0 0 1 So there is an element five So against that position like uh we are placing this one and then similarly ninth position it is uh 1 and then 15 10 11 12 13 14 15 it is again one After that we can see like uh 30th it is one and then uh 40 it would be one and then after 90th it will be one Okay So this is how bucket elements are getting placed Okay So after that we are doing the iteration and then whenever there is a bucket is index position is greater than zero like uh we are incrementing that j position and then uh similarly we are uh decrementing the bucket of i index Yeah So we are decrementing the uh bucket uh value Okay It is like bucket of index I So you can see there will if it is number is there we can see the one once you decrement it will become zero so that uh that position will not be repeated So like this uh we are doing that uh sorting and we have another example with the uh floating numbers So it is also like similar thing So we are created array with floating numbers and then uh we are printing the ar array before uh sorting and after sorting So in between we are calling the bucket sort algorithm So here we are calculating the length of given array and then initializing the bucket array also with the same size So first we are creating the empty buckets Okay After that we are going to insert uh the given elements into bucket So yeah here we can see insert we are inserting the elements to their respective buckets So yeah uh wherever that uh here we are doing the calculation index B Okay So we are multiplying the width 10 uh of the given element Okay And then finally that's how we are getting the index position and then uh based on that bucket of index p we are adding the given element So and then we are sorting the elements of each bucket by using this uh collection dots sort method So that uh for each bucket it will get sorted and after that we are going to get the sorted elements So like uh we are doing the for loop uh till reaches the length end of the array and then similarly we are uh running the inner loop with the bucket size and then we are iterating So whenever the we are getting fetching the value from the bucket and then assigning to the array So and then we are finally returning the array so which we will be having the uh sorted order So just execute it And we can say this is the original array and this is the sorted array So now we'll see like how the bucket elements are placed and for each uh iteration uh how the array elements are getting uh placed So we'll run execute Yeah Uh so here we can see this is the given array and uh we are creating the bucket list Okay So with array list 1 2 3 4 5 6 7 and uh this is how elements are placed and then uh we are uh calculating that uh return array like how we are going to place the sorted elements So here we can see the how the elements are getting printed and finally we can see this is the sorted order Yeah that's how we implement the bucket sort algorithm using Java uh for the int and the uh floating numbers So thank you for watching