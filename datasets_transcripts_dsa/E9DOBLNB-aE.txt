 Hello friends, welcome to Gate Smashers  In this video we are going to discuss about AVL Tree  And in this video we will discuss all
important points related to AVL Tree  Which will be very beneficial for your competitive
 exams, even college or university level exams  So guys, like the video quickly, subscribe
the channel if you haven't done it yet  And please press the bell button so
that you get all the latest notifications  So let's start, the first important
point is what is the usage of AVL Tree  Means why AVL Tree has come,
so I want to tell you about this first  In the last video we discussed about Binary Search Tree  So actually the story, I am going to tell you a story related to this  So that all these three points will be cleared  So first comes about Binary Tree  What does Binary Tree mean?  In which at most two children can be there  Means any node can be 0 or 1 or two children  Now the story comes here that is there any order  To insert the data in Binary Tree? No  You can insert the data in any way  Means you have any data, any key without worrying  You simply keep on filling the data, just remember
 that maximum two children should be there  Now the problem is that if there is
no order while inserting the data  Then there will be a problem while searching the data  Means if we talk about class, if students
are not sitting in the proper order in class  They are sitting randomly, obviously
 there will be a problem while searching  So what are we doing here?
What is the meaning of data structure?  Organize the data properly so that we can search it easily  So that whatever operation I want to do, I
can search, insert, delete, I can do all that easily  So there will be a problem in Binary Tree  So then we discussed Binary Search Tree  Now Binary Search Tree says that on
 the left side you have smaller element  On the right side there is a bigger element than root  So we defined an order somewhere  How to insert and delete Binary Search Tree,
I have already made a video  If you have not checked that video then do check it once  Because the link given in the description box  You will get to know all the
summary related to Binary Search Tree  So what I was telling about Binary Search Tree here  That Binary Search Tree says that put it in an order  Smaller on the left side than root
and bigger on the right side than root  So if I am putting it in an order then
 obviously search will be easy for me  Searching, inserting, deleting will be easy somewhere  The reason for that is if my tree is balanced  What is the meaning of balance?  If it is proper, means if its proper children will be made in this way  Then somewhere my height is, if my tree is balanced  Then my height will go up to log n  What does log n mean?  The number of nodes you have, how much your height will go?  Height of the tree will be log n  And if it is going up to log n then it is best  Searching log n, inserting log n, deleting log n  But there is a problem in Binary Search Tree too  What is the problem? Worst case  What is the meaning of worst case?  If I get data like this, let's say 10, 20, 30, 40, 50 like this  Means if data is coming like this  Then it will behave like a linked list instead of tree  Means 10, 20, bigger than 10 means on the right side  30, bigger than 20 on the right side  40, bigger than this, 50,
bigger than this on the right side  Means your tree will grow in one direction only  Which is called right skewed  What is called right skewed?  And if it will grow on the left side  Let's say 9, 8, 7, 6, 5, 4, 3  That is called a left skewed  Now if this problem is coming of right skewed and left skewed  Then you see carefully, if number of elements will be n  If number of elements will be n,
then how much will be the height?  It will be n and if height will be n  Then obviously the complexity of searching will be  Order of n, in worst case of inserting an element is n  In worst case of deleting an element is n  I will have to search n times  So here the worst case of binary search tree is spoiled  Because it is performing well normally  But here we are not talking about balance factor  So now we are going to talk about balance  Balance means we are going to balance binary search tree too  So whenever we talk about balanced binary search tree  It is known as AVL tree  Means it is not known as AVL tree  Actually these are 3 Russian scientists who have made AVL tree together  Although there are many more trees in balanced binary search tree  But the most important one is AVL tree  So here first of all I will tell you the relation between these three  So your binary tree comes here  Binary search tree came inside this  AVL tree came inside that too  So if you get any question like this  That all binary search trees are binary tree  But all binary trees are binary search tree may or may not possible  All AVL are BST  All BST are AVL may or may not possible  So you should remember this relation of all three  Now we will talk about AVL  Now what we are saying in AVL is to make balance  How do we make balance?  Why are we making balance actually?  So that the height of the tree does not cross with log n  And if the height remains log n  Then how much will be the search time?  N  And if I have to insert or delete any element  Then time complexity will not go above log n  So if height remains log n  Then time complexity will remain log n  So in balanced binary search tree we use AVL tree  Now the first point comes here  How do we extract balance factor?  So let's say we make any binary search tree  Let's say I have a binary search tree  First of all I told you that AVL tree is a binary search tree  Now balancing the binary search tree becomes your AVL  So it should not be that you are making any tree  And converting it into AVL  No, you have to convert binary search tree into AVL only  So here what I have? Balance factor  Now how do we extract balance factor?  Balance factor is height of left subtree  Height of left subtree - height of right subtree  And if you extract this  So what is its value? Either it is - 1 or 0 or + 1 or 1  Means it should be between these three values  Or you can say these three values are allowed  If any other value comes apart  Then your tree is unbalanced  And if it is unbalanced then we will balance it  So here the first important point comes  So how do we extract balance factor?  Let's say if I want to extract balance factor of this node  Root  So see left subtree  What is the height of left subtree?  1, 2  How do we extract height?  I have to go from root to leaf  Or take from leaf to root  So how many edges I am crossing  So here 1 edge, 2 edge  And what is the height of right subtree?  1, 2  2 - 2  What is it? 0  So 0 is allowed  Next see here if I check this  So what is the height of left subtree?  1  Right subtree  There is no one in right so 0  Means 1 - 0  What is made? 1  So is 1 allowed?  Yes  1 is allowed  So what is this?  Balanced  See this  Height in left is 0  There is no child in right  No child  0 - 0  0  This is also allowed  Similarly if you find out this  So in left side 0 - 1  So what answer came obviously  I will get - 1 here  Which is what?  Again allowed  Next  Next if you will remove this  Balance factor then 0 - 0  Means 0  So this tree is with us  Balanced tree will be made  So you can call it AVL tree  Although I have not put only data till now  I am telling you a general format  That if any binary search tree is given to you  Then you take out balance factor of that binary search tree  And after taking out balance factor  You will know  Of every node  Of every node  That if it is - 1, 0 or + 1  Then it is AVL tree  If it is not coming  Then it is not AVL tree  So if it is AVL tree  Then obviously its height will be  Log n  And if height is maximum log n  Then search time will take log n  So insertion, deletion, searching  All operations will be easy for you  But if any other value is coming apart from this  2, 3, - 2, - 1  Anything  Any other value is coming  Other than these 3  Then we will convert it into AVL tree  Now how to convert it into AVL tree  We will see in next video  So here all these important points  Are important related to AVL tree  Whether they have relation  Whether they are time complex related  Because these type of questions  Are most common in competitive exams  And even if we talk about college or university level exams  So there also most common question is  Create binary search tree related to creating  Create, delete  Or make AVL, draw, delete  So these type of questions will definitely come to you Thank You.