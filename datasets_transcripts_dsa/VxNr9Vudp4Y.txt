we'll be going over one more important sorting algorithm called cell short as usual we'll go over some theory then we'll do coding in python and in the end we'll have an exercise cell short is an optimization or insertion sort so if you don't know about insertion shot i would suggest you watch my insertion short video in the same playlist let's say you have this type of array we'll first go over how insertion shot work so insertion short you start with the first element which is 21 and the elements which are grayed out which are on the left hand side of this yellow arrow is your sorted array anything that is yellow arrow or on the right hand side is unshorted array your goal is to start with this yellow arrow and go element by element then put those elements in the shorted array which is on the left hand side so 38 you will look at it and then you will not change the position because 21 38 is already sorted now you go to element number 29 29 you want to put in the sorted array so sorted array is basically 21 and 38 anything which has a blue background that is a sorted array so here now you take 29 and you try to put here so what is the position well you put it in between these two and you get this so now uh you move to 38 then you move to 17 when you have 70 now you put try to put 17 here somewhere okay where should it go well it will go in the very front okay so you keep on doing that till you get your whole array sorted but one problem of this insertion shot by the way whatever we looked at is insertion short the problem with this is just think about this when you wanted to put four in this sorted array first of all you have to compare right from here so you start comparing with 38 well 38 is greater than 4 so you move to 29 it is also greater so you move to 21 that is greater 17 greater so now you put 4 here so you have to do lot of comparison and when you put four here you are actually swapping those elements right you are you're moving 17 to here 21 to here so there are many swaps and many comparisons so that's that's the disadvantage of insertion short where if your lower elements or the smaller elements are towards the end or on the right hand side of an array then you will do a lot of comparison and swaps and cell short tries to solve this problem how well in cell short what you try to do is whatever array you have right like this was my array you will try to move the heavier element on the right hand side somehow not necessarily that they will be sorted but somehow you do something so that the heavier elements which is 38 29 they tend to be on the right hand side and if heavier elements on the are on the right hand side naturally when you perform insertion short number of swaps in comparison will be less so let's go here and let's start with a gap of three so cell short uses this concept of a gap where you start with some gap so let's say i start with gap 3 here so at gap 3 you get all your elements and you kind of form a sub array so here my sub array has three elements 21 17 and 11 and see they have a gap of three elements so after 21 1 2 3 after 17 1 2 3 after eleven one two oh there is no element so we end here now we try to sort this sub array so see the sorting is now being performed only on sub array not on the entire array so just assume you have array of three elements 21 17 11 and then you sort that array okay fine now you move to a different sub array with same gap which is three so what if i move from this to here so now i'm here again i am forming a sub array which has a gap of three elements and that sub array is now 38 or 32 how do you sort it well it's 4 32 38 so look at the elements which are in the blue background i'm only sorting those i'm not touching the rest of the elements okay and then you move to from 38 now you move to 29 so it will be 29 25 and 9 try to sort this value when you sort 29 25 9 you get 9 25 9 29 and you keep on doing th this till the end for a gap of three so when you did this for a gap of three what you got was from this source array you got this array now this array is not sorted but not is one thing all the heavier elements or the bigger elements are now on the right hand side see 32 25 all those big guys are on the right hand side so now when you will do insertion short on this array you will have less comparison and less swaps so then you move to gap two by the way how you reduce the gap it varies you can start with n by two keep on reducing it by two or keep on reducing it by one it depends but your end goal is to reach to a state where you get a gap of one so let's say i have a gap of two so gap of two means every alternate element right now you try to sort this sub array so what is my sub array 11 9 32 21 and 29 sort that okay you get 9 11 21 29 32 then what is my second sub array well the remaining elements right 4 17 25 but if i look at those those are only sorted i'm lucky here so i don't need to do anything then i reduce my gap to one remember in cell short you need to have your last step will be gap of one and when it is gap of one actually it becomes insertion short yes gap of one means it is an insertion shot and now when you do insertion short here you will realize most of the elements are sorted only 9 and 4 is not sorted so when you apply insertion short there will be only one swap and number of swaps now are reduced overall so the general algorithm is uh the popular approach is you start with n by two as your gap then you sort the sub array then you in the next iteration you reduce your gap by two so n by two and then it becomes n by four then end by eight last iteration has to be gap equal to one at which point it becomes insertion short so actually we are doing insertion short but with some optimization so that number of swaps and comparisons can be reduced the bigger complexity in worst case is order of n square uh it the best known worst case a gap sequence gives you order of n log square and and uh performance and here are some statistics on your best case performance this i have taken from wikipedia so now let's get into python coding we will write cell short in python now here i have taken same elements that i showed you in the presentation and i'm gonna write now cell short function so first what we'll do is i will show you what happens to this array when you take a gap of three so i just hardcode a gap of three then i will take a size which is just a length of an array and then i will do whatever i just showed in the presentation which is start with a gap of three and take the sub array and then sort it and then keep on sorting it till you get to this stage okay so all the arrays at gap 3 should be sorted so that's our goal now how do you do that well you start with an anchor element which is uh 17 here so why 17 so you start with 17 then you go to 4 25 and then you uh look at the elements before because that's how insertion shot works right we assume that anything on the left hand side of this anchor element is a sorted array okay so you should look into my insertion short video and python code just to get an idea so we will here start a for loop so 4i in range gap in size so what we're doing is see here again if you go back to presentation what we are doing is actually we are starting with 17 which is gap 3 0 1 2 3 then going to 4 25 11 32 9 and when you are at 17 or in each iteration you compare back so you go back and compare with the element which is uh three gap behind so 17 you will compare with 21 first then you will go to 4 and you will compare it with 38 when you come at let's say 17 you compare it with 7 11 here you compare it with 17 and 21 okay so at any point your anchor is a an a an element in your array and then you're going back and comparing with the elements which are at a distance of this gap so here um my anchor is basically my array of i okay so in you know in our case it will be 17 this 17 then you get another index calls called j and now while so what do you want to do you want to compare 17 with 21 okay so get the element which is uh at a distance of gap so here it is j so this will be j minus gap right 21 will be j minus gap right agree so you will say okay j minus cap so you want to compare this guy with anchor okay so there is a comparison going on between these two so if this particular thing so you're almost doing something like this okay if this 21 is greater than 17 then exchange so how do you exchange well you'll say array of j is equal to array of j minus cap and then array okay so let's stop here so array of j is equal to array of j minus cap which means here on 17 you will copy 21 and in 21 you should copy 17 which is your anchor okay so now this is going to be a while loop why because when you are here let's say when you are at 11 you not only want to compare 11 with 17 but then 17 you want to compare with 21 as well so you want to compare the whole array sub array therefore you have a while loop okay and while loop you want to make sure j is greater than equal to gap why well because if j is less than gap then this index will be minus and it will not be valid okay for this to work j has to be greater than gap all the time or equal to all right now when you're in while loop of course when let's say you're at 11 you compare it with 17 and then you compare it with 21. so in each while loop iteration you want to reduce by gap so you will just say j minus equal to gap okay when this ends you would have swapped all the elements and then you will do array of j is equal to anchor so array of j will be your whatever the last element and that will be your anchor element okay now let's just run it okay so you realize i i ran it for gap three and what i got is this array and this was my source array and if you go back to our presentation here see this is exactly what happened right so you see 11 4 9 17 11 4 9 17 and your source array was this so sorcerer is this so we got uh the array which is kind of partially shorted it's not exactly sorted because you see 4 9 you see here but you you realize one thing is the heavier element are on the right hand side now you have to repeat the same thing for lesser gap okay until you reach the gap of one so here what i'm going to do is instead of starting with some hard-coded gap 3 i will start with a gap which is size divided by 2. this is a popular approach where in shell shorter you start with a gap that is number of elements divided by two and we do two slash because you get the integer back that way okay and we need to have we need to wrap this whole code in a while loop so what is that while loop well while gaap is greater than 0 do all of this and in each iteration in this while loop you want to reduce gap by two okay i hope this makes sense so when you run this code you'll see the whole array sorted i would suggest that you set a debug breakpoint in your pycharm and try to debug it one by one to see how exactly internal it works i think that debugging really helps you i have this habit of going through various test cases so it is working fine for this guy okay but what i like to do is present various diverse test cases here this is sorted in descending order then you have empty array you have an array with one element some random sorted elements and ascending order sorting so this should work with all the elements okay so it's not working because i need to write a loop so four elements in test so you see that it sorted all the arrays properly it means my code is working on all kind of different use cases all right so that was it now let's go into exercise friends exercise is the most important thing if you just keep on watching my videos you're you're wasting your time you better watch a movie on netflix you have to do this exercise in this exercise you are going to take my code of cell short and do a thing little differently let's say your array has duplicate elements see here two two all these are duplicated so you not only have to sort this array but remove the duplicates as well so that your and array looks like this now i have a solution link but guess what you're not going to click on solution until you try on your own a sincere student who gives the diligent afford is the one who becomes successful all right so you have all my blessings all my teachings all you need to do is put little afford and i think you can do it i think you can solve this exercise so give it a try after that you can match your solution with my my solution all right thank you for watching bye