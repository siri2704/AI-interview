hey guys i'm avi and in this video we're going to talk about five data structure projects that are good for your portfolio and that will help you learn a lot about data structures and algorithms and they're going to really help you with your job interviews so let's get started so we all know that in order to become a software engineer at a very good company you need to learn a lot of data structures and algorithms because it's a part of the interview process but not just because it's a part of the interview process you will actually learn a lot and you will learn the basics the fundamentals of programming and building software i'm not saying you'll be using all of these data structures and all these algorithms in your daily life in your job but it will definitely come in handy from time to time because it will basically teach you how to solve problems using whatever algorithms there are and these common algorithms are applied in a lot of situations and a lot of different problems it's great to learn these and it's great to flex that you know it'll be easy for you to crack interviews but also you learn a lot about the fundamentals of computing so it's always a good thing to learn and by building these kind of projects it is one of the more fun ways to learn these data structures and algorithms right you don't want to spend time just reading algorithm textbooks or doing competitive programming at least i don't so i would love to build projects and uh yeah these are five projects which will help you learn data structures and algorithms all right the first one is build a tiny url build a url shortener basically you know we have all seen these urls which start with bit dot lee slash or tiny url slash whatever so we know that some of sometimes the urls or the web addresses that you want to search for or that you want to share with someone else they become too long right imagine having www.google.com you know there are 100 characters in that url but you want to make it short you want to make it very short and very elegant and to do that you use a url shortener now how would you build that url shortener right you basically just you need to find a way to take a big string and convert it into a short string and it has to be pretty accurate so that you can also go back and like you know you give the short string and get back the whole address but the most basic one would be a simple hash map of the key and the value where the key can be the shortened url and the value can be the full url so yeah that's the first one the next project would be to build a sudoku solver using backtracking algorithm so basically sudoku is a game i think most of us have played it growing up and i i kind of liked sudoku at one point i was doing it all the time but as i grew up i kind of go out of it but i know how sudoku works so like you know in college i remember there was this where people were making algorithm to solve the sudoku puzzle and you basically used some sort of backtracking algorithm to just you know find the answers and find the right numbers to fill in basically and i think it's a good way to uh it's it's a good way to learn backtracking and it's also kind you also learn a lot about sudoku doing that so yeah that's that's one good way to learn backtracking so that's the second project the next project would be to create a file zipper using 3d huffman coding algorithm basically you know we all use compressors like winzip or winrar or stuff like that i don't know if you did i used a lot of them while playing games because you should download zip files or you know compress actual files and give it to my friends and stuff so it's good to know you know how these zippers work i mean they are very complicated right because they take a huge file and zip it into a very tiny file there are advanced compression algorithms that they use but the huffman coding algorithm is quite simple and it's quite primitive and that does solve this zipping problem so you can create a simple file zipper using uh grady huffman coding and i will leave a link in the description so you can check it out and it's a good it'll be slightly complicated but it will give you a lot to learn and it'll definitely be fun all right the next problem is create a map navigator basically you will basically use something like a google maps or some api that gives you two or multiple points that you know you have to go from point a to point b what's the best way to reach there and to do this you can use many different techniques my favorite one is dextra's algorithm and i think i'm not sure but i think google maps also uses at least some variation of dextrose algorithm to best to navigate from point a to point b basically to find like a shortest path so you can learn dijkstra's algorithm it's it's commonly used it's not very difficult and there are variations to it and they can be enhanced and you can just quote the simplest dextrose algorithm for minimum uh like shortest path and the shortest path problem is pretty common and you can definitely learn a lot about it so this is one good project that you can build so coming down to the fifth the last but not the least at least it's my favorite one and this is about react so i love react and i know most of us love react and it's just one of those pieces of technology that's been appreciated by the world of developers and it has brought in a lot of non-developers into coding because it's it's good we just like react right so we want to know how react works so how uh basically uh react is a huge ecosystem but you want to basically learn the fundamentals of react what react basically does is it compares every node in the virtual dom to every node in the real dom and then finds out what has changed and it will only update that uh changed node in the dom so there's a lot there's a lot of three traversals happening you need to find the node in another tree you need to find the same kind of node in another tree this is a very common interview problem and it'll help you to learn about uh depth first search and breadth first search and how you traverse around trees how you find nodes maybe the dom api so try to build like a mini version of react using javascript and it's a lot of fun trust me i've done it it's hard to make it work but in the end you will really learn how react works and uh basically just just read the documentation of react and i think they've explained how this works so like that gives you a head start but try to build it on your own so that you actually know how it works i'm not saying it it's very important to no react you have to know this but it's good to know and it's definitely gonna give you an edge and it's gonna make you understand how it's working internally right so that's always a good thing and it will increase your knowledge as a software engineer so these are the five projects that you should learn i mean to learn data structures and algorithms so yeah thanks for watching [Music] you