okay let's start here let's start whoever will join we'll check later okay so I hope we remember that yesterday topic yesterday we was doing one problem right we was doing one problem is that shorted and rotated okay so we tried one approach but which approach Shiva signed that was working but we that did they don't that was not working we will do that same thing with this approach okay with this approach I will explain you this later but now today we'll solve these three problems okay now today we will solve these three problems okay which is left rotate by one then we'll see one more example in it which is left rotate by D okay another one is array leader and third one is duplication removing array these are three important problems okay these are three very important problem it frequently asked in interview as well so please uh focus on these problems okay so let's start for the very first problem okay which is uh left rotate by one okay which is left rotate by one now what exactly the meaning is suppose I have one array here okay I have one array now what the problem is saying okay the problem is saying I have this array suppose like 2 4 6 9 and 1 okay now what I have to do what I have to do i have to rotate this array left by one position okay by one position I have to rotate it okay in which direction left direction okay i think this is uh like clear so suppose I have this watch okay suppose I have this watch okay now what I have to do i have to like sift the element in anticlock direction okay this is clock direction this is anticlock direction so I have to sift like one is there right it will come here okay it will come here it will come here and that two will come where in array we not have any minus one index right any minus index we don't have in array so two will go like this okay see see guys this is making that anticlockwise direction right see like this anticlockwise okay so that program we need to do okay that program we need to do now how we can do this now how we can do this let's understand first the approach okay let's understand first the approach related to that by which approach we can do this so let me draw again one array okay simple array i have this array in that that I have the value like 3 okay 4 5 6 and 7 okay now what I have to do i have to rotate this by one position okay i have to rotate this by one position so what will happen as we know this will come here this will come here this will come here this will come here and where three will go three will go like here it will go in the last okay it will move like this so it is making that anti- clock direction okay i hope this is clear so let's code for this guys let's think the logic for this now what logic we can make for it so what we have to do first thing in our mind we'll start one loop okay we will start one loop first thing we'll start loop what that loop will do it will iterate in our all array okay and what we have to do we have to store a of i + 1 what is i here which is denoting that loop we have to put that value to i that only we are doing right that only we are doing a of i + 1 position will come here then the loop will shift this position will come here then the loop will shift this position will come here then the loop shift and this position will come here right and that's three element now you can say right then we will lose three right then we will lose three so what we can do we will store this three in one variable we will store this three in one variable at starting then we will put it by manually We will put it like a of last equal to that uh temp value we can say temp value okay so that approach we are going to follow here that approach we are going to please open your JS compiler wait let me write code here let me write code here so first okay first loop then second need to put element which element guys which element first one because if we will rotate this array by one now if we rotate this array like this then we will lose our value three we will lose this value we will lose this value okay so that's why will hold this value in one container or we can say one variable then we will put it in last okay is that clear clear okay now let me code for that let me code for that guys please open your JS compiler as well and try to code this try to code for this so I have one array here okay I have one array which is 2a 3a 4a 5a 6 okay this is I have the array okay now what I am doing here what I am doing here guys i first thing first thing what we have to do we have to store this first index value because if we will move the element like this now that two we will lose that so we will store this value then we will put it in last okay so let's store this value in uh we can say last value okay because it will go in the last okay how we can take this value array of zero right this is clear this is simple right this is very simple how we can store the value array of zero last value we can console it we can check it as well what is the last value now what is the last value now see here see two is coming right i put that variable name last value because we will put in last okay you can make any variable name like first value or whatever okay so now what I have to do I have to iterate this condition i have to iterate this array let's take an array okay let's take an array till when we have to go till which last position we have to go till a.length minus one same for all and in that loop what we have to do guys what we have to do we have to just take that i + 1 we have to take that i + 1 and we have to store in i okay so that thing only we need to do that thing only we need to do now what will happen array of i + 1 will store in array of i okay then it will go like this until that last condition until that it will not reach to this condition right right now what we have to do let me console it first let's console it first and see what exactly is happening and one more console I'm putting here this is before condition okay ar of I array of I okay and the same condition same condition I'm putting here okay the same condition I'm okay see this is before this is after then we can understand what exactly is happening here let's run that see here guys please watch this carefully in that first iteration what happened here before that value is 2 three right see 2 three is there right now what will happen in that condition see let me show you by doing this uh see what is happening here what is happening here 2 3 is there right 2 3 is there now in the after phase see carefully after this a of i is equal to array of i + 1 now what did that line did the problem statement among is that left rotate by one okay that is the problem so what happened here 2 three is there right now three comes to that two's position guys please see three comes to that two position so that's why it became 3 three right see in that line after line it became 33 now what will happen our I will increase and it went to 3 4 it went here right now what will happen will store on first location or we can say like second location first index see here it became 44 now for four five it became 55 55 56 6 i hope you able to understand this i hope you able to understand this okay now see this now see here in that this line I hope all clear let me remove this and this also okay now what it print see it print like 3 4 5 6 3 4 5 6 this is right right three cames three came here right see three was at once like in that previous uh array three on that zero of one index but here three came on the zero index four came to the one 2 3 4 but we lost see this this is showing six right now what we have to do as I already told now what we have to do just put that last value like a dot on 8 just put that our last value just put that last value now see this result that only we have to do right that only we have to do we have to 3 4 5 6 2 will come there 3 4 5 6 and at the last the two is there so it rotate the left right it rotates the array as a left okay i hope you understand this if you understand that statement if you understand that problem just do the same for right just guys please do the same for right siva whoever are watching just do same for right okay please do the same for right guys what we have to do what we have to do we have to rotate this right we have to rotate the array uh we have to suppose 2 3 4 5 6 is there right what we have to do we have to rotate like this in clockwise direction and the six six will come here right in the previous case the element is going like this means that the first element is going here but in that case write notation we are just roing like this just code for that just think and just send that code in chat please guys please do please start coding for that think that logic what I'm just giving one hint what we have to do we have to just reverse that loop right first we are taking that first value now we have to take the last value and we will set an in zero index right just code right please code I'm waiting for code uh now 9:18 is there till 9:23 okay I'm giving this 5 minutes please code for Please code guys 1 minute left guys 1 minute left please code for right project and send your code here omg have you completed um hi Subash guys just one minute left please complete it [Music] fast no one commented yet please do shiva sing let me try this is for left rotation okay this is for left rotation now I'm putting for right location are you running your code are you there the expected output sa is the element should move to the right okay okay no problem please [Music] continue okay okay no just this now what happening here first uh Shiva took that value array of length minus one this one okay and we are running one loop from minus one it will correct on each condition and then we are pushing I minus one to this yes guys it will work see six came uh six came here two went there three four yes it is correct so this is correct this is correct this is working so this is only we have to do right we have to either rotate by left it will come that question will come like rotate that co okay one second okay rotate by D okay the same problem will come by different different uh like scenarios rotate the array by D by D means here what we did we did that placement replacement only by one right only by one now in D what we have to do we will call this we will make that as a function okay we will make that as a function then we will call that function like in how much time we want right is this clear is this clear guys simple right you all are here you can understand that little things okay so that question is clear right that question is clear now let me move to that next question which is array leader this is interesting question guys the array leader is interesting question please focus on that okay please focus on that so array leader is there as the name suggests leader right as the name suggests leader means the element the element should be greater right it should be greater in terms of in that array right so I have this array suppose 2 4 691 I have this array 2 4 691 now that leader will be greater right now you will say just take that maximum now then that will leader no it will not work like that suppose I have this array right so our last element will be always a leader now what is the question here what is the concept here array leader will be that element from that element any element should be in lower from that element suppose let Let me explain suppose six is there right six is there in right of six which element nine is there so six is not a leader six is not a leader why because if any element is there from that element right all rights are element should be lesser from that element if that condition is like satisfying then only that element is leader now C9 9 is legal right 9 is legal because in right side there is only one so 9 is greater than from one right 9 is greater than one so that's why in right there is only one element one right let me take one more array suppose suppose I have 2 9 3 11 and one okay i have this array and this is 12 so what will happen now no s no no no no this is not like sorting just just focus this first this is not sorting this will not work like this difference is the we first thing we no need to like we don't have that change the order of the element okay what we have to do we have to suppose here one is there in sorting if I will sort this it will come like 1 3 9 11 and 12 but in error leader case from that element all right element please focus that line all our right element should be lesser from that element if it is leader now in array one last index element will always be leader because in the right side there is no element so this is this will become automatically leader suppose 11 is there in 11 side right side there is one and 11 will become a second leader in array we can like there can be multiple ledger as well multiple ledger as well okay now three n like three is there from three 11 is bigger so it will not become a leader right it will not become a leader suppose 9 is there in the right side of 9 three is there okay means It is satisfying one condition then it will check to 11 as well please focus it it will check to 11 as well it will check to one as well but we don't need to check from one because we will iterate till length minus 2 because this is already a leader okay I hope this clear so now it went to next condition 12 now 12 is bigger than 9 12 is bigger than 3 12 is bigger than 11 12 is bigger than 1 as well so our leaders from this array are 1a 12 please understand that leaders are 1a 12 not after the sorting so this is the difference in sorting the leaders will be 12 right but here from that element till last till right's position last okay that element should be all element should be like lesser than from that element then only that element will become a greater or we can say leader array leader okay I hope you understand let me code for that let me show you like how we can put the logic for that Okay so first thing what we have to do first thing what we have to do we have to first initialize we have to first mark or we can say mark as that last element as leader by default last element as a leader okay last element as a leader because that in the right there is no element so from which element we can compute this from nothing right so that's why we mark this as a leader now our loop will start we will start our loop so what we have to do we have to iterate this then our loop will come on the 11 our loop will come on 11 number now it came on 11 now we have to check from length minus 2 we'll check it will again move to three okay for now 11 is 11 is also a leader guys 11 is also a leader for this case for this case 11 also come sorry 11 also come because in the right of 11 there is no bigger element so we will set this leader we will set this leader as 11 for now because because because we have to compare from right see if we are comparing from right right then if we are setting the bigger element like if we are updating that bigger element and then if we will compare any number then we can easily tell that that number is bigger or not right I hope you are understanding this please focus on this please focus let me show you again let me show you again now I'm just making one array 2 1 3 Right and four now four will become automatically a leader and we will store this in like max for now max is four okay max is four then what we will do we will switch that array three like that I index will come here then we will compare three is bigger than four it is not right it is not means three is not a leader leader make one leader as an array because in array there can be multiple leaders in array please repeat with me in array there can be multiples leader okay so what will happen we will compare this 3x4 so that's why this is not satisfying means three is not a leader then we will shift it like here and we will not update our max as well because see here because because max element will only update when it found that bigger number from that max means if we will got five here then only we will update that max i hope this understand I hope this thing understand now we will check one okay one is there 1 is greater than four no okay mean this also fails suppose 12 is there suppose 12 is there now we will check now we will check now we will check is 12 is greater than 4 or we can say first we need to check 12 is greater than 1 because we need to check with each element in one case in one case first we need to check with this then we'll go by this okay I hope this clear let's code for that guys let's code for that then you all can get the better idea okay just open your compiler as well with me okay just like okay let's come here Okay please open your compiler with me okay now we have one array here now what do we have to do we have one array here right you I hope you all understand this problem first what we have to do first what we have to do we have to directly set last element as array sorry as a leader then we will compare the thing okay then we can tell these are the leader in that array okay these are the elements which are leaders in array okay now let me just show you the code one second okay now I suppose we have one array here and uh it is 12A 3A 5A 7A 9 okay now just store max element as a of a dot length length minus one okay just store this max element and create one leader array as well and put that push that value in that leader okay just push that value in that leaders now if we will console this now our first leader is one see our first leader is one now what we have to do right now what we have to do let me first guys I like civa have you understand that problem if not then I will explain again okay let's try SA just try for code for that please try to code for that i am also coding okay now what we have to do i have to just start that loop now please focus on this please focus on this as well we have to start that loop from here okay from here because our last element is already an array okay our last element is already an array okay now I should be less than zero right i should be uh okay zero and I minus minus now this will come start from here oh sorry okay it will start from here and what we have to check in it what we have to check in it if a of i is greater than our max element if a of i is greater than our max element then we will mark our max element as a of i okay and if we got this and if we got this then we will push we will push that we will push that max element in our leader i hope this can be little bit confusing that like you can think this is sorting but this is not sorting okay this is not sorting what we are doing first please understand first we are just making that last element as an array leader okay then we are making this as a max element as well and a leader as well okay now we will compare this by all other numbers see if nine is there right one is bigger than 9 okay one is bigger than nine then we will set nine as a leader or because in array multiple elements can be a leader then we are setting nine as a leader so just assume this from this element all the right element are will be like should be lesser right because because we nine is there right see 9 is there if we are setting this as a max just we are comparing it right from our max our original max then only we are setting right so we no need to check in each case we have to just compare that element from our max i hope this understand I hope this things is understand now I have to just console or first if I will reverse this then you can get the expected output if I will console it let me show you once first uh 1 comma 9 yeah 1 comma 9 okay just put this as well see guys this is coming see 1a 9 12 is coming now for uh making the same order just reverse it that way now it will come 12 91 see 12 91 so these are our array leaders these are our area leaders let me explain the code once let me explain the code once okay yes thank you for that okay now what we are doing here we are making one leader as an empty array we will store first last index in that directly because last element will always be a leader because there there is a reason in that in that from that last element there is nothing element which is uh located from that right from this element that's why that's why it become automatically a leader then we will starting that loop from here okay we'll starting that loop from here And we will compare this that this element is bigger than this if it is if it is then we will store our max element by this element what we are doing here see we are just storing max element because we assume that our last element is maximum then we are just comparing here a of i if bigger than max element means that is a leader as well because if this element suppose this element is bigger means all our right element is lesser than it right means this is this is leader as well and this is maximum for now till now we not iterate till last right for now this is maximum then we will compare from this if it is maximum we will update at max element that only we are doing I hope you all are get that point and we are just pushing it leaders okay I hope you all have cleared that thing i hope you all get that my point okay so let please run that code once i'm just giving you 2 minutes just see and compare your code and complete it okay let me zoom out see thank you Ankit for that if you understand once you have like you will completed dinner just try to code that okay just try to code that logic because we have to set in our mind so that only will happen if you hands on it by doing it okay okay now our last will duplication remove no ma no in JS whenever we post the element now that push element will uh put that code in the last okay push is store in the last for that storing in first we have to use unsift or getting only 91 one s just uh put in the for loop condition just put equal to as well I greater than equal to zero then your code will work we can unsift as well we can use unsift as well here unsift as okay thank you we no need to reverse that we can use here unsift as well see it is coming correctly now because unsift will uh all JavaScript folks know unsipped will store the element from the starting and the push will set the element at last okay i hope this thing clear i hope this thing clear okay okay let's move ahead guys let's move ahead now we are doing our last program okay for today which is duplicacy remove in array now one method we can do the duplicacy we can let me send this code all have already solved this so no need to send this code okay I'm just clearing it so suppose we are doing the duplication remove suppose anit your code is running or not for that anit Okay once okay okay very very good so in array if I want to remove duplicacy how I can first way simple way very very simple way what I can do I can use the set operator I can use a set operator okay now if anyone know different approach please comment in Java among how we can uh like remove the duplicacy in Java how we can remove the duplicacy See guys this automatically remove all the duplicate elements this is very like naive appro simple approach very simple approach because in set this introduced in ES6 after I think after ES6 so we cannot store duplicant element in set we can use that set for that if your interviewer will ask like uh like uh make a array which should not contain any duplicate value just you said there just you set Okay siva singing sending that another approach sa send another approach let me try this one okay new array is making here and let is the console log no no no this is same only is there anybody know different approach from this how we can remove duplicacy how we can remove duplicacy in JavaScript or in Java anyone can comment using filter and index yes just send the code here how we can do Okay so I'm waiting till 9:55 no not 95 9:54 then we'll end this live stream for today because we solved this question guys please submit this question on lead code as well okay the same questions are in lead code okay leader duplication okay let me search it how we can we can iterate an array and then we can store in set so set will work the same in Java as well right like here in our JS as well set cannot contain duplicate values in Java as well it will work the same okay research how can you java a straightforward approach to remove place from an array is using a set data structure okay using a set I think you are getting this unique element this and map as well we can do stream API something is there okay means we can remove that's it we want right SA have you completed your code sa please send if done okay he sent this code let me copy it and try now yes it is working so what you did here we just filtering it on the basis of value index and self self dot index of it is containing array each element it will work and value and yes this is the combination for index of and filter yes it is working okay so but do like we can remove the duplication by any number of methods but yeah these are the simples one so guys that's it for that live okay we are making that live short today because there is some reason okay so for now that's it just practice these questions guys these are important question just try that code with D approach okay just do this code by D approach left rotate by one okay try this this is interesting okay this is interesting so that's it for today session we'll start that new session from as we know at Saturday Sunday we off that stream okay we are on weekend vibe okay so that's it guys for that if you not subscribe yet that channel radiant sorry confidence yes please subscribe it because we are maintaining here one playlist okay we are maintaining here one playlist and till that eight videos are uploaded and we will about the last DP at all will learn everything here okay guys so please subscribe this channel if you not share it with your friend as well so they can also learn live DSA okay so that's it guys that's it for today okay thank you for joining guys bye-bye take care good night