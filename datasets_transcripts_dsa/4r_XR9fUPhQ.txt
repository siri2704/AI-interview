in today's video we are going to go over tree data structure and by three I mean a general trees that are binary trees and binary search trees which we'll cover in the future tutorials as usual we'll go or some theory first then we will do implementation of general tree in Python and in the end we will have an exercise and here is the list of topics just in case if you want to skip ahead let's get started let's say you are building an e-commerce website for electronic items here the item categories might look something like this where electronics items can have laptop cellphone and television has a category cell phone might have iPhone Google picture or vivo as subcategories you might have seen this kind of product hierarchy on amazon.com or EB or any other website which sells electronic items now to represent this in terms of a data structure until now we have studied linked lists erased a queue etcetera data structures pause for a moment and think if you can use any of those data structures to represent this information you will find that you cannot use stack use linked lists etc to represent this product hierarchy because those are linear data structure in sequence you store list of items here the information that we want to represent is in hierarchical form it is like a tree so just visualize that you have inverted a tree where the electronics is the root of the tree and then laptop cell phone televisions are the branches of the tree in the end you have all these entities which doesn't have any further children and those are called leaves you know on the tree we have branches root and leaves so this is similar hence we use this data structure called tree whenever we want to represent hierarchical information this could be an organization chart for a company or a folder structure on your pewter where c-drive will have ABC folders then a folder will have further subfolders B folder will similarly have few subfolders all of these use cases qualify for the use of tree data structure just to go over some terms each of these entities in the tree are called nodes and the top node is called the root node the intermediate nodes are just called nodes and the entities which doesn't have any children or subcategories they are called leaf nodes in general here in this diagram laptop category would have macbook Microsoft Surface and thing pair as children and laptop for these three is called parent also for iPhone cell phone and electronics will be called ancestors and for electronics cell phone and iPhone will be called descendants another term that we use in tree data structure is levels so here electronics is as level 0 then level 1 level 2 you can have n number of levels and the tree that we are discussing here is called general tree there is a binary tree where each of the parent will have at max two children but we are going to cover binary tree in future tutorials so for this tutorial we are going to just focus on general tree now let's build this tree in Python I have opened pycharm here and created this class called tree node class to represent the tree this class has data as an element which will represent whatever data you want to represent it could be string number complex object it will also have children so this children will be a less each element in this list will be an instance of tree node class because remember tree is a recursive data structure where when you have a node the child node is another tree in itself hence each of these elements will be an instance of tree class you also have parent property which will store the parent of this particular node so this tree node is an individual node within the tree all right now let's add a method called add child so here what we are doing is we are adding a child node into our tree and it is very simple actually you can just do self lured children dot a pen now I'm keeping my data structure simple and not checking for duplicate etc if you want your elements to be unique then you can make that check now if you if you don't know how to create class and general Python programming I have a separate python tutorial list so you can go through that at this point I am just assuming you know about classes in Python now here we need to do one more thing which is whenever you are adding a child see you are adding a child to self object okay and that self will become a parent of this child hence child dot parent should be self what this means is child is an instance of tree node class it will have a parent property and that parent property I want to set it as itself okay so let me quickly demo this here I'm creating a main method and in main method what I'm going to do is write another matter called build product tree so in this function I will build the product tree for electronic items so here the first node the root node that we have is called electronic so root node will be tree node okay and it's called electronics so then this electronics will be stored in self dot data of that particular root node then for electronics laptop is one of the categories so what I will do is I will create a an object called laptop ok and store laptop as a string and then for laptop or let me just do this let me just add root dot add child laptop ok so I created electronics as a parent and then I am adding root as a child for laptop ok and let's run this code and let's see how it looks so I'm gonna set a breakpoint here right click debug and then hit next so this will take you to the next instruction okay so you will see that here my root has an empty children and the data is electronics and when I add child in my root what's going to happen so let's see ok I should have a return the root back so let me return the root back so return the root and that root will be stored here and I'm just doing pass just so that I can break here okay so again debug it and click next next next now at this point the root will have one child which is laptop so here you can see the children has one element and that element is also of class is an instance of class tree node and that one is laptop and the children of laptop is of course empty right now now what I'm going to do is just to save some time I'm going I'm going to copy/paste some code and all I'm doing here is see I create a laptop first and in the laptop I added Mac surface and things where as a child and each of the child is an instance of tree nodes that's why I'm just creating a tree node object here and appending that as a child similarly I am creating cell phone tree node object here then adding iPhone Google pixel and vivo a child of cell phone meaning these are the subcategories in cell phone category similarly Samsung and LG are the TVs which are subcategories of TV category once these three tree nodes are done we will add it to a root category so the electronics category will have laptop cell phone and TV as a subcategory okay so this will complete our tree and let's debug it to see how this looks so again I'm setting a breakpoint here doing right click debug just to see how my tree looks like all right so I am at this point here and my root should have all the children so if I look at root here it has three children you can see that tree node objects and the first one is laptop laptop has further children and those children's are you see Mac here then surface etc and for laptop the parent is electronics okay so if you analyze this variable in your debug panel you will realize that your tree is properly set now now that my tree is built I want to print it in a nice hierarchical format and for that I am going to add a print tree function in my tree node class okay so printer need tree function is here and in this function what we are doing is we are going through all the children one by one and we are printing data element in those children now since tree is a recursive data structure if you know about recursion it's like you have a child node and on child node you can again call the same printer e function and it will do the same thing so let us go over it real quick so here first thing I want to do is I want to print data part first okay so I first print data which is let's say if I am calling printer e on this particular tree node then it will print electronics now the second step is I want to go through all the children and print those children okay so I can say for child in cell floor children okay what do you want to do okay so one thing you can do is you can say okay child dot data print child or data all right and let's see how this function behaves now so here I can say a root dot printer E so on route I am calling printer e function and my route is electronics Electronics has three child laptop cell phone and Samsung and I am printing them here so when you right-click and run it see it printed them so electronics laptop cell phone and TV so it printed them okay but there are a couple of issues first of all I don't see a nice hierarchy they are at the same level okay so by looking at the output I really don't know that electronics is a parent of our other three subcategories another issue is I don't see the children of laptop cell phone and TV being printed so how do you print them so just think about it so again think about recursion here instead of doing print child or data what if I do this since child is also an object of tree nor class and tree nor class has a printer a method can I do this child dot print tree so I'm doing child dot printer II just think about it it will recursively call this function and print the subtrees now one issue that will happen is when you are at leaf node it will not have self dot children cellular children will be an empty array so you can put an if Jax say that if lanoff self dot children is greater than zero now this condition is same as saying this when you do if this it will check for that condition ok all right so this looks good now let's try to run this and see what happens all right great see I am seeing now all sub categories entire tree being printed the issue that still exists is I don't see the nice indentation which can tell me who is parented who is child to print the indentation we need to do a couple of things ok so let's think about it so here when I am printing my self dot data based on which level I am at in the tree I need to append some spaces in front of me I want to print a tree which looks something like this where there is electronics the laptop is one category then Mac and so on so this is my ultimate goal and what I am getting right now if I print this again is just a flat list ok so how do I get this kind of nice hierarchical tree being printed based on a level I need to append some prefixes here so here let me go or what is level so if my node is at level zero then I don't want to have any prefix but if my node is at level 1 which is laptop cell phone in television you will notice that four laptops are phone television there are you know like here maybe two spaces here two spaces and if you are at level two maybe here there are four spaces you know so I want to append all those spaces in front of my node so first thing we need to do of course is we need to create a gate level function which will get me the level of my node so I will call it gate level here and what this gate level function is doing is it is just telling you if let's say you are a ThinkPad node it will tell you that your level is two so just see ThinkPad here is at level two laptop is a level one so it will just tell you that now how can you tell you that so one idea is you can count number of parents so for thing pair laptop and electronics these are the ancestors or parents that you have so if you have if you can just simply count number of your ancestors then that will get your level so for ThinkPad laptop an electronic - so that's your level - for laptop there is only one ancestor which is electronics hence the Labour one and for electronics there is no pair and hence the level zero so all I need to do is count my ancestors and how do I count that well you have parent property here so we can just we can do this we can initialize a level variable to zero and we can say okay might be is self dot parent and while P P is equal to P our parent so you keep on going through your parents and you increase your level and this will be your rebel so return that lever so in this love I loop what we did is we assign P to P dot pattern so just going by this example first we same for MacBook my P is P dot parent so your P will come here then P comes here then this guy doesn't have any parent so it will stop and in that loop we can increase this level counter Y so let's try this out so I'm going to probably instead of printing the tree I can print root level so rude dot get level okay let's print that and see what happens so root level is 0 that's what you expected okay so that part works fine how about I print the level of my let's say TV okay so here I can say print TV dot get level and when I run it I get one so looks like this level is working okay alright so now how do we use level function or to do a pretty printing of our tree in print free function all we need is in front of self dot data we need to print some prefix okay and that prefix will be number of spaces based on the level so well based on the level meaning I can get this self dot level okay and for each level let's say I give two spaces for example now how do you get give two spaces so if you do this spaces okay so if you do this what's gonna happen is if your level is too it will initialize those two spaces like but I mean I'm not using Excel to space but for each space I am doing three okay let me remove it just to avoid any confusion okay so if my level is two two spaces level is one one space pretty simple okay let's just print this space is first so I am doing printing spaces and I forgot to uncomment this core of course so see nice so now at least I am seeing one space based on my category so now this looks like a hierarchical tree just to make visualization more better maybe we can add more space okay so here for each level I was adding one space but what if for each level I add three space so when you run this three see you have more spacing okay if you add let's say more space here it's gonna just increase the indentation you see so that's the goal here now we don't want just pieces we want it to look a little better so we can just create this prefix variable and we can say that will be space is plus you know use some character to represent hierarchy and that will do if self dot parent because for the root node I don't want to do anything okay so if the node is root node then this is a ternary operator in Python so I'm having my prefix here okay and when I run the code my tree is printed so nicely excellent and good job alright that's all I had for this video as usual I have an interesting exercise for you I'm going to provide a link of this exercise in the video description so don't forget to check it out here I have given the hierarchy of company's management and you want to build a tree using the same class that we use in this tutorial and I'm gonna provide that class link in the video description as well so you can just extend that class and build this tree now this tree is little different because this tree has the name of the person and the designation okay so nillable here is CEO chin - CTO and so on now your goal as part of this exercise would be to write this kind of code which can take what do you want to print like what kind of tree you want to print if you say I want to print only names then it should print this this middle tree if you say I want to print only designation it should print this where it's just organization chart for designation if you say both it will print name as well as the designation okay now I have a solution link here but I expect that you work on this on your own first if you directly look at solution then I'm gonna inject coronavirus in your computer and your computer will get a high fever so if you want to prevent that please work on it on your own first before clicking on this sacred link the second exercise I have is let's say you have this location hierarchy for different countries States cities and so on for that you need to build again a tree using the tree class but in this tree class you are going to extend print tree method to take level as an input so when you when you say only print my tree for level one it will print this but if you say print mile ever print my tree for level two it will print two levels and three will print all three levels all right so work on this exercise I'm going to build few more tutorials on binary tree binary search tree and all of that this was just about general trees alright thank you very much for watching if if you liked this tutorial please give it a thumbs up or leave a command so that I know if I need to change anything or not alright thank you