[Music] hi everyone welcome to another PSC video today we are going to discuss a problem named DP Nation robbing houses one okay so let's move to description part it is saying robbery is pretty common in DP nation and a robber is planning to rob houses along a street each house has a certain amount of gold stached in it okay so and the only con stopping you from robbing each of them is that adjacent houses have a very smart security system connected and it will automatically allert the police if two addition houses were robbed on the same night okay so given uh and then given a list of negative non- negative anes representing the amount of money of each house okay and we need to determine the maximum amount of money the robber can rob tonight without getting caught okay so uh let's move to the G first it is saying each house have certain amount of gold stached and you want to Rob them all and the only condition that is uh stopping you is you can't Z two addent houses otherwise you will be caught okay that is uh let's take an array as a street to understand it better okay and all of its indexes are nothing but houses or house numbers okay for example uh if this array if this array a uh is this one then all of its indexes are nothing but house numbers okay and the items that are going to put here are going to be the money in these houses okay then uh with the with the condition given uh if what houses I can Rob and what I can't okay so if I Rob house number zero then I can't Rob one if I Rob one I can't Rob two if I Rob two I can't Rob three and so on okay uh it just that I can't Dr to Adent houses okay so in this problem it is asking us that uh while doing robbery in the given way while doing robbery in the given way we need to determine the maximum amount of money the robbers can res that night okay so resorbing is one thing but the aim is to maximize the amount of resed money okay so now as we know as we only know that we can't Rob two addent houses but we don't know how much gold is there in each houses until we reach there like in the array I know this is House 1 2 3 and four I if I Dr Z I can't drop one if I drop one I can't drop two okay but I don't know uh what is the money kept there okay what is the money kept there until I reach there so what CH do I have and why it matters so it matters because we are asked to maximize the it matters because we are we are asked to maximize the zbed money okay so now it becomes a matter of choice choice like let's take an example okay so in the sample input let's take a Bigg example okay uh we have four houses and the house have money 100 one one and 100 okay so let's add it here uh let's say n is one okay sorry n is four and uh the array or the street we are taking have four houses 0 1 2 and three and the money in the respective houses is 100 1 1 and 100 okay so let's say I am at house number three okay I'm here so the only choice and two options I have is either I Rob that house or don't Rob that house okay so what my profit will become if I drop this uh this house number three okay if I drop this house number three my profit will become 100 because the money kept there is 100 and where will I move because I can't move to 100 it it is sorry I can't move to house number two because it is the adjacent house so now I will move to house number one okay or for the another um for the other choice that we have is we don't Rob house number three so my profit by reaching three will become zero and where will I move because I am not robbing this so I can move here yes or no correct so I'll move to house number two so basically this choices can be represented in a choice TR diagram okay which is if I am at a house number three now I have two choices I can drop or don't drop so if I Rob house number three where will I go I will go to 3 - 2 not 3 - 1 because 3 - one will give me just my Adent neighbor okay and that I don't want to go I will be caught otherwise okay so that's why 3- 2 1 if I was robing and if I'm not robbing then where will I move I'll move to 3 - one which is my addition NE two okay so similarly if I'm at house number one if I Dr I will move to house number minus one and if I don't Dr I will move to house number zero similarly all these choices are made okay you can pause the video and uh see very patiently how these things uh are done okay why only minus 2 and minus one okay because we don't want the addent neighbor that's why if we are robbing the house we are putting minus two and uh if we are not robbing then we can just move to our uh addition neighbor so that's our minus one okay so the ultimate Choice diagram will become like this it's a cleaner version okay so now the question becomes how to maximize the profit and solution to that to that is to get the minimum sorry maximum we should calculate profit for both the choices right or not like here if we go here we made two choices here or here okay so how would to we want to maximize it how would we know uh if we what we got is maximum or not unless we we know both the profits right so uh and we know both about like uh uh if we are some add this thing okay path one and this is path number two so if we have profits from both the parts then only can we move so we can find maximum of part one comma maximum of part two yes or not that will our answer so that's why we have taken we should calculate profit for both the choices and return the maximum among them okay that's how we are ret return the maximum because that's our motive R return the maximum profit so now uh for that uh what we can write is if I at house number three I have two choices what is my first choice First Choice is this part only first part what I'm doing take money from house number three which is 100 plus profit from next robbed house okay First Choice second choice is this second choice is this uh what is that not robbing house number three okay not robbing house number three and uh uh so what will be my option then profit from my neighbor okay so that is what I'm doing here so now if I have profits from both my options option number one here and option number two here so what I'm doing I'm rning the the maximum okay I'm the maximum so that's what I'm doing for all the the choices I mean all the houses that I reach okay for house number one also I'm doing the same thing okay 1001 and this one is nothing but the money kept at at the house number okay respective house numbers like at house number two money cap is one at house number one money cap is one at house number three money cap is 100 okay so and so on so now we can see that as all the negative indexes does not EX just see here on this street the index or house number starts from zero only okay any negative house number is not there so negative indexes does not exist so profit from these should be returned as zero only yes or no though we have made a formula to reach or to avoid just my addent neighbor so that I can't be caught but according to that formula if I reach at some uh unknown house number means which does not exist then I should just uh not move there or in simply terms we can just return zero from there so that way our base case means the minimum valid input minimum valid input what is our input input is our house number okay so minimum valid house number is zero only okay so our base case will become if index or house number or house number is less than zero will will return zero only okay that's the basic criteria for the recursion okay if you're going to write the recursion code that way this will our and this will become our base case okay now that way wherever there is a negative value or negative House Index okay will return return 0 0 0 z z z and Z here now now my first valid input for house number zero what I am doing house number zero this is the money at house number zero which is 100 and uh the neighbor after uh after I visit house number Z will become house minus which does not exist so that's why profit from there is z so 100 plus 0 will become 100 only and if I don't drop house number Z then I'll move to house number minus one which is also inid house so the profit from there is also zero and I need to return the Max of this so what is Max 100 so that's why wherever there is house number zero it is going to return the money at house number zero which is 100 okay here also 100 will be return and here also 100 will be return okay so similarly same formula will be applied for other houses also if I house number one if I'm robbing it then my profit will become money at 100 plus profit from the house minus one comma if I don't drop house number one then profit from house number zero which is 100 so maximum is 100 so that's why I'm rning 100 here same thing here for house number one we did now for house number two we are doing the same thing so out of this profit 101 uh comma 100 what was maximum 101 so we return 101 now when I'm at house number three the money at house number three is 100 okay the money at house number three is 100 and uh the profit I have made from the uh not adjacent house that I have robbed is 100 so 100 plus 100 and if I am not robbing house number three then the profit I have made from robbing the addent hous is two uh house number two is 1001 so now which is maximum 100 plus 100 becomes 200 so 200 is maximum and this is answer let's check it from the question so for this test case what was the output output was 200 see we have got the right answer so now we'll move to the Pudo code of this okay here we have already Dy than this because we have already taken one of the sample test cases this a sample test case okay so I will just directly move to the sudo code sudo code in because we are going because though there are four houses but but in terms of index it start from zero so that's why I'm taking M = to n minus one so that we can for n = to 4 we can go to 0 1 2 and 3 only okay that's why I'm taking m = nus 1 now the function prototype will become res one sorry res then array I mean the street we are taking and the number of houses we have okay so the base case first if m is less than Z return zero which we have already written I mean I have already shown you why this is the case Okay because any house number which is less than zero is invalid so that's why return zero okay now there the cursive part what were we doing we are calculating profit from our both the options sorry from both the options and what was my option number one this is my option number one option number one and this is my option number two okay so for these both choices I'm calc The Profit profit one and this is my profit two after that I am finding the max of that profit and returning that okay so that is my final answer that's how we are getting things okay I already shown you on the in the in the Tre diagram how we are getting this so it is advised that you better pause the video and dve on this code on your another sample test case okay and now about time complexity it will become order of to power n why as for each index or house we have two choices okay for each house we have two choices either to drop or don't drop okay that's why for n houses my the total number of choices will become to power n and which is our time complexity okay space complexity will be order one only because we are not using any extra space so now about the optimization we can optimize this time complexity by using the memorization why memorization because I have shown you now uh see here in this uh Choice diagram what was happening in this Choice diagram what was happening these choices are repeating yes or no - one is here- one is here- oneus one-2 is here here here- one is also here zero is here so every houses are repeating okay so that's why our time was increasing significantly if we have a way to not repeat or recalculate the profit from those uh choices that we have already ma made okay for the choices that we have already made then we can use a memorization technique and what memorization take uh says we just it says we should store the result if you calculated it once so that you don't need to calculate it again okay it says don't calculate again okay so that's why I have taken an array called DP of same size and initially put minus one there okay so M = to nus1 I'm initializing this then the same function our base case this our base case Okay then if DP I mean if the result that I'm going to calculate is already available there then return that and don't calculate otherwise calculate it okay and how to calculate by calculating profit from both the choices and return the maximum among them okay that is the only solution so this way our time complexity will become order of n because we are not recalculating the profits yes or no we are not recalculating the profits okay so for therefore for n houses we are calculating profits for end times only okay for n times only that's why time complexity will become big go of n now time complexity is order n space complexity is order n because an extra array of size n was used to store the results okay that's why space complexity became order of n but see time complexity is comparatively to compare compared to to^ n it is significantly decreased yes or no yeah so that's our final solution I hope you people got to understand everything which I have just taught about so wish your best and we'll next meet you in next video thank [Music] you