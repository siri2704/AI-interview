 Hello friends, welcome to Gate Smashers  In this video we are going to discuss about asymptotic notations  And this is one of the most important topics of the algorithm  Because we discuss asymptotic notations in the syllabus  So guys in this video we are going to discuss
 all the important points from the basics  Which will be very beneficial for your competitive exams or for your college or university level exams  So guys like the video quickly, subscribe
 the channel if you haven't done it yet  And please press the bell button so
that you get all the latest notifications  So let's start  What are asymptotic notations?  Asymptotic notation is the mathematical
 way of representing the time complexity  We have already seen that we talk about prior analysis  And in prior analysis means we do its
analysis without execution of the algorithm  Now if we want to calculate time without execution  Then what we do is, how many times a statement is executed  That is called iteration, frequency  And we can say the number of times function is calling itself  So what we are doing here is, to represent the number of times  I need some notations so that I can properly represent  That this algorithm has this much time complexity  The other algorithm has this much time complexity  So that we can compare both of them
and find out the better algorithm  So here in representation,
first of all we use big O notation  Then big omega notation  Then we have theta notation  Apart from this, we have fourth, little o and little omega  So the main three are big O, big omega and theta notation  So first of all we start with big O notation  Because maximum time notations will be given in terms of big O  So what is big O notation here?  We have a graph, basically here is n, n is what? Input values  And what we have in y axis? Time  Now how to understand this?  We have a function f(n)  Now what is this function f(n)?  If I have any problem, any problem I have to solve  Let's say my time is or my function is f(n)  Now if I have to write fn in terms of let's say order of g(n)  What does this mean? That g(n) will always be greater than c.g(n) like this  Means f(n) is given to us  And if we have to represent this in terms of big O  So here g(n) should always be greater than equal to c.g(n)  And here c is a constant term which should always be greater than 0  And the value of n, this input value we are taking  This n should be greater than equal to k  And you can say k should be greater than equal to what?  It should be greater than equal to 0  We are talking about this k  So here f(n) is equal to order of g(n) means  f(n) is always less than equal to c.g(n)  So here if we discuss this with examples then you will be more clear  Let's say I have any problem, any algorithm  To solve it, the total time I took was 2n^2 plus n  We took it simple here, let's say f(n) is equal to 2n^2 plus n  Now I have to represent f(n) in terms of order  Means f(n) is equal to order of what?  Now here I have to put the filling the blank  So filling the blank means f(n) is equal to 2n^2 plus n  And it should always be what?  Less than equal to c.g(n)  And g(n) value, that n value you have to choose  Now obviously this function should be greater to make it greater means that equal to upper bound  Bigger notation represents upper bound  That is also called at most  Means in doing any work, maximum time you will take  That is a big O notation  Now here upper bound means which
 is the bigger term from 2n^2 plus n  Now to find the bigger term obviously you have to do  Here you check as n^2, what is n^2? Quadratic function  And here if we talk n that is a linear equation  Now which will be dominating in quadratic and linear?  Obviously n^2 will be dominating  How? You put the value of n, 
let's say we put the value of n as 100  So if we put the value of n as 100, then it is 100  But how much will be n^2? 10,000  If you put the value of n as 1 crore, obviously n is 1 crore  And what is n^2? 1 crore power 2  So the value of n^2 is much bigger than n  If you want to represent it also, 
we represent it in this way  So n is what? Linear time  What about n^2? n^2 will obviously grow more than n  But not for the small values  Because if you put the value of n as 1 or 0  Then you are not getting much difference here  But for larger values, which is dominating? n^2  So here if I want to write upper bound  Means if I want to write a big value, then can I write n^2?  Can write  Can write n^3? Can write  Can write n4? n5? 2 power n? n power n?  All these are bigger than this term  But remember whenever we talk about upper bound  Always remember, least upper bound  Means we have to choose only the closest value  Upper value but very closest  So what is the closest here? n^2  So this point is representing here  Because 2n^2 plus n should always be less than equal to c.gn^2  Now what value do you want to take here?  You have to choose c value here  To take c value, obviously if you take c value as 2  If you take c value as 2, then it will become 2n^2  Means 2n^2 plus n should be less than equal to 2.n^2  But obviously this will not happen because here plus n is also there  So what do you take c value?  We take c value as 3  So if I take c value as 3  So if you solve this, then what will happen?  n is less than equal to 2n^2  If I divide both sides with n, then it will be 1 less than n  Which you can write n should be greater than equal to 1  Means for all the values of n  For all the values of inputs n greater than equal to 1  This condition will always hold  And the c value should be 3  So here I have c value 3  And for n greater than equal to 1  This condition will always hold  Means 2n^2 plus n can be written as order of n^2  But what should be the c value? 3  And for all the n value greater than equal to 1  This condition will hold  So this way we represent big O notation  So if my f(n) is increasing this way  So if I want to write big O of gn  So gn means you have to write upper bound  What does this representation mean?  That before this k value  It can be that this value is getting smaller  It is getting bigger  It is fluctuation  But after k value  Like if we put n value here  Now put n value 1  Put 2, put 3, put 4  So you check this value will always increase  You can check let's say  I put n value 5  So what will come here?  2 into 5 square plus 5  Is always less than equal to 3.5 square  So see this is 25 into 2, 50  That is 55  Less than equal to 25 into 3, 75  So you can also prove  That yes for all the values  From n is equal to 1  Whatever value you put for c3  It will always hold the condition of order of n^2  So this is how we represent the big O notation  Then we talk about big omega  What is the meaning of big omega here?  We talk about lower bound here  That is at least  Means how much time will it take to do any work?  So if we talk here  How to represent it?  So here the meaning of representation is  That F(n) is equal to  This is how we are representing  F(n) is equal to  Omega of g(n)  If I want to write this  Then what does it mean?  F(n) should always be greater than equal to c.g(n)  So see if F(n) is increasing in this way  Then c.g(n) should always be  Less than equal to the value of F(n)  So here if we have the same function  Let's say my F(n) is 2n square plus n  And if I want to represent in terms of g(n)  Now what should be the value of g(n)?  G(n) value should be less than this  Less than this means  You can take n square  You can take n alone  You can take log n  Log of log n  All these values are smaller than this term  But whenever we talk about lower bound  Always remember  We have to take the greatest lower bound  Means closest  Like smaller than 5  There is 4, 3, 2  But I don't want to take 1 or 0  I want to be closest to 5  The smallest 4  So I have to take the greatest lower bound  Like we are taking the upper bound  Least  So here we have the greatest lower bound  So here if I talk  You can take n square  You can write n alone  You can also take log n  But you have to write the nearest value  The nearest value is again n square only  Now if you are confused  How will n square come?  If you take c value as 3  So now we have proved that this term will increase  But remember  You have to carefully choose the value of c  Here you choose the value of c  2  Now if I choose the value of c  See 2n square plus n will be greater than equal to  2.n square  So see you can clearly see here  2n square  2n square is equal  And here plus n is also there  So this term will always be greater than this term  And if you want to prove it  Here you take n greater than equal to 2n square  So from 2n square to 2n square is minus  Means for all values of n greater than equal to 0  What does n mean here?  This key  Means you can put any value of n  But from 0 to if you will increase  0, 1, 2, 3, 4, 5 up to n  This condition will always hold  But c value should be what?  c value should be 2 only  c value can be 1 also  It will also hold for 1  But you have to choose the closest value here  So for c value 2  This term will always be less  If you want to check  So let's again put 5 value  It will come to be 55  And it will be what? 50  So this term will always be less than this  So this is how we represent the big omega  That is at least or greatest lower bound  Third comes theta notation  Theta notation means average  We represent it like this  That fn should be greater than c1.gn  And it should be less than c2.gn  See this  If we have a function fn  The value of fn is greater than c1.gn  But should be smaller than c2.gn  We have already calculated this  Here c1.gn means  If my fn is 2n2 plus n  So what will be the value of gn here?  n2  And here also what will be the value of gn?  n2  But c1 value  What you have to do with this value?  If you want to do less than  Then you have to choose c1 value 2  And here what is c2 value?  3  So that means 2n^2 plus n is always greater than 2n^2  And it will always be less than 3n^2  So we represent this in case of theta  Which is the average case time complexity  If you want to understand this in a simple way  Let's say I have a book  Now in this book if you are searching any topic  No indexing, no hashing, nothing  So what do you have?  Best case  Best case means omega  Means as soon as you read the first page  You got your topic  But what is the meaning of worst case?  What is the meaning of worst case?  At max  So what is the meaning of at max?  That you are searching one by one  But where did you get the desired topic?  On the last page  Means you are doing a linear search  Without any sorting and all  So normally if you are doing a linear search  Then you have to search all the n pages  And what is the meaning of average case?  Neither your topic is on the first page  Nor in the last page you have to move on an average half pages  So we generally represent big O  The reason for this is  That it will tell you the maximum time  So obviously best case and average case  Are included in this automatically  So this is how we represent the big O  Big omega and theta representation  If we talk about little o  Then there is a simple difference in little o  That in less than equal to  Here equal to does not come  In case of little o  It does not come equal to, rest of the funda is same  And if we talk about little omega  Then in little omega also  If we talk here  Then this greater than we had written  Let's say Fn should be greater than equal to c.gn  This is in the big omega  In little omega Fn should always be greater than c.gn  This is the only difference between these two  Now we will see all the time complexities  Of searching sorting algorithms  You will get representation in all  In terms of big O, best case, average case and worst case  But remember this is important  This big O representation is  Much more important than the other representation Thank You.