 INTRO  Hello friends, welcome to Gate Smashers  In today's video I am going to explain
 binary tree and its variation  So look, whether you talk about algorithm or data structure  Tree data structure is used the most  And if we talk about tree data structure  Then many questions come on binary tree  And if we talk about heap tree  Or if we talk about pre-order, post-order  Or if we talk about tree traversal  In each and every topic you get the concept of tree  And if we talk about tree  Then binary tree is the most useful  So in this video you will get to know
 all the points related to binary tree  And along with that its variation  Like full binary tree, strict binary tree  Almost complete binary tree, complete binary tree  And binary search tree  So let's start, first of all if we talk about tree  So how do we make tree  You must have seen the tree structure  That we make in this way  Getting the point  So what can we call it here  The major difference between tree and graph is  That we don't have a loop inside the tree  You can say loop, you can say cycle  Loop means like we put self loop, we call it that  And cycle means like if I put this edge here like this  Then it will become a cycle in a way  So this thing is not allowed in the tree  And second if we talk about the structure here  So in structure what always happens here is root  Then what comes? Internal nodes  And then what comes? Leaf nodes  Getting the point  So this is one way, you must know that it is a basic concept  But still I will tell you once  Because we use these terms in between  So you should know  So all these leaf nodes  And we call the rest of the remaining as non-leaf  So in non-leaf you have root element  It is always 1  And if we talk about the internal  Then we can have multiple internal  This thing is not in the graph  In the graph we generally do not take root  There sometimes when we solve the shortest  Shortest single shortest path  Or if we call all pair shortest path  Then there we call source etc.  We call it destination node  But we do not use the root and nomenclature there  So see first of all we talk about the binary tree  So the story starts with your binary tree  The simple meaning of binary tree is  At most 2 children at every node  Means every node can have maximum 2 children  Or best you say at most 2 children  What is the meaning of at most?  Either 0 or 1 or 2  Getting the point? So every node  Like if we talk about root  So root has let's say 1 children  It will work  Root has let's say its one left  This is called left and this is called right  This is in our left, this is in right  So see this way  Root has only left child  Is it possible? Yes  Root has only right child  Is it possible? Yes  Only root is there  It will work  There are let's say 2 children in front of root  One in left and one in right  It will work, no problem  Now if we talk about the internal  There are let's say 1 children in the internal too  It will work  If we talk about this child  This one or this internal node  So what is ahead of this?  Let's say there is a child in the right  No problem  We are not talking about left, right level etc.  We are mainly talking about  That at most there should be 2 children  Means if you have made this thing  Let's say there is a root  And there are 3 children ahead of it  So there is no binary left  What is this now?  Turnary tree is made  Getting the point?  So this is the main condition  Now see  In that we get next  Full binary tree  Or what we call strict binary tree  Remember this nomenclature  In competitive exam  Or college university exam they ask it many times  So full binary tree  What is the meaning of this strict binary tree?  Either 0 or 2 children  Means this is binary tree  But in that another condition is put  That either 0 or 2 children  What does it mean to say?  Like see  I made here  Either 0 or 2 children  So like see  This is made  Whether it is a binary tree?  Yes  Whether it is a strict binary tree?  Or you can say whether it is a full binary tree?  Yes  What we call full?  We call it strict too  Remember this point  So whether it is a binary tree?  Yes  Whether it is a strict binary tree?  Or full binary tree?  Yes  So see what each child has?  2  Now don't say this  Because this is like  Leaf node  So obviously there will be no child ahead of the leaf  In case of non-leaf  Now see here  Let's say we made root  Let's say we made 2 children ahead of the root  And I made this ahead of it like this  So see is it a binary tree?  Yes  It is a binary tree  Why? Because either 0 or 1 or 2 children  But can I call it strict binary tree?  No  Reason?  Because it is creating problem here  There is a child in the left of this node  Not in the right  Means there is one child  So what is the condition?  Either no child or 2 children  Getting the point?  So this is the story  And this story is only about non-leaf  There is no problem in the case of leaf  Now don't say this  Many students come to mind that  If there is no child ahead of this leaf node  There is no problem  There is no condition in leaf  So obviously there will be 0 children in leaf  So the condition of 0 children is also there  That is also sitting fit  Next see  Next we have  Complete binary tree  But before that we talk about ACBT  That is almost complete binary tree  Note this guys  It is a very important concept  Because the whole concept of heap depends on ACBT  Because heap tree etc. whether you make max or min  They actually follow the concept of ACBT  Almost complete binary tree  So in almost complete binary tree  We have 2 things  What is the first thing?  The first point tells us  Whenever you are making a tree  Whenever you are making a tree  You have to fill from left to right  Means let's say you made a tree  Now this root  If I make this from the left  Make the right child first  So is this binary tree? Yes  But is this almost complete binary tree? No  Why not?  Because whenever you have to make it first  Let's say if you made a root  And want to make a child from it  First its left child will be made  Getting the point or not?  So you have to make left child first  Yes, after this let's say if more node comes  Then you can make it like this  Getting the point or not?  So first fill left  Then fill right  And when one level is full  Then you have to go to next level  Note these 2 points  Means if I make it like this  Let's say I made this  Made this  And let's say made this  So is this almost complete binary tree? Yes  Why? Because see all the levels are  First we are filling in left then in right  First in left then in right  Means it is following this thing  If I make this like this  Let's say it like this  Now is this almost complete binary tree? No  Is this binary tree? Yes  Is this full binary tree? No  It is not full binary tree also because you know  That it has only one child so it is not full  You can compare  I am not talking about full  You can check full by yourself in between  But it is not almost complete binary tree  Why it is not?  Because you have to make left first  Then right child will be made  Always remember this point  And what is the second point?  You will be clear from this example  Let's say I make it like this  See this  Is it binary tree? Yes  There is no problem in binary tree  But is this almost complete binary tree?  You will feel that first left is full then right  Then left then right then left  There is no problem  But guys this is a problem  Why is it a problem?  That you have made next level of this  Level means this is level 1, this is level 2  This is level 3, this is level 4  You went to level 4  Now level 3 is not filled  So means you have made this wrong here  This should have been made here  According to almost complete binary tree  But you went to next level  You will go to next level only  When the first level will be full  Getting the point?  So remember these 2 main points in ACBT  Then comes complete binary tree  From the name itself we can tell  Complete binary tree means no holes  What is the meaning of holes?  If we talk about internal nodes  Then internal node will always be  Fully filled  Means its maximum will be 2 children  Can't be less than 2  Except for leaf  Leaf will obviously have 0 children  But except for leaf  What will be the rest of yours?  Will have only 2 children  Getting the point or not?  This is called  Complete binary tree  Or we can also call it perfect binary tree  So this story comes to us  Complete binary tree  So see  If I make it like this here  Let's say  See this  Is it almost complete binary tree?  Yes  No problem  Binary tree is also there  Even this  If we talk about full and strict  This is also there  But is it complete?  No  Not complete  Why not?  Because you should be full of this level  Means all your  If we talk about this  Whole level should be filled by you  Level should not be partially full  Means earlier what we had here  These were holes  In a way it was a hole  Because this level  You made it next  Means made this node next  But the next of the other node should also be  It should be full  Means internal node  At each level  The internal node must be full  It should have 2 children  Yes, there is no problem in leaf node  So it is full  This is called complete binary tree  So this is your whole story  Binary tree and variations related  And last if we talk about binary search tree  So binary search tree guys  That is also a special case in binary tree  And binary search tree  Which is also very popular  From the point of view of competitive exams  And on that  How we make a full fledged video  How we create and traverse  Each and every point to you  Video link is given in the description box  So you have to check it  Because BST is a very big topic in itself  This introduction is sufficient  But BST  You have to do it in detail  So for that  You go to the link given in the description box  You will get to know about each and every point of BST  Getting the point?  So this is all about binary tree and its variation Thank You.