imagine a situation where you have solved 500 odd DSA problems you go into the interview you get a problem that you have solved maybe two three months back but you don't remember that approach anymore as a result you're not able to solve that problem in the interview and get rejected how would that feel right you put in all the hard work but maybe the smart work was missing that kind of made your interview go the wrong way if such is a scenario with you then don't worry you are not alone over here hey guys this is riddhi datta and in this video I am going to talk about the revision strategy that I use while solving DSA problems and also preparing for interviews so there are two types of challenges that we generally face ah while we are preparing for interviews when DSS is concerned and in this video I am going to share the strategies that I came up with that really helped me during my interview preparation for both sd1 and sd2 roles so let me tell you that I first prepared for my DS interviews uh during my job search back in 2020 when I actually was looking for sd1 roles and then actually I cracked companies like Amazon are cesium just paying other product based companies and then again while I was working at Amazon and 2022 I prepared for sd2 roles and there again I had to prepare for DSA so there were there were two different types of challenges that I faced while preparing for both of these interviews at least when DSA is concerned and I'm going to share that exactly in the video and I'm very very sure that the street strategies are going to help you in some way or the other uh that can enhance your DSA problem solving experience especially the revision strategy that I generally use is definitely going to help you a lot so do stick with me till the end of this very video now as I mentioned there can be two scenarios the first scenario is when you started with problem solving you actually are not very well versed with DSA problems you're starting ah solving DSA problems and then let's say you are planning to switch or planning to give interviews after a couple of months let's say six months right let's see if the problem that can happen so this is generally what happened with me when I Was preparing for sd1 interviews right so a lot of Concepts I didn't knew so if you don't know the concepts there is no point in revision then like how does revision comes into the picture here right so that is what I'm going to talk about here and then we will see that what is the second problem that we face so here what happens is let's say you start with DSA right so how would you start with Ds you would first start with the basic DSA topics you will read about the basic data structures like Stacks you solve some problems on it maybe in the next month you would go to some harder topics like let's you would go for priority queues heaps next third month maybe you would be going for dynamic programming problems maybe the fourth month you would be going for grass problems and let's say by the time you have your interview scheduled in the sixth month you might not remember the problems or the topics that is solved in the first two months right because it is very common for human being to forget right we keep on forgetting things it is not possible for our brain to you know uh like recapitulate everything that we did earlier so that's where the concept of revision comes in though we are learning new things but still it's very very important rather more important uh to you know revise these Concepts otherwise these things go out of memory so now let's take a look at what strategy do I follow to ensure that I don't end up forgetting these things or most of the things before I'm actually sitting for the interview so the seats of a good revision strategy videos shown from the day one offer preparation itself right so let's go back to a school in college days remember we used to make notes and why did we make notes it's because so that we can go through those notes before exams and kind of revise the concept that we have learned during our classes right so we have to do the same thing over here remember in order to have a good revision strategy you have to set few things up front you have to organize things really really well while you are preparing if you are haphazard while you are preparing if you don't keep a track of the things if you don't take notes or maybe jot down things that will really help you in a revision then the journey is going to get really really harder and trust me you would end up missing on a lot of things I did the same software and then I learned so in this video I'm going to highly recommend you first of all try to organize things really really well while you're preparing and how can you do that let's take a look at how I do so now let's go to the time when we are actually trying to solve a DSF problem we spend some time on it and there can be two outcomes one outcome is that we are able to solve that problem and the second outcome is we are not not able to solve that problem right now I am not going to the details or intricacies of ah tell like how long you would actually try to solve that problem and at what time you should give up uh because I face these questions a lot and I think this is very subjective and uh I think it depends on the individual and this comes with experience as well of solving data problems however if you want to know my strategy maybe I can make a separate video on that so do comment it down below if you want a similar video but again as I said it's it's not the point of discussion for this video so let's just stick to the topic so now let's see as I said the first outcome can be you solved a problem without any hints now what I generally do again this is this is highly subjective this is what I generally follow the problem that I am able to solve without any hence I know I back myself to solve that problem again provided remember the basic concepts around the problem and I back myself to solve that problem even after two three months or five six months because I know that I have solved this problem without any hints and I would be able to do it again so those are the problems I generally don't put uh under my revision scanner or in my revision list that I'm going to talk about next because you have to understand that you can't just go and revise each and every problem that you've solved for the past six months right you have to follow some elimination strategy so that you have to revise less and less number of problems and also that is one of the strategies I said there are two ways right one is to setting up this uh revision strategy and the second phase is actually implementing it so this one comes under the setting of the strategy where you also have to understand that the more problems you can solve on your own the Lesser you have to revise that's what I generally do again it gives very subjective you might say okay it might happen to me that you know the problems that I have solved before I might not able to solve it again uh but I feel most of the cases you would be able to solve it because this really works for me I hope that it will work for you as well okay what about the problems that I am not able to solve right what do I do about it so what I do is maintain a Google doc or you can maintain an Excel sheet whatever suits your maybe you can just have a physical notes as well I prefer the digital approach because there you can directly paste the problem link let's say the read core of the Greeks problem link and there you can actually you know like whenever you're revising and directly with the link and the problem opens so that's why I prefer to go with the digital mode however if you are if you're more comfortable with the old school notes taking style then do go forward with it and also what I do is you can like I will also share the you know like the the sheet or what you call it uh the the notes right uh which I followed the Google Doc that I prepared during my initial days of sd1 interview preparation so there you can see I have divided or categorized into various topics so you will see array strings graphs DPI have categorized the problems and the problems that I'm not able to solve I am going to paste that problem link under the like the concerned topic so let's say if I'm not able to solve a DP problem I would put that under DP section right so how it will help is let's say when I am going through this revision sheet I will try to solve and revise only the problems on the solution sheet first right because I know that these are the problems that I might be susceptible to because I was not able to solve this problem in the first one maybe I won't be able to solve it again right so that's why I need to revise this problem and and having this problems categorized in various topics that really really helps them a lot how let's say for a particular interview you need more focus on rough problems so you don't need to rummage to that entire list to find out the graph problem first you can just take uh you know just go to the particular category of that particular heading and you can find all the graphs problem that you couldn't solve in the past six months so that will really really help you in revision so that's why I always maintain this sheet in a proper structured format and also I try to write down summary of the approach in my own words so that when if I if I come across this problem once again and I will just read that approach or whatever small notes related to the problem I'm able to you know quickly remember uh the problem so I don't need to go and solve that problem again because it saves a lot of time so also try to like write or summarize the problem a little bit once you have learned how to solve the problem understood the intuition of the approach behind the problem don't be just lazy and move to the new problem just try to write small notes or hence uh related to that problem beside the problem that would really really help you a lot trust me so now the next point is this is very related to the first point also and actually it is related to problem solving but I feel it's worth mentioning over here is that is a code I always say while talking about solving DSA problems that is ideal stay in mind implementations don't I will again repeat it ideal stay in mind implementation Stone what do I mean by it that means it is the chances are higher that you would be able to remember an approach rather than remembering the whole code right trust me it's very very hard to remember a code don't try to mug up code always try to remember the approach if at all if you have to mug up or remember something try to remember the approach and also don't do that before understanding the approach or the intuition behind the reproach why I would tell you there are two problems here first problem is obviously when you are going for an interview you have to make that interview understand about the approach as well you can just vomit the approach because otherwise the interviewer will figure it out that you are you have not understood the approach behind the problem and you know you have just marked up and then immediately you will give you a follow-up problem which you won't be able to solve if you don't understand the approach second thing is uh that if you understand that approach to the problem not only it will be really helpful for you to remember that problem but also it would be helpful for you to solve related problems as well right the problems that that are very related to that approach right so in that way you will also decrease the number of problems that you actually have to solve because just because we have understood one particular approach and that you can use to solve multiple other related problems so you always understand the approach first as intuition going the approach and maybe then remember the approach but don't don't ever try to remember or mug up the code it will never help you trust me guys one small thing which I generally follow but I don't think many people talk about it at the edge test cases maybe you have solved the problem and the right approach with the right optimizations but maybe you have forgotten some Edge test cases that really goes against you in an interview especially in Google interviews if you are missing Edge test cases you might be well on the receiving side of things so that's why I always make it a priority that even if I'm missing some minor Edge test cases I always make it upon noted down because I have seen the trend is that when you're missing one h test cases are very minute cases which does not give you correct answer then again the chances are higher that you can like make the same mistake again so also write down the edge cases in bolts hey I miss this h test case so be very wary of it next time you face that problem an interview right so that really helps so not only just write the approach but maybe also write the S test cases if you are missing any h test case or if you feel there are any critical Edge test case that you might miss try to note it down as well if you are revising it two or three times you would remember it that okay this is a critical Edge case and I have to handle it straight up whenever you're facing that problem in the interview right now coming to the revision part uh what I really uh follow is every two three months try to revisit some of the problems take some random problems and try to solve it and let's say if you are able to solve it the next time then maybe you can remove it from the revision sheet according to the logic that I gave in the first part of the video that hey if you are able to solve this problem uh now maybe you are going to come up with the solution after few months right like that's what really works for me I'm not sure how it would be with you but this really really works with me and also it works with a couple of my friends all the strategies that I'm mentioning I have like actually told to a couple of my friends as well and they have come up with a very very good positive response that's why I thought of sharing this with you guys as well but anyway you can choose to keep it on the revision sheet uh even after you feel that you have it now able to solve the problem or maybe you can remove it that's totally based on your discretion also good way is giving context though I really didn't get time to give contest especially while I Was preparing for SGD interviews but giving contest is the best way to stay in touch and solve multiple problems because when you're giving contests what happens is you are tested on various topics uh various combination of topics sometimes and that's when you know it's more chances that you remember all the things at one go right so that is that is why contests are the best way to go about it but even if you don't have time to give contests like me then basically you can revisit some of the problems or maybe you can you know discuss and explain some of the problems to your peers or your friends you are preparing with you or maybe you can just solve the daily lead code challenges like solve one problem a day just to you know give you a quick refresher of the problems that you solved before now let's come to the next part of you know utilizing this sheet first of all let's understand that what do we mean by a genetic preparation versus a company specific preparation right again these are the terms that I I came up with while I Was preparing for interviews you might not find this terms elsewhere but the idea is basically the same so what generic repetition is basically what you do when you don't have an interview scheduled or something that I follow when I don't have an interview scheduled right it's basically I go by topics and I don't go via the past company problems let's say now I don't have an interview scheduled so I won't start solving Amazon tag problems right so what I would do is I would like start solving problems topic why so that my grasp on that particular topic is Trend then then maybe I would solve a couple of miscellaneous problem and that is basically what you call generic preparation that is something I do or you should also do I according to my suggestion uh when you don't have an interview scheduled and you are in the preparation mode and when you actually have an interview scheduled let's say for Amazon or Microsoft then you pick up the company problems that are asked in the last six months let's say you're an interview scheduled for Microsoft so what you would do is you would come to this revision sheet and first solve the problems from this sheet that are asked chain Microsoft again I would keep on telling this that it's not possible for you to solve or revise all the problems so you have to follow some sort of elimination strategy and you know you have to revise the most important problems first that's what I generally follow right so let's say when I interview for Microsoft schedule not only I will solve the Microsoft specific problems but also what I would do is I would come to the solution sheet and pick up first those problems that are asked in Microsoft in the first six months or one year right and I would solve that right I won't go and start solving all the revision sheet problems because by this time my revision sheet might have contain 100 plus or problems so I might not have the time for that so what I would do I would do the Microsoft tact problems how can you come across the Microsoft Tag problems I have a lead code premium so if you have a lead code premium too then you can solve problems from there otherwise you can use like gigsaw Geeks or maybe code Studio by coding ninjas like you can like use that for free again this is not a paid promotion by coding store coding ninjas or coding Studio but yeah they have a couple of problems listed uh and you can see the company tags right so I find it a pretty decent platform though I use Lead Core premium because I find it more convenient one more suggestion is uh don't try to code everything when you are when interviews are near right because when you're trying to quote each and everything it is taking a lot of your time right it is eating a lot of your time so what I generally do is specifically the problems which are approach based right and which is not very implementation maybe just try to revise the approach and not really go into coding because let's say if there are five problems and five of those problems require BFS or different flavors of BFS I don't think you should actually you can maybe you can saw a code one problem but you don't need to solve the other four problems actually you know by writing code so maybe you can just uh think about the approaches because it really really saves a lot of time but again the problems with implementation heavy or which you feel might have a lot of cases that you need to handle then go and solve those problems by actually writing code and running it on the editor lastly uh also uh this is again another situation which really happens with us a lot there are some of the problems that you know which we feel that okay we will solve later but we don't end up coming to that problem again and then we face that problem in an interview and then we scratch ahead hey why didn't we solve this problem before I've seen this problem but I didn't get the chance to go to the solution I didn't get a chance to solve this problem so what for that what I generally do is I take those problems which I couldn't solve and I put it in some backlog so you can see over here that in this sheet I have like put a problems in backlog section where I put the problems which I didn't get the time to solve it maybe I got a chance to go to that problem but I didn't get the time to think about the solution so there can be multiple things uh but if the outcome is that I have not solved this problem or I don't know the solution to it and before closing that particular problem tag paste it in the backlog and let's say if you have an interview to Microsoft and you see hey this problem is being asked in Microsoft and is currently sitting in my backlog make it a point to go and solve that problem as well very similar to what we were doing for your revision sheet problems as well next up also if you are preparing for interviews with your friends what I generally do is I maintain Excel sheet where one column will be the uh the problem name or the problem link and the other columns will be one one column would be my name the next column would be of my friends and then so on if you have more than what two friends uh who are actually preparing with you so in that way you can actually exchange the problem list and you can know that what problem your friend is solving and maybe you can solve that and beside that you know problem name under your name maybe if you have you can see you can probably put a take or you can write done if you solve the problem your friend can do the same too and in this way it also you know keeps a track of all the problems that you and your friends have solved uh so that it really really helps you to revise those problems in case you feel a need to do so ah before your interviews are scheduled so this brings us uh to an end to the first part and the second scenario is something what I faced When I Was preparing for the C2 interviews it might also happen to you guys as well let's say you have solved around 500 code problems right ah in our first second year and then you're out of touch for a year and then now your placement season comes into picture and now suddenly you feel that hey I have solved a lot of problems but I don't remember any of the concepts now so what should I do because one thing that happens really with me is I really find it exciting to solve unknown problems of the problems that I have not seen before but it is really really boring if I have to you know solve problems which I have done before right if I see that this problem is solved and maybe I remember some parts of the solution about the problem but I don't remember it fully or maybe I won't be able to solve it in an interview then that becomes very boring for me right so what I generally do is first when I am out of touch for quite some time first I try to get into the problem solving mood right I because DS is all about the problem solving form that you are currently in and because not every time you are going to get known problems in an interview so what I generally do is I try to pick unknown problems whenever I'm coming from a break that's what I exactly did during my Z2 interview preparation because I had soldered most of the problems right uh like I have solved import foreign interviews right back when the time when I Was preparing for Amazon and other top tech companies so what I did this time was first I took around 10 15 or maybe 20 days to get into the problem solving mode by solving unknown problems right increase my problem solving skills and then uh like get got a hold of the approaches and then I you know started solving some of the known problems uh first by myself and if I'm still not able to solve it I'd better went to the solution but yeah I didn't start by revising straight away because revision of old problems can become very very boring if you are out of touch for quite some time so what I generally do is I first try to get into the group by solving unknown problems because that's what really really keeps me going when I see any unknown problem and then once in I am into the group the problem solving group ah then I slowly you know balancing out solving some more problems or Division and also solving some new problems so that's what I generally do and you can do it too again the things that I mentioned in the video are very subjective that's what I follow and there is no hard and fast rule that you have to follow exactly this but I I generally feel this is definitely going to work for most of the cases so yeah do follow and let me know in comments down below that How does it go for you after a few months and also don't forget to comment down the strategies that you follow in your DSA prep so that it helps me as well as the other aspirants are preparing for the dream jobs so that's it for the video guys I hope you found it insightful if you want more such content on DSA don't forget to check out my channel so I've already made a video on uh like getting started with DSA where I have like considered that a person is a complete Noob and a beginner and he doesn't have any idea about a programming language I've talked about what are the programming languages that you should pick for solving DSA problems and cracking interviews what are the things in the programming languages that you should learn for solving DSA problems what are the topics of the syllabus that you need to cover before setting for interviews in terms of DSA and what is the order right you should follow right because following the order in DS is very very important so I have a detailed video on that I will attach the link in description down below also I have like taken multiple topics and given the list of important problems that you need to solve for that particular topic I have though goes less for trees for Danny programming for graphs also I made videos on different types of patterns of problems that exist in various topics like graphs binary search and a couple of other topics also don't forget to check the videos and the playlist as well I will attach all of it in the description down below so if you want similar such videos I would be more than happy to you know come up with this video so also do give me some suggestion and comments uh that what what are the challenges that you are facing and if I had faced the similar challenges and I've overcome it then definitely I would be more than happy to share my experiences with you uh don't forget to like this video guys and don't forget to subscribe this Channel and press the Bell icon so that every time you upload a similar content you are notified I keep on posting a lot of such similar content and content on software engineering right so uh like your support by subscribing to this channel pressing the like button and pressing the Bell icon would mean the world to me and motivate me to make such videos that's it for the video guys I wish you guys a very very happy New Year may all your dreams come true in 2023 and I will see you in some other video very soon foreign [Music]