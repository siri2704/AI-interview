We will be implementing linked list in Python today and will go through Various operations on the linked list and the Big O complexity in the end as usual We'll have an interesting exercise for you to solve and here is the list of topics So if you want to skip ahead to specific topic feel free to understand linked list We first need to look into array because there are some issues with arrays that linked list tries to solve Here, I have an array of stock prices and it this is a memory layout of those stock prices basically There are like fire elements in this array if you want to insert an element  284 at location number 1 then it will insert 284 at location number 1 and it will Swap all the elements, right? So it will copy 305 from location number 1 to 2 320 from 2 to 3 and so on, so the array insertion complexity is order of n let's try to Go a little deeper into detail and see how exactly this works when you create an empty list in Python Internally in the memory, it will allocate some capacity for that list Python list is a dynamic array Now if you want to know the difference between static and dynamic array, I highly recommend you watch my array tutorial here It is allocating a capacity of five elements And when you start inserting elements one by one it will put those values in Now at this stage when you have three elements, let's say now you want to insert 284 at location number 1 What happens is first, it will stab those values to make a space for 284 So you can see that there are 2 copy operations Imagine you have million elements in your array Now you have to do million swaps once it has a space for 284 It will insert there is another scenario where your array is pull of capacity Let's say I have populated all 5 elements in my list now I want to insert 284 at location 1 the way dynamic array is in this situation These are memory locations by the way, and the one which are grayed out those are allocated to a different program or Some different variable in the same program so it cannot use this location after 292 Hence, it will go into some different area of memory which is a ram and it will allocate more capacity and then it will copy all these elements one by one the Way dynamic array works is if the initial capacity is 5 it will allocate Additional 5 x 2, which is equal to 10 memory locations Then it will copy all these elements here along with 284 value so here the overhead is not only swapping the elements but allocating new memory as well as copying all elements from your old memory area to new memory area so you can see that this is Not that efficient imagine you have a data structure like this where The individual values are stored in two different areas of memory array store the value in contiguous memory location Whereas this data structure is storing Values at random memory locations, but those are linked by these pointers. So here My first element has a referenced to the address of my next element So next lemon 305 stored at location 00a1 and the first element stores the reference so we are creating like links here and Through this links we can access the next element in this situation now when you want to insert 284 at location number one, it becomes very easy because now you are just modifying the links So you can see that now I do not have to copy the values from one place to another place all I did is Change the address of This link to c702 because that's address of 284 previously, it was 00a1 So this insertion operation becomes extremely easy in this new data structure When you want to insert element at the beginning the complexity is order of 1 Because all you are doing is creating a new node and then modifying those links similarly, if you want to delete the element at the beginning order of 1 if you want to insert or delete the element at The end or in the middle the complexity is order of n because you have to I trait through those elements This data structure is called linked list. It has two main benefits over an array first you don't need to pre all allocate the space you saw in the previous example that I have to allocate a Capacity of 5 even before I have populated any element in linked list, you will allocate whatever is needed second biggest benefit is insertion is easier and we already saw why if you want to traverse a linked list you have to go through element one by one hence the complexity or Big O complexity of traversal is order of n accessing element by value is also order of n There is another flavor of linked list called doubly linked list where you not only have a link to your next element You have a link to your previous element as well So here you can see that this this particular node through your file has a reference to next element So 00c5, is that just of the next element but it has address of previous element as well Which is 00500 this way if you want to go backward if you want to do backward traverse or let's say you have  292 and You want to traverse the link in a reverse direction? With doubly linked list, it becomes very easy This chart shows comparison of Big O complexity for different operations the one advantage array has over link list is if you know the indexed of Your element in array it's order of one, which is a constant time operation because if you want to access Fifth Element you just say your array in bracket five and you get that element in a constant time in case of linked list if you want to access fifth element you have to go through For second third fourth, etc, elements and you to follow those links If you want to insert and delete element at the start in array it is order of n Because remember you have to copy those values in linked lists. You don't hence the complexity is order of one Inserting, deleting element at the end is Order of 1 in array. The reason I am saying amortized is because if you have dynamic array And if you are reaching the capacity, you have to copy those elements. So there is some additional cost the same operation in linked list is order of n Inserting element in the middle is order of n in both array and linked list Now, let's implement linked list in Python I have opened pycharm and I have created two classes here The first class is an or class which represents an individual element in the linked list It has two class members one is data. The second one is next which is a pointer to the next element Data can contain integers numbers or complex objects? The second class is a linked list class where you need a head variable which points to the head of the linked list First I am going to implement a method called insert_at_beginning. So what this method is doing is it is taking data value and inserting that at the beginning of the linked list, let's say now you can create in node With value data and then the next element for that nodes so you can see that the Second argument in this constructor of Nohr class is a pointer to the next element now, let's say you already have a head and if you're inserting anything in front of it what's gonna happen is you will put you will create a node element and the next value of that node will be your current head and Once that node is created. You can say that my head now Is node So we will test this method out but for testing this we need one utility function called print So now I am going to print my linked list First thing in this function is if let's say my head is Blank, I have a blank linked list. Then I would print that my linked list is empty And return If it is not blank then I can just create a temporary variable called ITR which is a traitor and assign head to it and while ID are Okay, ITR is equal to I TR plussed ITER is equal to I TR dot next So you are now following the link in your link. Listen, I trading through element one by one In each iteration you want to print a value? so for printing a value, what I'm going to do is I'm going to just create a linked list string and in that string I Will Append that Data from the string now, we'll just use this character just to show kind of the link between the two elements and then print that Ll STR Let's taste these two methods out. So first I'm going to create my linked list and Insert some values. So let's say insert value at the beginning. So I inserted five I inserted Let's say 89, and then I'm printing that so Let me remove this extra space, right? Click run add it and it runs so you can see that first I inserted five and then in front of that I inserted 89 Hence, it printed 89 and five If you want to debug this you can put a breakpoint and right click debug that way you get Understanding of internally how linked list is working. So my linked list ll is here and my head is Pointing to data which is 89 then it has a next element and next element is also of type node And the value is 5 and the next to that is none now I'm going to implement next method which is inserting at end in this method first. We need to check if Let's say you're calling this method when the linked list is blank. So your head is blank in That case your head would be the node Created using that data And again remember in this node. The second argument is next So the since you're inserting the element at the end The next of that element will be null and now you're pointing yourself dot head to that element So this is very simple all logic and you just return from here. Now. Let's say your linked list is not blank In that case, what you want to do is you want to I trade through the linked list and go at the end and at the end you want to insert this element, so again, I will create an I turn and While I taught next which means if I to dot next has some value That means I am not at the end so then I will keep on iterating and when my ITER dot next becomes null it makes it means I am at the last element and When I am at the last element in that element, I will say okay the next Of the last element was null and now I want to point it to the new node, which I am going to create here So that new node will be node data and none Let's taste this method so here I created lets say 5 and 89 Okay, so my linked list is 89 first and then 5 now I want to insert at the end What do I want to insert? Let's say some value say 79 79 right click So you can see that 89 5 and 79 You can also remove these values and just keep on inserting at the end. So let's say I want to insert 79 first then one and then Some big value and we render on this I will see 79 1 and 9 8 7 6 so it this is working as expected The next method I want to implement will take a list of values as an input and it will create a new Fresh linked list. Ok, so here in this linked list first I will say self dot head is none because I am typing out all the current values and I am inserting new values and the way it will look like is let's say you create a new linked list and Then you just call for example this matter So I want to insert all these values and it should create a linked list out of that. Okay? So for that I have to iterate through that input list and I can simply say Insert at the end those values because I have this inserted for add and function which I can use. Okay So let's run this function Voila so this works see it will just create a linked list out of all these values Alright now I have this function. The next step is to implement a function Which can Return me a length of the linked list. So I'm just going to copy/paste the function I'm not going to explain you how to write that code because this is pretty simple All you're doing is you're having a counter and then you are iterating through a linked list and you are counting it So that gives you the length. Okay, so let me print the length of the linked list length of my linked list Is ll dot get length and when you run it You can see that it's saying four because I have four elements in my list now This GATT late' length function is going to be useful in few other methods that we are going to implement so now I want to implement a method which can Remove an element at a given index Okay. So for example, I want to call something like This Okay, and what this should do is it Should remove the element at index 2 which is 0 1 2 So I'm going to create this linked list and then remove grapes from that linked list. How do I do that? You just implement this method saying that remove at? This index, so I want to remove the element add this particular index, okay So for that first thing you need to do is you need to validate that index and that index If it is less than 0 or It is See now length cat length function is being useful if it is Greater than equal to that length Because I'm saying equal to because the index starts at zero Then I will raise the exception saying that This is not a valid index Okay After that You can check one more specific condition is What if you are trying to? remove the head So in that case you will say index is equal to 0 it means remove the element at the beginning of the linked list Which is a head Death scenario is also very simple in that case All you do is you say self dot head is self dot head dot next. Okay so that we are pointing to the next element and you return the good thing about Python is it will do garbage collection for you if you are using C++ type of language then you have to explicitly Clean up the memory associated with your head here Alright now that we have handled those two special cases let's start with count because you are removing the index and in linked list, you have to manually Maintain the count to reach that particular index. Ok, so as usual, I will do my I Turn initialize it to head and why lighter? Heitor is equal to either dot next So this is a simple loop which goes through each of the elements in your linked list now what we are doing is We are removing the element at a given index now just visualize in linked list you have to stop at the element which is prior to the element that you are trying to remove and In that element you can modify those links that you have The link is basically the next length that you have and that will automatically remove the element So I need to stop at the previous element, which means when my count is equal to index minus one. I Need to do something Okay here I need to do something. So what do I need to do? So I omit the previous element? previous elements next link is pointing to this particular index that I am trying to remove Once I remove that element it will point to next elements next Okay. I hope you can visualize that And once you achieve that you just break out of the loop So that's it for this method now, let's test it right click run Okay, this did not work because I think I did not update this count, okay, so I need to update the count And when I run it I find that Grapes which was at index 2 because 0 1 2 so see the crêpes is removed Now in this particular list if I say remove at 20 which is of course and an invalid index It should throw an exception which it did see it it throw that exception Also, if you put less than some negative index etcetera again, it's going to throw exception that the index is invalid Next function I want to implement is insert add where I provide an index and the value and it inserts figs for example in this case at the Location 0 which is in front of banana. Ok, so I have first check The same check I did in the previous function which is checking whether index is valid or not. Let's say your index is valid and Another special condition is now you are trying to insert at zeroth location Okay In that case you can just say self dot insert at beginning because we have inserted beginning function Why not make you of it? And you can just return For all other cases you need to keep a count so I'm initializing my counter to be zero and as usual I traitor initializer to self dot head and While ITR ITR is equal to ITR dot next so this is a simple loop going through each of the elements in the linked list Here again, you want to check whether your count is index minus one Because when you are inserting the element in the linked list You want to modify the next pointer of the previous element? That's why we are stopping at the previous elements index minus one. That's why we are doing that Once you are here and by the way, if we we need to write some code here But before I forget because I did last time I want to increment my count Okay, all right now, what do we want to do here Let's see. You are at the element prior to the prior to the element that you want to insert that In this situation You can first create a node, okay So your node is basically the node containing data and the second argument in no class is the next element next pointer so the next pointer here will be it--are dot next because you are at the previous element and previous elements next will be your this elements next because you are kind of sneaking in between and Then ITR next will be node. Okay, and once you do that, you can just break the loop Let's run this code So here you can see that figs I try to insert at the beginning and it did insert so this was my original list Now in the beginning I have figs Let's try to call this matter more time and let's say now at This location. So let's say zero one two Okay before mango, I want to insert jackfruit. Alright, I love jackfruit Onto So you see my original list Okay, let me print list after this so you kind of get an idea So before inserting jackfruit my list was like this now at the Index to which is at the mango I inserted jackfruit so you can see the jackfruit came in place of mango and Mango was pushed down by one position in the linked list You can insert string values integer values when complex objects. So let me just quickly demo you the Integer values. How does it apply? So if I have something like this where I'm inserting couple of values and then I'm saying insert at the end so if I do run see I had up till 99 and then it inserted 67 I can taste few other method as well, which is Let's say I want to remove lesser 12, so the location of 1201 - so - ll dot print Run it and it removed - the code that I showed you is available on my github location. This is the location I'm gonna provide a Link in the video description, so please check the video description for the code that I used in this tutorial also I have a very interesting exercise for you exercise is as usual the most Interesting part of any tutorial if you just watch the tutorial you are not going to learn anything It's like swimming. I give this swimming example all the time, unless you practice coding you are not going to learn it So forget it, if you don't want to do exercise you're wasting your time So for this exercise, I have two problems that I want to want you to solve. The first one is implement These two additional methods in the linked list class that I already have so you can take this particular class okay, copy the whole thing and add these two methods and These two methods are inserting and removing The elements by values in our original code. We did it by index now you are removing it and adding it after value and It's to support all of these calls there is a solution link here, but if you click on solution link before Before trying on your own then what will happen is I have a magic you are going to get a virus in your computer Okay, so do not look at the solution directly Try to implement yourself first and then look at the solution The second exercise is to implement doubly linked list In doubly linked lists. The only difference is you have a link to previous element as well so your node class will look something like this and you want to implement two function, which is print forward bring backward and all other remaining methods that we had you have to operate those matters to account for your Node dot previous element again. There is a solution link here But look at the solution only after you have tried it yourself That's all I had for this tutorial. I hope you're having amazing time if you like this video, please give it a thumbs up because those thumbs up helps in YouTube ranking and Other people can also benefit from this tutorial Okay in the next tutorial we are going to look into hash table. Thank you