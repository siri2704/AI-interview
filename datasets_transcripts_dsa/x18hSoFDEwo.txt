this is actually a very good question so please watch this video suppose we were given this head to the linked list and we wanted to reverse it a common way to do this would be to use something called recursion so we could actually start at the one we would then get to the two and move all the way to the three before we start flipping then the three could point back to the two and he could point back to the one this is one way to do it however there's actually a problem with this solution as we work our way to the end and we're using recursion the recursion call stack holds space so we have to hold the call for one we have to hold it for two we hold it for three we hold the recursive call stack in the entire depth of the list so that's going to be a space complexity of Big O of n so a better way to do this would be to use something called an iterative approach not using recursion so we'd start at the beginning we'd point this to be nothing and then we'd work at the two point this to the one get to the three and point that back to the two and then we're done this is going to use a constant o of one space and in general the four languages you're probably using are just terrible at recursion