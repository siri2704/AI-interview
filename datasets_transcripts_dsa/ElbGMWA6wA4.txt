[Music] thank you [Music] hey what's up everybody Welcome to the Thursday live stream I don't know why hold on I don't want to show this yet we'll get to that why I can't there we go uh all right everybody it's gonna be a great show welcome what is up what's up theorem geek how's it going uh Yoshi can you fall hello how are you Harry what is up Harry what's up Christopher thanks for being here y'all it's Thursday and it's almost the holidays and uh I don't know about y'all but I'm just trying to get through to uh some some vacation just we're just powering through the home stretch what's up Ashish how's it going Android Terminal hey good to see you what's up Nicholas from Argentina what's up Argentina so Tito Mage good to see everybody we got a great we got a great stream today this is going to be quite interesting um because we're actually gonna do some lead code we're gonna we're gonna solve some lead code with vs code and show y'all how to to visualize some of that stuff that's kind of complex but before we do that I wanted to show y'all something um if you don't art if you're not already subscribed on YouTube first of all how dare you uh and then second of all we posted over on the if you are on YouTube if you go to the community tab I've posted this form here where we're asking people to upload pictures of their Dev setup with vs code running in the background and then two weeks from today we're gonna rate those on a stream we're gonna do a whole stream because we got a ton of them I'll show you I'll give you a quick I'll give you a quick peek here these are some of the 50 odd setups that have come in so far so if you want to be part of that make sure you put that here it does require a Google address but if you're on YouTube you've got one of those right you've got you've got a Google address what's up Ben Pascal how's it going what's up linen how are you hello from the Dominican Republic what's up Dominican Republic what's up from India sweet it's so great to see all y'all here all right let me stop sharing um was I going to show you something else no I don't think so um all right so y'all today is Thursday and that means it's Thursday Tick Tock throwback did I do that right is that the right producer roll the roll the segment it'll tell us [Music] throwback faces you make when you don't know the answer all right grab a seat great job answering those algorithm questions seems like people like you okay just a couple of easy questions and we can wrap this interview up if you can't Google but wanted to learn how best to describe Azure Cloud Concepts where can you look online I can't Google it no let's try another one you want to learn about devops you can't Google where can you look can I Yahoo it all right you want education topics on Microsoft products you can't Google or Yahoo it and you kept Bing it either foreign [Music] [Applause] with that uh yeah I've been there describe uh inverted binary tree Burke like right now without Googling it I don't know but we're actually going to do that on the stream today so folks uh exciting because we have with us today uh a gentleman who's done a lot of work in this area and in visual thing nobody told me about that producers look at this oh my gosh I gotta I'll just go down uh yes his name is Henning and um yeah we put together a little intro so listen go ahead and check that out the computer stores everything in its memory as a sequence of zeros and ones but for us humans it's hard to make sense of this data especially when we're implementing or debugging complex algorithms while modern code editors and debuggers such as vs code already help make sense of runtime values we can go one step further what if we could use Advanced visualizations and draw say a linked list or other values as they change in our code watch this live stream with extension author and vs code engineer Henning dietrichs as he demonstrates how his vs code extensions can be used to make sense of complicated data structures all right so please welcome Henning dietrichs to the live stream what's up hitting hi back are you good you didn't tell me about my coffee stain prior to the show it over here prior to the Stream did you see it you can be honest with me okay well hey welcome listen quick question for you you work on the vs co-team yes yes you're an engineer yeah and mostly as well can be called editor and worked on features like record pack authorization or inline completions and how does one go about getting a job as an engineer on the vs code team so I think for me it was the extensions that I made before I applied and then I think that that was uh like a bonus when I applied so they I think they already knew my name did they ask you to invert a binary tree did you have to invert any binary trees on any whiteboards and no they they asked me some other some other algorithmic question were there any that you just didn't know where you were like I have no idea how to solve this um so in this interview um I had an idea how to surf it but in my preparation I had some problems where I had no clue whatsoever so you've actually prepared for the technical interview with the vs code team yes did you use lead code when you did that um yes yeah I use various websites I think and but some of them were really complicated and yeah some of the questions are super hard Chad do y'all do do y'all practice leak code just wondering if other people do this I see this a lot I do it myself sometimes and sometimes it makes me feel good about myself and sometimes it makes me feel really bad about myself especially if the questions marked easy and I'm think I have no idea how to implement this not the first clue chat do you delete code delete code in your free time this will be interesting sometimes yeah I'm just curious as to how many people actually lead code all the way yeah how many people actually do it anybody done all the questions on leak code is that even is that even possible I don't know it'd be like an achievement for that I've solved every lead code question I do leak code for in prepping for interviews yeah there's another website I found called meat code it's n-e-e-t code dot IO uh and it's a gentleman who is an engineer I think at Google and he basically takes like the blind something called The Blind 75 I think where it's like the top 75 questions that you get asked at like Facebook or meta or Microsoft or Netflix and they he solves all of those in Python and shows you how to do it super helpful all right lint lint code hacker rank yeah that's a good one too all right Henning so what are we doing we're I'm setting all this up because we're talking about all this today right we're gonna we're gonna show how to use vs code to make solving these problems easier yes all right so I brought two extensions with me uh one extension is draw i o and actually let's start with that one okay so it's super easy to install you just type draw i o and the search with the extension viewlet and then you install it so draw i o itself is a standalone application that I didn't do some other great Engineers did that and I think it's it's pretty old I think 10 or 20 years so it's it's also a very stable product but the extension I made here integrates dry or in these code so you can directly create diagrams from within vs code let me show you how to do it so I prepared a folder here and I can just create a new file for example binary tree in inversion.dio that's the extension for dry all files and then dry all loads so what exactly is a binary tree heading so a binary tree um is basically a tree that is binary so each node has two two children um let me start with one so it is it in a binary tree is the left node always less than the right uh that depends on yeah I would probably want to solve so depending on the order you it doesn't matter so but the binary should be ordered um if you if you want uh to insert things quickly so then it's either the left note is always lower or the right node is always lower but you wouldn't have a combination of left and right nodes being greater than or less than yes okay for the balance tree theorem geek says yeah for a balance tree all right so you can use binary binary trees for many applications also for our balance trees for bracket pair colorization for example I use the balanced a b tree okay it was not technically a binary tree but sometimes nodes had two or three children and they are the the fact that the tree was balanced made it really nice to quickly find notes in there gotcha okay so so that and brackenberry colorizations built into vs code and you used a tree for that yes so that's really fast you do actually use these things in real life folks yeah not just um yeah so let me start with creating an exemplary binary tree so we have the um before notes one two three four let me create more space here um and then you have so this is basically the list and for a binary tree you have these parents parent notes and are you just happy pasting is that what you're doing there yes exactly so um yeah you can you can click on a note and press Ctrl C Ctrl V and then you have it let's make that makes it really convenient uh straight forward to to work with these patches and you're just dragging from those from those handles to get the pointers exactly so you can also use these shape c and here you have various kinds of um of notes also um if you have a node you can change the format so for example if you don't like this straight line but want to have this uh this other one you can easily do that you can also select multiple edges and then change them all at once so it's super nice to create all kinds of things so now I have this binary tree here so what would the values be for the parent nodes um yeah if you want to quickly test if something is contained in this binary tree then you can for example do the higher value so um here you could start two here you could stop four and t equal to stop four sorry so there are many options it depends on the problem that you want to solve and how you want to query this tree but here for example if you want to find the node 2 you have um so this one starts the the highest note now I have to concentrate we have the highest note um in the sub tree the highest note in the in the entire subtree and then you can look at the children so you know the highest note in this subtree is two so um you don't even have to look into that and then this is what um so you only have to make this decision in which which type of tree you wanted to send once and then you have the runtime of your search then only depends on the on the height of the tree yeah so it's kind of and that's why they call it binary search right because you're cutting off essentially half right there of things you have to search though if you so the classic binary search implementation just works in an array that is sorted and then you don't have to build up these intermediate notes um because you have to implicit by your start and end boundary that then have every time you get to it you know the best implementation or like the clearest of a binary search that I've ever seen is the bisect it's a for vs code the extension bisect I don't know if y'all have ever used extension bisect but if you if you have if you get into an instance where your vs code is borked or burped where it just doesn't work and you're not sure why something really is weird is happening it's likely an extension and you can run this thing called extension bisect and it does exactly this it literally disables half the extensions and says does the problem still exist and if you say yes then it knows that the half that it disabled is not the problem and it just doesn't look at those anymore and it does that again it divides it disables half of the half and that's the the binary search implementation a very very practical and simple implementation of binary search anyway sorry Henning um yeah and for the task that you wanted to do is to invert this tree so that um we then had the binary tree that represents the Reversed order though if we revert it then obviously we also have to adjust the logic that finds nodes in it because it's a key assumption that if you want to find something in a binary tree it has to be ordered and if we reverted then it's ordered in the other way um and yeah we can here in this in in dry or we can just play around with these notes and see what happens so one spontaneous idea would be just to order uh the nodes to inverse be notes at the very bottom like this oops so now we have uh we are not not there yet because now the tree says two one four three uh but if we also basically reverse the parents like this and then you move that all over here then we have four three two one and our reversal is complete all right so now the greater numbers on the left and the smaller numbers on the right and that's the inversion yes so and then the idea would be to just flip every um to flip every children list of every note and then um if you do that at the end you end up with a inversed tree very nice so a couple questions here from chat what is this extension sorry came in late all right tiger this is the last time we repeat otherwise you gotta show up right right at eight o'clock ten o'clock sharp what is this extension hitting sorry this extension that you're using what is it so this is the dry oil extension draw IO just typing dryer on the search window and then it's the first one look for Henning's name there you go uh let's see here here's one that's gonna be a great Segway see here one second here so log in complexity login time complexity on a binary tree that would be correct yes yes so um yeah because the hate of the the height of the balanced binary tree is the logarithmic number of of the nodes at the very bottom or add of the nodes in total even um and if you only need to navigate from the very top to the bottom then that's the logarithmic uh amount of numbers of notes that you have at the button and let's see I think this is powerful if I'm pronouncing that correctly good question and also great segue heading can we generate diagrams from code not yet but but you can go the other way can you not because you can't generate code from the diagrams but you can link to code from there so for example even in this example maybe it doesn't make so much sense but let's say I open um fire so this is something that we are going to look at later linked list which is the other typical interview question but now you can select a note here they can select some code here and then I can say um link node and now if I double click that note I jump to the code that I link the node with so you can use these diagrams to document your your architecture software design for example the Visa classes and super easy to jump to the code that you want to document with this so um what else can we do with draw i o Henning many many things so I have some some demos for use cases here so what I mentioned just now is one super use case uh um class diagrams so if you have some some complex structure quickly I want to describe how classes work with with each other then the class diagram makes makes a lot of sense and there's one feature here um you can convert diagram to a SVG file and then it stays in SVG file so if you now edit this like if I add the node hello world and save this when it's still an SPG file and then if I have an SPG file I can put it on GitHub or even link it from from markdown files so for example if I have a readme markdown file here I can link to this class diagram say documentation is the title of this markdown thing and then um because it's a it's a I have to change the theme to um ninth class oh no chat's gonna lose your mind the issue is that most of the time GitHub so I think I know GitHub also has a dark theme but if you embed draw or diagrams into Dark theme markdown documents that's a bit of the issue so for that he best used light theme but here you can see now I embedded the draw old diagram into a markdown document and if you push this to GitHub then you can also see the dry old diagram like this on GitHub without having any without needing to install any extension very nice so you can convert it to a format that you can show outside of draw i o yes and I only need to do this once and then if I do some change like this save it then you see the oh it automatically updates man that's really nice so the SVG file here is really the ground around the truth that starts with the document there's no export that I have to do every time I change something it happens automatically that's wonderful yes uh skating yellow fever yes YouTube please yes it will be on YouTube it will be recorded you may come back and watch at your leisure all right um all right what else can we do other use cases for example even though there might be better tools for that but you can use to design wireframes so here I want to sketch the a mock-up of a GUI to just brainstorm how a UI could look like to to rearrange PDF pages and it's just super easy to to have these buttons and uh to brainstorm layouts some put some text in your ads and it's like yeah it's really nice I didn't realize you could do that insect is an entire library of these so there are these shapes and um so this is all built in into draw our own the the Standalone drawer application has all the same features but here there is somewhere the option for I think marker cups they have some patterns of iOS if you want to design iOS icons but um so yeah yeah Android UI elements there's a bunch of stuff that you can that you can use from here and this is free there's no this is free and even better it's open source oh wow and the trial extension bundles and offline uh thing of draw so Trio is is this website uh they're actually called diagrams.net the dry Hill was the name before changed um but it's all offline so if I don't think it will happen but if troyo ever disappears his extension still works and all your diagrams um will be editable forever and draw you I think is around for maybe 10 to 20 years so if you ever make your diagrams and dry oh you can be sure that that will uh that they won't go away anytime soon very nice uh I was using I think balsamic for a long time to do this kind of thing I had no idea that I could do it right when inside of vs code not saying you shouldn't use balsamic it's a great product but this is um I don't know I just I didn't know you could do this very cool and you can also paste screenshots and and draw i o so let's make a screenshot and you paste it and then you have it so you can easily describe workflows of how you get from this screen to this other screen and then um you can link these screens with code so if you have a particular react component for example that renders this particular page or if you have a separate HTML page for that you can associate this file with this note and when you double click you will jump to that file wow that's crazy so you can annotate basically your whole application in here so people jumping in could be like where's the code for this screen if I just double click and go straight to that code for example I just select this note here and then I select the readme file here and say dry oh link five of selected node and active diagram not like it lit up now if I double click it I will jump to the readme file wow wow this is crazy I didn't I had no idea any of this existed in this extension uh somebody had a great question that I had the same question they were like can we does the relative pathing work on GitHub readmies for yes or has it always been that way it always worked so if I would push this to GitHub now so I do it for all my all my personal projects if I push this to GitHub now it will render this diagram in the preview it will just work out of the box and can we export the diagrams to other formats besides SVG so there's one other format and it also supports this embedding so this that's the PNG thing and now this basically is a PNG file that contains the diagram so it's also not not an X so you can also export it but but this way the PNG file is the diagram so if I open the PNG file here it's the diagram entity PNG the image at the same time and now this image you can um also use it instead of SVG but I recommend using SVG because it's always for everything um you so you're right you always recommend SVG like as the file format for every image type even like with screenshots and all that uh so if I screenshots it doesn't really work because so I mean technically you can also embed a screenshot in SPG but that doesn't make so much sense yeah okay definitely it makes sense or whenever it is possible to use SVG then I recommend to to use that because you can just zoom in and it doesn't get pixelated but if I would zoom into this PNG file if I would open it in a PNG viewer then it would get pixelated once as in also the file size is much bigger and you can't really diff it but SVG files however you can do because spgs SVG files are just text yeah water bottle fan better it's it's inherently better for diagrams SVG is yeah yeah but what I use vpng features for example is the logo of all my personal extensions so I actually the the logo of this code extension has to be in the PNG format yeah and um I designed the logo Android o and then I just named it dry order PNG and now all the logos of my extensions are editable dry all diagrams so how flexible is it as an image editing tool right can it does it replace something like paint.net um it depends so um I wouldn't use it as an alternative like Adobe or something because I use uh well I was using XD no figma everybody's using figma now right like that's the law international law says if you're working with images you have to use figma I believe but yeah paint.net I used to use paint.net a lot what is figma figma's like a browser-based collaborative design tool would that be a good explanation yeah and so it really depends on the use case and you have to try draw you out to see for what it works for for small PNG files where you where it doesn't have to be like extremely professional it's it's worth to to start with cryo as a PNG fan um yeah you can also draw stuff so there's a um and now I forgot where that button is oops they are different themes in Android or you can actually change them here and they usually use the um I think this one and then it also has a different layout and here's a freehand drawing where you can just draw stuff but then it's beautiful yeah this is vectorized so it's smooth but it's not really suited if you want to be Pixel Perfect all right so that's draw i o but we have a second extension that we're going to talk about which is which is um quite interesting I've actually tried to use it before myself uh and was very interested in whether or not it could help me actually solve some of these problems I was working through on lead code so chat I don't know about you but when I try to solve these problems I have like a for Loop inside of recursion and I can't keep track of in my head what exactly is going on like what value is doing what uh and so there you have another extension that can help with some of these things which one is that so the the other extension that that they did is the debug visualizer just search for debug visualizer and then it's this one and I can just install it icon made with Cry of course there we go I think uh this this sunglass here is um is a SPG icon that I pasted into dry or but then the background the size of the picture the color of the background is that I ordered in Royal the same for the drive so the dry oil extension itself is completely made in drive the icon of that so this one these are just draw our own notes better than exported as PNG very nice all right yeah the back visualizer so I just installed it and so dry oh it's a tool that you can use to think about your problem before you even started coding uh the back visualizer is is the other way around so you already have some code and you either want to debug some things so something doesn't work if you want to understand why it doesn't work or you want to understand how it works and for that you have the debug visualizer that can visualize the and I can start with a quick demo here so I have a super simple JavaScript here that I'm debug using these codes so I just pressed F5 and then that's the cool thing about this code it's super easy to just debug JavaScript and then set up so now I pressed I selected This this term array R and then I pressed shift F1 I alternatively I can also use the back visualizer New View and then um it opens this this new window here where it visualizes the value of the expression that I enter here then you can literally be any expression so it can be some text hello world and this is not not really uh impressive or surprising that if I had a bird just went us hello world of uh for a number it's also just a randomly number but as soon as you give it some interesting objects um for example an array it renders them in various ways so for example this is a plot that interprets these values as Y coordinates on a graph is there a way to visualize it as something else besides a graph so there are many visualizers there there is one for for divs actually so if you have [Music] uh oh sorry this is uh this is a buck um then it compares the difference between these things so for example here you can see that the two was added to the string so this is visualizer if you if you work with strings and change them a bit and then want to understand what what um what changed in total you can use this view to to see the differences or if you make a check if this string equals this other string and it fails let's check and you'd want to understand why it fails you can just compare these two string values here and then it will show you but for like the array of numbers can you view that as like a set of blocks instead of the chart here is this head of one well you know how like when you like when I'm drawing an array I usually draw it like um yeah yeah um so you can render it as um I have to see so there are various ways how this data is interpreted and this is specified by the extractor so the extractor is basically what does this data mean and the visualizer is basically render this data after applying this this and there's the extractor to interpret this as a grid and then you get it there we go yeah that's it that's what I was looking for and this grid view has some nice extras so um of course if you have a array that mixes numbers in text it will just render the text in there and but often you have some point tests in this area some some index and then you can just specify it sorry um like um like this I think and then you have to select marked grid from array so these extractors are suggested automatically so it adds the pointer to where you actually are in the array yes and now here this is basically this indicates the name of the pointer then I can say the address what what's the value of this offset and then this is the date VB array so and I can see Zero for example then you can see the eye really moves there so you can see what will change and um very nice different value for example um um yeah it supports to to render multiple things here uh by the way chat with some of you please go back to dark mode I knew that was coming you don't have to um Watermark was asking can you showed us a histogram um I think plotly supports Arnold probably not um uh let's see Jose was saying debug visualizer like python tutor could you create a dictionary or list I mean this is a list right in a sense and visualize it and I mean this you can also okay it's a dictionary this might not be uh suited that uh but as a list certainly um also if you have if you have for example an array of objects that have all the same shape for example first name foreign Max then you get this nice view if you have other columns for example names very realistic agency so then then you have a view of a table you can sort these columns individually but here you can also visualize them in some other ways for example chart and yeah so this this component here is a perspective Js it's a off-the-shelf component that I just integrated in into the debug visualizer same as DV plot of numerical values this one this is just uh plotly which is a library that you can use use from from JavaScript now you mentioned that we can use this against running code right to visualize the code as it changes yes so for example one great use case is um um when you do rest requests and want to inspect the data so let's say um you have this script where you go to some endpoint and regret request some some data let me run it so now we have this this result here but this is not extremely helpful so it's extremely hard to make sense out of it to ask questions like how often is completed true um or something like this how many user IDs are there and for that you can just visualize this Json value and then the plotly um visualizer kicks in and here you have the table where you can example Now sort by completed I can even Group by completed here and then I see then I can save it for for title I want the for the title column I want the count so I know that there are of these to do items completed is false for 110 items and true for 90 items man that's super nice what I usually do here instead is I get the Json response and I like copy it and then paste it in another window so I can go like at least see it as Jason and go through it uh but this is great yeah I would use this for sure so you can see this is just running codes I'm in the middle of of debugging it actually so but the visualizer updates like as you change as your code values change yes exactly um so I prepared another demo of uh of the backing uh linked list problem if you like we can go into that and they can demonstrate how to use the debug visualizer there sure Lucas is wanting to know if we can debug a binary tree for sure but I don't have a binary tree example and um and I mean I could make it up but uh I don't know no no no it's okay we'll stick to the script y'all um so it's one thing to have to interview um for an interview but if many people are listening then is it worse is it more nerve-wracking than an interview for the vs code team and yeah I think so really oh because I know that there are so many people and if I make a mistake it's recorded it's online yeah forever but it's a live stream making mistakes is like what we do our chat's super nice they're like the best the best people in the world and it's all right all right what do we have here so we do a link list y'all it's kind of I mean it's not a binary tree but it's uh it's a complex structure to keep in your head so this is a singly linked list so the easy one and here I have some some code already yes and say this and he says it doesn't he says it doesn't work so either bucket I set a breakpoint here so so what I heard is that prepared function does its job but the inside after function is a little bit weird so this is why I placed this break point in the insert after function so now the general structure of this linked blisters that the linked list has a head object which is a note and then a note um has some data so what I pass in here to the linked list these varies added the data for three to one and then 3.5 and next of the node is a pointer to the next node yes so the linked list has a head and then points to a note and each node can point to next node or it just points to another if it's if it ends so now here um you can see at first points to one which is correct because we prepended one at the very last so one should be the the first item and two three four and then it should be 3.5 after index two so after three so it should be one two three and then three point five and then four let's check with the elements that versus the code already gives us so we see one two then three and 4K versus weird then 3.5 okay this is I was expecting this to be before four and then three okay this is even weirder and then it seems there's a infinite Loop now so something is really going wrong here um but I find it's hard to see what is what exactly this is where just your brain just starts to melt down because you're like what is happening so with the debug visualizer you just select this press shift F1 and this view opens and let's see so by default it uses the two string extractor which just calls to string on the object so it's not nothing useful here but there's another option there's the object graph the physical and that then we can nicely see um that this is this linked list here and then the Hat points to to to this node and then the next point of that to this one and next point of this to to the value 3 and then we have this weird cycle going on here yes this is by from three we point it to four and then was 3.5 and then three then back to four this is this is just broken now so this is not a proper linked list anymore this is uh yeah this is broken so now we can understand what is going on so maybe you can we can even debug a little bit so if if I press this here restart I just restart the program and I will hopefully hit this breakpoint before before it was broken maybe okay I can see this looks much better now we have the hat that points to this note and we have one two three five so this looks like a card single a singly linked list right so far so good insert after so inside after we have here the element before um whatever this is and whatever I get at this probably it's the element before um before we note that we want to insert and then they have element after which is probably the element after the note which is just the next element so at index two would be so it's between three and four yes so now we can actually use the debug visualizer to make sense of that so there's one one feature if if you pass in an object like this and then you can see there is now this object as a SB root object which has the self property that points to linked list and so on but now there's a different extractor there's the object graph with pointers and if I use that one and I can see that this property here self actually now is this pointer so I can use this to to remember that linked list is stored in this variable step I can actually use this here too so this is my this basically what this points to uh okay so you don't keep track of what this is yes but now I can use um I can say element before I want to point the value of element before and we can actually abbreviate this in JavaScript you can just remove this and it's it's it means the same thing in JavaScript so if it visualize this then we can see let's see what happens here you can see that element before points to number to note um to the node that has the value of three so it's at offset um zero one two at offset two which makes sense because here we passed in the the index 2 and then we called get at which probably gives us we know that offsets here too element before is now indeed we note at offset 0 1 2. so now let's check element after so here we can see element after points to uh to this which is also correct so now we want to insert our node between three and four and so let's check what if what is going on with new nodes so new node is still undefined because we didn't assign it yet and that's step so now we can see that this node here is floating around it's not attached to our linked list yet but now here we do some weird things so that let's just execute these steps and see what is happening so this already looks very weird because shouldn't it be pointing to four yes since this one is also super weird um so actually um let's think about what we should so I think these are the two lines that are wrong and let's go back again so I restart to see the the fixed one so um now basically we want to have this note in between this so there's one feature that I just recently added you can copy this diagram and actually create a new dry o diagram um linked list here and now I have lots of Fitness going on here okay this didn't work um that's me think what the reason for business in a specific correct version okay this is the current version okay so I have no idea why it didn't work uh but in theory I would be able to paste this diagram as is into the draw or diagram and then I could move the nodes around and do some pointer arithmetic to it's a new feature folks that's what happens yeah life demos so what what do we want to do so we want that the note element before the next pointer here points to this new note so I think this new note dot next so no sorry um element dot before so let's add this yeah element Dot element before dot next should be element 4 should be my new note yes and the new node next should be um element after yes so new node dot next equals element after so let's delete these two lines but probably uh August and let's restart and um let's watch what happens so this looks good now we have the new node this looks good now we basically cut off the linked list so now right and now we have to uh this looks really good so I think very nice let's be proper backflix9ine that is crazy I mean I you know I love the ant that animation is great so what people are asking will this work with python we're just JavaScript so in theory it works with every programming language um but there are some complications so it works the best with JavaScript and I think just recently someone from the community from the open source Community added support for Ruby so that might as work as well for python I think there's also support but uh it might be a bit complicated to set it up gotcha so somebody is asking about C plus plus same answer you same answer C plus plus is a bit a bit more complicated even because in C plus plus you can't easily evaluate arbitrary Expressions so mostly you can inspect variables and then these variables have to um store some some Json in a very specific format for the debug visualizer to understand that but for JavaScript there's lots of magic going on that um but it's very easy to use awesome all right um y'all a chat I know we're running out of time but we we did say we were gonna like solve a leap code question using these tools and like put this to some actual use so we have one that we've picked out that that requires a particular algorithm to solve uh and so let's get into that before we do that hitting are you ready to do that before I absolutely okay so just show so we can see it here I'm gonna share my screen because I've got it pulled up we're gonna solve uh this problem right here I think I've got it hold on this one Valley palindrome is the problem we're going to solve this is an easy this is marked as easy although I take issue with the way lead code marks its questions some of the ones that they say are easy I find impossible and the ones that are medium I find extremely easy so uh it's up to you whether or not this is actually easy doesn't mean it's easy just because it's marked that way but anyway we're gonna work together to solve this particular problem because this particular problem uses an algorithm called uh two pointers or that's the way at least that they want you to solve it so all right let's do that so for for time reasons I suggest to um to ignore white space and don't use two pointers but a single photo but we but we can see how um okay yeah let's show us how you how we would solve it here so Harlan drum that's genius so uh the goal is to implement a function is uh pollen you know string and let's tell the system that spring is actually a springer you want to return and the Boolean palindrome so as a test case I think there was the race Carver that is a palindrome indeed and the soil very easy way would be I think this oh no there is no reverse function but um in this case let's say the definition of a palindrome as if the reversal of a string is the same the same yeah but we don't actually want to compute the reverse string because that that might be a bit expensive so let's let's check so my idea would be and now maybe dry all might be handy and I want to um compare the first character with the last character and if they are not equal then it's surely not not um palindrome because um when you reverse it the last character becomes the first and if the reversal is equals to the non-reverse string then that that's a requirement so I compare the first character with the last character and then the the second first the second last and so on and if they all agree then it's a palindrome and this is more efficient than just reversing the string and comparing them because you could figure out that it's not a palindrome much easier because you're coming in from the edges so the second that you determine that it's not you can just you're just out yeah so from a complexity Theory point of perspective it has the same rest time complexity because reversing a string is linear time and for palindrome you also have to have a look after one return yeah but in practice if you don't have to allocate new memory um that's just significantly faster so if it was a huge palindrome this would be significantly faster yeah 10 times if not 100 times faster okay so it's not a Time complexity it's a space complexity saving it's space complexity saving yes okay so um so we have a simple for Loop um very iterate over all the characters in the spring and then we have um the um I at the at the end so the at the reverse one and this is a string dot length minus I so now we compare our string at length I um the string at length I reversed and if they don't agree we return false otherwise if they all agree then we will turn true here so I think this maybe does it so let's see so I put a breakpoint here and I run let's visualize this string so this is the input race car and now [Music] um let's use um The View where we um can render pointers in a grid so that would be we want to enter I and I press all right clarify what you just did there you just destructured this the string into an array so it just makes it into an array of r a s r a c e c a r and individual spots in the array and then the second object there defines the pointers that you're using is that correct I what I point to and what I rev points to exactly they don't show up because they're undefined but as soon as I step um there's I yeah under r but now I cannot already see yeah so irev is actually outside the bounds yes so this might point to a problem here because now we compare um string at position I is r in string at position irf is it's going to always be false so this is going to return fonts exactly so now we immediately spotted the problem uh without we didn't even have to execute it just visualization was enough fast to see what the problem is actually the problem is that we have to subtract one here and this is um when the because the offset of the last element is not the length of the array but length minus one so if you have an array of length one then the offset of the last element is zero which is this confusing problem after I want it always happens to me it should have just had a race start at one and literally ninety percent of the problems in programming would go away I actually it's good that an array starts at offset zero I think for other reasons because zero plus zero is zero so you can use your offsets as a they form a group so you have a neutral element and this is very useful for some don't are there some languages where they do start a race do start at one I know there are there are I think I forgot which language there but there are the languages where you can specify it which which is nice okay this is more things for programmers to argue about it let's restart this problem here and let's see what happens yeah Lua Lua starts at one here we go now this looks much better so irf is now R and R and we compare them and they're equal so we don't return false here now we just incremented either one irf is now the um it's also decremented by one and a and a equals so this looks good subscribe okay this looks weird a bit Ah we went too far we went a bit too far so in theory it's the same because now this C equals this C and we do the same checks but now um now we basically swap these these operators these arguments and so something one optimization we can do is it's sufficient to just um go to the the middle of the array and then let's check this so here go here and here we compare e with e which technically isn't necessary but this is the last case and then we skip so this looks good oh you know what I would not have done that I would have compared I and I rev but I guess inside of foreign you can yield from a for Loop can't you yes you can just yeah that's a big fan like that was a better that's actually a more elegant solution than what I would have done which is why I'm not on the engineering team isn't it honey and then I think I think exiting the loop when when is bigger than or equals to irf would be even I think it would be cleaner because then you don't have the issue what what is what if length is um odd and then uh weird things happens actually yeah but then I would do a while true Loop maybe even so it's weird then that this condition basically is never false and if you always to the early exit and this condition is never false and then you don't then it's it's weird then you could write anything here um and falls and it would have the same effect so that's also weird codes very nice well folks that's uh that so we did dry out for for diagramming and for for uh visualizing data structures and then debug visualizer for actually using it as you move through your code you can use this when you solve your lead code problems does the visualizer support like linked lists binary trees cues um hashes the whole nine so there's a playground of RB's visualizations online so everything is open to us here the entire debug visualize and all libraries are used there are open source and in this playground you can see which visualizations are all supported um perfect so there's this graph visualization and there's a visualization for abstract syntax trees which is very useful when you try to implement refactorings and then you can actually see the syntax note and what what section of the code this syntax node refers to that's that was very helpful I'm just looking through here because some some somebody asked a very interesting questions you do can and yeah visualizations now so there are two things that you can that you can do you can Implement your own extractors and these are configurables and your settings you can point to JavaScript files that that provide some extractors and they get this object that you enter here and they can basically return a different representation um and then they can make use of all the existing visualizations and for example if you have a rich class where you just want to enter this here then you can Implement an extractor that converts this to a graph data thing but then the the graph visualizer understands and can visualize but you can also contribute custom visualizers which are then um which then extend basically this view but implementing a visualizer is a bit more complex um because you have to use react and yeah coming up of implementing visualizations is always a bit tricky but extractors are super easy but sure you're accepting contributions right now how is exactly contributions so yeah go try it out but it's going to try it with uh C sharp see how it handles and um make a PR to the debug visualizer will help more people get through their leak code questions um all right chat uh that's about it unless you have any other questions Now's the Time to get those in um but other than that we're gonna wrap it up and get to our lightning round with Henning let's do the lightning round I have no idea what planting around is bro great it's where you get to answer a bunch of questions that are controversial that you don't want to you don't want to have them you're gonna love it see here all right you ready lightning round Lights theme or dark theme and Lighting sorry Fox I can't think if I see a dark theme I feel very close but if I see a light steam it's all open-minded it can be much more creative you sound like uh headspace more more space in your mind more space to think that's interesting I've never heard people explain it that way before okay um that was the wrong answer but thank you for your answering me uh typescript or JavaScript typescript definitely types or no types types really types are the way why why do you need a computer to tell you that something is a number you know it's a number the computer should know it's easier I don't know that's the number especially if I have to deal with code that I didn't write uh then I don't know that's another one also it's not just the computer telling me stuff but the offers so many tools that are only available shift types so for me I can't I wouldn't even touch um projects that don't have tests wow all right wow wrong answer again but thank you for your input there okay coding is it coding or is it programming coding of programming it's both of me there's this there's a huge debate about out there about whether or not chat is it coding or is it programming what do you call it it's easier to speak to to just say cuttings I feel like coding is the modern take on it right like if you're programming your pre so programming development actually I prefer engineering engineering the only difference is like for engineers you have to be like licensed I feel like if we're going to be Engineers maybe we should have to get licensed now I think for me engineering is that you think that that you but you don't just coach and type it's a coding yeah but engineering is about first think about the problem explore ideas maybe even enjoy your own diagrams think about it visually and only then when when I have the feeling I understood the problem very well I start coding very very good point I agree with that um last question best language if you want to learn programming what's the best language for learning that's a good question um I could say the Lambda calculus but there might be people who disagree there the what the Lambda calculus limited calculus it's one of the first programming languages extremely simple it only has three concepts yeah so Minima syntax and it's Turing complete so you can compute everything that you like with that it only has three concepts yes it only has different color function you can define a function and their variables that's it wow okay later calculus that's it folks you heard it here if you want to learn how to program check out Landing calculus I've never heard of that in my life JavaScript I think it's a good start and then typescript and it's it's even better all right well thank you so much for being with us hitting these are great producer can we throw up the uh do we have links for Hennings extensions did we send in links there we go there's the debug visualizer does it go and then we do do we have one for Jaya there we go so AKA dynamit slash dry o slash debug visualizer that's all you have left to do is go grab those extensions today why haven't you done it already I don't know all right chat thank you for being with us Henning thank you so much I know you're busy um I'm not sure what vs code feature we're not going to ship because you had to take your time out to do it but we'll we won't uh we won't keep you any longer than we have thank you so much for your time thank you Chad we will see you back here next week for the release party coming at you yeah bye foreign [Music] [Applause]