so let's just talk about dangling pointers so the dangling pointer is a pointer that references a memory and the memory location has been freed or no longer valid so such a pointer is called dangling pointer now if we try to access the dangling pointer this can leads to undefined Behavior this can lead to crash or even this can cause segmentation fault so like example suppose we have created one pointer PTR and we are dynamically allocated the memory using M allo so the Malo will allocate the memory will return the first address of the allocated memory and that will be stored in our pointer now suppose we are using the free function and we are freeing up the allocated memory so this allocated memory will be freed up that means this memory no longer valid or does not exist but our pointer is still pointing to this memory location so this pointer is called the dangling pointer because it is pointing to a memory location that does not exist or invalid if we try to access this memory location this can cause undefined crash or segmentation fault now we are using this mloc and this will dynamically allocate the memory now we can store the value 50 in our pointer and now we can access the value of this pointer so we can say value of pointer here we can print the value of the pointer so we have to dreference the pointer so you can see here we have the output so we can successfully deference the value of the pointer now suppose we using the free function and we are freeing up the memory that is allocated by this pointer so the pointer is pointing to the location that is now freed that means this pointer is now a dangling pointer now if we try to access the value of this pointer so you can see it is showing some random value so that is the garbage value so because of this dangling pointer we can have unintended Behavior now the solution to the problem is that we can simply reassign the pointer to null this will ensure that the pointer does not reference to any invalid memory and also we can have the dangling pointer problem in case of the local variable also so suppose we have one function and inside the function we have one local variable a with the value 10 now suppose you are returning the address of the local variable now here inside the main method we're calling the function so this will return the address of this local variable that will be stored in our pointer so whenever we call the function it will return the address of this local variable now when the function call in me this local variable goes to out of scope that means the memory allocated by this local variable will be deallocated now this pointer is pointing to a memory location that has been deallocated so this pointer becomes a dangling pointer so now if we try to access the value of this pointer this will lead to error so here we're getting this error now the solution to this is that we should avoid returning the address of the local variable instead we can dynamically allocate the memory here and after that we can store value in our allocated memory and then we can return that memory address so we are returning the address that is dynamically allocated so now if we call the function we're going to have the address of the dynamically allocated memory now we can deference like this so now you can see we can access the value of this variable and suppose we wanted to free up the memory so we can use the free function and after that we have to reinitialize that pointer to null to avoid any kind of dangling pointer so dangling pointers are dangerous because they can cause undefined behaviors so because of this we should always avoid returning the address of the local variable from a function and also after freeing up the memory we should always reinitialize the pointer to null this way we can avoid the dangling pointer so hope you understand about dangling pointers see you in the next one take care [Music]