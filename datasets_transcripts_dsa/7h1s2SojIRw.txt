hi the topic is quick sort first of all let us understand what is the idea behind quick sort on what basis it works what is the base idea about it so let us take an example so the idea is if Suppose there are group of students in a class and a teacher asks them to arrange thems in the increasing order of their height there are two options a teacher can show their places like you go there and stand at the back you come here and stand in the middle or front whatever it is uh so the teacher can show places to the students this is one option second option is teacher can ask the student to arrange themselves so every student will find his place in the sorted order So the faster method or quick method will be the one if the students are finding their place so yes this is the idea of quick sort so let us see I have taken some icons here some picture here to show you now if I ask the students to arrange themselves in the increasing order of height the shortest person in the class he knows what is his place he will quietly come and stand in the beginning of a list nobody has to help him he can check himself or you are there or I am there in the class who is shortest in the class then I can know that my place is in the beginning I can simply go and stand in the beginning now if you are the tallest person in the class or a student is tallest he knows that I am the tallest of all he will simply go and stand at the back nobody has to help him and nobody has to show his place then the rest they will arrange themsel how they will arrange thems like let us take this guy what he will do he will ask these guys that you are taller than me you better go at the back and he will ask that person that you are shorter than me you come in front so others will find their places by arranging each other like suppose I have to stand in the line I have to stand in the quebe so then I will see that where I should come I will see that the person who is taller he should be at the back of me so let him go at the back and to shter person should come in front and I will find my place that is the idea of quick s now I'll write few numbers 10 80 90 60 30 20 which element is obviously sorted in the list this one 6 3 5 4 2 8 9 1 n which element seems to be sorted in one glance if you see this element is sorted how we can say that that is largest and is at the back rest of the numbers don't know whether they are sorted or not but that is sorted sure in the same way if I have the numbers 4 6 7 10 16 12 13 14 which element seems to be sorted in its sorted position this element is in sorted position because all the elements before that element are smaller than this one and all the elements after that element are greater than that element so that is its sorted position so quick sort works on the idea that an element is in the sorted position if all the elements on the left hand side should be smaller than that element all the elements after that element that is on the right hand side should be greater than that element then that element is in sorted position rest of the elements may or may not be sorted so this is the idea of quick sort quick sort works on this one and that's how the name comes quick so like students can quickly arrange themselves so that so this is the quick method for sorting but this is not the fastest method of sorting the name is quick now let us look at the procedure of quick sort quick sort is a divide and conquer algorithm it follows divide and conquer strategy so it means it will split the problem into sub problems and solve those sub problems so let us see how it works so I'll make initial setup first of all then I'll show you the working so the initial setup is this is L low that is the beginning of a list and this is high that is end of a list I have total nine elements this place is empty I have taken it now I will add here Infinity that is maximum number infinity is not defined in computer so we take some Maximum integer that will act as end of the list like in strings we have sl0 null character that is string Terminator here we have taken Infinity to show the end of a list otherwise we should know that there are n elements or 10 elements or 20 elements we should work according to length instead of that we prefer taking end of list marker then first element I will select as pivote so pyot is 10 pyot is 10 so it means I want to find the sorted position of this 10 where this 10 should come 10 should come at a place such that all the elements smaller than 10 should be on left side and all greater should be on the right hand side for that I should check if any greater number this side I will send it on that side if any smaller on that side I'll bring it in this side so for doing so I will take I starting from P Vol and J starting from Infinity I will search for the elements which are greater than 10 that is p and J will search for the element which are smaller than pivot so that they can exchange the numbers all right so I at most it will stop at Infinity J it will at most stop at P maximum if it is not getting anything it will at at most it will stop at P volt now let us see the procedure the procedure what we will do now is called as partitioning procedure first I will perform the procedure then will write then I will write down the algorithm for partitioning let us start see increment I until you find an element greater than 10 so the next element is greater than 10 only decrement J until you find the element smaller than or equal to P that is 10 yes is smaller exchange them five comes here 16 goes there one swap continue increment I until you find a pivotal element greater than pivotal element 8 is it greater than p no 12 is it greater than P yes now decrement J until you get an element smaller than P this is smaller interchange them 9 comes here 12 goes there continue I this is greater stop decrement J this is smaller stop three this side 15 that side continue is it greater than 10 is it greater than 10 yes I comes here decrement J is it smaller than 10 yes this is smaller than 10 stop here that's all don't interchange I and J element because I became greater than j i has crossed J it means we found the position of P vot what is the position J wherever J is pointing that is the position of pivot so send that element here and take 10 as this position now this is sorted this list is not yet sorted and this list is not yet sorted you can see that all the elements on this side are smaller than 10 and all the elements on that side are greater than 10 and these are not sorted these are not sorted and even those are not sorted we have to sort them then who is sorted 10 is sorted pivot is sorted this is the partitioning position this is the partitioning position this is how partitioning position works I have shown you the partitioning procedure which has worked on one list and found out the position of a pivot element now break this perform quick sort recursively perform quick sort recursively on either side so that's it this is the partitioning method this is followed by quick sort let me write down the piece of code on this one partition it takes low and high as parameter then what it does select first element as pivote so p is a of low then I was starting from here J was starting from here so I will be at low and J will be at high then what we did with I I was incrementing until it finds an element greater than P vot so it was incrementing if the element is smaller than or equal to P do I ++ while a of I is less than or equal to p v and similarly decrement J until you get an element smaller than or equal to P while a of J is greater than P so I will stop if it is getting any greater element and J will stop if it is getting any smaller element so I have written the termination condition here then what to do if I is on this side and J is on that side only then interchange the elements if I is less than J swap a of I with a of J this is just one comparison then again continue I incrementing I and continue decrementing J and compare them and swap so this process has to be repeated so I will write down this whole thing in a loop how long I should do this while I is less than J this I should continue as long as I is less than J if I became greater than J it will stop and here it should interchange swap a of low with a of J so swapping of pivote element should be done with j and return J that is partitioning position that's all this is a partitioning algorithm how quick sort works so this is just partitioning let us see how quick sort Works quick sort it will take low and high if low is less than high means at least there are two elements if so then it will call partition algorithm by passing low and high and that part ing algorithm will return J the position where the partitioning is done then it will perform quick sort on left hand side that is low to J and it will perform quick sort on right hand side from J + 1 to high that's it so it will perform this part perform from low to J and this perform from J + 1 from here to this one perform quick sort on two now one thing I can show you here this is already sorted why do you include J see right hand side list is having Infinity then where is the Infinity for left hand side list so this sorted element will help as an Infinity act as an Infinity for first list so this is a small piece of recursive quick sort which is using this partitioning partitioning was finding the position of pyot by taking in that's all watch next video for an analysis of quick sort