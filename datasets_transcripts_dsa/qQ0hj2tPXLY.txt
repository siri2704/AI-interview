so there are two ways we can implement the stack either we can use one array or we can use one linked list so in this video we're going to see how we can implement the stack using one array so first of all we have to define the array so here is one integer array with the specified size that means we have created one array with a specific size like an example suppose the array has the size of five and the array indexing starts from zero so the first El and will have the index zero then 1 2 3 and 4 now we're going to use this array to implement the stack so for better understanding let's now rotate our array so we're going to rotate our array like this now this looks like one partical container and also we are using one top pointer which will initially 2 minus one that means we are using one top pointer which is pointing to minus one so the top pointer is pointing outside of our array which signifies that our array is initially empty now we can Define all the different array operations like we can Define the push pop Peak is empty is full and so on so first of all let's just Define the P operation so here is the function to perform the push operation so here we're going to pass the value that we wanted to add into our stack so first of all we're going to check whether our stack is full or not so if our top point pointer is pointing to Max minus one Max is the size of our array so if the top pointer is pointing to this Max minus one that means our stack is full so in that case we're going to Simply print stack Overflow and we're going to return because we cannot push when our stack is full otherwise if the stack is not full in that case first of all we're going to increase the top that means the top will be pointing to this zero index and in that index we are going to store our value suppose we are calling the function push one that means this value one will be pushed in this zero index and then we're going to print the item is pushed to the stack so this way we can push another item like push two so that means first of all it will check whether the stack is full or not and then the top pointer will be pointing to the in the next index and then our value to will be pushed in that index so this way we can push multiple items in our stack on top of the previous value so let's now Define the pop operation so the pop operation is opposite of the push so using the pop operation we can remove element from the top of the stack so here is the function to perform the pop operation so first of all we're going to check stack is empty or not so if the top is pointing to minus one that means if the top is pointing into minus one that means our stack empty so in that case we're going to print stack underflow or stack empty and we can return otherwise if the stack is not empty the top is pointing to a different index in the stack so in that case we're going to return stack top minus minus that means we're going to return this top element from our stack and then we're going to reduce the top pointer to point to the previous element and you can see our topmost element is removed from the stack so that means if we call Pop the three will be removed because it was in the top of our stack similarly if we call again the pop then this time the value two will be removed from the stack and the top pointer will point to the previous element and this way it will continue until our stack is empty so let's now Define the peak operation so the peak operation will return the top most value from our stack and it will not remove the Top Value so here is the function for the peak operation so in the function first of all we're going to check if our stack is empty or not so if the top pointer is pointing to -1 that means our stack is empty so in that case we're going to print stack is empty and then we're going to return otherwise if the stack is not empty in that case we're going to return the stack top element so here the top pointer is pointing to the element three that means this element three will be returned from the stack but the item will not be removed from the stack so the pick function will return the value from the top of the stack without removing it and also we have the eful function so this function used to check whether or stack is full or not so here we're going to check if the top is Max Min - One Max is the size of our stack so if the top pointer is pointing to Max minus one that means our stack is full and similarly also we have the each empty function so this is the opposite of the each full here we check if the stack is empty or not if the top is pointing to minus one that means if the top is pointing to this minus one that means we can say that our stack is empty so this is the way we can use the array and we can Implement all of the different stack operations so when we Implement our stack using the array there are certain advantage and disadvantage so the advantage is here we can fast access any memory location using the index of that location so here we can simply access any index position by passing that index between the square brackets and also here things are pretty simple because we don't have to use any point pointers or anything as compared to the linked list and thirdly it uses less memory overhead so here no extra memory is required because we do not have the pointers and also there are certain disadvantages while using the array so here we have the fixed size of the array so we have to predefine the size of the array we cannot increase later on in our program which can lead to memory wastage or overflow and secondly no Dynamic resizing that means we cannot dynamically resize our array so here once the stack is full we cannot expand it so these are the main drawbacks of using array so in the next video we're going to see how we can Implement our stack using the linked list so hope you understand the concept see you in the next one take care [Music]