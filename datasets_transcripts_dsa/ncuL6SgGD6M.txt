yeah so welcome to durasoft online training sessions and welcome to um DSA with the Java course so myself K prakash Babu having almost 15 plus years of experience as a trainer coming to this batch the title of the course is nothing but data structures and algorithms data structures and algorithms with Java means we are going to discuss all the programs like data structures and algorithm programs by using which programming language Java so hence compulsory you should have a minimum knowledge in Java like how to execute a Java program so how to write conditions how to write Loops okay some part related to object oriented programming like uh how to create objects okay so how you can able to uh create um overloaded methods two string method this knowledge compulsory you should have so then coming to the duration of this course it is five weekends excluding to this weekend because this weekend only demo rate that's why excluding this weekend total duration is nothing but 5 weeks so the timings of this session is it will start at morning 7 a.m. okay so 3 hours session will be there so 10 or 10:30 a.m. okay so of course not every weekend this weekend demo right maybe 1 hour demo will be there but once if the demos got completed so we are going to spend around 3 hours okay so to discuss about all these algorithms and data structures whatever we have so it is a weekend session the classes will be there only on Saturday and and Sunday only on Saturday and Sunday the sessions will be there and what about fees what about fees for this I think already you have seen it is nothing but 3,000 rupees this is nothing but details of our course so if you are having any queries in this course details please let me know then I will go for the syllabus any queries right so coming to the syllabus what topics we are going to cover in this data structures and algorithms with Java course so at very beginning we are going to see introduction to data structures and and algorithms what is mean by data structure what is mean by algorithm what are the various classifications present in that data structures what classifications are there on algorithms like that after that so how to measure time and space complexities okay so these are nothing but very very important right how to calculate the time name under space complexities for example if you are taking any computer problem so you will get multiple solutions for that problem so maybe I'm going to think in one way and I will develop program for that so you can able to think in one way and you can develop one program so the output the outcome of these two programs is the same but the implementation is going going to be different so among these two which is the best algorithm or which is the best program how we can able to decide we have to calculate time and space complexities so the algorithm which is going to take less time to execute and less space from the memory that algorithm we will choose it as a best algorithm so for that calculation we need some factors like some notations are there so we are going to see how to calculate a space and time complexity for any given problem okay so after this we are going to talk about arrays there is one internal data structure language level data structure is there called arrays then we are going to talk about strings so after that bit manipulations like how to deal with binary numbers what are the binary number related operators are there so that part and all we are going to discuss here so after that recursive algorithms then backtracking backtracking algorithms so after that divide and conquer divide and conquer algorithms so after this dynamic dynamic programming so means some people may use the word called DP okay next greedy algorithms greedy algorithms next different kinds of sorting algorithms like bubble sort quick sort selection sort like different types of sorting algorithms and various searching algorithms okay after that hashing how to calculate hashing okay so how to put the records in hash Table after that very very important linked lists in that single link list is there double link list is there circular single link list circular double link list so after that stack data structure stack data structure then Q data structure how to manipulate with stack and Q so next and after that tree data structure so under that tree we are going to discuss about tree means what binary tree means what binary search tree means what AVL tree means what and Heap tree Heap tree data structure also we are going to cover it is also called as priority Q priority Q okay so after that graph data structure so in this graph we will see so how to uh Traverse BFS algorithms DFS algorithms how to calculate minimum cost spanning tree like that around some six to seven main algorithms we are going to discuss so this is nothing but the syllabus what we are going to cover as a part of these data structures and algorithms with Java so if you are having any queries please let me know so after that I will start one topic today itself any queries any queries please confirm yeah sir mainly are we covering on conceptuals or problem solvings H sir no my question is like uh uh this course is uh mainly uh on conceptual uh explanation right no no no programs also will be there on each and every topic once if the problem statement got explained I mean concept along with that program also will be there it is not Theory classer it is a problem Sol solving programming only any other queries guys and I request everyone to please unmute and speak because it is a interactive session so whenever I'm asking you should respond whether it is right or wrong so because keeping always on mute is not good right because you are learning something you should speak that way morning please I request everyone to please unmute and speak yeah uh hi my name is Kish uh first of all I'm I wish to thank to duras of providing this data structures with Java um it will be great if you please highlight the prere required concept from java site so that we can recap or refresh those things like something it could be Loop statements or condition statements uh those kind of things uh that's that's the point I wish to say thank you yeah yeah yeah okay but actually um okay whatever you told it is a correct but so this is not a core Java session if you start like a core Java it will become uh something in depth we have to move so time and even uh the importance of this particular DSA with the Java flavor is going to miss that's why so I'm not going to cover any Java related topic I will keep on writing the programs if anywhere if you are getting doubt you can interrupt me and you can ask there that particular concept I will demonstrate in Java got it yes yeah got it yeah right so now we have all these topics to be covered in these five weekends and here you can able to see there are some bunch of theory topics are there like introduction to data structures and algorithms time and space complexity calculation arrays strings so bit manipulations these things I think already you have covered in your core Java that's why what I'm going to do is so these are topics I will explain later not in demo session so today directly I'm going to start recursion topic Direct I'm going to start recursion topic let us see how it will be so from the basics I'm going to bring you okay so recursive recursive algorithms today and tomorrow we are going to see this sir what is mean by recursion but before moving to the recursion I want to take one simple Java program I want to take one simple Java program so like I'm I'm saving with test. Java you can see this is nothing but a format of java program so let me explain for one or two minutes about this program every Java program whatever you are writing it should be enclosed within a class because Java is objectoriented program without oops Concepts you can't invoke any program so I'm declaring a class the name of the class is nothing but what test so everything should be written inside class only and there is one main method like public static wide main public means from anywhere we can access static means without object we can touch this method wi means return type main is not going to return anything and Main is the method name so string array arguments is there and what it is printing system. out. print Ln it is printing Hollow world I want to execute this program so I'm taking command prompt and we created a separate folder right let us move to that particular folder so DSA with Java weekend January 2025 perfect now how to compile the program there is one command with name Javas C test. Java the program is going to compile since it is not showing any error because the program is correct how to execute Javas space test that particular message is coming here this is the way how to execute a simple Java program up to this do you have any queries right so now I'm going to take one Java program so which is printing like this main method main method execution started main method execution ended like this I'm taking see what will happen is internally internally so whenever method calls whenever method calls are happening so Java is going to create one one step stack this is called as what stack it is going to create one stack internally for what purpose to manage method calls okay to manage method calls internally what will happen so one stack it is going to be created you know the meaning of stack on the top you can able to insert that means you can able to push the objects so from the top you can able to remove the object objects that means you can able to pop the objects so now what happen first jvm will come okay first jvm is going to come what is the task of jvm it is going to identify main method in the program it is going to identify main method in the program if a main method is there that method entry will be there in the stack and it will execute all the instructions present in this main now total how many instructions are there there are two instructions are there so the output what we are getting is nothing but main method execution started followed by main method execution ended if you want you can check main method execution started main method execution ended like this just only two statements and only one method is there that's why it is printing like this so if we have multiple methods what will happen I will show you up to this do you have any queries right now what I'm going to do is I'm creating one more method like public static wide method one method one or in the the short form let it be M1 M1 so inside this I'm printing some statement like um method M1 execution started so method M1 execution ended like this so in between these two lines I'm going to call M1 now very very important observe carefully so first first what will happen jvm will always search for which method main method and it is going to start its execution so inside main method there are three instructions are there so first this line is going to be executed then very very important sir we are calling another method right so what will happen the control will move from this line to where the M1 method is there it will go there now in the tack it will create another entry sir main is calling which method M1 method main is calling which method M1 method then M1 method is having two lines so these two lines will be displayed in the output is it calling any other method no like that it will be then very very important step before coming to this okay before coming to this what will happen it is is going to check is there any pending instructions that we have to execute no sir no pending instructions then it will delete this entry from the stack and who called this M1 main it will report to the main in the main is there any pending instruction yes that will be executed now and this main also will be deleted and it will report to the jvm saying that my program execution completed so this is the first line Second Line third line and fourth line as a output what you are going to get everyone clear yes yes yeah sonali please uh go through the recording or remind me in the last because we are in the middle of class again I can't explain from the beginning okay please wait so at the end I will explain sir clear everyone up to this now so let us execute this program and check really is it coming or not now have a look on so you can see main method execution started method M1 execution ution started method M1 execution ended main method execution ended like that it is printing so how the method calls are happening I'm trying to demonstrate now so another example just by adding one more method I'm going to demonstrate so what is that one like this I'm trying to create one more method method like M2 method M2 execution started M2 execution ended okay so inside this M1 I'm calling M2 sir now how the flow of control we know very well so first what will happen jvm will always search for which method main method so jvm is going to make that entry inside stack then what will happen so it will execute this line as a first one then from here we are redirecting to M1 since it is a method called corresponding entry it will maintain then this line it will execute after that so it is calling to some other method that is M2 now M2 method will come into the picture in the M2 whatever instructions are there it will execute is it calling any other method no that's why all the instructions will be executed so before returning before returning to the caller it will check is there any pending instruction in M2 no then delete what is a recent method call M1 so it will go there in M1 is there any pending instruction yes that will be executed now then delete this entry and come back to main is there any pending instruction in main yes execute that delete this entry and report to jvm saying all instructions are successfully executed sir clear the flow of control please confirm yes correct sir yes sir so how the redirection is happening from method to method and how these entries are stored inside stack is important so based on this only the total recursion is going to run if everyone clear then I will take one more example after that I will go to the concept clear yeah yes sir now you can see is my expected output is coming I think I didn't saved the program now you can see main method execution started after that method M1 exec ution started after that method M2 execution started after that method M2 execution ended method M1 execution ended main method execution ended like that we have this is nothing but the flow of control okay the flow of control what we have then so I will add one more method and I will show you how it is going to work work we have M1 method M2 method let me Define M3 M3 so method M3 execution inside this we are calling M3 now I think no need to give any explanation so you know what output we are getting first main method is going to start then main method M1 method it is calling M1 execution started M2 execution started M3 started after starting all these things then M3 what is the most recent method M3 M3 is going to end then after that M2 after that M1 at last main method in which order the entries are stored inside stack in that order only execution is going to complete so these are nothing but example programs like how internally method calls are going to work if if you want to trace that what you need to do you have to create a stack because internally all method calls will be depends only on which data structure stack so everyone clear means then I will start our main topic today any queries I need response from everyone any queries thank you right so now I'm going to give some notes I'm going to give some notes on recursion now observe carefully what is the first point here is a method can call another method correct sir please guide me is it correct a method can call another method right uh can you please tell me a method can call same method also am I right yes because if there is any M1 method here itself you can write M1 so that what will happen it will execute this line and it is calling again the same method again it will execute this me this line again we are calling the same method yes a method can call same method also here a method which is called which is called by itself is called as recursive recursive okay recursive method a method which is called by itself is called as what recursive method and this process is called as this process is called as what recursion whatever task that you are invoking here that process is called as what recursion that process is called as what recursion and very very important recursion okay before that let me go the program sir do you have any doubt in these four points no no sir clear understand it right now observe I'm going to take only one method here like uh main method inside the main method I'm calling one method what is the name of the method is M now inside this y method just I'm printing the message called hello now tell me what is the output you will get sir hello yes it is going to print just hello now now what I'm going to do is after this I'm not calling another method I'm calling the same method first point in your mind is it correct yes the program is compiled but what is the output that you are going to get observe carefully observe carefully so first jvm is calling which method main main is calling which method m y m is calling which method m m so again it is calling m method again it is calling em method so like that it is a NeverEnding process remember carefully in Java not only in Java in every programming language some memory will be allocated for a stack so that means only limited frames limited entries it will store not all the entries so if we are trying to store like this then what will happen one error will come what is that error is nothing but stack Overflow so we are going to get which error stack Overflow error let us execute this program and check really is it happening sir my stack size is very big that's why these many times it is executing my stack size is very big that's why these many entries it is holding but you can see at certain point it is a stopping sir where you can see all the entries are there but where it is a stopping have you observed here there is one runtime error my stack is unable to store what is that error we are getting stack Overflow error so this is nothing but the output what you will get in this yes okay so let me add that point so recursion recursion always leads always leads to always leads to stack Overflow error stack Overflow error so how you can able to stop this if we want to okay if we want to stop this if you want to stop this so we have to use base condition we have to write a special condition to stop this recursion how to write that I will explain so um sir everything is okay everything is okay but really where we are using this recur so some people may have a doubt like sir some sometimes faculties are telling you have to implement this particular program by using recursion so we have to implement this particular program by using recursion sir I can able to do the program without recursion also then why recursion you need to introduce there are some problems which you have to solve only by using recursion some programs you can use recursion as well as iteration so in that when compared with recursion iteration is going to play an important role because iteration is very easy but there are some scenarios where compulsory we have to use recursion only so we are going to see around 20 to 25 programs purely on recursion so you will get a clear Clarity on that purely on recursion I'm going to demonstrate some programs so where you will get much Clarity don't worry at all soon we are going to talk about that okay so then when we have to use a recursion see assume they have given some numbers like 10 so plus 20 Okay Plus 90 so plus 70 so plus 30 so plus 25 like that they have given some numbers they are asking me to add these two numbers can I use recursion yes what is the format sir If You observe the format is a plus b first time let us consider a as a 10 b as a 20 addition we are doing whatever result you are getting assume that it is a can I say this one as a b you can add whatever result you are getting assume that it is a we can add with B whatever result we are getting you can assume it as a a you can add with B whatever result you are getting you can assume it as ADD and we are adding with B so whatever result you will get that is nothing but the final output sir is there any pattern yes what is that pattern every time two numbers we are adding this is the pattern so like that in the programming if there is any pattern then only you have to go for which one recursion so everyone understood yes yes please confirm clear everyone yes let me add that point okay so if we have okay if we have a common if you have a common pattern if you have a common pattern so then recursion is best choice if you have a common pattern then recursion is the best choice what you are going to get so for this this is nothing but example program so just I have given um the conclusion related to the recursion if you are clear then I will explain some two cases so then we will see the remaining things next class sir clear up to this yes sir right so there are some three cases are there let me discuss about those three cases so case one what is the first case here is based on based on number of method calls based on number of method calls so we have two types we have two types of recursions are there based on method calls so what is the first one finite recursion what is the second one infinite recursion there are two types of recursions are there first one is nothing but what finite recursion second one is nothing but what infinite recursion so I think already we covered uh let me write first infinite then finite so already we have program for infinite recursion so easy is it going to execute at certain point no there is no stopping point so then how you can able to stop this how many times you need that message so you can fix here sir I want to execute five times then we are passing some value right that value you have to receive here let it be integer n sir after printing what I'm going to do is I will call for M minus one observe carefully I'm taking both stack diagram as well as normal diagram both I will explain so first in the stack what will happen so we are calling main method okay so main method is calling a method with five it is calling another method with four it is calling another method I mean same method with changing the parameter it is calling another method like two it is calling another method like one so 1 2 3 4 5 we have to stop here how to do that now observe so first we are calling M of a five it is doing two activities what is the first activity it is printing the message called hello what is the second activity it is calling for 5 minus one again it is a recursion right it will print a message called hello and it is going to call for M of3 again it will print a message called hello and it is calling for M of2 it is printing a message called hello and it is calling for M of one it is printing a message called hello and it is calling for M of Z if you count 1 2 3 4 5 our requirement fulfilled right so whenever we are getting zero so we have to stop we have to stop so this condition is called as base condition this condition is called as what base condition we have to write the condition for stopping sir is the diagram is clear for everyone yes right so what is that base condition at very beginning I am checking is the value of n is equal to Z means tell me which keyword we have to use to come out from the function anyone break no sir break is used only inside Loops exit no exit will permanently stop V please speak what is it St very good so we have to use which statement return that's all is it rning any value no simply we are stopping now see what will happen if you are not keeping return it will become infinite if you keep written then it will stop exactly at five times so assume if this one is not there okay if this statement is not there then what will happen is it going to stop never never okay so like that we have so I hope everyone got Clarity so what is mean by infinite recursion and what is mean by finite recursion how to write base condition any queries clear so just I'm these recursion so these recursions uh and all will be useful in the case of sorting and all right oh yes if everywh sir uh to be frank to say without recursion no DSA program will be there okay because um if you take DSA problem itself it is a most complicated thing right right so see they are going to give uh one one pattern ABC they will ask you to generate all possible combinations of this string like ABC so a CB okay uh B A then B CA then C AB CB seems to be it is very easy we can think and we can write business Logic for this but sir if the input string is like this you can imagine how many combinations you will get got it sir so in such a cases if I apply recursion whatever pattern I app for these same pattern will be there here also right right right so that pattern you need to identify so anyway this application is also there sir we are going to discuss so clear up to this any queries so I have captured this screenshot also I will sh after completion of the class so this is nothing but what is mean by finite recursion and what is mean by infinite recursion so let me add one point related to the base condition sir what is mean by base condition so here to terminate okay to terminate or to stop recursive to to stop recursive process we have to supply okay an explicit we have to supply an explicit condition while defining while defining the method calls so this condition okay this condition is called as what base condition so without base condition is it possible to complete the program never sir okay in this example that n is equal to Z is there right that is called as base condition if you are clear with this then I will take next case clear clear right so case two what is a second case here is based on number of methods based on number of methods so we have two types two types of recursion is there so what are that I don't want to go for programs for this only theory part I will explain what is the first one direct recursion second one is indirect recursion so let me give example for direct recursion what is mean by direct recursion I have a method is there so inside that a sequence of instructions are there again I'm calling the same method this is called as direct recursion whatever topics I explained today is related to direct recursion so what is mean by indirect recursion I have a method M1 is there so inside that we have some instructions it is calling another method so what is that method M2 now inside M2 so we have some few instructions are there so after these we are calling M1 have you observed so one method is calling another method that method in turn calling the first method so it is a never ending process it is keep on calling like that so this is also called as what recursion understood everyone only theory part clear guys yes I request everyone to please confirm clear yeah yes yes right now so case three what is the third case here is based on based on the place of recursive call based on the place of um recursive call recursive call we have we have two types of recursion based on the place of recursive colum what is the first one tail recursion is there second one is nothing but what non-tail recursion based on the place of method call okay so based on uh the place of recursion where you have okay um we have this particular concept so now have a look once sir I will take one example then only you can understand where observe carefully so here instead of printing hello instead of printing hello along with this hello I want to print the value of n also okay I want to print the value of n also now observe carefully what will happen so please wait I will explain in the ending please wait now tell me how the method calls is going to be happen so first we are calling M off so let us take three I'm explaining for three now what will happen it is printing a message called hello so followed by n value at this point can anyone tell what is the n value three three very good now what will happen we are calling M of two again it will execute sir tell me at this point what is the n value two two now it will be called M of one so at this point what is the n value one one now M of zero whenever is zero coming we are stopping correct so what is output of this program if you see the order it is printing hello 3 then it is printing hello 2 then it is printing hello one like that we are getting the output this recur is called as what tail recursion or non-tail recursion it is a tail recursion it is a tail recursion you can see sir how you can say it is a tail recursion the definition is very simple sir what is a definition inside method call okay inside recursive inside recursive method so after inside recursive method so after recursive call after recursive call if we are not taking if we are not taking any instructions then such a type of okay then such a type of recursion such a type of uh recursion is called as tail recursion is called as what tail recursion sir this is nothing but examp example program for tail recursion okay this is nothing but example program for which one tail recursion so here it is tail recursion so how you can say because this is the recursive call right so after this recursive call is there any statement no sir then it will become what tail recursion so if you want this is the output what we have so everyone got it yes got yes yes sir I I got the logic and what you are explaining just a basic question please don't mind why it is why this concept is called recursive because a method is called by itself right what is a method name y we are calling the same method inside that method hence it is called as recursion recursion means what calling the method by same thing okay if you are calling another method it is not a recursion okay okay sir yeah and yeah uh let me have a more clarity this kind of application and this kind of logic in real time where we will use there are so many computer programs are there applications are there we are going to use these kind of things you will get more Clarity once if you see the example programs okay okay sir thank you right so duration of the course is 5 weekend please wait you'll get clarity yeah now let us go for another one what is the next one this is nothing but tail recursion now we have to talk about non-tail so what is mean by non-tail can I take the same definition if we are taking any instructions then it is called as what non tail okay if we are taking any instructions after the method call now just I will remove this line and I will keep here now see is there any changes in the program definitely first let me draw the diagram you will get more clarity I'm I'm keeping this diagram also why because this diagram is for what tail recursion let me draw non-tail recursion so that you will get clarity so I'm drawing the diagram for non-tail recursion so first what will happen we are calling M off so three now how many instructions are there two instructions observe carefully we are calling M of two we are not printing anything so after this it is going to print no it will go to the method now what will happen M of 2 is calling M of one so M of one is calling M of Z so it will stop up to this clear sir where is the m of one and mf2 and M of Z where it is there where it is calling from actually I'm join little late so sir you please refer the video internally stack will be there sir inside that stack it is going to store at very beginning I explained that okay please go through once you will get clarity sir clear everyone yeah correct now what will happen so if you want have a look one sir I'm drawing the stack please listen so what will happen first M of three will be stored inside this then it is calling which method M of2 it is calling which method so M of one sir it is calling which method M of Z and you can see there is one base condition what is that base condition n is equal to Z then return come out so this entry completed then after coming out from this it will check for M of one call is there any pending instructions this instruction is pending rate correct sir please confirm that that not printing now yes that's what I'm telling because here itself recursive call is there so that's why it is keep on moving but after this one line is there right when it will execute once the total recursion completed then while coming out one by one it will execute got it now for M for n is equal to 1 this line will execute one where sir here what it will print so hello one it is going to print so in the output what you are going to get so hello one okay completed then who called M of One S M of two called in that M of two from here itself I went but this line is not executed right for M of 2 also what will happen so it will print hello 2 so the second output what we will get is hell to then it will delete this entry and it will go for m of3 is also it is not executed right so it will print hello 3 so in the output you will get hello 3 and that entry will be deleted and it will report to jvm clear sir so if you are taking any statements before recursive call output is different if you take any statement after recursive call the output is different that deviation you need to understand clear guys please confirm if you are clear I will execute this code and I will show you the output clear yeah clear right now so I'm going to run this code observe carefully sir is it printing from 1 2 3 4 yes this is nothing but what we have I hope everyone feeling comfortable up to this so don't worry once if we see multiple example programs on this stale you will get more clarity so we will discuss about that programs soon so any questions clear clear guys please confirm yes yes clear understand it right so now with this so I will stop our session and before stopping just let me give again some people are asking regarding the details of the course so the course title is data structures and algorithms with Java it is a five weekend batch the sessions will be there only on Saturday and Sunday okay the timings of this batch is from 7 a.m. to 10:30 a.m. okay so fees will be 3,000 rupe so from next week the regular classes are going to be started today and tomorrow demo will be there so after completing the demo if you make the payment we will share these recording videos running notes and also next class link and all okay so tomorrow we are going to spend around 1 and a half hour or two hours so to complete the applications on recursion okay guys yeah sure have one question without java knowledge cont this course can be understood are you understanding now yeah yeah I'm I understanding yeah then okay no problem that is depending on us sir because if you can able to understand and you can able to do the same things in your system means then it is fine well and good because okay you can see the program whatever I have written is completely in Java right if you don't know Java it will be difficult okay yeah assume that I have some little knowledge on AB okay ab and python but yeah I have zero knowledge in Java but uh am I going to but today I'm okay yeah if it is okay then no problem okay thank you sir I'm having one actually request actually I'm having uh some work uh what you say I mean in office uh there is some kind of training which is going to be happen on 8th and 9th February and Sunday so if so if everyone okay then can we skip that we can so so that no no sir it is not possible compulsory sessions will be there suppose if I have any issues then I may uh post on the class like that but for students sake it is not possible so you can go through the recording before coming to the next week you can go through the recording and if any queries are there we will clarify that in the class okay uh so this recording means after uh making the payment and all this recording will be yes sh by yeah yes okay okay and in five weekends this weekend will not be included right yes ma'am because it is a demo class right it is not included and don't don't stick on to this exactly five weekends maybe plus or minus one will be there okay focus on the content rather than [Music] duration any other queries uh uh I in my view I have one query so just now mentioned I'm working person so sometimes I will have the release supports till late evening late nights like morning 3:00 or 5:00 that time I will miss even though record is there uh can I take the next batch time the same classes no no no I believe I believe during your class I will note down the points and practicing I will do sometimes record now I may go like a uh so I if you if you are missing any live class just go through the recording uh immediately so you have one week time will be there right suppose if today and tomorrow Classes are there means so the next class will be on next weekend so you have almost five to six days time will be there in that time just refer the video okay and before coming to the next class if you have any queries on that we will resolve that okay okay noted noted yeah uh okay sir one last so you basically I mean by uh by your only Java classes is being done or any other courses for you uh Java python DSA and database related Oracle these things I'm taking not with not with any like uh phrase like as of now there is no Frameworks I'm taking sir one final question from my side so yeah actually I understood why the Python Programming has come and the Java has come and all but uh uh why this data structures and algorithms uh uh we have to learn can you please just briefly uh sir actually um if you want to join in any product based company uh you need not only programming language you need some uh problem solving skills also like suppose if any real time problem is coming how you can able to solve that for that these data structures and algorithms knowledge will be helpful that that point what whatever you asked once if the course got finished you will get clarity how you can able to think and how to design the patterns and all you will get clarity because at very beginning I can't tell sure Real Time problem can you please give an example at least one uh sir so that we can that depends on the problem what you are getting see there will be some hundreds of patterns will be there okay so depending on the scenario which pattern you need to apply you will get Clarity I told one example today so recursion and even that ABC okay so depending on the problem only you can able to okay okay so don't compare everything with example sir because once if you understand the scenario then only the examples will come sir sorry for interupting so actually to answer this question I mean if you just look for any big companies like you Google Microsoft and top BAS companies of the world they don't care that which language you know is in python or jav they only stick that how strong you are in the data Str so this is the backbone of everything I mean if you know very good programming and you don't know data seure so you just think it is zero yes exactly because programming languages is nothing but what just it is a kind of communication right so data structure and algorithms you can Implement by using any programming language not only Java so even in the evening I'm starting one batch today evening 5:00 so Python and data structures with python so D the syllabus is common the topic which I'm going to demonstrate for them also same but the only thing is nothing but what I will change the programming language programming language is just a tool so data structure is very very important okay here today session you taken direct concept to recursion algorithm but tomorrow onward after session start introduction to data it will start right sir actually demo means generally some faculties they are going to take demo means some random topics they will choose from different different uh chapters and they will demonstrate once if the regular class started they will start from the basics but that is not my style I won't pick up the r random topics so I'm starting the first chapter but first chapter is unfortunately completely Theory right in the demo if I take only won be good that's why I started already one topic called recursion noted so we are not going to cover this recursion again okay so if you are missing the demo class also it will be dra so you need to attend regularly already we started so tomorrow around 25 applications I'm going to explain on recursion so one by one I'm going to demonstrate tomorrow tomorrow session will be there for 1 hour or one and a half hour or two hours depending on the topic okay so this recording you will share today uh this recording maybe they will upload in the YouTube because today is the demo session right that's why so the next videos you will get in the drive only after making the payment okay will we any notes yes definitely ma'am after completion of the session I'm going to update the notes so that you will get uh from the next week so you can see I'm going to share uh Google Drive so for everyone I will update in that only you can see like that so you can see the programs also here like single Linker list program everything I'm going to type with my own hands and I will demonstrate and if anywhere some images are coming I'm going to draw that images and I will share that images also like that sir currently I'm pursuing B second here sir uh sir I have like I'm good in DSA concept but I can't solve a problem sir could you suggest me how can I sir definitely sir if you are if you are in second year uh it will be very useful this course just join in this course and practice the problems whatever I'm telling and there are some platforms like lead code hacker rank hacker Earth So based on recursive some thousands of programs are there what you need to do is select any one program and think you can able to solve that or not but don't solve parall or before after completion of the course if you start then you will get some knowledge so parall if you start you won to get see for any anybody some guidance must be required so once if you are clear with some basic topics then going for the applications will be good parall if you start you won't get the concept clearly okay okay sir thank you right so then yeah the data structures DSC with the python also important right in case of going for AI and ml related yes yes exactly yeah okay the fundamentals may be same but the environment would be different yes yes concept is the same the implementation which I'm taking is going to be different but if you learn that would be always beneficial yes definitely sir definitely okay thank you right guys so with this I'm stopping the demo session so tomorrow as usual we will meet at 7:00 please join 5 minutes before we will start at sharp 7 thank you thank you