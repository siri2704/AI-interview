five years in computer science well I have made a ton of mistakes so hey everyone how's it going my name is Anu and welcome back to my channel in this video I want to talk about the five mistakes that I have made in five years of computer science so honestly it hasn't always been a smooth sailing I have made tons of mistakes and I continue to make mistakes but I wish someone had told me about this sooner so I wouldn't have made as many mistakes that I did so in this video with we're going to be talking about what are some mistakes that I made and what are some things that you can learn from my mistakes so that you don't repeat the same thing so without further Ado let's Dive Right In before diving into the video I just want to say that if you like my content if you like the videos that I put out do subscribe to my channel like this video and share it with your friends as well and comment in the section below like some things that you would like me to talk about and I'll make sure that I make a video on that now let's go ahead with the video so coming to the first mistake that I have made in computer science is not knowing which language to start with or getting confused by the ton of languages out there but here's the deal every language is same The Core Concepts like the variables the conditional statements the data structures the algorithms all of that is the same across every language so honestly you'll see a ton of opinions out there by people telling you that JavaScript is best C++ is best or Java is best but the truth is that each and every language is the same and the core point is to just start coding so I wish I didn't spend so much time worrying about whether I have chosen the right language or not because there is no concept as a right language language is a tool and anything that helps you code anything that you're comfortable and anything that you like coding in that's enough that's the only thing that you need to worry about and personally for me as well I had started coding in Java but there were a lot of opinions some people were saying that C++ is good some were saying that python is good because AI ml is related to python I was confused and I was in that state for a very long time but the truth is that you just need to start coding and once you gain that momentum once you learn one language it's very easy to pick up other languages as well so I shared this previously in one of the tweets that got a lot of views as well that in just five months at Google I had worked with over 10 programming languages so as you can see the programming language which really does not matter what actually matters is whether you understand the core computer science fundamentals behind it whether you understand what the code is doing given a problem can you convert that solution with any programming language and that programming language is totally up to you so I wish someone told me that don't obsess over the language just start coding pick any language python Java C++ are the three best things and I would suggest that if you are able to pick up a language within these three things you're golden that's all you need so don't obser over the language just start with one coding language and you'll be able to do great and I wish someone told me that so I didn't spend so many months wondering which language to start with because there's no perfect language just choose one among these three python C++ and Java and the rest will come very easily to you so that is the first mistake the mistake number two shiny object syndrome so what shiny object syndrome is that I would pick up one course then move on to the next then move on to the next some friend would suggest hey you're doing this but the other course there is teaching things in a better way or there's this latest JavaScript course that has come that you have to do and then there's a d course in Java that you have to complete that I was moving on from one course to the other without finishing anything so the course the second mistake that I have made is that moving on to next thing without finishing the previous one and trust me there are tons of courses in the market there are so many courses every day someone is launching a new course someone is launching a new playlist and you will get distracted by all of these opinions but the truth is and the only thing that has mattered is that you pick a course and you complete it from the start to the end and that's the only thing that matters and that has something that is something that has helped me as well so initially I was distracted by the courses in the market and I wasn't sure about which one should I pick which one is the best one for me oh maybe this new one has dropped maybe I should go ahead and do that and this is known as a shiny object syndrome so what that means is that always you keep moving on to the next shiny object or the next shiny thing in the market so don't get Dro don't get distracted and all of that don't get distracted by the tons of courses out there just pick one course make a commitment to yourself that if I have picked something that's related to Java I'm going to go ahead and complete that and once that is done only then I'm going to move on to the next course and that is something that helped me immensely I started seeing the progress that I was making and I started seeing that Improvement in myself in coding once I started finishing courses from the start to end so let's take data structures and algorithm as an example so there are so many playlists out there but I just picked one playlist I picked one book and I picked one platform for coding right and that has made all the difference just choose that one make sure you're committed to it make sure you're completing it from the start to the end and that's all that matters you don't need to worry about the new courses that are coming or whether the one that you have picked is right or not because the key is to not get distracted the key is to stay committed to that one thing and and just doing that and leaving the rest leaving everything else is noise so don't get distracted by the courses in the maret just choose one that is good for you and yeah just stick to it and you will start seeing the results you will start seeing improvements in your coding skills once you start completing and finishing coures okay you guys this one is huge I did not focus on writing clean and better Cal honestly I was just happy that it's working if it's working without any errors that means it's good good right well wrong good code is all about writing documented code writing code that has good variable names it's divided well into classes methods and that's what all clean coding and writing good code is all about but I couldn't care less about that when I was in my college and honestly when I did internships at Big tech companies later on it kind of was a disadvantage for me because I wasn't I didn't know what good code is I didn't know what clean coding is and I learned it along the way and helpfully thankfully I had good mentors along the way in the internship that didn't actually take this in a negative way and were ready to help me and were ready to help me learn what clean coding is and good code is but if you are someone who's in computer science and you are currently in college I would suggest that please please focus on writing good and clean code trust me it's going to help you a lot later on and these are some things that people look for even an interviews so when you're giving interviews for big tech companies one of the parameters they judge you on is writing good and clean code and trust me I'm currently an interviewer at Google as well this is a very important thing that candidates most of the times miss out but don't miss out on that focus on writing good and clean code there is an awesome book called clean coding I don't know the author's name but I'll make sure that I write it in the description below and you should go ahead and read that book as well it's going to help you understand what all clean coding is about and honestly everybody can code but not everyone can write good code so that's the art write writing good code is the art and you have to learn that because if you don't learn it right now it's going to come and bite you in the back later on so this is one thing that I never focused on I never focused on writing good clean code because when you're doing data structure algorithm problems all day or when you're probably participating in a hackathon you just want the code to work because the end result is that if you're doing a DSA problem the end result is that the test case is passed and when you're doing in a hackathon the end result is that the project is working the Prototype is ready and you really don't Focus on the clean variables or writing good documented code or just probably dividing it into classes and but when you start working as a software engineer in big Tech this is a very important skill and if you aren't good at it it will affect you some or the other time so make sure that you're building that skill right now make sure that any code that you write just do a quick walk through of whether it's according to good clean standards and if it's not just try to refactor it honestly it doesn't take a lot of effort but if you start doing it consciously right now if you start building that habit of writing good clean code it's going to help you later on as well so start building that habit of writing good clean code and don't make this mistake that I did that I didn't focus on writing good and clean code so that's mistake number three that I wrote code but not good code mistake number four not focusing enough on debugging skills honestly I would write code and if it didn't work I would probably just change a few random things without really going in depth and understanding why things aren't working so when you're debugging having going through the stack Trace going through the logs adding additional logging these are some simple ways through which you can actually learn debugging skills so learn how you can go through the logs learn how you can emit additional logs how you can add break points into your code to debug so learn how you actually can debug your code so I know that there are AI tools out there which will actually help you do that now and you can just probably take the code and take the error as well and put it into an AI chatbot and it'll give you the exact solution but I would say that if you truly want to become a good developer focus on debugging skills a lot and not just random debugging skills but also understanding why things are failing like what is it that you did wrong and why is things not working as expected because these are some skills that are going to help you later on as well because when you're a s full-time software engineer and there are production outage is AI is not going to help you debug it so you need to put in that work right now put in that work into debugging and honestly I did not do that a lot and later on when I started doing internships when I'm currently working as a full-time softare engineer as well I realized that 20% of your time as a software engineer is coding 80% is debugging as you can see debugging is very very important but that is not something that we genuinely learn in college or when we are doing computer science so I would say that if you're able to take out that extra time to learn coding learn debugging it's going to help you a lot so that's mistake number four that I didn't focus a lot on debugging and looking back I feel that it's a very important skill even much more important than coding itself so you should definitely do that focus on debugging and yeah I think it's a very important skill that people don't generally focus on and you if you are able to learn debugging you'll be able to code better as well you'll be able to understand why things are not working and you will not just understand why you'll also understand a lot more computer science fundamentals as well so focus on debugging it's a very very important skill and trust me I wish someone told me this sooner so that I paid more attention to debugging and not later on when I started working full time so yeah that's mistake number four that I didn't focus a lot on debugging and it's very very important okay mistake number five not learning enough skills outside of data structures and algorithm so I was totally and solely focused on excelling data structures and algorithms and don't get me wrong that's not a wrong strategy it paid off well I was able to crack offers from Big tech companies because that is what they generally focus on but there are a lot of other important skills outside of data structures algorithms as well so learning new technologies participating in hackathons so when you participate in hackathons you build teams you interact with people you present your ideas there are so many skills that you learn outside of coding when you're participating in hackathon and that is something that I did not specifically do a lot honestly I did not focus a lot on hackathons but I wish I would have done that because it would have taught me how to work with teams how to present your ideas how to build a complete solution from the start from the ideation to the code completion to the prototyping to the presentation and these are some things I would say that hackathons on a mini version of software engineering and even though they can't teach you everything they do teach you a lot so I wish I participate in more aons I learned more new technologies outside of just data structures and algorithms but my sole Focus was cracking these big tech companies and while I was so focused on that goal I was able to achieve that goal but at the same times I feel that I could have learned a lot more other skills that I probably did not learn and now as a full-time soft engineer or doing doing internships I learned all those skills in the job but if I would have learned that earlier on it would have benefited me in some or the other way because I knew nothing about development I knew nothing about software development the only thing I was good at was tracking DSA problems and it did pay off but then again I wish I learned that other things as well so that it would have helped me in my full-time software engineering role as well so the other thing that you can focus on along with hackathons is participating in open source so open source code and participating in open source is a great way to again work with the people and understand huge code bases so when you join tech company you'll see that code bases are very very large and honestly inverting a binary tree is not going to help you so if you participate in open source you'll you can build a habit of skimming through large code bases you'll know exactly what you're looking for and you'll be able to go ahead and find that you'll build up that habit and that Knack of problem solving where if you you know you need to do this bug fix or this feature ad you know exactly where you have to make those code changes you know exactly what you have to do so you will be able to work your way around huge code bases with ease and that is something that you can learn from open source so there are tons of Open Source programs out there there's outreachy there's Google summer of code there's mlh Fellowship as well these are the ones that I know of and they have applications open around all the year so just keep an eye out for these applications and go ahead and apply to these opportunities because nothing can teach you more about software engineering than participating in open source and hackathons so don't be like me participate learn other skills outside of data structures algorithms as well because honestly that's going to help you a lot so that's mistake number five not learning enough skills not learning enough new technologies and now with AI also and ml also come with so much Buzz around Ai and ml I would say that you should go ahead and check out those Arenas as well and it will definitely help you a lot so that was it for the video those were my five biggest coding mistakes that I have made in five years of computer science and uh trust me I was a noob when I started coding so in my school as well I did not have any computer science background so my first year of engineering was the only time where I actually learned coding where I learned what this field is all about and I made tons of mistakes along the way and I personally did not have a mentor who can tell me all this but I hope I can be that one for you so I just wanted to share my mistakes learn from this don't repeat it make your own new mistakes and yeah if you like this video subscribe to my channel like this video and in the comment section tell me what's your biggest coding mistake or what is something that you have learned from this video I love to read all of your comments and I love to interact with you all so do go ahead and do that and I will see you in the next one until then bye-bye