so let's just talk about the stack application so let's just see how we can implement the undo and redo operations using the stack so as we know undo and redo means so whenever the user performs any action so if we perform some mistake we can easily undo that using contrl Z and also we can redo that user acction by pressing crl y so let's just see how we can implement this undo and redo operations with the help of Stack so the undo and redo operations can be implemented with the help of two stacks so we have to maintain two stacks one is for undo operations and another one is for redo operations so this is our undo stack and this is our redo stack now let's just see how that is working so whenever the user perform any action so suppose the user is typed a so the a will be pushed into the undo stack and then if the user performs the X and B then the B will be pushed into the undo stack and if the user performs the X and C then the C will also be pushed into our undo stack so the undo stack will store all the user accents like typing deleting or any action now after that when the user presses contrl Jed to undo that operation then the last action from this undo stack will be popped and it will perform the reverse of the action and then the xn will be pushed onto the redo stack similarly again if the user presses contrl Z so the last accent from this undo stack will be popped so the B will be popped out of the UN the reverse of the ation will be performed and then the ation will be pushed onto this redu stack now suppose the user thinks that everything is fine let's just redo the action so in that case the user will press control y to redo the operation so when the user performs the redo operation first of all the Last Action from the redu stack will be popped out that means the operation B will be popped out from the redu stack and then the user acction B will be applied back and then it will be pushed into the undo stack again if the user presses control Y and try to redo the action then the last undone action from the redo stack will be popped out from the redo stack and it will reapply the action and then it will be pushed back into the undo stack so this is the working of the redo and undo we just have to maintain two stacks whenever the user undo any operation then the user action will be popped from the undo and pushed into the redo now whenever the user redo some operation the action will be popped from the redu stack and it will be pushed into the undo stack so with the help of this stack based approach it ensures that we have efficient and structured undo and redo operations so hope you understand about how the undo and redo operations are performed with the help of two stacks see you in the next one take care [Music] I