No matter if you're in your 1st, 2nd, 3rd, or 4th year, whether you’re pursuing BCA, MCA, or B.Tech, college is about to start, or perhaps it already has. In any case, one essential thing you must focus on in college is DSA (Data Structures and Algorithms). The job you’re aiming for or the tier of college you're in will determine when you start focusing on this, but at some point, you’ll have to get into DSA. For that, I’ve prepared a proper DSA roadmap for you, along with ways you can leverage AI to study DSA more effectively. This video covers everything step-by-step, including prompts. So, hi everyone! I’m Nishant Chahar, a former software engineer at Microsoft, currently building Algooprep and Tayari. Let’s jump into the video without delay. There’s also a challenge in this video. We’re going to start a 90-day DSA challenge. I’ll explain exactly what we’ll do each day over these 90 days later on, but a key point is to start this challenge, where winners will receive a subscription to Algooprep X—more on that soon. To begin, the most important thing before diving into DSA is choosing a programming language. If your goal is a high-paying position in a top company, like those offering packages between 6 to 30 lakh per annum, the choice of language doesn’t matter too much. What matters is whether you can solve problems effectively. If you can solve the problem, the language you use doesn’t make a big difference. So, don’t waste time debating between Java and C++. Pick one, and I’ve provided resources for both to help you get started. I’ll show you these resources quickly. You may be watching this video in 2024 or 2025, but whenever you’re watching, you can follow this roadmap to build your DSA foundation. Additionally, I’ll cover other important things. Starting with Java resources: if you click here, I’ve made a comprehensive Java playlist, covering everything from Java basics to advanced problems, including dynamic programming (DP). The playlist includes foundational Java content, and I've linked resources covering various topics. You can learn Java fundamentals here. Similarly, I've included a C++ basics playlist, covering core concepts like arrays, strings, pointers, variables, loops, and conditional statements. Choose one of these languages and spend about 5-10 days learning the basics. Once you’re comfortable with Java or C++, you’ll want to focus on space and time complexity on days 1 and 2. Space complexity is about how much memory your program uses, while time complexity refers to the time it takes to reach an output. Understanding these concepts is crucial, as interviewers often ask questions about them, even for service-based companies. Analyzing code and determining its time complexity is a valuable skill. Moving on to days 3-10, the focus will be on recursion and backtracking. These are fundamental concepts that many companies ask about. I’ve also included videos covering these topics. On days 11-25, you’ll cover basic linear data structures, including arrays, linked lists, stacks, and queues. By following this roadmap, you won’t necessarily become an expert, but you’ll grasp the essentials. An important recommendation here is to start participating in coding contests. Contests are crucial as they simulate real-world coding assessments, where you work under pressure. The sooner you get used to these, the better it will be for you. Between days 26-40, we’ll dive into searching, sorting, and five critical algorithms. We’ll also cover hash maps, trees, heaps, and the sliding window technique. I’ve linked videos for most of these, or you can look them up online. Additionally, AlgoPrepX has resources covering DSA topics, as well as development (dev), low-level design (LLD), prompt engineering, and core subjects like OS, DBMS, OOPS, and computer networks. The subscription costs around 2500 rupees, and I’ll discuss the challenge later in the video. On days 41-65, the focus will be on graphs and dynamic programming. Key concepts include BFS, DFS, and shortest path algorithms. You’ll also learn dynamic programming techniques like memorization and tabulation, both of which are essential. Memorization, in particular, is important as it extends naturally from recursion. From days 66-75, you’ll cover object-oriented programming (OOP), which you may also encounter in your classes. Then, on days 76-90, you’ll cover advanced topics like number theory, bit manipulation, and participate in more contests. This 90-day roadmap won’t make you a pro coder, but it will equip you with essential DSA skills, including time complexity and problem-solving techniques for easy to medium-level questions. Continuous practice is crucial for improvement. After all this, you need to practice and for that I have top 150 questions sheet and attached it in description, you can acess from there. Once you’ve covered these areas, it’s time to focus on projects. I’ve included a project idea list to help you build projects for your resume, which are critical for job applications. AlgoPrepX also has three project templates that you can customize. Ideas include building a streaming service, a chat application using WhatsApp and Firebase, and other creative applications. Next, focus on your resume. I’ve shared tips on building a strong resume and optimizing your LinkedIn profile based on insights from my podcasts with recruiters from top companies like Google, Amazon, and Microsoft, as well as TCS and Deloitte. I’ll provide the link in the i-button above, so you can watch the full podcast for more tips. For off-campus job applications, I’ve included additional suggestions you can follow. This concludes our basic roadmap. Now, let’s discuss the 90-day DSA challenge. As part of this challenge, three lucky winners will receive a free two-year AlgoPrep X subscription. To participate, sign up for the free trial, which provides three days of access. You’ll need to code daily for 90 days and post updates on social media at each milestone (30, 60, and 90 days). Document your progress, including your coding activity, and tag me and AlgoPrep. We’ll select three lucky winners who’ll receive the two-year subscription, valued at around 4500-5000 rupees, for free. Everyone who enrolls in the free trial will also receive an additional discount. Now, let’s talk about how AI can support your DSA learning. First, visualize algorithms. Many online visualizers are available, especially for sorting and path-finding algorithms. Creating your visualizer using AI can be a valuable project too. One visualizer I found covers sorting and pathfinding, such as merge sort, which splits and compares elements recursively.In pathfinding, you can block certain paths and let the algorithm find an alternative route. This makes a great project, and you can host it for others to use. We chose the algorithm and it demonstrates various algorithms clearly. Another way to use AI is by creating customized study plans. For example, if you need a three-week plan for dynamic programming,  and it made it. The model will generate a plan, including specific resources and problems from platforms like LeetCode, tailored to your needs. Also, you can ask it according to your level of programming, you can request it from GPT, Claude, or any AI model you prefer. Additionally, mock interviews are a great way to practice. Websites like "offered by AI" and "final round AI" offer AI-based mock interviews. Pramp is another platform that provides free mock interviews, allowing you to simulate interview conditions. After coding, you can also ask AI to review your work. For example, if you’re preparing for a Google interview, you could tell GPT to act as a Google interviewer with several years of experience and provide feedback to improve your code’s structure, variable names, and patterns. To get access to all these prompts, simply enroll in the free trial and provide your contact details. I’ll send you a document with all the prompts on WhatsApp. Use these prompts to improve your code and programming practices significantly. That’s it for today’s video. Implement these steps, and you’ll build a solid foundation in DSA. Thank you so much for watching! If you enjoyed the video, please like and subscribe. I’ll see you in the next one.