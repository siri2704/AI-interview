yeah so hi hello welcome to durasoft online training sessions uh myself K prakash Babu having almost 16 years of experience as a trainer sir okay so I trained different programming languages in various engineering colleges and I worked as a technical trainer Department hod as a CRT now just I'm working for durasoft from the past four years I'm taking the classes in online mode that's all about myself soon you'll get complete information right sir first of all before starting this course compulsory prere requite must be required sir prerequisite uh can anyone tell me you know the course right what is the title of the courses friends please [Music] confirm yes data structures data structures and algorithms data structures and algorithms by using which programming language H by using which programming language Java Java Java so it is also called as DSA with Java uh here prerequisite for this compulsory you should have a knowledge in core Java otherwise this course will become very difficult for you to understand because here I'm not explaining the Java programming language we are going to see so many algorithms and data structures so if you are seeing any problem statement are addition of two numbers two and three are the inputs our expected output is five for this we have to write a code we need to analyze this problem statement and we have to write the instructions which can be understandable by the mission and there is a process you have to follow some rules and regulations syntaxes and semantics and once if you click okay button or if you execute the program you are going to get output like file for that we have to write a program and in this case also we are going to see some problem statements and we are going to uh write code for that for WR writing the code we are using Java that is nothing but here main intention that's why the tit of the course is nothing but what data structures and algorithms with Java so prerequisite for this course is nothing but what compulsory you should have a knowledge in core Java otherwise this course is not recommended what topics we are going to cover sir before that just I want to give only two things what is the duration of this particular course sir generally for my classes I won prefer for any duration but maximum I'm going to take 2 months within two months I'm going to complete the syllabus this total syllabus I'm going to complete in two months and my sincere request is please ready please ready to attend even on weekends also weekends also compulsory you have to attend on weekends also sir not every weekend occasionally we are going to plan one week before it myself I'm going to announce sir this demo classes will be there only for 4 days that is today tomorrow day after tomorrow and up to Thursday you are going to have the demo sessions from Friday we will have our regular classes this week Friday Saturday we have class at the same time this Sunday I am going to plan a class so from 7 to 9:30 where I'm going to cover string data structure with 50 programs it is mandatory to attend this session also so like that there are some easy topics will be there which I'm going to take on weekends okay so this is nothing but duration what we have coming to the timings sir there is one small information related to these timings actually we started a new batch in the last week itself last week itself we started a new batch 7:30 p.m. so for that this batch is nothing but add-on batch I'm going to combine this batch with that batch the timings of the session is nothing but 7:30 p.m. 7:30 p.m. to 8:30 p.m. every day 1 hour session will be there Monday to Friday so Saturday and S Sunday maximum sessions won to be there but alternatively we will plan some uh sessions on that easy topics doubts clarification sessions these things will be there so if you okay with everything if you are having any queries you can feel free to ask then I will start our regular class so everything is clear right so coming to the syllabus sir what are the topics that we are going to cover here coming to the course syllabus we are going to see introduction to introduction to data structures sir what is mean by data structures what things will be there in the data structure okay like stack Q tree everything what structure they are going to follow what are the operations that we can able to perform on that like in detail information about data structures we are going to cover after that we will see introduction to algorithms also like what is mean by algorithm how we can able to write algorithm so I have search algorithms are there I want to implement sort algorithms I want to implement greedy algorithms like how you can able to implement the algorithms next and after that we are going to see time and space complexities this is very very important okay time and space complexities how you are going to use the notations like big notation Theta notation okay Omega notation how we are using what is mean by worst case complexity best case complexity average case complexity like in detail we are going to discuss after that even we are going to talk about array data structure from the language there will be one um inbuilt data structure will be there okay so that one second sir please be on mute and please listen whatever I'm speaking after that you can ask all your queries okay okay because please wait I will address your questions please wait so array data structure we are going to cover like what is mean by array how to create memory representations so syntactical things exceptions everything we are going to see and even this on arrays we are going to cover some top level problems also okay next and after that string data structure I told right so this week we are going to finish this so string data structure our string objects are mutable as well as immutable so here we have some four types of strings are there like a string string buffer string Builder string tokenizer but the advantage of string is nothing but some objects are mutable some objects are immutable that's why there will be a special memory location is there like string constant pool so when we are going for string constant pool when an object will be created in string constant pool when an object will be created in Heap memory location that in detail information we are going to cover under this string sir here I'm going to cover even some 50 programs also by covering each and every method after that we are going to start recursion I can say recursive algorithms uh recursion means I think you know a method or a function which is called by itself is called as recursion how we are going to implement this recursion around some 15 to 20 problems we are going to see on this recursion so maybe uh tomorrow or today itself I'm going to start this chapter for you people what is mean by recursion how you can Implement on the continuation of this recursion we have backtracking is there backtracking means so we can search for some result sir I'm searching for some result if the result is unable to get or I didn't find the result you can go back you can go back and search for the data in some other path okay that is called as backtracking we are going to see how we can Implement backtracking so in our Java by using Java how to implement backtracking algorithms we are going to see in detail okay for that some algorithms must be followed of course it is one of the application of recursion only next we have some divide and conquer okay divide and conquer algorithms are there best example sir binary search it is going to follow divide and conquer even quick sort quick sort it is going to follow divide and conqu merge sort it is going to follow divide and conqu almost all three applications are going to follow divide and conqu how that divide and conqu is going to work we are going to see it is also type of algorithm then dynamic programming dynamic programming algorithms or I can say applications so DP problems dynamic programming okay how we can implement this dynamic programming so what kind of different approaches are there how we are going to reduce the number of method calls so the main intention for dynamic programming is nothing but to reduce the method calls so there are different kinds of algorithms will be there we are going to see that next and after that greedy greedy algorithms also we are going to see what is mean by greedy algorithm how you can able to get a maximum profit a minimum profit so coin problems everything we are going to discuss after that sorting sorting algorithms will be there and searching SE ing algorithms also we are going to cover okay around five to six sorting algorithms we are going to see then there is one concept is there like hashing or even it is called as a hash table how you can Implement that and very important topic linked list data structure sir maybe this topic is also I'm going to cover on weekend by 2 days 3 + 3 6 hours we are going to spend on link list we have have single link list is there double link list circular single link list circular double link list like this we are going to cover next and after that stack stack data structure so how you can Implement a stack data structure so what are the various tools are there and even some applications also we are going to discuss next and after that Q data structure how to create our one que how you can Implement and next and after that tree data structure minimum some 20 operations we are going to see on tree data structure all our applications only next there are different types of trees are there sir one is nothing but binary tree is there next and after that binary search tree is there so next and after that AVL tree sight balanced trees these and all so we are going to see next and after that Heap data structure Heap data structure which is also called as priority priority Q priority Q so next we are going to talk about graph data structure these are nothing but uh the topics which we are going to cover as a part of our DSA course this total syllabus is going to be completed in two months the topics which is going to take much time is nothing but string data structure next and after that linked data structure next and after that tree data structure and graph so this string data structure and linked list data structure I'm going to cover on weekends and one more weekend I'm going to take for AVL tree and for graph total in our total two months course we are going to take maybe three or four weekends okay so in the beginning itself I'm giving sir that conclusion this is nothing but the topics which we are going to cover in our total course now if you are having any queries on syllabus you can feel free to ask so first I will clarify some of the doubts which I got in chat window later we will go for remaining yeah you can you can unmute and you can ask if any questions are there if everything is okay just acknowledge me someone is asking sir can you please elaborate more on what topics we exactly need to learn in core Java before starting DSA sir if you have core Java knowledge it is a sufficient in that specific topics how I can give because you need to understand how to write the program how to construct a loop how to write the condition anyway arrays and all I'm going to explain so even how to create an object how to write a method these are small basic concepts only not in depth next recordings will be available even after course ended or any other class missed yeah if you miss any class you can watch the video and even I'm instructing for my all students whenever a class got completed you need to maintain a separate notebook for this practice notebook once if the class got completed what you have to do is so on the same day or next day they will upload the video you have to watch that video one more time that is highly recommended and whatever exam I have taken try to change the values or try to change the diagram so try to take different entities and try by your own if it is working just close the book enjoy for 10 or 15 minutes take another example and try for every topic if I'm taking one example if you practice the same thing by taking two or three examples tomorrow if they have given any problem related to that without understanding I mean without seeing any book or code you can able to write the algorithm so when it is possible if you follow each and every class regularly simply putting the mobile and registering for the course and keeping the mobile and going for some work is not recommended you have to sit with me along with me for this one hour then only you can understand okay right sir any doubt please confirm recording sessions will be available for 6 months 6 months access yeah any qu please feel free to ask Will you provide assignments practice questions definitely definitely we are going to give assignments and coding challenges some links I will give from that you have to practice yes any other yes please confirm any other doubts practical applications of this will be explained maybe one or two okay but in not in depth because understanding data structure itself is a difficult job once if you understand easily you can implement okay are you no doubt sir can I continue yes right sir in this demo sessions I don't want to take any random applications or any other thing I don't want to impress your yours so just directly I'm starting one topic which is nothing but recursive algorithms for a couple of weeks or maybe one week completely so up to next week middle we are going to see algorithms okay I will start directly the topic right recursion uh yeah can anyone tell me what is mean by this recursion please confirm what is mean by this recursion anyone General meanning feel free to interact good a method calling itself very good see I have a simple Java program is there I have a simple Java program is there like assume the Java program title is nothing but something like a test test so I'm going to define a method here I'm going to define a method here what is that method is let me Define a separate class for doing that so there is a class with name demo and I'm defining one method M inside this method friends I'm trying to print some message like what is the message that I'm taking here is okay so sample method sample method like this I'm taking sample method sir once if you run this Java program I hope you know how to compile and execute your Java programs there are some basic commands are there like Javas C test. Java this command is used to compile your Java program so generally I will give the file name as a test that's why directly I'm compiling and you can run the Java program by taking javaspace test if you run what will happen sir nothing is printed here why nothing is printed because we have not written any code sir if I want to execute this method what we have to do we have to do two steps can you please tell me what is the first step please please unmute and please speak then only we can have an interaction uh please confirm what is the first step we have to create a one object of demo and very good object me yes that's all so first step is we have to create object for the demo class how to create object what is the class name demo object name any name you can take here is equal to new operator and I'm taking object class name something like it is a Constructor because of this line what will happen a new object will be created for which method m method by using that object by using that object I'm calling the method sir so what output we are expecting for this it will execute sample method this is nothing but a simple Java program what we have of course I have not started recursion yet just a simple example I demonstrated so if you are clear with this example there are some internal things we need to understand from this example I will demonstrate that with the help of uh one diagram sir clear up to this everyone clear friends please confirm yes yes now sir what will happen uh now my question is now my question is can you please tell me this is my method M right who called this method sir who called this method test class no no test class never calls no no no no there is one method method is going to call this method which method called that one main method so internally recursion is going to use one special data structure sir what is that data structure stack stack data structure they are going to maintain if you don't know about stack just ignore stack is nothing but a box like this best example sir if you are putting books in your shelf you are going to follow stack data structure first book on the top of that second book on the top of that third book like that if you keep five books what will happen which book you kept at the top you are going to take that book for the usage sir ladies are wearing Bangles so suppose assume they weared three Bangles which bangle they inserted at last they have to remove that bangle only this is the data structure which is followed internally in stack so in technical terms I can use l ifo so what is the meaning of LFO lost in whatever object that you inserted lost into the stack lost in first out you have to remove first sir first first Java virtual Mission there will be a separate person okay so what is that person here so Java virtual Mission will be there so this Java virtual Mission what they are going to do here is okay so one second friends right so now you can see so there is one person what is the name of the person is I'm taking this person name as jvm Sir Java virtual Mission so first first this Java virtual mission is going to trig which method main method so the first method call will be main that entry will be stored inside stack then main is going to call some other method what is that method from here the control will go here and what is a message here we have that message it will execute so that's all that entry also will be there in the stack that's all is m is calling any other method no that's why what will happen simply it is going to store entries like this one more point after this sample method execution completed then what will happen it will come to the next Coler sir m method completed it will delete this entry again it will come back to the main this each and every entry is called as a stack frame it will come to the next method call Sir who called the CM main is there any pending instructions in the main no sir simply it will terminate like that these entries will be stored inside stack and after calling each and every method it is going to terminate in this style sir if you are clear with this I'm going to write another instruction you have to tell answer for that sir clear up to this yes now so what is my question is now I'm going to take one more instruction here what is that instruction is sir I'm taking demo class demo class main method demo class main method okay and here I'm going to take so system. out. print and off so test class test class main method so I'm taking here demo class m method can you please confirm in which order it will display first test class main method or demo class m method which one demo class demo class m method sir how you are telling based on the diagram or main method is going to execute first meod please make sure first we are going to see the stack diagram you can understand now whatever flow I explained if you correlate you can understand listen carefully what is the first step sir we created first main method is going to start execution corresponding entry will be there here okay fine then what will happen we created one object by using that object we are calling m so main method is calling some other method called M this is the immediate instruction what we have so control will go here and it will execute this instruction so what is the output that we are going to get demo class demo class m method will come so after that the control will come back so it will delete the instruction and it will come back then main method is there so is there any pending instructions yes so that pending instruction will be executed this is nothing but the order what we are going to get after that it will also delete this and terminate the program let us compile and execute is my expected output is the same yes demo class m method test class main method like that we are getting so hope everyone understood so how this output we are going to get I'm trying to explain how internally method calls will be there so inside Java whenever you are calling the methods how internally it is going to store so everyone feeling comfortable up to this so that I can go for Next Level clear friends please confirm yes yes right now sir you have to tell the output for this program so what I doing is Sir here I'm going to take system.out.println system.out.println main method main method started main method started okay and here I'm taking system.out.println so main method ended main method ended like this I'm taking for your easy understanding purpose assume this is nothing but um okay so you have to tell output no need for all these things and tell me sir what is output for this program meth main method started then we are we are calling a method demo class m method then main method ended right sir yes now you can see the output what we expected is the same thing so main method started demo class m method main method ended now what I'm doing is I'm giving the method name as M1 sir listen carefully M1 method started M1 method started and then I'm printing M M1 method ended now tell me what is output H you can tell me started1 main method started started very good so main method started M1 method started M2 method ended sorry m one method so ended okay and then main method ended in the same order only we will get right let me check main method started M1 method started M1 method ended main method ended sir if you are clear with this next step I'm going to explain yeah uh Ki vishan please wait how LFO is applied I will demonstrate sir clear can I go for next complex yeah so next level please listen carefully the total story why I explaining is don't feel that it is very simple concept so n number of things are there inside these that's why I'm demonstrating with multiple examples please listen carefully see inside this M1 I'm calling some other method M2 so what is this M2 method is sir M2 method I'm defining M2 method started M2 method ended now listen carefully if you follow this diagram you can understand what is the output sir first what will happen a stack is going to be created sir tell me sir what is the first entry sir what is the first entry no no no no no I'm talking no I'm talking about the entry in the stat first it is going to call me main method so main method will do its job can I say this is my first output right first line yes yes then it is redirecting to M1 so it is internally calling which method M1 method so the control will go to the M1 in M1 can I say this is the second line of output what we are going to get am I right yes yes yes then what will happen it is calling another method can I say another entry will be there here right yes so what will happen the control will go to M2 and it will print this line this is the third line what we have sir are you clear with these three lines yes yes now so one person asked sir how it is LFO principal main is calling someone this someone is calling some other person now this person is not calling any other method with this the program is going to be stopped but which method is latestly called M2 is there any pending instruction in M2 can you please tell me sir yes yes that pending instruction it will execute immediately sir which method it is executing last inserted method then corresponding entry will be deleted from the stack and it will come back to the next latest method what is the next latest method M1 M1 is there any pending instructions in M1 yes yes so that that that method is going to be executed this is a Fifth Line what we are going to get so that's all then again it will come to main is there any pending instructions in main yes right this will become sixth line like this in which order you stored you you make a call to these methods in that order it will execute sir do you know after this method call if you are taking any statement this is called as backtracking anyway we will see in detail about this this principle is called as what backtracking and it is a beautiful recursion concept what we have we are going to see multiple examples on this sir are you clear with this approach yes now sir I want to test really is it working or not we need to check so now you can see main method started from that M1 method we called it is also started from that M2 method we called so it is also started then we called M2 method uh M2 pending instructions then M1 pending instructions then main method pending instructions sir I hope everyone got Clarity with this example also I'm not going much examples this is a sufficient clear up to this yes now with one last first example I will go to the main concept sir some people may have a doubt what is their doubt is sir you are telling this stack and all so just you are representing with visualization where is the proof where is the proof for that like that you may have a question for that what I will do is so please listen carefully we are calling M1 method we are calling M1 method that M1 method is calling okay M2 method that M2 method meod is again calling M3 method listen carefully from that M3 method we are not doing any activity just to simplify my code I'm taking like this so in M3 method I'm taking one message like system. out. println off so I'm taking 10 by2 so first what is a stack entry for these first a stack will be created first a stack will be created like this what is the first entry main method from Main we called M1 from M1 we called M2 from M2 we called M3 sir I want to show this stack for you now what is the output of this program sir anyone can you please tell me H what is output five five five now let us execute you can see five is the output so the code is not having any problem now I taking 10 by0 now listen carefully sir where the problem is came in which method the problem is came M3 who called M3 M2 M2 who called M2 M1 M1 M1 who called M1 main method this is the point I'm trying to explain in the stack right now I will show you the proof so the program is going to compile fine if you run the program you can see there is some runtime error came where the runtime error came sir in M3 method M3 method is created some problem if M3 method is created some problem who is the caller of M3 that we have to call that Bloody person so who called this M3 M2 M2 I'm asking M2 what is the problem sir M2 I don't know anything because I called by M1 so M1 is responsible now who called M1 Main in the main method there is no handling that's why we are getting uh some output that is different story so you need to focus on these lines so in which order these methods are called so in which order they are entered into the stack frame in that order only we are getting the problem came here here next here next here can I say this this entire thing is the stack entry right this is nothing but a proof really is the data is available in the stack or not this is the proof I hope everyone got some idea how methods are executing internally clear friends not only in Java in every programming language this is the structure clear yes so everyone feeling comfortable good now sir I'm giving the actual definition for recursion now listen carefully see next example I'm defining one method called M inside this I'm going to print system.out.print lnof something like um sample sample method like this I'm going to print so I'm not calling any other methods but unfortunately inside this m again I'm going to call M like this we have so now what will happen a stack definitely stack is going to be created first method is nothing but which one main sir so what is the second method M sir can you please tell me m is calling which method m m again m is calling which method M it is calling again M sir is it a continue process or not yes so sir this is a stack data structure so every programming language is going to give some memory for stack for storing these method calls they are going to give some stack up to that stack capacity it will take all the method calls no problem program will run there is no issue with this you can see what is output we are getting s sample method sample methods sample method but there is some problem some at certain point we got some issue what is that issue sir I want to find out sir have you observed here exception is there in thread main what is that exception java.lang dot stack Overflow whatever stack I allocated for you up to certain limit I can handle but it is going beyond the limit I can't handle okay corresponding entries are there in the particular packages so who called these particular things m method first print and creating a problem so where it internally calls of WR so these are nothing but various method calls what we have I hope everyone understood what is mean by recursion sir can I can I define this recursion now what is recursion I can use a word like recursion recursion is a process is a process of calling a method or a function by itself by itself recursion is a process of calling a method or a function by itself and the method the method which is invoked are involved in this process in this process is called as what recursive method recursive method the method which is involved in this process is called as what recursive method but sir I have a doubt how you can stop this because it is keep on printing means not good right so how you can use these kind of algorithms in the problem solving yes we have an option that I will explain in the next class so up to this just I explained only two points one is what is a stack how internally method calls will be there what is mean by recursion so seems to be it is uh a bit difficult topic but there are a number of beautiful applications are there okay I will explain all these applications in our demo classes so up to this any doubt so with this I'm going to close the demo if you are having any queries you can feel free to ask tomorrow we are going to see the problems related to this recursion any doubts friends sir clear everyone please confirm uh sir actual class started from today only okay so actually in previous classes batches what IDs I'm taking some normal topic any one random topic from the syllabus and I'm going to take after that in the regular session again I'm repeating so but seems to be that is not good wastage of time that's why I am starting a chapter what is that chapter recursion recursion chapter we started so it will be continued okay once completion of recursion chapter then we will go with remaining there is no dependency from one topic to another topic why because these are data structures not programming language dependency is not required directly we can learn okay yeah tomorrow as usual at 8:15 okay these three days these three days demo sessions will be there as usual at 8:15 once if the demos got completed from Thursday onwards uh maybe Thursday also demo but maximum we will see up to wednessday so from Thursday onwards uh we will combined with that 7:30 batch then you have to attend at 7:30 whatever topics I covered for 7:30 p.m. batch so I'm going to give backup for you people people don't worry okay I'm going to take live class for the topics any other questions where we will get recording this video they are going to upload in the YouTube first three days demo they they will upload in the YouTube Once if you register for this course by making the payment so from that day onwards they will share the videos from day one okay any other questions right friends then thank you for attending the demo tomorrow we will meet for the continuation tomorrow uh some types of recursions are there I will demonstrate that and we will go with some programs okay right guys thank you thank you for attending the demo have a nice day thank