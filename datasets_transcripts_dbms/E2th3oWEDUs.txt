welcome to the session so today I'm going to talk about SQL versus noise scale so first of all we will learn no what is SQL database right so I'm assuming that most of you guys know what is a scale right it's a SQL stands for structured query language and mostly uh whenever we say SQL we refer uh you know rdbms right so it's a relational database management system or the SQL is a in a in a general world is a synonymous for rdbms right so it basically uh relational database and can someone give me some examples for the relational databases like rdbms I hope this databases are covered in your syllabus in uh you know another semester you can give me one or two examples of rdpms which is basically sqldb no one um I'm sorry there's a lot of background noise I couldn't capture that [Music] any company or college database okay but technology wise is it uh okay let me give an example and uh uh you you let me know whether it is a rdbms or not so Oracle DB so is it rdbms or it's a nosql database foreign database mySQL database these are the databases provided by different organizations correct Oracle is provided by of course Oracle and MySQL is a open source database Porsche SQL Ms SQL Server right so these are uh okay I think many of you might have joined the mobile and it might be difficult to communicate understand that so I'll proceed further with the in the topics so just to cover that point yeah uh all the databases that I mentioned that I have mentioned so far all are rdbms right the MS SQL Server the Oracle MySQL postgresql all these databases are classified as rdbms means these databases are designed for uh you know for relational data right they meant for relation data the the the technology is designed in a way such that different uh you know relationship with between the entities can easily be uh created and maintained right so that's the whole purpose of having such kind of database uh the SQL when we say SQL DB it is is fairly synonymous to that and uh as far as I know in the colleges uh all the thing time they teach is about rdbms right so now I'm not sure whether how many of you have heard the name noise kill even before this talk so there might be uh like few of you who might already aware and uh I'm not sure whether it is already included as part of your syllabus lately right so no SQL uh uh in like okay before I go further did anyone hear this before or is it is it uh part of your syllabus or something okay yeah so uh primarily the nosql stands for not only SQL it does not mean that there is no SQL so many people tend to get confused with no SQL terminology because they they think that okay there is no uh SQL at all right there is no structural query at all no it's not like that no SQL means not only SQL that means uh it has almost all the capabilities of your SQL database on top of that it also comes with its own unique features right and of course there are there will be certain limitations on the but still you know you will you will get to uh do a lot of different things which was traditionally not possible with the rdbms so when uh the rdbms was the very first database that that came into picture and many uh of the softwares which is already there in the industry runs on that and it's it's of course it's a very robust so many applications built on it it's running production still people use it but what happened lately is that uh as the industry grew there are a lot and lot of data right so the data uh that the data generation that happened over the time for any organization or that or because of this internet's connectivity even uh it is possible that even your software is launched today and within within a within a month or within a year you get to you know get a lot of millions and millions of data right and when you have such kind of data which is maintained in your database it really becomes uh you know difficult to maintain that in a SQL database right because your software is tend to evolve so whatever the features that you develop in your software today uh is likely to get changed uh you know depending on the the need of the customer or depending on the uh you know how business or where it is used right almost everywhere or almost any software it is it is tend to change and whenever the change uh has to happen it becomes really really really really difficult to maintain such software in rdbms and not only that as the data grows in a particular database it becomes really challenging uh even to identify an issues that comes in and even the performance of the database is drastically gets affected and also because of this all the uh you know the Boost in that internet connectivity across the world the uh you know the regional coordinations has become smaller and smaller right that means uh there might be uh data which is available here at the same date and also needs to be accessed uh you know at some other location and also you want some kind of a data guarantee where uh you know if a particular database goes off still you want to in the for example your Oliver you know uh let's think like this all your other data is maintained uh you know somewhere in some server in Chennai or you know or some some location in India let's say that some earthquake happened or some uh you know natural disaster has happened due to which that server is gone then what about the people's data which is actually got stored in that database right so it gets affected not in in only one application it all the like thousands of different application and it affects people in a really really bad way that it depends on the the sensitivity of the data and stuff like that so it's database is always a very very crucial part in any software because of that now in order to avoid such kind of issues well we design the database itself we should think of all the different possible scenarios the sensitivity and the importance of the data and we have to plan for it and rdbms of course has has that limitation because when the time when the rdbms was designed the other things which was uh required for that was not uh you know wide enough right the internet was not as good as it was it is today in fact the internet was not even there when the initial uh the dbms was designed right so stuff like that so this is a brief history of like how the nosql database came into existence so now when I talked about all these things uh few of these points might have you know went over your head but don't worry I'll cover that thing in the next coming slides so just wanted to give a little hint of what uh node SQL databases are capable of and where it is being used right so now let's uh move further so let's look into this uh you know some of the features of nosql database so of course nosql has a lot of uh you know different features but out of these I uh I just listed couple of points which is uh which makes a noise scale stand out from other databases and which is kind of important for this discussion for considerations right now if you look at here uh there are five points right first thing is multi-model now what does multi-model mean right the when whenever you uh first of all what is model in the first place right then we will come to multi model in in general is it's just a you know representation of an entity right you want to let us say that you want to build a software for college Management in which students are the entities then department is an entity and stuff like that and all those things you need to design even for the student let's say that you want to um you know represent is okay which course he enrolled into or what is his address where he resides what is his age you know stuff like that right so there are a lot of attributes Associated to that entity and there is also a relationship that basically forms like if there is a student and there is an address so this student research in this address is a relationship between the student and the address now if the students enrolled to a particular course is also a relationship now all these things combined together you will you will create something called a schema right you create something called a table to represent a specific entity then you make a relationship with that by creating a you know foreign key and stuff like that right so that's what you do in the traditional rdpms so this is what uh this schema is what we call as a model right so the entity that you define is basically a model now in rtpms what happens is that your schema is with very tightly bound like once you define your model you cannot change it right you can of course you can enhance it but uh you don't have the flexibility to uh you know support multiple different model for the same entity right that is where it becomes telling him that's what is the limitation of the SQL server and that's what has been uh been taken care in nosql databases okay so it supports something called a multi model where a same set of entities can be represented in a multiple different models so and we will talk learn a little bit more about that in uh in the next slides and the second point that I want to discuss is about the distributed right the the distributed features of MySQL of course when I say distributed it means about uh like it talks about how a same data is been replicated across different regions like as I mentioned about the the natural disaster such kind of uh situations you have to be prepared for it and not only for that it's also about the availability uh like there might be a temporary glitch it may not be as big as the disaster but there might be a temporary glitch in your network or something like that when that happens still you don't want your service to be unavailable right you definitely want to be get served your software should still work even some of the network related which is nearby in that region is affected and in order to support such kind of a feature you definitely need your database to be replicated and that replication has to be handled somewhere somehow right so that nature of the database is called distributed so this is a nosql always supports the distributed model it does not mean that the SQL or rdms does not support distributed of course it also supports but the flexibility and uh the speed at which this nosql works is is not at all comparable to RDP image so that's the reason I have highlighted that point so third point is flexible schema this is very much similar to the very first one that I mentioned regarding the multi model uh so here as I mentioned so you won't be able to uh you know represent a different schema for the same entity in rdbms but you can do that in a no SQL database so we will you will see that in the exam like we will get to learn that in the example very easily so I'll show that in the next slides then uh the third point the fourth point I would like to mention is eliminated downtime of course so downtime eliminated of a downtime is very relatable to the distributed feature of noise scale where uh the downtime elimination can happen because of the uh uh you know the distributed setup that we have for know SQL database and high scalability again means is very much related to the distributed feature where a same like depending on the load we can actually uh you know scale the service onto a uh Dynamic level right so for example today for your software you have about one lakh users it is well and good working fine or good but you have already reached Your Capacity right now if you get uh let's say another thousand years or 2000 user your server is exhausted right it can't serve any more request and that is when you need to uh you know Inc uh what you say increase the capability of that server now how do you increase the capability there is two approach either you scale it vertically or you scale it horizontally so this is called as scaling so vertical scaling means uh increasing the capacity of the same server let's say that you are using uh you know 100 GB of RAM and uh some uh you know 30 cores or 50 cores of a single node machine that's that kind of a setup you have now vertical scaling means that you depending on let us say that a QR Ram is not sufficient to serve this one so the ram is a bottleneck here so you need to increase your RAM now you just increase your lamp or you just increase your CPU capability or you add more cores right if if you do that kind of an upgradation it is called vertical scaling now it's not easy to do a vertical scaling uh in a physical system right unless you bring the system down if you want to upgrade your Ram of that system of course you need to shut down the system in the first place and that means there is a downtime for the user but you don't want that to happen right so what you need is a horizontal scaling for that now horizontal scaling means that you bring another server when you also install the same software out there now if it's a simple software it can work fine just like that but this is a database right just because you brought another database out there that does not mean that it has all the data that is there in the first server so in order to do that you of course your system has to support it in a way that okay even if the new server comes the the data that is there in the refreshold gets replicated out there very quickly and start serving it out right now these kind of things can be done very easily with nosql database and that's the reason again this is one of the point or very high highly you know considerable point for the nosql features right so these are uh some of the key features do you have any questions before proceed further okay so if there is no question we'll proceed further now the next thing is what is Json and why it is important have you heard of Json can someone tell me what is Json [Music] no one [Music] okay so Json stands for JavaScript object notation and why it is important in the in the context of no a square right you might be wondering so the the Json is is a very similar to XML in terms of it's uh why it is used right so X I'm I'm hoping that you people are already aware what is XML at least an XML is uh is a way of it in which uh you know we can represent uh the data uh in a way in something called notes right you can have a top node that node can have properties it has some key and value inside that node you can have another node which can again have key and value it is called attributes so likewise you can have you know you can have an entire document like that which is called XML now Json is a very similar to that but its format is little different right it here what it takes is basically if you know JavaScript it uh its structure is very very similar to JavaScript object but uh that object is enclosed with the single quote or a double quote uh I think most probably it's a double quote uh keys right so with keys and value so everything is is enclosed in double quotes and that is called the Json document now this document is is very important to understand because many of the nosql databases mainly rely on on Json documents and these documents are very easy to manipulate uh you know comparatively because uh especially if you use a language which is very similar to JavaScript or stuff like that it's It comes naturally to process that kind of a data right we will see a little bit more about this in the in a couple of next sessions but before that I would just like to show you how this Json object looks like right so let me just open a browsers console here so that we will quickly create one simple object okay let's say that student we just want to create a student with the ID 10 and name equal to Naveen all right so this is this is a JavaScript object now this JavaScript object if I represent in um you know the Json format this is how it will look if I'm just using a javascript's function here called json.shingify to create a Json document now if you look at this one this is a very very simple Json document it doesn't have much thing so I'll just show that I'll put that here in this a simple tool called Json editor online we can see this this is the Json structure here right so you can see there is open curly Branch closing curly brush in between you can see there is an ID value ID value and uh all both the IDS and values are enclosed with double quotes except for 10 why because 10 is a number and for number we doesn't enclose so only for numbers we does not include in close uh you know double quotes in uh Json but for others we do and you can expand it into any level for example if I want an address I can do like this okay I have an address so that address is an object again and this address I can have let us say Street number state number okay so this is one of the sub property in that let us say like this and I I also want to have a pin code here okay or line line number one line number two something like that so in in this case let us say I want to have a PIN code now this is a simple Json document which has uh which has an ID name and address and address can have some property state number and pin code for in this example now this is how you uh write a simple uh document now this document is is very easy to manipulate right if you use a JavaScript language like JavaScript or anything which can easily pass Json it's basic even by taking a a quick look at it you will be able to understand okay what this uh data is about right you can you'll be able to reason about the object very easily with this kind of a structure and it is used heavily in logical databases so I will see that in couple of more examples going forward so there's a next topic we would like to cover is basically what are different types of noise databases okay so this is a very important uh very very important distinction because unlike SQL databases you don't have many similarities like if you are for example if you are someone who worked with my MySQL for about two year three or three year now you want to jump into another database like Oracle it's it's not difficult for you to switch like that or you you worked leave the years even if you just look at uh you know start learning MySQL and then you go to MSA SQL server or you go to Oracle stuff like that so most of these rdpms work in a very very similar way okay it's just that you see some performance difference some uh you know the tooling difference people and some minor syntax difference right these are the only things that you would see in uh different SQL database providers but it's not the case with no SQL database because no SQL database are mostly purpose built meaning for each database noise called database type has a different purpose for it it's not like you create um you know okay you let's say that okay I'm an expert in graph based database whatever the project comes in I will start I will use graph database no it doesn't work that way because these databases are purpose built you will have a lot of uh benefits in this at the same time you also have a lot of downsides as well so you should be very much aware of what is the rows and what is the cons and you have to make informed decision on what which database you would like to use and there might be situations where you where you may need more than one nosql database to satisf to satisfy your scenario you will understand this um as you you know dive a little deeper into the the concepts so first we will cover what are the different types of nosql databases available at high level okay so as you can see in this example mainly the nosql databases can be divided into four types first first one is a key value pair the key Value Store second is a column family proton is a graph a third one is a graph is a document right so so these are like four different types of non-sql databases uh I think I'll talk about this little bit uh in detail with example in the coming slides uh so far like before I proceed further do you have any questions true [Music] okay [Music] so now we will see some of the examples right uh okay so you can see here key value store right for the key Value Store there are two databases shown here one is redis and react uh these are the two databases available in the industry for a key value type of database we will see that in the example in a while white column store uh for for this kind of database we have hbase or Cassandra document store for which we have mongodb or coach DB craft store for which we have neo4js and infinite graph right so these are some of the examples that are definitely a lot more I just highlighted what is the most famous one right in in the each category so excuse me so this is an example uh for a key Value Store all right uh in the right side you can see what are the uh the top ranked websites in this kind of a model the first one is redis and second is react so now red is is basically um uh you know a k Value Store database but most importantly it works uh you know in Ram right unlike any other database its primary storage is is Ram not hard disk so because of which the usage uh of this mainly varies in terms of uh you know you can clearly understand that okay and that means it is definitely performance wise there is no match it works really really fast but when it comes to uh you know the persistence I mean that is where it lacks right because it works primarily with ram that does not mean that all the key value stores works in the ram no for example even for that matter react is not like that it actually shows in disk now if you can see the key value store just an example uh you can see that there is a particular key to the value for that is a Json document in this case right and this is the reason why I wanted to introduce excuse me so this is the reason why I wanted to introduce the Json document in the first place so you can see that there is a particular key and that key is pointing to a specific document now if this key is meant for the student ID then you have that entire student record here which you can retrieve so you can use key value for this purpose and it's also possible that for the same key you can you don't have a real you know big object but you only have a simple uh string representation of it so you can just represent it as a string in this case and you have another key for which it again it points to a document you have another key which is points to a specific number right so this is how a key Value Store works it's a very very simple dictionary like uh you know structure where you look for a key and it you get the value now uh at the high level when you look at so because this is just a simplest example that I have mentioned here but when when you really look into the database it goes beyond uh this okay so when I say uh key value it does not simply mean that there is one key on one value it's not like that it also supports multiple uh different data structures within the uh you know within this key value kind of a representation okay so uh now how exactly that works what are the things that you can do or how like uh what is its total capacity and stuff like that it's it's not in the scope of this talk today but definitely you know you can learn about it now as you can see at least uh you know with this kind of databases you can it's very clear that in the schema is not bound here right uh you can because for one key you the the the structure is different the schema is different and for another key the structure is different right and even even for the for the sake uh if you consider this one uh the the the field here is name and age but the field here is name and profession that is not like that in the SQL database if you have a table student then all the rows within the table should have same schema right if it has ID and age if you have ID and H for all the records but here it is not not like that each record will we can have its own structure it can have its own schema and that's how it is represented so the the uh the use case for this is basically uh you want to have a very very quick or a fast performing uh database uh which is a schema bound I mean schema less and uh you want to have kind of a control in which uh you know uh you would like to deal with the data which does not have much of relationships and if relationship is is a is a very much important part to you you know and including the consistency then rdbms is definitely the solution so we'll come to that uh you know there's a point in a while uh why rdbms is still used in the industry and uh why sometimes a single nosql database may not be sufficient to satisfy all of your scenarios so this was just an example for a key value pair now uh I'm going to another example which is a white columns for example now for the white column kind of a database uh the the one which is famous in the market is Apache is uh H base it's open source and Cassandra right so these are the two database which are uh again very famous for white column based data stores now interestingly you can uh I just put something uh you know visualization here so that you can clearly make out in your mind how white column works so in white column uh now think that okay this is the data okay so this is just for an uh representation purpose so let us say uh you have an ID one you have an id2 you have an ID3 and for id1 you have a country U.S JP uh and again of course this this data is repeated here right so I have a time stamp and I have a message for it so now each data I have a you know data here and free of this data is is duplicated right that means if you think that uh think this one in a pure SQL terms that means you have a table but this table is not normalized right if you if this table is normalized with the voice card one two three or any any kind of normalization technique that you apply okay that the you will not see data duplications here right in rdbms but that's not the case with no no SQL you will see lot of data duplication here because the again as I mentioned so this is a purpose built it depends on what you want to achieve right and especially you have a requirement where you want to bring all your related data together in a very frequent manner now if that being the case if you go for an SQL database what happens is that you need to if you represent your data in a normalized way like you are your student uh resides in one table your address restarting another table again the PIN code of the address is set in one more table again country resources no more table State research and more table now if we want to retrieve a student record with the uh his entire address and you need to display this very very frequently in your websites and stuff like that what you need to do is every time for every particular student you need to do the joins between all all these tables I need to retrieve now if imagine you have millions of Records right you it takes significantly longer to do that kind of a join and give the data for you especially if you don't do the right indexing the application is completely gone now let's uh level of the data I'm talking about so now for such kind of scenario like if you use a white column store database what happens here is that of course in terms of storage there is a data duplication but um what you will get is a really really high performance right now you you see how this data is internally represented in a white column database you can see that this particular example uh here I the key one is highlighted because the key one the key one uh in the sense the ID and the country is used as a partition key so because of which you will see this one column JP here because it is used as a one is used uh used as a partition key that's the reason you see this one here and JP is used as a row key so the combination of it with the timestamp will give you a unique record okay so in this example you can see this K1 this record all the related data is together so I have this JP this timestamp is data I have another record which is with us and it's with the timestamp and its data another record with its data right and key to another record with this data so likewise all the data is internally represented in the white column database so because of which if I am specifying if I if I want to retrieve a particular record let us see this guy all right key one who research in US immediately I will get all the records so this is just an example so you will see dot dot but you actually you get the entire uh data of that particular this one in a very single hit right and that that is a huge performance Improvement that you made uh just by you know changing the way how you have stored your data now there are a lot of different features available in white column database like similar to radius as I mentioned in the key Value Store there are a lot of different data structures that's of Internet supports similarly even in white column uh databases you it has a singular column in our and uh single family multi-family family within family so there are lot of different levels and structures that you can create that you will learn that individually when you look for the Apaches hbase or Cassandra right uh I will not go into the further details of this again it's out of scope for this talk uh but of course you can you know learn these things once you dive deep into this individual databases and third one is a mongodb or coach DB so this is a document type of a database okay so this is again as you can see this is very similar to Json I thought in fact it's the Json document now document store is is one of the very very widely used nosql database in registry because of its its nature right it's easy to see manipulate and stuff like that and mongodb is one of the very very famous noise called database so if you want to start with no SQL databases I highly recommend you you can start with mongodb okay this is one of the easiest to begin with and uh it was a lot of flexibility and there is lot of demand as well in the market for TV okay and another uh if I give my second Rank and I would give it for practice uh radius is comparatively easy to learn there is not much complexity you can quickly grasp this the concept of radius and it is widely used for caching purpose but it's not limited to caching but mainly is used for caching purpose so mongodb and redis is something I highly recommend if you if you want to start definitely this is the thing that you would like to give a try and third one is hbase or Cassandra either one would work so now coming to the document store like as you can see this the entire document is represented in the Json format here you can see there is a student there is an address the student's address is represent together like here also like if I want to retrieve an individual student the student record along with address can be retrieved very quickly because all the related data is stored together as a single document but again because of this kind of a structure there will be data duplication right now in in if you go for a rdbms what you would do for example uh city and state you don't want to repeat city and state because in the same city so many different students uh reside right and in the same state so many students reside so you can you can simply have one too many relationship in a rdbms and you can save a lot of space again the intention here is not to save the space so if you go for this kind of database you will definitely have a data duplication that also means that there is if you want to go for some sort of an updation you will have challenges to maintain the consistency right this is the again the downside of it for example there is a spelling mistake in the city that you wrote now there is already millions of Records which is there in the database now if we want to update the city uh this one if it is an rdbms you just update that City and everything will still work as this because you just join and get the data but here it is not like that that city is actually duplicated in all the millions millions of Records so now if that off update operation becomes really costly because you have to retrieve each and every individual document you need to update it and show it back there so this becomes a challenge so that's the reason it's very important that whenever you make your decision to go for a nosql database you should really really understand its pros and cons then only you should go for it all right and if you if you really understand the concept right and use the right database it gives you significantly uh you know good in terms of performance in terms of availability in terms of fault tolerance and stuff like that right so this is about a document store so similarly there is one more type which is uh you know graph based database uh the one which is very famous for this is neo4j and uh infinite graph is is again one more neo4j is something uh is very widely used now this kind of a database is uh you know works very similar to your uh trees or you know those kind of data structures right where uh there will be something like notes and there is something like edges right so here in this case you this person is a node and product is a node again this person is a node this person is just all the individual person that you see is a note even the product is also considered as not and the relationship between the uh the this person and the product is uh maintained in as a uh Edge right so these all are called as edges so now both the node and edges can have its own properties okay that means uh in this example you do not see it it's just that uh you'll see some kind of a flow like okay this person has purchased this product this person also purchased this product and this person knows this person and and stuff like that okay so now how this is possible because this is a as I mentioned each person is a node here and each product uh is also a node and this person did what is represent in its edges now when you connect the edge to the nodes you will actually get a relationship right and that's what so it is used for all such kind of use cases especially in um uh you know e-commerce sites like um you want you want to identify uh okay if a particular person is browsing a particular product right and you want to suggest that uh the per people who brought this this product has also brought these other products or the person who did this also did kind of uh you know this kind of stuff right so those kind of recommendation you would like to give now when you when you have millions and millions of records and if you want to give such kind of a recommendation of course you need to that system should be aware of users behavior and stuff like that right now for to just for that recommendation system alone you can use uh this kind of database to represent because each time uh an entity performs some action you keep on adding the edges for it right and you you you substitute the nodes you add the edges so likewise you can easily build this kind of graph and you can give some intelligent suggestions and stuff like that uh to actually you know boost the customer confidence stuff like that now this is one of the example I mentioned it is it has a lot of other use cases uh if you want to build a road with this one security related stuff so many different use cases it depends depends on what you want to achieve so you can actually go for you know such kind of a database again neo4j is one of the very famous in this kind of data store yeah now provided all these the thing is why RDP means is still around I think by now you might have already got why rdbms is still around I think I I mentioned this couple of times in my talk so basically in all these scenarios every uh every individual database type they have their own place right and similarly rdbms also has its own space and of course it has a dominant space uh now there are two reasons first of all rdpms is is verifiedly used there is used and there are so many existing softwares which is which is written in our like using rdbms with the help of rdbms it's not easy to migrate you know such things so quickly to any of the other databases that is one of the reason why they still exist right but that's not the only reason the most important reason another reason is that it still works it works perfectly fine for really large and reasonable number of data the rdbms becomes a bottleneck or the problem only if you have really huge data what what we categorize as big data right you might have heard this jargon world big data so many times in different articles and stuff like that so big data is where uh you need uh you know there is a real need for a noise skill but otherwise you don't really need it uh if your data is really really big that means uh uh What uh there might be situations where rdpms may not be able to handle it elegantly in terms of performance in terms of uh you know update operations in terms of scalability in terms of availability and stuff like that so whenever there is a need for such kind of a situation and stuff that is when you really go for nosql but otherwise rdbms is still good the even from the career opportunities there are still lot of career opportunity is available with rdbms so if you would learn rdbms there is definitely no harm and there is lot of opportunities available but on top of that if you for your profile if you add at least one or two of the nosql databases then trust me your profile will will definitely get get boosted at least 20 to 30 times no you know percentage right so uh that is the like added advantage that you get as you uh add some nosql database to your profile so now how you can begin with it right now what are the different uh platforms available or how you can get started or what I personally I would recommend you to do is these things uh as you can see here there are a couple of databases now you might be wondering I I talked about all different database I have shown all different examples now in the final side when you need to begin I'm showing entirely different thing well it's not like that definitely it's different okay there is a thing that you need to understand that there is nowadays the companies go for something called a cloud native applications now what do I mean by Cloud native applications right so the the the meaning of the cloud cloud nativeness is that uh you build an application that entire application from like resides in the cloud itself it does not even come out of the cloud meaning you uh you can't really have that kind of a database in a simple uh individual systems these systems can reside actually in the uh research only in uh in certain Cloud provides providers right so for example Microsoft has its Cloud called Azure and uh most of like if you're if you're going for a cloud native kind of an application development then this application always resides in Azure itself it does not even come out of the Azure environment now if that being the case the the of course the the nosql databases which is available in that cloud becomes the first choice for that right and if you are going for a Microsoft cloud then of course Azure is a Microsoft cloud and then I highly recommend you go for Cosmos TV right now Cosmos DV is again a nosql data base provided by Microsoft it supports multiple different schemas okay uh it supports both uh above all of these things it supports uh your key value it supports white column it supports document it even supports graph so what happens with this is that if you learn Cosmos that means you internally learn all those uh like along with the cosmos you also learn all those individuals and you will also learn about the its distributedness its consistency and the way how it consistency is handled how you deal with fault tolerance uh and stuff like that right so all these things you will learn along with that so I highly recommend that you start something with this kind of flight Cloud native related nosql databases so that even companies will look for it okay so it definitely adds a lot of value and you will get a lot of courses as well uh on this kind of databases because all these individual companies will will promote their own stuff out there but that does not mean that okay this is the only thing where you can start of course you can individually go for these databases like radius react HBS Cassandra mango couch neo4j right you can definitely go for that individuals but Cosmos DB is something still you can start so similarly AWS provides a dynamodb which is also a nosql but supported by AWS all the companies who use AWS for the cloud is likely to use dynamodb in the future even currently they use and Google Google has two different solutions uh it has a cloud data store and it also has a big table uh I I don't have much idea on uh the the both of the databases but I had big big table is something which uh which is really uh you know uh booming in the in the industry many people use that for different stuff even Google internally uses that for a lot of different things and similarly even Cosmos for that matter in from Microsoft they also use Cosmos DB a lot in like internally uh even from what I am aware the the cosmos DB was was actually developed in uh around 2009 in Microsoft and it was all used internally till 2015 or 16. and that is when they they made it public no it made available for public usage so even uh I have used it internet Microsoft uh at around 2013 or 14. uh it was working really really nice and uh definitely this is something you can try try it out right so uh that's all I had for my talk so if you guys have any questions it's time for it please uh ask I'm here to answer [Music] and if you're not comfortable asking here you can always ask in our skill house Forum which is forum.skillyponus.com you can always visit there and post any questions either me or anyone uh from our team or it's it's like a community anyone who participate or registering skill house can contribute out there even if you know the answer you you're free to answer it so if you have any questions please shoot me out