[Music] hello everyone welcome to scala academy's youtube channel myself omsi in this tutorial we will be talking about dbms dbms is very important concept in perspective interviews whether you are obtaining for any product based company or service based company having a knowledge of a dbms on the concepts of dbms is very important okay it will definitely add an a big advantage to you in an interview so in this tutorial i will be starting right from the basic so you can watch this without any fear if you are an unknown cs student you can watch this okay so like at the end of the video i'm pretty much sure that you will have a good understanding on how databases works how or what is your database and what will you offer databases and some important concepts as well before starting we have a few formalities to complete first one so if you are watching channel for the first time please don't forget to subscribe if you like the content please hit that like button up and if you have any questions or if you have any video requests that you would like to hear from scalar academy please let us know in the comment section now let's start with our introduction of and database management system so before starting that before discussing what is dbms let's try to uh divide this our world and target database management system and we'll see what it uh one each module let's say okay so let's take this data so what is that what is the data what is the data so i can say that i can say that any fact that you would like to store or preserve for future references is called a data right now what is a a database how can we say that so a database is a collection of collection of a related data related a data so let's say you are storing the uh details of college students okay in that particular let's say i'm storing my details let's say omc my role number my uh address okay let's say bangalore so this particular thing would be my data okay so if i store if i store all my college student details in one particular place that will be called as a database okay make sense now let's go to our next one so management system a database management a system so now let's see let's understand so i haven't five five thousand data residing in my uh database okay now i had a few things like so uh one student left my college he joined another college so i need to delete that particular student data in my college database right so i delete now now so uh i have to update one student mobile number or email id whatever it has okay so it have already that student data has been in my database now i wanted to update that data okay so i simply i need to modify my existing our data now one student joined in my college okay joined in my college so i need to insert his data his or her data into my database so insult so all this can all this thing kind of things i can say that i'm managing my data managing my databases so how how can we manage there are some database management systems that helps us to manage your a databases okay so such kind of things will be called as an database management system so how can you say that so nowadays like all the databases has been computerized so to perform the operations like a modify delete insert kind of things we need some uh systems of office which helps us to perform that such kind of operations so those uh that kind of softwares will be called as a database management systems okay make sense so we are done with the data you are done with that db we are done with a dbms as well now on top of all these things there is one thing okay what is that so the combination of database plus a database management systems is called database a systems okay so the combination of a database and a database management system is called database systems now you might have in doubt how we are storing our data in the databases how many types like okay so yeah there were different data type databases or exist but uh nowadays a people are using are two things are mostly so one is a dbr types okay so a relational database relational a database okay so what is a relational databases so a relational database uh like um if i want to say it in simpler manner the data has been stored in the form of tables okay so when i say tables we are having a columns and rows okay we are storing our data in the form of columns and rows okay let's see let's see so suppose i am storing the student database like student details in an our database now tell me what are all i can store so let's say uh attributes of a student so what i can have but for a particular student i can have an name then a role number attend up address of a student then a mobile number email id parent names go on so i will have these kind of things for a particular student so this comma for every student so these things will be called as an attributes or properties of a a student okay so i'm going to i'm considering these are tributes as my column names as my column and names now uh so let's uh let's run one table okay we'll then we'll see how we are storing that thing so let's say now i have my attribute names as our name our role number or let's say mobile number now i'm storing the student data okay so let's say first one a roll number of 500 so mobile number something one two three four five six seven eight okay now again so this thing this particular will be called as an one record okay then i have another student thing so let's say ready okay his role number is 5.1 and let's say mobile number is uh all zeros okay so this is data so again i can call this as a record okay one record so these can be called as a records or i can call them as a tuples as well and these are all the attributes so the data if we store our data in in the form of this table then we are calling it as a relational databases okay relational database now uh there is an another famous database uh exist so what does it now no sequel a database so what is this nosql database okay so we'll come to that what is a sequel in later part okay now as of now let's discuss uh what is unknown sequel so uh here let's say so i have uh there will be something like schema so what does it a schema means so it represents how you are storing your data and like let's say in simpler matter you can say that it's a format okay so you you will be defining okay so when i say a student table okay so this is a student table then i'm stating that you need to have a name you need to have a role number you need to have a mobile mobile number so if you if any of the student won't have any of this column or attribute just don't don't store this uh data in a table so in that cases what happens we are losing one particular record right we are losing our one particular record then is there any point of storing uh all the student names uh like eliminating few student names no right no there is no point so to overcome that bigger problem we have a nosql database so uh what is a bigger difference between this relational database and nosql database means now you don't have any particular schema or format how to store a data okay so whatever the data comes from when um user or database admin it will store that it won't ask any question like so you are not giving mobile number of a particular student but you have given email of a student as well it it won't uh raise any kind of questions it will just store whatever you give okay here in these cases we are not eliminating any data so but we does it in relational databases so that's the major difference between the nosql and and coming to application of for these are databases so uh it's quite obvious so everyone knows about it so nowadays are everywhere everywhere databases are being used so hospitals let's take hospitals so in hospitals we are storing our all the patient records and we are keep tracking of monitoring the particular student with his uh medical reports right so in colleges or like educational sector in educational sector we are storing the student details right in every college that happens there is no separate interaction or how we are storing that data so in every college they call college management used to store our details like um amount of people have paid amount of cgpa you have what are all the companies you have secured kind of stuff right and coming to another let's say online shopping so we are storing the vendor details like whoever all the products are so products are selling and who are all the buying like let's say i have ordered one a particular laptop today okay i have ordered one particular laptop so the data the details associated with this my order are seller details buyer details like amount i have paid transaction id so among delivery date who delivered my particular order my address my mobile number all this data has been stored in the database okay so yeah like this you can consider any application so nowadays a are became very vast so without without using our databases uh like all industries or any sector is not running okay be the industries or like manufacturing units in manufacturing units as well they are keeping track of what are all the like products they have built or manufactured in this particular date who are uh who are all involved in that particular manufacturing right so an increase and exist to keep track of for employee uh working days kind of stuff right so these are all a few database applications but i request you to think of in your own manner try to write your own applications okay so what is before dbs like now i am teaching like now we are learning about dbs now before dbs what they exist there exists like simpler file systems so they are storing our data in our laptops only right file systems so uh if i say what are all the difference between a file systems and a database that's a file system versus a databases right so if there is some problem that's why we have moved on to the new thing yes so that's our responsibility to know why we have more why we are moving towards a new thing why we are adopting new culture it's a very similar for anything if there is a something and we are learning something new we have to know the problem that were occurred with the existing system okay now i can say that first thing would be data redundancy so what is it data redundancy so redundancy means uh a storing or keeping an a multiple records okay let's say duplicates okay are duplicates so in file system we used to store our duplicate values as well but when coming to debits there isn't some concept like normalization so with that principle we are uh we are eliminating the redundancy means we are eliminating the no duplicates okay we are eliminating the duplicates so obviously let's say there are 100 records in a particular college okay college now uh suppose i am storing it duplicates values as well it became it became 200 now obviously my says my space has been became a logic right so instead of consuming hundred uh let's say each record is consuming one mb okay now instead of consuming 100 mb it has now consuming 200 ml there is a lot of space wastage so again apart from space mistakes as well there is something like confusion we are often uh get confused so what to consider right so in that cases our dbs are very good at it managing that kind of stuff so in dbs no redundancy okay and next thing security so obvious that in file systems we don't provide any security so anyone can access if they are login to login into my system right so in that cases we are not providing there is no security for our data but when coming to a databases we do have in a concept like a constraints we provide a constraints for our uh dbs okay so without uh like with that content uh allows okay it won't allow people who don't have that particular kind of permissions or we are not able to send or receive data as well okay now data consistency so let's suppose i will take an example so there is a one particular student a student is enrolled in a six courses right for every semester student should enroll in six courses now now so obvious that obviously so ah student record will contain like that particular student record will contain in every course okay let's say suppose i wanted to a modify or update these uh one of its attribute let's say email id okay i wanted to update his email id so i went and updated his email id in one particular course now tell me what about all uh reminding courses like about five courses what happens it won't get updated we need to go manual and we need to update that so that i can say that data is in inconsistence right so the data so once i updated it is not updating all the things right so in that cases uh file systems get failed but in dbs in dbs it is a really successful thing that's up that is a one thing that really fascinated people towards a databases okay now yeah so we discussed it so far we discussed a few advantages of dbs but now let's see disadvantages of this advantages of a deep now first thing obvious i think that maintaining and uh the cost like maintenance cost off and db is a little higher than maintaining cost of file systems okay that is a one thing okay and second thing uh one thing that so those whoever have any knowledge on how to interact with the computer like databases using programming can only use databases right so those whoever have a knowledge on dbms or any language which uses like which comes under dbms like sql or anything can interact with the dbs otherwise they can't so that that is one of the biggest but in file system anyone can uh those whoever have knowledge on computers as they can interact with the file systems on the data so uh like can i can say that uh a knowledge of computer or a dbms must and there is also like car it's a little uh complex to understand the those core like schemas and how we are getting the data how we are how to write it queries and all so obviously these are this all stuff makes and person to get confused a little better okay now let's talk about architecture of dbms so basically the architecture of dbms uh will depends upon the system which you are running your uh database which terms of queries okay so let's say we'll talk about first we'll talk about a standalone missions okay standalone systems so what is it a standalone systems means so basically so uh you have in uh let's say you are using your file system as your database okay so you are writing a user okay you are a user and uh you have a file system like say you can that file system you are using as a db now where is this a query is being processed that is been processed within your system right within your system so you are not using any connections so you are just going so like networking connections okay so you are not using any of those kind of things so because just because you are using the database which is inside your system now there are another kind of a system let's say client server architectures where like you are in a distributed environment or you are using some servers right from like where uh let's say your office is in hyderabad okay so but you are trying to access that dbs or which are residing in some places like u.s europe australia kind of stuff right so it might happens so this this is the another factor so here you will have some client server let's say client here and your server resides at another place so you are making an request to server okay so there are the two kind of systems you might have and now are other like com there are three types of octages are there in dbms okay what are they first one is a single entire architecture so a single-tier architecture means uh so this is the example of uh so yeah single systems standalone system is the best example for single-tier architecture so where are your both like a client and server residing in same system and which you are you are not using or you are not connected to any kind of network connections okay or not using any server so you are just using a server which is residing in your own local system now second one is a two type architecture what is this two-tier architecture means let's say we have a client okay let's say client or user and you will uh you will have one let's say we will have from a dbms application or calling this as an our client and your database has been residing in server like you are calling as a dbs so database system so how this process happens so basically as a user you will make and one very simple by using a database application of software whatever it might be and that uh like dbms application software it will try to get connected to the server so through the some uh network uh networks like uh so it might be that network interface might be uh any uh let's assume jdbc or odbc interfaces okay so by using that you are trying to access the data from db systems okay so this is the two-tier architecture now we will talk about that three-tier architecture so what is the stator aperture so it's the same as a two-direct architecture only but the only difference is let's say this is your client user is i'm having a db mesh application so let's say a client a dbms application okay now this client user client application will get connected to server dbms application okay so by using this server uh dbms application you can access the data from database systems make sense so again you are using any connect inter network interfaces here as we discussed earlier in two directory same as that okay so here your client database application don't have a direct connection to your database systems so you will send and process a request to the server database application then your service database application will process that thing from the database systems then that will get uh then again so service database application will give you that results to your client architecture okay so this is about the architecture of dbms and again there is an another architecture called a three level database architecture let's see dbms a three level architecture it's very very important question okay you might get a lot of questions based on this question topic okay so again this topic is being called as an use reviews of databases as well okay so basically there will be uh the database uh architecture has been divided into three parts okay three parts so first part is being called as an external level again this can be called as a view level as well okay here you will have a different users so let's say user one user two user three and everyone has their own view right like you can be like your gui a graphical user interface now this is the first level now we will have an another level so which is called as a conceptual level or logical level so uh where where you were uh so it won't tell anything apart from uh like the data you have to store the data in database something like this like there will be something like schema and okay so it it helps to design like it stores that schema and it decides how to store that particular data okay and also it will say some it will hold some constraints who how to access that data who can access that data kind of stuff okay so this conceptual level holds then like connects with another level called internal level or a physical level so in this particular level the original data has been stored in and memory okay so till now till this level you are not giving any memory or space to store your data okay so but in this physical level you are storing your data okay by using some let's say you are storing allocating some kbs or mps or gbs or tvs of data here okay so this is where your actual db stores data stores and this uh this is where you are telling how to store a data like okay in which format of which uh type or data types you are telling like what data like say so i am storing the name of a students so then you have to store it in a form of a backer like string when you are like when i say it's an age you have to store in a data sorry interior okay now also you guys are so let's say i'm storing a student table now what it contains name a role number and address and mobile number kind of things right so it will this particular level will tell you so these are all the things that you need to store okay but when coming to this particular level offer this okay so here or let's assume here all the table has been created with the columns here all your rows will be appended to that thing okay here what what in this particular external level people can do now here a user can a user can access the tries to get the data from the internal level okay so in this particular thing data can be used in the form of either gui okay or any like a query languages like if someone is uh really uh if someone is a good programmer he might write and queries and he can visualize the things over there as well and even if he is not encoded there will be some jewish he can interact with that juvia is using um sorry he can interact with db with by using that gus as well so this is the word we offend how the database uh three level architecture works and now if you could observe here you can relate it to a few things like so please pause the video now think okay so basically uh this and that dbs the uh to store this much of huge data our uh databases uses uh data structures like complex data structures okay complex data structures so but to make it is this like to make is easy to use okay so all these complex things has been hidden okay hidden okay so this particular concept is called as a data abstraction so what does this data abstraction means hiding the unwanted or unnecessary or complex things behind the screens and showing whatever required to the particular user is called as a data abstraction the best example would be atm so we will go to atm okay so we just insert our call we'll enter our pin and we'll uh so we'll enter whatever the amount we want and we'll take that amount we'll come back that's it right so we never thought or we never want to know how that system is being processed after entering my pin right what is the processing it is going to somewhere okay so i don't really don't care about all such kind of things and what i what i know is that enterpreneur with the germany so that's what i want so here the things that are hidden from us is making that a call to the server and calculating the amount that you wanted to and the mission that is running so all these were really unwanted unnecessary for me i just want only money that's what i am getting so this is called data abstraction okay the next concept is a data schema database schema so we really talked about this terminology earlier as well but let me define how these things works okay in a clear picture so let's say we have a student table so we will have attributes like a name a role number address mobile name email and all so what this schema tells now we have to store this kind of data you have to store the data we have to store the data in this particular format in a table okay so that is called a schema okay now there is another thing called instance what is this instance so instance in the sense let's say so uh by the end of the today or let's say there were 100 records in my table okay now i can say that what is the instance in that if i ask what is the intense i will say hundred so because there are 100 records exist in my database so i can say that instance of a particular db is 100 so what is that instance means now so at particularly a particular time whatever the time you want so how many data has data records are being exist in our database that is called instant so a tomorrow a day two so there were 100 more users has been added but 100 more records has been added to your database then your instance will become 200 right so this is how uh database schema database data instance has been defined so now let's talk about dbms languages so basically dvms languages are used to perform a read update a store kind of operations in a database so there are a lot of languages exist to perform such kind of operation so one such language is s sequence so formally known as sql so uh it might be called as a structured query language okay structured query language and if you are really interested to learn this sequel so which is are used by most of the companies please do check out the uh playlist which was a taught by other faculties or instructors in this particular youtube channel now now let's talk about the types of dbms languages okay so types of a dbms language so again these these are all the very very important concepts in terms of players interviews okay now first thing is ddn okay data definition language so our ddl is used to specify the database schema okay so it is used for creating the tables schemas indexes constraints etc okay so let us see what kind of operations that we can perform using ddl okay first one create so create can be uh might be used for either creating the databases or tables okay next one is alter so alter means altering the existing tables okay or altering the structure of your databases as well and another one a drop so a drop means uh deleting or dropping the existing instances of a database so when i say instances might be tables as well and next one is truncate and a trunk it again it uh it's it is called um to delay like target is used to delete that tables in and database okay and next one is our rename um so again so rename is i used to do either rename the tables okay or database instances we can call it as a database instances and our last one comment so comment is used to comment the databases okay that's it and now rdcl okay dcl so data control language so uh which is used to control the axis of a particular data which work there in controlling the access often databases as well okay so in this we do have our two commands one is grant another one is a revoked so grant is used to grant the permissions revoke is used to revoke the permission which you have given already and next one is a dml data manipulation language so this database my sorry data manipulation language is used for accessing as well as manipulating the data but already present in that database okay now what are all the options is a read so a read is uh you can read that data from a database using the select command and next one is insert so insert the insert command is used to insert the data into an a database next one update so update so updating correct it is used to update the data which is already existing in a database or table okay now a delete a delete is are used to delete the data which is a present in an table okay now all this like these are all not the separate uh languages all this work comes under sql only now another last one is uh pcl so transaction control language so in this we do have a two commands one is commit next one is a roll back so basically we perform lot of transactions like a transaction might be let's say uh their existing table you are manipulating that a table okay you are manipulating the data which is residing in that particular table using the dml commands okay so since you are changing the database which is already stored in data base so we have to commit the changes so commit means it will it will commit will help us to preserve the changes for a longer time okay now what does that roll back to so let's say we have i have changed something and uh we have committed that okay sorry we have changed something okay we haven't committed that and uh those are so after changing your your app or whatever your application is not performing well so now at that time you can do simply roll back so it will take you the previous changes okay so in that way these tcs commands will help us to do it in a better way data model is a logical structure of db it describes the design of db to reflect the entities attributes a relationship among the data and constraints when i say entities so entities might be in our tables right so i can clearly say that entities and real world existing thing it's a similar to the object in an object-oriented programming language that everyone is often familiar with and in this particular data models there were different types now we'll talk about them so there were first model is object based logical model again in this logical model we do have two types first one is er model which is a very very very very important in terms of for both placements and the next one the next one will be object oriented a data model okay now the second thing will be record beast logical model so again this has been divided into three things first one is a relationship relational model next one is hierarchical model and third one is network model and there is an another type which is an physical data model so basically here this particular model uh describes the data base of our levels like uh conceptual level and a view level okay so uh even the chord based thing does the same both conceptual and uh view level but the here the difference is this a particular record based logical model describes the data with the records of fields and the attributes okay so unlike object based logical model and when coming to physical data model it is um it describes about the data which has been stored at the lower level of the data abstraction okay let's say it's a physical level okay so among all these data models the one which is very famous and uh very widely uh very used okay so this one er model okay so apart from the uh this particular er model most of the things were not being used nowadays so now let's talk about that er model only so er model a stands for entity relationship model so earlier i said that when i say entity it might be a table and in oops terminology it is been called as an object how can we define and real world existing object or thing okay so the examples would be like a person employee a car book a pen etc okay now this er model is used to represent the uh like design the database architecture using the um diagrammatic picture okay let's say when i say grammatic picture it contains everything like our tables and attributes are links to the data tables and the constraints okay so like whenever we see that particular er model of a database we will get an overview okay what's going to be in particular database and how these particular queries have been running okay everything everything okay now we'll talk about those er diagram yeah diagram and what does it contains okay so basically let's say so components of for er diagram components of er diagram so our components has been divided into three things first one is ddt so we all know that what is an entity uh in this particular entity would you have a weak entity so what does this a weakened it means let's say you have an a bank account okay let's say bank table so the attributes for this particular table will be bank name and a bank a branch branch ifsc code so here this this bank is a table name we often call as an entity and these were uh these things were attributes okay now there is an another um entity called bank account right bank account so it also has a few attributes like account holder name account number and uh uh amount that is residing in that particular account and mobile number email id right so this is all the attributes of this particular bank account now can you tell me is there is that particular bank account exists without a bank so it is not possible right how can a bank account exist without a bank so can i can i say that bank account is a purely depended on bank this is a dependent so without the uh bank entity we can't have and like we don't have that particular bank account entity look i in that situation i can say that this is a weak entity now we'll talk about another component called attributes attributes so the first attribute is a key so a key is an unique attribute which is used to identify the record uniquely let's say what is an uniquely means so um in india there are a lot of people okay so let's approximately there will be 120 crore okay let's assume so if i consider okay let's um so let's assume everyone has their own other card okay so the other card number is very unique right so if i say uh this particular other card number if i give that particular other card number i am pretty much sure that there is no duplicate exist means uh one particular for for one particular other number there will be no two persons were linked so in that case i can say that a person let's say person entity which has an attributes like name other number address a mobile number and email okay now by giving this particular other id okay other id i can i can get this particular uniquely that person uniquely right so even this email as well so i can say that email is also very unique so by giving this email id by searching by searching with this email id i will also get an person unity so this is about a key now let's see next key composite attribute so what is a composite attribute let's say there isn't record calls to entity call student for this particular student there are some attributes like name id id in the sensor role number and address so can i can i say that this particular also address this particular address might have under a few other attributes like pin code of state a city street name in that case is we will be calling this as an composite attribute this particular address is being called as a composite attribute okay the third one is a multivalued attribute what does this multivalued attribute means let's say uh there is a student again okay not a student let's take employee this time to employ so am i guaranteed that like empty entity okay this is entity so uh employee has that um mobile number attribute is there any guarantee that every employee has there only one particular uh mobile number no right now it is zero uh it tell ideas everyone is holding two or more mobile numbers right so i in that particular situation i can say that this particular mobile number is a multi-valued attribute okay multi-valued attribute now the last but not least the first fourth one is a derived attribute a derived attribute so what is this a derived attribute means let's say um a student entity has an attributes like name dob means a data one again it's an year okay and each address so i can i say that okay without uh can i say that ages purely depend upon baby how they will be how so without knowing the year of um like when he bought like when when he came on to the 8th like here can we say can we find out the age of that particular person unknown big no right so if i say he he born on 1999 so in that case i can say that it said 22 now currently so when i say if he born on 1995 then he his age might be and something similar to 27 or 26 right so in that cases i can say that this particular age is purely dependent upon dob so i can again say that it's an derived attribute so since it is deriving from the dob like date of birth okay so this is about attributes converted and now we'll talk about our component uh called relationships so in this relationships again we do have four types first one is a one to one relationship so what does this one to one relationship means okay so let's say uh every person can i say that every person uh will have only only one passport or one other card or one pawn card yes right there will the possibility is only one so every person has only one passport one password has been uh can be assigned to only one person okay so in that case i can say that it's a one-to-one relationship now the second one is one to many one to a many uh relationship so what can be the things let's let's say taken customer entity customer entity so customer has placed an order based on order now tell me if customer can place many orders yes there might be possibility now is there any possibility of a mini orders can be placed by many uh one single particular customer no so i can say that it's an one to one customer so one too many relationship now third one uh many to one so how let's say i have an entity called student so can i say that many students many students can study in one college one particular college and also one college can one college can accommodate many students right that is also a possible case now the last one is many to many relationship what is this a many-to-many relationship so can i say that can i say that many students many students can be assigned to can be assigned to many projects yes right and also i can say that vice versa so many students can be assigned to many projects many projects can be assigned to many students okay so this is about the components of an er diagram this is what most of the times it includes okay so now let's discuss another topic in a dbms so the topic whose name is dbms generalization what does this mean so it means that uh let's say uh we can define a generalization something like this generalization is a process of generalization easy process of in which common attributes in an to our mode like more than one okay now more than one entity can lead to a creating an a new entity okay let's see one example okay so suppose we have and our two entities okay one as a teacher okay so the attributes of this teacher particular teacher will be in name and address and salary let's take another entity called a student college student so the attributes for this particular student will be named address that's a marks here what are the common attributes in both of these entities so this this is and this so this one this one this one this one so can this be lead to a new entity to think think okay so uh i can say that uh all teachers are people and all students are also people right so can i can i say that so will this our teacher and a student entities will lead to having and a people entity okay people easy okay so the relationship is easy and yeah we will be having this and we will be having this so i can say that every people have the name attribute and address attribute but on top of that a teacher might have a salary a student might have a marks so when you are talking about generalization you need to consider these things from the bottom to the top okay so teacher is a people student is a people so people have the attributes like a name and address a student how we are tables like marks and teacher might have attributes like a salary right so what we have done here we have created a new relation and reduced the repetition redundancy of and now table attributes right so and uh one thing here is we are considering it top bottom to top and uh from the bottom uh entities we are creating the new top level entity and uh there is something like that whatever the new entity that has been created as of now from the by using the bottom two entities if required okay if required while creating another top level entity that new level entity has to be mingled up with these two entities as well okay so on that note let's see another attack so dbms a specialization in simpler words i can say that in simpler words i can say that opposite to a generalization yes so what we have done in generalization by considering the top uh bottom level entities two entities we have created the top level entity right but in specialization by considering the top level entities will be we will be creating or deriving new bottom or low level entities let's see how okay so basically every employee will have a name a salary employee id now can i can i say that so uh can we how can we divide this into a different particular in entities okay so can i say that so employees might be let's say considering software company okay so employee might be an um software developer employer might be an software developer software engineer in test so employer might be an hr right so let's uh let's try to divide this particular employee top level employee entity into an um few uh low level entities okay let's see how we are doing this so we'll have a employee entity here and what are the common things for all the employees a name a salary and an employee id okay every employee will have that but on top of that we will be having some use a relationship okay so from here we will be having a developer so like uh well coming to let's make it very simple okay so the attributes for will be a boolean type let's consider boolean type we will give you some programming language we will be taking just whether he knows that particular language or not that's it okay c plus plus java okay so python she shop okay kind of now let's consider another case so a tester okay so what will be the qualities of register so you might be able to uh write in test cases like manual testing manual testing and automated which were like a script based interesting okay and integration testings as well okay now when i say a cloud engineer sre or something so cloud engineer now he must be able to know all the terminals of oops like devops and he might be good at cloud like either aws and a cicad pipelines and all right so this is how we have uh divided our particular employee entity into multiple sub uh sub entities right so again so this has to be uh started from top to bottom okay top to bottom in case of generalization it's a bottom two top now we'll see another thing called our dbms aggregation what does this mean so aggregation is a process of uh in which a single okay process of in which a single entity is not able to make sense in an relationship okay so the relationship of a two entities is being uh combined to an another new entity okay let's see let's see okay let's take an example so basically uh let's take an again id company so every employee works on one project so again project is and one entity employees and one date because they are independent voters okay so project might have a project id project name and a product owner okay so employees will have again employee name employee id address kind of stuff okay now this is an one entity like one particular block let's consider block okay now can i say that uh for every employee there will be one manager for every product project as well there will be manager right so in that case can i say that so if i directly write an relationship between employee and manager we might miss an relationship between a project and employee so can i say that now if i draw this here manage managers right so if i write something like this then it works right so manager works on this entire block okay he sometimes works with uh he is responsible for employees and he is responsible for one project as well so this is called aggregation okay so earlier we have i have discussed what is a key so key is an um unique attribute okay so which uniquely identifies an entire tuple or recording and database okay we do have a different types of keys existing than a dbms okay now we'll talk about them within one example lucky so let's say you have an um like two tables with the attributes of like this okay so student table so you have a student name and roll number um other id other number a mail id address and you do have another table called a course okay so it's this has a course name so usually students enroll in that particular course right like dbms always mathematics operating system something like that so then a course id uh then faculty name who is teaching that particular course currently okay now done now tell me now tell me so in this particular student table what are all the unique things let's say so can i say roll number is my unique why so so let's say so there were 5 000 students enrolled in one particular college so if i say roll number if i pick up any roll number is there any chance of getting that same roll number for now under the student and no there is no chance right so if i if i give any particular role number that must be unique so if i give particular role number he might he can tell me the student uh details so reason unique and what about this other this is an entire nation unique thing right so that's uh there will be no two persons with the same other number so it is also in unique so what about email it's an universal um unique right so now what about name there might be possible right there exist and two name okay there are their existence two two students with the same name right and actors as well okay so let's say uh there were a brothers and sisters okay so they are from same family okay they are studying in same college so then then their address and parent address and mother names would be same right so in that case i am not saying that address and student names are not going to be unique so all these attributes okay what are all i can i have seen i said like top all these were uniquely identified all these were candidate keys candidate keys okay now upon so we don't need three three things right three keys to identify i am pretty much sure that any of these three things will work for me okay so in that case uh so uh since that table is and wrote a student related so i can pick up an roll number which uh which does my task very simple a manner so i'll pick up a roll number as my unique column then i will call this as a primary key okay so among all the candidate keys available right there okay i will pick up one key okay so uh to add a to identify and entire recorder or row uniquely so that particular key has been called as a primary key now what about other two keys that exist in and candidate keys like other and the email will be called as an alternate keys okay alternate keys make sense now we'll talk about a super key okay so now tell me now tell me so i'm pretty much sure that although um only with a roll number i can get and now i can edit and enter record but now tell me so can i get an um student name so can i get in now one particular student by giving in a student name as my search key no right so there might be a multiple students of it the same name so if i add if i add a role number to that particular name that will make my job a little bit easier can i say that yes so in that case i can say that by combining the student name plus a student a role number it will be more powerful okay so this combination is being called as a super key even a long only student role number will also get my job done it is awesome it might be also on super key but no i can't say it's in super key but it's an um candidate key right so i can simply say that a super key is a okay make sense so the definition of an super key will be looks like this a super key is a set of one or more columns which uniquely identifies the entire recorder row okay now uh the last key that exists is a foreign key which is very very important foreign now tell me or tell me in the beginning i have said student enrolls in a particular course so i have to store that particular course details in an student for particular student right so i will have an another course id in here so why so so here by having an course id i can uniquely identify the entire course details right so it means that it will act as a primary key in a course table so by having in reference of course id from the student table i can like i can get an entire course details in a course table right so that so it means that it will act as an foreign key in my student table so what is this foreign key definition goes something like this uh a foreign or the a column of a table that points to the primary key of an another table okay points to the primary key of another table so they act as an cross reference between the two tables okay sorry cross reference so uh this particular in this particular course table the primary key is being point to our um same as an key in this particular student table so that's all about the keys so now let's discuss about normalization normalization so what is a normalization so basically a normalization is a process of organizing the data in database okay to avoid a data redundancy and some anomalies so what is a data redundancy so data redundancy means uh simply you can call it duplicates okay so what is anomalies anomalies or problems okay that were arranged during the uh data insertion in and table or well like in database okay so let's see so let me write the definition of a dart follow okay a normalization is a process of organizing the data in a database to a wide data redundancy comma anomalies okay so this particular data redundancy means uh storing duplicates or means a duplicate value okay anomalies means ah you can simply call them as a problems so hope you still might be in a confusion let's see what does this okay so let's take an example table okay where you will be having a employee id employee name and uh employee address sorry employee address uh this is not address this is let's consider this is a department like where he belongs to okay where he uh belongs to and the uh department id okay department id code so let's assume this is our database and we do have some our records in it okay let's say when i say records it might be let's say employee 101 our name is omg okay so employee department is let's say we do have department names like a godavari okay so and department id let's say department id is rt101 okay d1.1 and we now have another uh record let's say r80 he belongs to krishna department and department id goes something like this okay now we do have another thing so a vmc sorry omc and uh he belongs to spiderman's team or avengers whatever you mean call okay and also a bomb sees like one not one this person is again belongs to another team let's say krishna okay he belongs to krishna team also now let's see now let's see what are all the anomalies we might get okay so first one tell me so uh let's assume here uh one c is like one not one or not one okay now there is a are two records associated with one not one employee id now i wanted to update the address of a once okay i wanted to update the address off and now update the address of 101 employee now how many times i need to update at two times now let's suppose i forgot okay i forgot to update for two times i have updated only for one time okay i have updated this guy okay so like so i have made it as a bangalore and still he belongs to a mumbai now tell me is this a problem this might be a problem right so this kind of problems is called as an update anomalies okay update announcements now let's discuss about a delayed anonymous a delete now let's say suppose i i am trying to delete the department okay so like we have in uh spiderman department with the department one or three i do we are trying to remove that entire department like means i decompose that particular uh department okay now so if i delete this particular department this entire record will get deleted there might be a chances so what is happening we are losing one person do you think that yes so that is called a delay term okay now what is an insert anonymous so let's say let's say so this particular department id is a primary key okay this is a primary key now i'm in new joining okay so i joined in a company uh like two days back so still i was i am in an um training phase only uh no department is being allocated for me okay now some people is trying to update my database to get an id card for me okay so now tell me do i have a department id currently unknown because i am not belong to i am not assigned to any department right so whatever the date i have is this particular employee let's say 104 and a name let's say psi okay so i don't have department uh employee department and the department id as well so it won't take the this record right you record this code sorry we recorded uh it won't take this particular record so what happens okay so it won't take that record so we lost the one particular employee name so that kind of uh problem is called as an insert analogy okay in satan i mean means that during the insertions like insertion into the db so our delayed environment means uh while deleting the uh data from adb update means while updating the data which is present in database okay now this is about uh normalization and anomalies so how we are going to solve this kind of problems is called as an normalization okay so we do have different types of uh normalizations so those were or a classifications okay we might call it as a classifications as well so first one one nf two enough so first normal form first normal form a second normal form a 3nf and bc enough and we do have a 4nf and 5nf but but this were not uh necessary okay not necessary what does it mean not necessary so whenever we achieve this bcnf for a particular table in database then we can say that there there will be no data redundancy there will be no anomalies okay so we can say that that particular table is all set okay so we don't require these things okay so that is the reason why uh in interviews also in most of the interviews they don't uh track this four and a fun 500 topics okay they will end up at uh busy enough okay not even bc and yeah so in some cases they will ask you bc enough otherwise they will just ask you to define this what is um 1 and f 2 and f 1 3 and f but when i say like when they ask you to define it's your responsibility to take in one example and then you need to explain it because uh in an interview mostly interviewers are not interested in hearing the standard textbook definitions they want something like more than definition like let's say concept okay what you have understood from that particular point okay that is what they want okay that is what they are expecting from you as well okay now let's see what is a one enough okay let's start with one nf okay let's say we have a table like this uh student id student name and student mobile number okay student mobile number so what is the data it has our student id is 101 102 103 names are bom c ready okay so now uh mobile numbers are this guy has a two mobile number okay so i am writing only five digits okay so consider in real case okay uh so another thing another mobile number is this and this guy has this and this guy has this okay these are all the mobile numbers they are holding now tell me so the formula of like what is the principality of one another is uh an attribute of an table cannot hold a multiple values okay it should hold only atomic values atomic values in the sense it has to contain only one value under one particular attribute let's say so in our case under student uh mobile we are holding a two values right so this is not the one nf principle so we need to convert this table into the one and f right so we need to convert this table to the one and f so here what we can do now we can simply flat this uh one entire table so when i say flat let's say what we can do now um okay so what we can do uh let's say one not one one c one this one is one and i can make this one three four two five with another new record okay so same id is same student name is one c but mobile number is uh one three four two five so now there is no problems in this a one not two one one or three if suppose if suppose again one or two has uh two or three mobile numbers let's say two more or three mobile numbers okay three mobile numbers okay so now again this with this particular student id we do have a we might have a three records okay in our flattened in our one and f convected table okay so something like this so here we will have first number here we do have a second number here we do have a throat momentum okay so this is what a first nf first normal form okay now let's talk about a second normal form so let's first discuss the principles of um second normal form so here the principles are fasting our table must be in one enough okay so whatever so whenever we are trying to convert one particular table into an two and f that table must be in a one and f okay it must have to satisfy that principality of one enough then second thing is are no non-prime attributes so non-prime attributes in the sense of non-primary key attributes okay is a dependent on dependent on the proper subset of candidate keystep candidate keys okay let's see with one example okay i'm sure by seeing these definitions you are not going to learn anything apart from marking up those definitions let's see okay now let's see so would you have a table something like this okay so a student id a student name and a student each okay so student id is of one one so let's say 11 1 it's not a student name let's consider it's an uh course okay which a student has been enrolled okay so 101 student id is enrolled in let's say dbms subject and his age is 21 now again one not one student might be enrolled in other courses as well so what is that it's a voice like operating system so again his age is 21 so we do have another with a student without id 120 okay so he is also enrolled in uh computer networks he says he's 22. okay now another guy with uh 120 sim and he enrolled in um machine learning subject with age is 22 okay so this is the data we have in our table okay now it's our job is to convert it into the to end okay now now let's say can i say that this particular table is in one nf yes so for every attribute it is containing only one value so that i can say that it is in one end now now we need to follow the second principle of um this guy okay um so the here tell me what are all the candidate keys here candidate keys only student id right so the keys which are uh helpful us to identify the record uniquely that is only this student id so what we can say what we can do so here our primary key is prime key is student id okay primary key is a student id now now what they are saying so they are trying us to every non-prime key attribute has to be dependent on primary key that is what they are trying to say okay let's see so what we are trying so can i say that this course is dependent up depend upon this particular student id so if i give you particular student id can i say all the courses that he go uh that he enrolled in particular semester yes i can say that now tell me if i give you particular uh student id can i say that now so can um can i get the age of that particular student yes that might be the case so it's your table has been simplified something like this okay so let me draw here only okay so what i'm trying to do now so first i will have a two different tables one is a student age to age age table so where i will be having uh uh details of all the ages of a particular student id okay let's see here this guy triple one uh student id with triple one having an age of twenty one okay now again two triple one twenty one yes we do have that now again one twenty twenty 22 inch so 120 and 22 8 again 120 22 each now whenever uh i want uh age of particular student okay now i can simply give you the student id you will give you media you can give me the student age that's okay fine now what about this course table so i will leave you that course as it is because because so if we want to make it as a how can we make it so we can make it like this but we are violating the principality of one and f hope you have remembered that definition of r2 and f right so that table must be in a one nf and also that has to be in then uh like all the nine non-primary attributes must be associated with the prime caretaker so i will leave that course table i will leave that course table as it is okay something so let's say one one one one one one one twenty one twenty first guy is enrolled in dbms and then os then c and then ember okay so whenever i want this particular student age i will simply make a call to this guy okay done this is what to enf okay so it's very important to know the examples okay at least if you are in an interview you have to say these kind of things okay so not even like simply drawing all the stuff even let's assume you can say something like this let's assume so we have one table with the attributes like student id student name under student teach so here the principles of uh second to nf is the table has to must be in one nf and it all the non-prank key attributes must be dependent on the primary then you can divide those things into a multiple tables that's it okay now we will talk about three and three enough so what is this a three and f means let's see so i can say that it has to be in table must have been to enough okay table must be into enough that is for sure now now apart from that apart from that so like let's say uh transitive uh functional dependency of a non crime attribute on any super key should be removed okay so yeah it doesn't make sense to you i will we'll take one example and we'll see what it is actually okay let's see we have a table of employee this time let's change the table system okay let's say employee so employee id employee name and i employ address now let's consider address okay so pin code okay so pin code or chip code whatever you might call okay and then i'm storing the state then employee city then employee district okay so it has some data let's assume we have all the data now what i'm trying to say now what i'm trying to say now so this if i give employee id i can get this entire row uniquely is there any key something like that unknown so here candidate key and primary key is employee id employee id now now is there any possibility of decomposing this table again so think think uh yes i can say one thing so now let's forgot this entire table now let's assume we have this only div you have this table now can i say that can i say that this if i give this enter pin code or zip code whatever it might be so can i get the entire row in this particular table in this particular table yes right uh under pin code and zip code or pin code or zip code is very unique okay it must not be given to another uh state like another districts or another places or another legislators right so what i'm trying to say so i will i will decompose that entire table into two tables so i will have employee id employee name and employee pin code okay i will have something like this now i will make this pin code connected to another table called address table address table where i will be storing all the um all the pin codes okay let's say i will have a pin code then state then city then district okay now whenever so i will give all the pin codes here of particular employee now whenever i search with this pin code i will get enter state and city and district details that works that works right so this is about the three enough now um now we'll talk about the bcnf okay now we'll talk about the bcn now so the full form for bcnf was voice of code a normal form okay voice code normal form so again the conditions like our principles of this particular will be so it has to be in a three and a for sure the table must be in three enough and a second thing so like i can say that bcnf it's a little stricter than a three nf okay so a table comply with bc enough if it is in if it is an in sorry if it is in three enough and for every functional dependency okay let's say x 2 y x should be super key of a table what does it mean let's say uh suppose let's take one example uh there is a company where our employees works in multiple departments okay employees works in a multiple departments let's see so employee employee id employee nationality employee department and department id department id and a number of people in department particular department okay now i will say so employee id is one zero so one zero one and employee nationality is indian here department he works for uh department id let's say 101 and in particular godavari there were 250 people who are working let's suppose okay and you do have uh so again this one not one guy so one double zero one guy also works in another department let's say how again he is an indian so he is uh another department is krishna department id is one of two and in that particular department let's have a hundred people are there and there is a guy with uh one zero zero again he works for two different uh departments and his nationality is america again he works in both godavari oh 101 102 250 100 so this is the table that we have okay now let's try to identify okay so let's try to identify so can i say that uh like how can i say this entire like uh employee functionalities depended on this employee nationality is dependent on this employee one thing yes now i can say that employee id gives you employee nationality now what is other case so can i say that can i say that employee uh like these things so yeah department id and number of members in a particular department is depended upon the this particular department is employee department yes so i can say that employee department is equal to employee department id and a number of employees okay now how we are going to take this into the bcnf okay so we can break this entire table into three tables okay let's see how so first of all let's say nationality table nationality a table so in that i do store employee id and employee nationality okay so zero zero one is an indian and this guy one double zero two is an america that's it for this a particular table now i will have an another table okay so where are department table okay department table let's say i will have a department department id uh department of people like number of employees okay so first department we do have godavari and id is one zero zero one and number of people and then we do have a krishna and it is a one zero two and we do have a hundred employees in that okay that's it now we have another a table uh which is currently mapping to that particular both tables right let's say let's see so now i will in this particular table i will have only the primary things okay primary case primary attributes let's say what is the primary attribute in a table one it's an employee id now what is a primary attribute and second table it's an employee department so now i can say that one not one belongs to go down again one not one also belongs to krishna and one not two belongs to godawari and oh this guy belongs to krishna done so whenever i need uh entire department details i will go to krishna i will get that whenever i need an uh national deaf and particular employee i will go to national table and i will get the nationality okay so uh that's all about the normalization okay so i highly recommend you to think on your own okay like try to frame okay take a couple of examples and try to divide those things what kind of problems that you are going to get okay now let's talk about um transaction management in dbms so what is the time what is that transaction a management in dbms what is a transaction what is your transaction it can i say a transaction easy a transaction easy a set of logical operations a transaction is a set of logical operations i know you might be in a little bit confused but let's see one example okay so let's say uh you are sending some amount okay you are transferring some amount from your bank account to your friend bank account okay so now tell me what are all the operations that are been coming in this process like right from the sending to uh or like receiving in from your in your friend account let's say can i say that first whatever so you need to read what what is that more that currently is been in your account let's say r is for a read w is for right first you need to extract the amount which you which is print in your account then then i'm assuming that uh your amount is been in this year okay your current account or current amount okay now let's say in yeah okay so in your current bank account you have a thousand rupees okay now you are sending 500 to your a friend okay let's see so what you need to do you need to minus a 500 from this thousand right so and now what you need to do you need to write these whatever the amount let's say thousand minus 500 it's a 500 you need to write that amount to your bank right so right okay so now we are successfully so till now your job is done okay your job is done your job is done now now what has to happen so basically after the amount has been detected from your account it has to process that amount to your a friend account let's say so again so i will be getting those money from these two uh your friend and being it is being stored in b now whatever the amount i am sending it has to update that data in your friend data like friend account right so b plus 500 done now i need to write this data to my account that's it so can i say that what these are all the transaction that has been involved in this particular entire transaction right all the operations that are being involved in this entire transaction right so let's let's simplify this like let's give some over what we have done so first we have uh radio current account right undetected amount from your account and we have updated the amount in your current like in your current account right then we have initiated um amount to your friend and we rate the amount of your friend and we have updated the amount present in his bank then we have committed that changes like whatever the amount that has been updated we will be updating that in database as well okay so these are all the transaction operations now let's see what happens you might have a question like a transaction fails in between operation okay you might have this question right so let's see what happens so uh let's suppose you are using some android application or you are using some online application to send money to your bank okay so like come to your friend now let's say you're a sender and you are at a friend at the receiver state now you have initiated your transaction okay so from your bank it has to go to receiver now amount is got detected from my account but but it is failed to update it to my offer like fail to send that amount whatever that is being detected from my account to my friend so what happens so like in general in general everyone must have used applications right so it will say your money uh will like your money will get back to you get back to your account within one hour like one hour or two hours right so it has to be now now let's say this is the failure case right this is the failure case if it has been a success case like this so detected and success success success so can i say that whatever the amount of money that has been detected from my bank will get reflected in my friends bank yes can i say that now what is being happening what is being happening so can i say that if transaction is got failed okay transaction failed i am roll back my changes to the okay previous changes previous changes like before initiating that particular transaction now if like success case right so i'm committing my committing changes at both ends okay so whenever that particular transaction like operations all operations in a particular transaction are good then i will commit my changes at the both ends at receiver and server sender so if everything if something went wrong okay and a transaction got failed then what i will do immediately i will roll back my changes to the previous changes okay whatever the state uh has been there before that before initiating that transaction okay i hope you had some good knowledge on these transactions now we'll talk about another important question on transactions in an interview so acid properties acid properties so what is acid properties so a stands for atomicity c stands for consistency i stands for isolation d stands for durability we'll talk about them each okay we'll talk about them each so what is it let's discuss start from this atomicity so what is our diversity so let's say uh your hand account b account a and account b okay in account a you have 500 rupees and in account b you have 1000 rupees now what you are doing you are transferring hundred rupees to account okay this year so means so we will detect your money okay and it has to update here so it's in success case right so now let's suppose it got failed here okay suppose it got failure means ammon got detected here and uh changes were not updated like money didn't receive that particular whatever you have sent okay now in that case what you need to do so you need to be come to previous state right so roll back so what does this atomicity says now either either either your a transaction should be successful if it is successful you need to commit okay what we have discussed earlier if it is failure you have to roll back to previous changes okay so you should not be in a middle case okay where let's say where uh money got detected from you okay and uh money didn't updated in your friends account okay you should not be in that particular state right so who wants to be like that right no one so either it has to update currently or it has to not to update everything okay so that is that is what the principal principle of atomicity now we'll talk about consistency consistency now let's say again you have an account okay account ta okay there were two accounts account b and account c okay you have a thousand rupees in your bank okay you are trying to send a thousand rupees to here thousand rupees to here well sorry hundred rupees sorry hundred rupees to here and here now you have initiated a transaction like concurrently both are running a concurrently okay concurrently means both are running at the same time same time now tell me so it has initiated transaction so b is assuming that so after after uh withdrawing that particular money like money got detected from the yes account then it should update then it will update us uh nine again c will also do that same right so because well whatever the like before while initiating this particular transaction accounting as thousand rupees so it feels that i'm the only one who is doing this particular transaction then it will update this thousand to nine hundred hope you got this now tell me is this the right way to do so no okay so in this particular case we can say that this is an inconsistent okay so actually our database has to update 800 but we have 900 so in real time we enjoy the most but that should not be the case while designing the software like at least as a software developer if i do like that entire like um a bank bank will come to my company and will drive screw yours right so that should not be the case now now what is isolation so what is the solution this is the solution for this consistency okay let's say so it it says that at every time okay whatever that time so only one transaction has to be executed okay so we have seen some problem with while uh here right so here we have initiated two transactions so we have seen some inconsistency problems so for that we are saying that solution might be isolation so it means that so at whatever the time you have to initiate only one single transaction at a time okay like you can say that single transaction at a time now what is the last one a durability so we do perform lot of transactions right we do perform lot of transactions on our banks so at the end of the day at the end of the day whatever a transactions i have made all those things will get reflected on my bank account right balance bank balance right so whatever so let's say i have seen two thousand then i have received thousand then i have again sent two thousand i have received five thousand so whatever happens uh like my bank account balance has to be reflected and it has to be preserved for longer okay so whatever changes or transactions i do are those reflected changes affected things has to be preserved for forever okay preserved forever great hope you got guys had an good understanding of property it's very very important to understand okay so if you have not understood please try to have and look over again okay now we'll see the states of n transactions states of transactions so transactions okay so what is that trains uh transaction states okay so first so whenever you start an transaction it has to be inactivate okay now now let's say so you have started in transaction okay due to some reasons it got failed okay then what you will say but must be go to failures fail your state okay fail your state now there is no problems you have performed enough read and write operations okay then it has to be committed that then it has to be committed now now okay let's say so after committing your changes okay so like among that has been detected from your bank okay but your friend didn't receive that amount then it might be failure case so yeah again it might be a fail failure now so what is the other case so after committing let's suppose okay let's uh so sorry it's partially committed so let's suppose your transaction is successful okay your friend also got his money all right got your money in his bank account then we can commit we can say commit you can say commit now now so if freeze fails if it is fails we need to roll back to our previous changes right so after roll back we do abort okay if we do abort it will get roll back okay so whatever happens at the end of the day we'll terminate our like will uh will finish or terminate right our transaction that's it so these are all the states often one particular transaction now let's talk about a deadlock in dbms deadlocks so again deadlock is been a very important topic which is asked in every product based companies if i say and also the the same code as contact sorry the same topic is being reflected in os as well operating system okay now let's see what is this a deadlock means so a deadlock is a condition okay network is a condition where in uh two or more processors are waiting for each other to execute okay but none of the tasks are willing to share their resources let's say we have a process one okay which is are doing some tasks okay and it is a using a resource called r1 the resource one okay now so again there is a process called to process two and which is using are resource 2 okay resource 2 now now here the problem is so to complete process 1 okay to finish the process one task it need it need r2 okay it need r2 but but the problem here is r2 is currently used by r1 sorry p1 p2 sorry p2 okay but to come the problem for to complete the p2 task p2 requires r1 which is being currently hold by p1 so p1 is not interested to lose is r2 okay it it needs that and also it is waiting for r1 as well and p1 is not interested in uh giving r1 and it is waiting for r2 so can i say that it is being full pack like traffic jam okay so this kind of situation is being called as a deadlock okay so hope uh like you got an enough idea okay let's say i will put these points here okay so the point one is p1 holds r1 and waiting for r2 okay p2 holds r2 waiting for r1 okay so this is not going to happen right because either of the processors are not giving up okay so to say like uh so to say when these kind of situations may occur so we have an conditions which were been called as a kaufman conditions there are four conditions okay if uh like four conditions or get satisfied then we can say that deadlock may occur okay so the first one is mutual exclusion mutual exclusion what does this mean let's say so there are no like one or more than one resource are not being shareable okay so let's say there is a resource which is b which has to be allocated to only one person okay so which is not shareable okay then we can say that it might get into an uh deadlock condition just because risk it can serve only one process a data right okay one or more resources are not shareable this is the first one now what is the second one the second one is hold and bait obviously we know that right so it is holding something and it is waiting for something right and other one other one is also holding something and waiting for something okay so in that cases we can say that it might enter into deadlock condition now what is that one so the third one is unknown preemption or non-preemption kind of stuff okay so what is this unopened so let's say there is one process which is being executing his task like come doing his task now you wanted to do your tasks okay so currently p1 is doing his stuff and you even at the same time you are you have some budget and you wanted to do your task as well so in that case is you have to wait you can't drag that p1 you can't say like hey i have to go i have to do i have so much it work you can't say like that you have to wait till p1 completes its task okay there is no mid away it has to complete and then only you can go and do your task okay so in that situations i can say that it might endure in deadlock situation now last but not least a circular rate so as you can see in our particular diagram so yeah here this is in circular way right so it is p1 is waiting for our holding r1 and and uh our p2 like process one process two is of waiting for p r one and it is holding r2 and r2 is uh like p1 is waiting for r2 so this is a circular condition so now no one is gonna execute it okay it will be going in infinite look that so in that in that situation as well i can say that it might enter into a deadlock situation now think what are all the handling like deadlock handling conditions deadlock handling methods so first one so the one which i allow them more and nowadays which is being very used okay so just avoid like whatever like ignore the problem you can simply say ignore the problem so problem in the sense deadlock so what are you saying so you got some deadlock issue and you are saying just ignore that like how how this is going to bend one handling condition no i can say that this is not a condition but but why i'm saying this okay let's see let's understand so basically let's consider let's consider okay so you got a deadlock situation and your system got hanged okay your system got handled so i can say that to resolve that particular deadlock issue resolve issue like deadlock situation it will take 10 minutes of time okay i can say that in 10 minutes of time and even it will be a little more costly as well okay now uh so how much of time do you require to reboot your system can i say can i say or not more than two minutes or three minutes so which one do you prefer now as a developer so i will prefer this one right which is a time so it it does my it finishes my task it within some little time okay so like two or three minutes so that i can continue with my work so that is why i ignore the problem so this is not a bad solution this is been used in windows and unique systems unix systems okay this is not a bad solution now the second one is uh deadlock avoidance so what does it mean what does it mean so let's uh let's get all the requests okay from like whatever you want to process okay now if there any chance by any chance if you get in deadlock occurrence okay so if you if we have uh observe that there is one deadlock situation has been occurred now stop there stop there and check all the processes okay so what whatever the condition like whatever the process that caused that our deadlock situation then go take that out okay take that out just leave it that's it okay just leave it so what i'm trying to say now so let's assume this is your or cpu okay so connect all the requesters okay now if any deadlock situation has been arrived okay then stop then stop and take each request at a time uncheck for deadlock condition okay so if if and by chance if you found any request that is causing deadlock okay just avoid that particular request avoid that particular list request then do continue with your uh processes other processes okay so there is one famous algorithm which does all these tasks that is called a bankers algorithm now let's move on to next handling condition next handling condition so that is a deadlock prevention uh no no before going to deadlock prevention let's discuss deadlock detection and recovery okay so it is again same collect all the requests okay process everything and if you found any like if if you want any uh particular request cause to deadlock okay then take out that particular request okay then try to recover that like whatever the request that cause did it talk try to resolve that okay then that works okay so now uh last one a deadlock prevention deadlock prevention what does it mean let's say so now again we'll come to come back to our kaufman conditions okay okay we'll try to have one solution per at least uh like for every kaffman condition okay first one is a mutual exclusion so uh like what is the problem that we have got so we got that uh we don't have any shareable things every resource can share only one particular process so now what i what we can suggest so we can suggest to make processes as such make resources as shareable that's it which can a serve uh one or more processes are data okay then that will help resolve our issue now the next one is hold on a weight now so it is like what is this uh problem is causing like let's say if we saw that in root cause so it is holding something and it is waiting for something which means before it started you don't know what exactly it required if it has that uh if we if that particular request knows what it what all the resources it required it should have asked earlier right so before starting that particular process it should have asked everything and after getting everything if it started then it won't enter into that particular deadlock situation right so what i'm suggesting now before starting process request collect all are required um resources and then enter into execution that's it then there is no waiting right then there is no waiting okay so this might be one kind of solution now what is that next one so next one is preemption what is this preemption so let's say we have went and p1 okay first p1 now it identified that it requires uh some kind of uh resource okay so whenever it says yes i need request to complete this task then take out that process outside and continue with next processes that's as simple as that right so then collect all the required resources then again process it after the next one it makes our job easier right now last one circular weight so this is little interesting let's say we have a p1 and it is holding r1 okay and it is waiting for r2 which is been allocated to p2 okay now p2 is waiting for r 3 which is b again you assign it to p3 now pt is p3 is waiting for r one okay so now can i say can i say if i able to cancel this particular call from me okay now can i say that i'm not going to enter in a circular wait yes now what is that condition okay what is that condition so if you observe that thing uh slightly that is done because let's say if i'm so if i say if i have a condition okay so if a resource is if your resource is less than your process request let's say here process request is p3 and the request like resource that you are requesting for is r1 which is a smaller than right so it it means that r1 is currently holding by someone okay so whenever such kind of request has been made by any process just say i don't give okay just say i don't give so in that cases i we won't end up in a circular rate right so that is the case so hopefully you have learned a lot from this and that tutorial if you are visiting channel for the first time don't forget to subscribe if you like the content please hit that like button up if you are if you have any questions or video requests that you would like to hear from scalar please let us know in the comment section catch up in the next video hey folks i welcome you all to scala academy's youtube channel and this is the first video in the sequel tutorial series now before i start off with today's session i'd request you folks to subscribe to our channel and also hit the bell icon so that you do not miss out on the notifications so on that note in this session we'll start by understanding what exactly is sequel and then we will go ahead and create a first database and table so before we do all of that let's understand what a sequel so simply put sql stands for structured query language well that is just the extension of this term sequel but what can you actually do with sql well with the help of sql you can communicate with databases okay that's fine but what is a database well whenever you have to store data and if you have to store that data in an organized form you will need a data piece so simply put with the help of a database you can store your data in an organized form so let's understand the example of database and tables with a simple example so i have got this t set with me i hope you guys can see this properly so in this t set what you can consider is this entire thing to be your database and in this entire thing what you're doing is you are organizing your data in a proper structured way so this entire set you can consider to be a database and these cups which are present inside it you can consider to be your tables and if i have to simplify it what i can say is let's say if you are studying in a college then your entire college or all of the information about your college would be stored in your database and in your college database you can have multiple tables so you can have one table for student information another table for the faculty information another table for the department information and this is how you store data in tables and those tables are properly organized in your database but there's a catch over here if you'd have to work with the data which is present in these tables or which is present in this database then you need this language called as sql because without the help of sql you cannot extract data from these tables and this is where my friends the knowledge of sql comes in so with the help of sql you can properly either maybe insert data into this table extract data from this table or even manipulate the tables which are present inside this so but we understand what exactly a sequel let's go ahead and create a first database and our first table using mysql server so i've opened up my sql workbench over here now before i go ahead and create the database let's again understand what does my sequel and also what is my sequel workbench so mysql is a database management system so we know what exactly is a database and again to work with these databases what i need is a database management system and that is exactly what a dbms means and we have different types of dbms so we've got mysql we've got microsoft sql server we've got the oracle sql and are these right now the dbms which we are using is my sequel and if i do want to use the gui tool of this that is what is known as mysql workbench so as you can read over here mysql workbench is the official graphical user interface tool for my sequel and now let me go ahead and open my local instance so that's what you see over here local instance and i have to type in my password so user by default would be root and then whatever password you had given just go ahead and type in that and i have opened up my window so over here let me go ahead and create my first database so to create a database this would be the syntax let me increase the size of it so that you can properly see it so here i'll write down create a database and after this i would have to given the name of this database so this create database what you see are the keywords so create a database this is the syntax which you would have to use after this just given the name of the database let's say i given the name of this database as college after this let me just put in a semicolon and let me select all of this and this thunder symbol which you see just click on that now when you click on that here you would see that create database college and here you would see in response one row has been affected this should basically mean that i have successfully created my database called as college now after i've created this database if i have to go ahead and create some tables in this database i would have to use this database so for this i will write down use and then given the name of the database so the name of the database is college so i'll just write down use college again i will hit on this symbol again you will see that use college response zero rows has been affected again this would basically mean that i have successfully selected this particular database now that i have selected the database this is my opportunity to create a table inside this database so inside this college database i would want to create a table called as student and to create the student table this would be the syntax so i shall write down create table so by default this is what you would have to write create table and this is the syntax to create a table in your sql server table or sql server database so i tried on create table and then i'll go ahead and given a name to this so i'll just write down student so this would be the name of my table after this i will given these round braces and inside these round braces what i'd want to do was i will given the column names and also the type of the column name so first well if you're a student at a college you will have a student id so for that student id i just represent that as s id and then i will give this a data type so let's say the data type for this is int then going ahead i would need the first name and the last name of this student so here i'll just have s first name and the type of this would be variable character or var and over here let me just given so let's say the first name the maximum length of the first name could be 25 characters then after this the student would also have a last name and if the student has a last name i would create a new column for this and i shall call that column as let me just write down last name over here again i will give this a data type so for this again the data type would be wirecat again the length of this i will set it to be equal to so here 25 basically means that the length of the first name and the last name could be anywhere between 0 to 25 but cannot exceed 25 characters and now so i've created columns for the student id student name the student last name i would also need another column for student marks so here i'll write down s marks again let me put it to be integer so this is also set over here now i have given over here four columns and also since everything is set i will end this command with the semicolon so what i've basically done over here is i've created a table called as student and the student column or the student table has four columns the four column as student id and the data type of student id is integer then we have first name and this is a variable length character which would basically mean you can give strings over here and over here again i have last name where again you'll give a string and then you have the marks where it is of integer type and you end this entire thing with a semicolon now let me select this entire thing and let me hit on this and here if you look at this you will see create table student 0 rows affected this again would mean that i was successfully able to create this table called as student now let me delete this entire thing and if i would want to see the table what is present in this table or what records are present in this table i have a command called as select or i have the statement called as select so here i shall write down select star from and i would have to given the table name so the table name is student so select star from student would mean that i am selecting everything or all of the records in all of the columns which are present in the student table so let me select this let me hit over here and as you see i was successfully able to create this student table which had all of these columns so here i've got the sid which is the student id then i've got the first name the last name and s marks so folks this is how we can create a database and a table using sql so folks this would be the end of this video in the next video we'll see how to insert data items or records into a table now before i end the session again i'd request you folks if you find this session to be informative do not forget to hit the like button and also do subscribe to our youtube channel so thank you and let's meet in the next one hey folks i welcome you all to scalar academy's youtube channel and this is the video number two in the sequel tutorial series in the first video we understood what exactly a sequel and after that we went ahead and created our first database and our first table and in the second video we'll see how to insert data into our sql table so will not at all waste time and open my sequel and go ahead and insert records into the table so i've opened up my sql workbench over here let me go ahead and connect to my local instance and over here again i would have to given my password and i have opened up my sql workbench and over here in the first tutorial or in the first video if you remember we had created a table called as student and that student table was part of the college database so my first task would be to use the database so for that purpose i'd have to write down use database let me also just go ahead and increase the size of the text so that you can see this properly so here i shall write down use college and let me execute this so we have successfully executed this now we have opened our desired database so the name of the database is college and in this college database we had created a table called as student now let me also go ahead and open that table or maybe just select all of the records which are currently there in that so for that we had use something called as select star from student so what this basically means is i have a table called as student and from the student table i am selecting all of the columns and all of the records and that is what the star means over here let me again hit on this thunder symbol and as you see over here these are the columns present so i have this column called as sid then i have another column called as s first name after that i have a column called as s last name and then going ahead i have a column called as s margz but you see that this entire table is empty because we have not yet inserted any data items into this table so this is what this entire video is about and in this video we will see how to insert records so let me just go ahead and do that let me decrease the size of this so here let me just remove this out and let me see if i can drag this down properly seems like i cannot do that so instead what i'll do is i'll just write down the command to insert data items so what i'll do is i will write down insert into so here you have to properly remember the syntax insert into other keywords this is what you will give after this you will given the name of the table and what is the name of the table the name of the table is student so you shall basically write insert into student then you will have to given another keyword which is values after that you have to given two round braces and inside these you can given the values so the first value is student id so let's say the first student id is ids101 then i would have to given the first name of the student so let's say the first name of the student and also if you remember the first video properly you would know that the first name last name are basically var car type columns and over here i can given string data type and whenever i have to given a string i will enclose that in double quotes over here so first name so let's see the name of the first student is i will write down annie and i would have to given the last name as well so let's say the last name of this person is cleopatra so student id is 101 first name azani last name is cleopatra and i'd have to give in marks as well so let's just say annie cleopatra has scored around 87 marks now i will put in a semicolon over here and i'll select this entire thing and i will hit this thunder symbol and we have successfully inserted this into our table now just to verify this what i'll do is i'll delete this entire thing and i shall again write down select star from student and now if i hit this thunder symbol you will see that i have inserted these values so we've inserted the first student or the details of the four students so sid is 101 first name is annie last name is cleopatra and this person has scored 87 marks now similarly if i would want to insert the details of the second student i'll do the same thing so let me just write down insert into then i need to give him the name of the table which would basically be student and i will given the keyword values again given this round braces over here now let's say the next student id is 102. now the name of this person is let me just write down john and the last name would be smith so let me just write this down properly so this person's entire name is john smith and john smith has scored let's say 56 marks and let me end this syntax with a semicolon now i'll select this entire thing i'll click on this and we have again insert of this now just to verify i'll delete this again i will use the select statement so i'll write down select star from and i would have to given the name of the table again so the name of the table is student let me write down student over here let me end this with a semicolon and i'll execute this so right now you would see that i have also inserted the second record where the student ids 102 student first name is john class nemo smith and this person has spot 56 marks so folks this is pretty much it for this video where we have learnt how to insert records into a table so on that note i will sign off and before we actually end this video i request you folks that if you found this session insightful do like the video and also subscribe to our channel so thank you very much and let's meet in the next one hey folks i welcome you all to scala academy's youtube channel and this is the third video in the sql tutorial series and in the previous two videos we learned how to create a table and also how to insert records into our table and in this particular session we will see how to work with the where clause and filter out records on the basis of the spare clocks so before i actually head to the coding i request you guys to like this video and also subscribe to our channel so on that note let me open up my sequel workbench so i've opened up my sql workbench over here let me go ahead and select my local instance and also put in the password so the password i'm typing it over here let me hit enter and we have successfully opened up our local instance and i would again open up the student table which we had created in the previous video now if you would want to know how to actually create a table and insert records into a table you can follow the first two videos and you will find the link for these two videos in the description below so if you don't really know how to create a table and all sort of insert records i request you guys to watch those videos first and come back over here now let me go ahead and open up my student table and before that i'd actually have to select my database so the student table i had created in a database called as college so sure now before i write this let me also increase the size of this so that you can see this properly so here i shall write down use and then i shall given the database name so the name of the databases college after this i'll just give it a semicolon let me select this and select this thunder symbol and we have executed this now that we have selected our database so in this college database i have a table called as student let me go ahead and open up all of the records which are present over there so here i shall write select star from then i need to given the name of the table so the name of the table is student now let me select this again and as you see i have opened up the student table and in the student table i've got all of these column student id first name last name marks and gender now in this video we are supposed to work with the where clause and with the help of where clause we can filter out records on the basis of a condition so let's say from this entire table i would want to extract only those records where the gender is equal to male let me go ahead and write down the command for that so i'll start off by writing select star from and after this i need to given the table name which would be equal to student so till here what we're doing is we're just using the select query after this we will give in the where clause so here i shall write down where and as you see even the color of this where clause has turned to blue because this is a keyword so i'm writing select star from student where after this i need to given the condition and the condition is s underscore gender this needs to be equal to male so from this entire table what i'm doing is i'm extracting only those records where the gender of the student is equal to male let me select this entire thing let me press this and now if you see i have extracted only those records where the gender is male similarly let's say from this entire table i'd want to extract only those records where student id is equal to or greater than 103. so this where you see so this is actually a numerical entity and the id start from 101 go up till 105 what i do want is i want to extract all of those students whose student id is equal to a greater than 103. so here i shall write select let me write this properly so select star from student and after this i again given the where clause and after the where clause are given the condition so the condition needs to be s id is equal to or greater than 103 let me actually change this and make this greater than or equal to 103 let me select this entire thing and let me run this now as you see the s id over here it starts from 103 and goes up till 106. now let's say if i want the student ids from 104 or basically upwards of 103 then i shall remove this equal to symbol from over here now if i run this you shall see that i've extracted only those records where the student id is greater than 103 and that is why i have 104 105 and 106. now after this let's say if i want to extract records on the pieces of multiple conditions so here i can use the and operator as well as the or operator with the help of and operator i'll be basically extracting those records where both of the conditions are satisfied so for that let me show you the entire table for you guys again so i shall again write down select star from student now from this what i want to do is i do want to extract those students where the gender is male and marg scored by the student is less than 50. so if we see from this entire table we see that there is only one particular record where the gender is male and mark's chord is less than 50 which is basically this student and the name of the student is matt cooper so for this what i want to do is i'll again start off with the same thing so we shall have select star from student after this i shall given the where clause and i will follow it up by giving both the conditions so let me given the first condition select star from student where the first condition needs to be gender so i shall write s gender is equal to let me write down male over here after this i shall integrate it or combine it with the second condition using the and operator so this what you see is known as the and operator and with the help of this i can combine two conditions together select star from student where s gender is equal to male and the second condition needs to be as marks let me write this properly so s max needs to be less than 50. now i shall select this entire thing and i shall execute this so as you see over here there is only one student and the student is matt cooper and as you see matt cooper his gender is male and his marks are less than 32. now after this i would go ahead and show you the entire table again so let me write down select star from student and these are all of the records over here now again let me show you another command with the help of the and operator so here now let's say i don't want all of those records where the gender is female and marks are greater than 50. so let me also write a command for that so here i shall write select star from student where after this i need to write down and given the first condition and this time the condition would be s gender is equal to female i'll follow it up with the and operator and then given the second condition so the second condition is s marks greater than 50. now let me execute this i'd have to write from over here select star from student now let me execute this and as you see again there is only one student and the name of the student is aniko patra whose gender is female and who has scored 87 marks now we'll go ahead and work with the or operator now before i do that let me again show you the entire table so i should again write down select star from student i'll execute this and from this let's say i don't want all of those records where either the student id has to be less than 104 or the marks of the students are greater than 50. so what i'm doing is i'm basically giving in two conditions over here the first condition is the s id needs to be less than 104 and the marks needs to be greater than 50. so by that condition seems like we'll be extracting all of that so what i'll do is since i want both the cases so i shall maybe put in the gender condition so either uh what i'll do is so the s id has to be less than 104 and maybe the i'll put the gender as equal to female let me just write that down so select star from i shall write select star from student where the first condition needs to be s underscore id is less than 104 after this i shall write down i'm giving an or operator over here and i'm combining this or operator with the next condition so the next condition would be s underscore gender is equal to female and let me go ahead and execute this so here what is happening is if either of these conditions is satisfied we'll get the result so what we'll get is so we've got six records over here and with the help of this condition so this says if student id is less than 104 which would mean that we'll get the top three records over here and along with that since we're also giving in the second condition which is as gender is female now here even though the student id is 106 which is greater than 104 but as you see the gender is female and that is why we'll also get this particular record so let me select this entire thing let me run this and as i've told you guys from the entire table i have extracted those records where the student id is either less than 104 or the student gender is equal to female so folks this is how we can work with the where clause and filter out records on the basis of this so thank you very much for attending this session and again if you found this session insightful please do like this video and also subscribe to our channel and we'll meet in the next one thank you hey folks i welcome you guys back to scala academy's youtube channel and in this particular session in those sql tutorial series we shall work with the update query so till now we've seen how to create a table how to insert records into the table now with the help of the update query we shall see how to modify the records which are already stored in our table so what we'll do is we'll directly open up my sql workbench and start working with the update query so i've opened up mysql workbench over here again i will click on local instance and let me go ahead and given the password and we have our mysql workbench right over here now my task would be to select the database and open up the table so the database which we were using was college so here i shall write down use college let me select this and i will click on this button so i've selected the database now what i'll do is i'll go ahead and use the table which is present inside this so the name of the table is student so to look at all of the records which are present in the table i shall just write down select star from student now again i will click on this and as you see these are the different columns which are present and these are all of the records so as of now it seems that we've got six students and uh we've got their names we've got the marks and we've got their gender respectively in this table now what i'd want to do is let's say if the marks which and cleopatra has scored it's actually 97 and not 87 there has been a mistake while storing the data what i want to do is actually change that and for that purpose i can use the update query so sure this is how i would change the marks which are stored as 87 i would want to change that to 97 so let me just write down update so this is how i'll start i will start off by writing the keyword update then i shall given the name of the table so the name of the table is student so update student after this i shall again use the keyword set and i would have to set s marks to be equal to 97 where the first name is equal to and so here i shall select where s underscore first underscore name is equal to and so what i'm doing is i am changing the value of marks from 87 to 97 where the first name is equal to and let me select this entire thing i'll run this properly so seems like we have an error over here you are using save update mode so normally what happens is if you are trying to update something and by default in your my sequel server if it is in safe mode you cannot update it so we'd have to turn off the safe mode so to turn off the safe mode this is the command which i'd have to use so i'll have to use set sequel save updates is equal to zero now i'll select this let me run this now so as you see this has been properly executed now again i'll select this update query and i will select this now this has been successfully executed so now that i've made the changes let me go back and open up my table so here i shall write down select star from students and let me run this and let me see what would be the result that i get so i'll select this again so this has to be student if i'm not wrong and not students and i'll click on run so as you see initially the marks which and cleopatra has scored were 87 with the help of the update query i was able to update it or change it from 87 to 97. similarly we've got another student over here so we've got david leon and his scored 92 so but it seems that this again is incorrect and david leon had in fact scored 62 and not 92 so let me also change that so what i'll do is i'll write down update then i shall given the name of the table which is student so update student then i'll write set and after this i'd have to given the name of the column so the name of the column would be s marks update student set s marks is equal to 62 where now in the where clause i'll actually use the s id instead of s first name so here this person's name is david leon and his s id is one zero three so here i shall write where s i d is equal to 103 now i'll select this entire thing and let me run this so again i've executed this now let me go ahead and select my table so select star from student and let me run this and as you see over here initially mark scored by david leon were 92 with the help of the update query i was able to change it to 62. so folks this is where we learned how to work with the update query and if you do want to learn about the other basic things in sql such as how to create a table how to create a database or maybe how to insert records into the table you can watch our previous videos and you'll find the links for the same in the description below so now before i end this class i request you folks to like the video and also subscribe to our channel thank you very much and let's meet in the next one hi everyone my name is devi and in today's video i will be discussing joins in sql i'll be discussing the different types of joins that we have in sql and i'll also show you how you can run those join queries in my sequel but before moving on with the video i would request you to kindly like this video and subscribe to our channel all right so starting off first we have a brief introduction of join statements as you can see join statements and sql are used to combine data or join columns from two or more given tables on the basis of a common field between them suppose you have two or more different tables and you want a single table consisting of different columns say one column from one table another column from another table and so on in that case you could take help of join statements in sql and obtain a single table with different columns from the different tables then we have different types of joins in sql but in this video we'll be covering inner join left join right join full join and self join as well so to begin with first let's take an example as you can see on the screen we have two different types of table the first table is the student table which contains four different columns roll number name address and age then we have the second table which is the course table the course table contains three different columns as you can see serial number course id and roll number so the first join that we have is the inner join now the inner join or join keyword is mainly used to select all rows from the given tables for as long as the condition remains satisfied now the resultant table that you get is formed by combining all rows from both the tables where value of the common field will be the same so as you can see the syntax for inner join is given right here it goes like select table 1 column 1 table 2 column 1 from table 1 inner join table 2 on table 1 matching column equals table 2 marching column now here table 1 refers to the first table table 2 refers to the second table whereas marching column refers to the common field between the two given tables now for the given tables the inner join query would be select course course id student name student age from student a join course on student role number equals course row number now what this inner join query does is that it gives you a single table which contains the three columns course id name and age and these columns are taken from the two tables student table and the course table and also this is done on the basis of the given condition that the role numbers must be matching here you can see the output of the resultant table on the screen there's the course id name and h moving on the second type of join that we have is the left join the left join which is also known as the left outer join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of the join the resultant table that you get displays none value for those rows which have no matching rows on the right side you can see the syntax for left join here select table 1 column 1 table 2 column 1 from table 1 left join table 2 on table 1 matching column equals table 2 matching column now for the given set of tables the left join query would be select course course id student name from student left join course on student role number equals course role number what you get from this left join query is a set of these two columns which is course id and name and this is given in the form of a single table by joining the student and the course table on the basis of the given condition you can see the output of the resultant table on your screen we have the course ids and the names and these data is associated with the same set of role numbers okay so the next type of join that we have is the right job right join which is also known as the right outer join is quite similar to the left join but the only difference between the two is that the right join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of the john resultant table that you get displays null values for those rows which have no matching data on the right side as you can see we have the syntax for right join right here select table 1 column 1 table 2 column 1 from table 1 right join table 2 on table 1 margin column equals table 2 margin column for the given set of tables the right join query would be select course course id student name from student right join course on student role number equals course roll number what you get from this right join query is a single table which contains the columns course id and name and this is done by joining the two tables student and course table on basis of the given condition in the query you can see the output or the resultant table here here we have the course ids and the names and also we have null values in the course id column wherever there is no matching set of data so the fourth type of join that we have is the full join now the full join is nothing but a combination of both left join and right join the output table that you get from full join contains all rows from both the tables and also the resultant table contains null values for the rows which have no matching set of data in any of the tables here you can see the syntax for full join it goes like select table 1 column 1 table 2 column 1 from table 1 full join table 2 on table 1 matching column equals table 2 marching column now for the given set of tables the full join query would be select course course id student name from student full join course on student role number equals course role number now what you get from this full join query is the output or the resultant table which you can see on your screen here we have all the course ids listed on the left side and all the names listed on the right side of the table and also you can see the null values wherever there is no marginal set of data available now the last type of join that we have is the self join the self join statement as the name suggests is used to join a table to itself each row of the table is joined with itself as well as all the other rows available based on some given conditions the syntax for self join is select a column 1 b column 2 from table name a table name b where given condition here the table name refers to the name of the table that you are joining and the given condition is the conditions based on which the rows are selected all right so for the given set of tables the self join query would be select a row number b name from student a student b where a row number is less than b roll number now the output that you get from this self-joint query looks something like this here you have the set of row numbers and on the right hand side of the table you have the set of names this table is obtained on the basis of the given condition that you have here in the query so now i'll show you how you can run these join queries in my sequel here on the screen you can see the my sequel workbench so let us see how we can run those queries so on the left side of the screen you can see the list of schemas now i have already created a schema or a database that we are going to work with today here you can see the database that i have created user underscore db1 and i'll also show you the tables that i have created here's the student table i'll show you the student table right here you can see roll number name address and age it has all these four columns i've also created another table which is the course table you can see the course table right here serial number course ids role numbers all of the data is present right here so now let us begin first you can see here's the workspace here's the area wherein you can write your queries first let us see all the default databases that we have this is the query you use for seeing all the default or existing databases as you can see we have these default databases and the database that i have created user underscore db1 so today we will be working with this database and okay so the first query that we are going to run would be the query for inner join so let me just quickly type in the query select course course id then we have student name from student inner join course we have own student role number equals course row number all right so now i'm quickly going to run this query and see what we get as you can see we have the resultant of the output table here we have the course id and the names okay so moving on the next query would be the query for left join i'll just quickly type in the left john query we have select course course id then we have student name from student left join course on student role number equals course role number okay so here's the query for left join now run this query okay so now you can see we have the output right here we have the table which has course id and the name also we have null values wherever there's no matching set of data so moving on the third query that we are going to run is for write join i'll just quickly type in the query select course course id we have student name from student write join course on student role number equals course real number okay so here's the query for right join i'll just quickly run this query as you can see we have the output of the resultant table right here we have the course ids and the names and null values for wherever there is no matching set of data so now coming to the full join query let me just tell you that the full join keyword is not supported by mysql so what you can do in this case is you can use a combination of left join union and right join keywords all at once i'll just show you how you can do it first you need to type in the query for left join this is just the same query that we have run previously student name from student left join course on student role number equals course row number so here we are done with the left join query then you need to type in the keyword union followed by the query for right join course id we have student name from student write join course on student role number equals course roll number now we are done writing the query now i'll just run this query and see what we get here you can see we have the resultant of the output table with the course ids and the names and null values for wherever there is no matching set of data okay so the last query that we have for today is the self joined query select a roll number b name from student a student b where a roll number is less than b roll number okay so here we have the resultant table or the output table with all the roll numbers and the names based on the given condition in the query so i hope you are clear with the concept of joins in sql in this video i have discussed with you the brief definition of join statements i have shown you how you can run all the join queries in my sequel i hope now you're clear with the concept if you like this video please don't forget to hit the like button and also subscribe to our channel thank you hi everyone i am naman bhalla and today in this video we are going to discuss about sql queries and some of the common type of questions that appear in regarding to sql and basics dba based knowledge that is required if you want to be good in dbms so uh the topic for today's is sql interview questions and concepts okay uh so today we are going to first start with a basic coverage of different concepts that you need to know before you even start diving into doing sql queries you must know that okay how data is arranged how to arrange data how to structure your database in a good way such that it is very fast on the queries that you have to do and all other things okay uh great so let us first begin with what even data is and why is data important okay the efficiency of any company any business depends upon the data it has okay and like the user data that you have or you have the data about how people are behaving and that information is very relevant for you to make business decisions okay so data is of a prime importance and at the core of a company's functionality okay now how will you arrange data to arrange data you need some kind of system right what can be those systems one very basic way to arrange the data can be hey that let me just actually create a file and suppose i have a data and my data is something about let us say that we are developing database for a system okay for a university so what will be my data like let us say that i am a university so my data can be like something about students right my i can have some data about students i also can have some data about my faculty right or my employees let us say for now let us keep it short and let us say that we have only data about these two things now how might i save it one way to save it is very rudimentary way that hey let me actually create a lot of files on my machine and then in those machines let me store the data so let us say that there is a file something like students.txt and let us say that there is another file that is employees.txt and then suppose you have multiple students let us say that there is a student who has a role number one and his name is obey and suppose he has a patch let us say that we are storing these three information we store it something like one obey and let us say it is 2016. so that is a very fine way to store data there is nothing wrong with it right but is it a good way to store data that depends and that depends upon what kind of data that you have right so that is where the concept of a database management system comes that hey how will you even store the data what optimizations will you do so that the storing data is relevant to you because you don't just store data you also use it right so you have to do some queries upon it you have to also fetch the data back again to make some business decisions or resolve some queries right so there are two important decisions that you need to do the very first decision is storing the data and the second thing is querying that data right without these two operations our database management system is irrelevant to you okay so a dbms is nothing but a system software that allows you to store the data and query the data along with providing a lot of security constraints and other things which we will then as we go into this video okay so those are the primary two things that we uh need to maintain with us okay so that is what our dbms comes from how can we structure a tpms one way to structure i mean like how will a dbms inside itself structure itself right so the one way can be like even a dbs maintains a file that is a fine way to structure that might be something like it is maintaining documents okay can there be any better way to structure your data inside a database management system what do you store the data about in your computer you store the data about some things right you store the data about something like here you were storing the data about students you were storing the data about employees suppose there is also uh users you have some let us say that probable students or people who are who have applied to you so there might be something like applicants which you are storing the data about okay so if you are storing the data about something and for each student you are for each thing that you are storing data about you are storing some things about that right so these things that are called as entities so entities are nothing but about what or about whom are you storing data okay and about whom you are storing data and what data are you storing right you are also storing some kind of data about things like for example for students you are storing the roll number you are storing the name and you are storing the batch id that depends upon the business decision as to what you want to store so there are two things the very first thing is the things that you are storing the data about which as i told is called as entities and then there is attributes or fields what data about entities are you storing now let us consider our real world use case is data in silos no there is always a connection between one data and other data right so for example for a student let us say in a university you might also need to maintain that which courses have been enrolled by a student so somehow you also need to maintain a course enrollment data set right so let us say that another kind of entity can be course enrollment for course enrollment you might what do you need to store you might need to know that what is the course number and also you might need to store that what is this who is the student who has enrolled for that course so let us say the two things that you need for a course enrollment is nothing but a course represented by an id and also a student which is probably represented by a roll number okay now suppose these are the three data sets that your university has if we see here that hey we were maintaining the student role number here as well as we were maintaining the student role number in the data set for this student we were maintaining that role number here so data set is not in zeros our data at what particular location has some kind of reference to data at other rule other particular uh entity right okay this is known as relations between data so now we observe one pattern in it that hey we are maintaining data about something and we are also because we have been we have maintained data about different things then we somehow need to maintain uh relations between them so a database management system which stores data in the form of entities and the relations between them can be known as a rdbms or relational database management system okay what kind of rdbms's exist there are many there are different varieties of rd members that exist in the open source industry and are used very widely by different companies some of the popular examples can be my sequel and another popular one can be postparticular okay now in these two terms you would have noticed one thing repeating right you would have noticed one thing that was repeating was secret what is this sequel this sequel stands for structured query language this can be considered as a default language or i'm like it's not actually default but it's one of the most popular languages to query upon the data that you had stored because as we recalled earlier whatever data that you have stored has also also needs to be fetched right i mean like if data is just stored it's of no importance to us it's just increasing your storage and like it might be relevant to us in the future but anyways at one time we do need to assess it and that is why we are storing it okay cool so now sql as we told is the basically is the most important language that is used to fetch upon fetch data from the to rdbms systems now let us see how sql works okay so the very first important thing that we see from sql word itself is a query what is a query a query is nothing but a statement that you execute to fetch the data from an rdbms what is one important thing about computers one important thing about computers is they do what you tell them to do right but they also require that you should be very well defined you can't you can't just say random things to it and it will and expect that it will fetch you the exact results that you wanted right so you need to be very well defined so you need to know that how do i write queries in sql right otherwise you won't get the data that you actually intended to get from the sql query so the prime focus for the today's session will be how do we write sql queries what are the important constructs that we need to know while we write a sql query most of the sql functions in different dbms's are almost same so that is why we are going to abstract away from one particular technology of our dbms we are going to structure about common f sections that we have in a dbms management system and then you can run those over any kind of system that exists okay so the very first type of query the very first important uh function or important feature to do a query is the select statement this select statement is the most important thing that you need to know to run any query what is select i mean if you just go by the definition of the word select means selecting something or choosing something from the data that you have right so that is the whole function of a select statement so very simple select statement can be that hey suppose you have a student table and you are maintaining three things about a student let us say that he has an id he has a first name he has a last name okay and you need to know that hey who is the student who has an id of one suppose that is the thing that you need to know and there are multiple students let us say the student with id one has a first name of a and a last name of b then there is a student with id 2 who has a first name x and last name y and you need to know that what is the first name and last name of the student who has id of one so you basically need to know a and b how will you use the select statement to write this it's very simple you will say select what is this this is first name so i need to select the first name but do i also need to select i also need to select the last name so select first name or my last name where do i need to fetch from right so suppose someone asked you that hey you need to get this thing i just tell you that hey you need to get a uh suppose a biscuit where will you get that from you you will ask me that where should i get that from right so that information is relevant so the next thing is from where do where should the query language get the data from so suppose it gets from a particular table the name of the table is student so select first name comma last name from student table okay if you write just this query what will you get i mean suppose you're a computer and someone tells you that hey you have to just get first name and last name from the student table you don't know i'm like you go to the student table and you try to see that which first name and last name i need to get you see there are a lot of first names and last name so best way is that you bring all of them right if you just write this query what will it return it will return the whole table as it is it will get the first name and last name of all the students so basically what you will get will be a b and x y why did it return this because you didn't specify which first name and last name do i do should the sql get right okay so let us be a more precise let us say that hey you have to select first name and last name from student of the person who had the id one so you need to know that hey the id should be one at that place so you can write where where id is equal to one and finally you can terminate the statement with a semicolon okay so what will this return this sql query will return you a and b and why will it return this is because of three statements that we just saw here of sql that is select that is from and that is where these are the keywords in the sql query language great so i think the basic idea about a select statement is clear now now let us discuss about a sub query i'm like we will be discussing multiple of these where clauses from in depth but let us first discuss the basic high level concepts before we delve into details let us discuss what a sub query is now let us say that you need to give degree to some students you are a university you need to give degree to students right the students who are just going to pass in this particular year okay now how will you give degree to those students suppose you have two two tables the one table that you have is a students table okay in this students table you have an id you have the name of the student let us say and let us say that you have patch okay suppose this is a simple student table that you have and you need to give degrees to the students who are going to pass in patch 2020 let us say so then someone comes to you that hey some of those people who had the badge of 2020 are actually not going to get the degrees because they failed in some courses then you ask that okay where should i know that who which students failed so that person tells you that hey there is also a table that is failed students in those field students table you have ids of the students who have failed okay so now you need to give degree to those students who have the badge of 2020 but have not failed so somehow you now need to choose what is here to give the result of your final query how will you do that to know which are these students who had failed you need to select all the items of students from here right so somehow you need to select ids from failed students okay but but the task that is given to you is not to fetch the ids of failed students the task that is given to you is to tell who are the students who are going to get the degree who are the students who are going to get the degree those are the students who actually have the badge who actually have uh the batch of 20 20 in the students table so also you know that you need to do this that he select id from students where patch is equal to 2020 okay so now you need to select those ids from this students table where the patch was 2020 but you don't need to select those ids that were present here right so what will you do one very simple way i'm like one thing we will come to that in later of section of this video there is also one statement which can do it in one line but let us say you can say that where batch is equal to 2020 and id should not be and id not in and where should the id not be the id should not be in the result of query of this particular thing right so id not in select id from field students right so here we saw that hey we used one select statement inside another select statements right this is also known as a sub query or a nested statement by the way this not in is a keyword in sql where you can select those things that are not present in a in the result of a particular table as well okay but now let us say that you asked me a question that hey how does sql know that these and these are the same thing right i mean like how will it know that i mean there should be a basic thing that whatever data is here should be whatever the data was present and what what was i am electricity from the earlier query right so that is a constraint that sql ask you i'm like that's your responsibility to maintain that the data type of the data that is taken from here is equivalent to the data that is here okay so that is what a nested statement is okay now what kind of nested statements can be there can be two kinds of nested statement first can be correlated what is a correlated nested statement means what is a relation with two things means relation between two things means that hey one of those things cannot exist without the other thing right so a goal related sub query is a query in which none of the i mean which this sub query this is the sub query right sub query is not independent not independent but needs the mean query to execute itself so it can't exist independent of each other so if there is a code related sub query then what can be a different kind of sub query the second kind of sub query can be non correlated sub query in which the main query for example in this particular query this was the main query and this was a sub query where mean and sub queries are both independent okay what do you guys think was the above sub query was it a correlated or was it non-correlated as we can clearly see that in the above example the select id from failed students can exist without even the main query existing right so it is definitely an independent or a non-correlated sub query okay okay so now we have discussed select but now you also see that we were doing where right we we wanted to do we wanted to check about we wanted to do some kind of assertions that hey i need to know data about those things i need to know the data where a particular where a particular thing is maintained right so let us discuss the common closes this where is known as a clause okay so i mean like what is the clause i'm like in normal term in a normal real day life you might have term thought about clauses in your agreements or contacts right those are the things that you need to check those are the things that you need to ensure so there is also a close so let us discuss sql clauses okay one of the clauses that we have already discussed is where there are three other main important clauses those clauses are grouped by having and order by one of the best parts about the sql query language is that hey each of the words each of the words in the language are actually very i mean self descripted right because you know i'm like you just see the word and you kind of get an intuition that okay what might this thing be doing what can the weird thing be doing where clause just allows you to filter to filter the records based upon some conditions okay for example what were the conditions what were the conditions in the original query that we had written in the original query that we had written the condition was that id should be equal to one let us say let us say that our data had multiple students and those students let us redraw a student table in the students table we again are having id we are having a name and let us say we are having patch okay and let us say that there is an id 1 2 3 8 9 11 12 okay the name is a b c d e f g and patches 20 20 20 21 2020 and 2022 okay so now i ask you that hey you only need to give me the students who have the first condition is who are going to pass a 2020 that is who have their batches 20 20 and the second thing i also ask you that their ids should be less than 10 okay so then what will your where close have your where close will have two things what are those things going to be your where clause will have first will be batch is equal to 2020 and what is the second thing the second thing that your vehicles will have id is less than or equal to 10. so this is a simple where clause and aware clause can have multiple things multiple assertions that need to be maintained and those assertions can be grouped with and and if there is and what do we think that other statement might be i'm like just similar to and suppose if like if we have done programming there is and and then there is a or as well right so suppose i had instead of writing and i had written or what would the result of this query be this query will result into all those students who either had a batch of 2020 or had an id less than or equal to 10. so the query will return this the query will will the query return this or not the query will return this y because the id is less than equal to 10 so this will be returned this will be returned because this is also satisfied this is also satisfied this will be returned because id is less than equal to 10 this will be returned will be returned because batch is 2020 but this won't be returned because neither is batch 2020 or i did this okay great so that is where clause now let us discuss the order by clause before we discuss group by and having because they are interrelated first let us discuss the order by them what do we mean by an order what do we mean by an order order is nothing but an arrangement of things in the way you want them to be arranged right consider order by something similar to sort sorting okay now i ask you that hey please return me the list of all the students okay i just tell you this thing that hey please return the list of all the students you go you fetch all these students and you return it to me but in which order will you return did i ever tell you that no right so there might be a thing that you ask that hey hi in which order should i return it so for example let us take a normal use case suppose uh there are a lot of things in our restaurant a lot of things in a restaurant menu and those things are grouped by being a starter or being the main course or being a desert okay suppose a starter is represented by a one a main course is represented by a two and a desert is represented by a three okay now one person asks you that hey he has maintained in a db table in a db table he has maintained one starter one main course and uh one desert okay suppose he has maintained a tv table which is something like what will i eat what to eat okay okay so which is food id it also has food name okay and also it also has food type okay so food id can be something i mean like suppose you are representing breads by something you are representing some kind of pastries by something like that let us say there is a food id which is 201 which can have a name of pastry which let us say is a desert right so let's name it three then there can be something here selected one and there are multiple things here selected as main course so there can be two things let us say that he has rice and he has some kind of meal or something okay so then there are 100 or 120 and then there is one starter that he selected okay let us say it is xyz and it has 300 okay and this is our starter so this is one in which order will the person like to eat the person will like to eat in the order that he will have like to have i mean like he will have the main wheel in between and then the desert right okay so you need to so you just go to the db table and you say that okay return all the means that the person had selected and what to eat if you return the meals in the order that exists in the table then you will actually disappoint the person like anything right so you need to return those meals in the order of what type of food they are so you should return meal here then you should return main course and then you should return the decent right so you need to order the meals that you bring by food type so how will you do this thing so you will say select food let us say you select the food id where should you select those food ideas from you will select those food ideas from what to eat but to eat okay but in what order will you select those you will select those in order of four types so you will say order by food type okay so then your sql query will return this thing first then one of those two things i'm like it can return any of those two because they have the same food type and then it will return finally the decimal okay so this is the order by clause now let us discuss the other two things having and group by okay what is having and to pay i mean like what is the intuition that you guys get that okay what might having represent okay so let us first think of group by but let us first think of group by group by is a thing that is used by aggregate functions okay there is i should talk about group here group by is a statement is a clause that is mostly associated with aggregate functions okay so what does this mean aggregate function means that okay those functions who reso who actually compute upon a large amount of data and then return a result so there can be two kind of functions right one kind of function computes upon a single argument and then returns a value so those are known as scalar functions which will come to in depth again and then there is an aggregate function okay suppose aggregate function the examples of aggregate functions can be sum can be average and those okay so let us discuss about a simple thing so let us say that you are uh using a having clause so you want to know that you have to return those students uh i mean like who lived in india and the student id was greater than five okay so you need to return count of those so what you will write so you can say that select count of student id comma country so i mean like let us say that we had a db table in a db table with every student with every student i was also maintaining his country let us say in this student table i had a country country of first person was india then this was usa this might also be usa this can be uk this can be india and this can be india and this can be india okay so you need to know that which are the people who have a country of india so that is the very first thing to know that okay so let us say that you need to know who are the students who don't have country india let us say we do the request we need to know who are the students that don't have country as india okay then you get the students which will be the students that you will get who don't have country as india you will get this you will get this you will get this that's it okay but now you need to order them in some way someone tells you that hey once you have filtered those students who don't have country india please group all the students that had a country together right so group all the students who had country usa together then group all these students who had countries uk together and so on okay so how will you do that you will say that select count of student id comma country from students okay where what should be the thing the thing should be that country is not equal to i n because i n is representing india okay chicken now you get all the students now you need to group them by countries right you need to group the countries that had usa together okay so group by uh group by country okay so so all the students that have the same country are now together that's it supposed to return this what will this return now what a group represents a group basically creates a single group of people who had the same value here okay so let us testify this particular query one by one okay in this statement the very first thing is select from students where country is not equal to india this thing will give you two three and eight so you get these three things okay then the next thing that you do you are grouping them by country so then you get two groups right there are two students that had usa and one student that had uk so now you will get two groups which are 2b and usa and 3 c and usa and the final one was 8 d and uk okay so these two students were in the very first group and this student was in the third group okay now you have grouped them by country now what you need to return you also need to return the count of student id basically how many different student ids were there where in each groups so because count is a count is a aggregate function it works upon a different thing it works upon a set of inputs and returns the number of inputs that are there so what will be here it will be 2 what will be here it will be 1. so what will it return it will return 2 usa and one student from uk so writing this query helps you to find the number of students from each country where the country is not india okay i hope that is clear now let us discuss having now let us discuss having suppose i have written this query okay and then i tell you that please please return only those countries please return only those countries where the number of students were greater than one okay so you need to return only usa and not uk okay so having allows you to do filter on aggregate queries filter on aggregate functions so you can say that we are having the count of student id so you can here write having count of student id uh count of student id or let us say id which is greater than one so if you write this thing you are only going to get usa so the difference between where where is just a filter upon a normal attribute value whereas having is a filter upon an aggregate function the value returned by an aggregate function and so the question is why we use having instead of where clause in group by clause so having actually used two because c once you have done group by in function then you are need then you need to do some kind of query about this these groups right so consider this as different that you have done a grouping here you have done a grouping and then out of those groups you are selecting particular groups that had something is this okay so that is why you need to do a having okay great now we had actually when i was discussing this particular thing that he let us say that we had to select the students who we were giving degree to okay then i tell you that hey we also don't need to select the students who actually fail i told you that here we will run one query and then we will run a sub query and the basically whatever the value was not in the second sub query we will put in the not in clause and then give right this thing can be done in one query in sequence so let us discuss three functions which are union minus and intersect okay by the way i'm like uh if you have studied set theory if you have studied set theory these clauses seem very similar to what we discussed in set theory right is there any kind of relation between set theory and why these terms are like that yes there is the reason for that is because the relation rdbms system when they were actually originally the paper of rdms actually is representing all these things with notations of set theory so an rdbms is nothing but a implementation of set theory that okay how you will be doing operations upon data in terms of how you do operations upon set okay so each table is actually a set and not uh order table so that is why there is no guarantee as to how the data will be arranged in the table it might happen that this data is somewhere here or this data is somewhere here because these are sets and not tables okay now let us discuss union minus and intersect what is union in a set what is union in a set in a set let us say that we have two sets a and b in one set we have three things one two three we have four things here four two one and five what is union of a and b by the way union insert function is represented by u sine so what is aub this is nothing but one two three four and five basically union is the combination of all the values that is present in any of those two sets right if you also notice here that hey one was present here as well but one was present here as well right but in a union b we got one only once so a union removes duplicates returns duplicate only once but what if you want to return if one is present here and here as well you need to return it twice what if you want to return 1 1 2 2 3 4 and 5. for this thing there is a union all in sql okay union all keeps all the duplicates okay so what the union statement basically does is union statements returns all the values that are present in any of the sets present in any of the sets okay now what is minus so i tell you that hey i have some things here i have some things in this particular system which is let us say a b c d and e these are some things here i tell you that you need to return you need to return everything that is here everything that is here but it should not be here okay so what will you return i mean like suppose let us say that you have five things and two things you need to return every of those fiber those two but not those two so you do five minus two right in math you do a five minus two similarly in sets you can do a set a minus set suppose this is represented by set a this is represented by set b if you do set a minus set b you will get all those queries that are here i mean they should be here but they should not be here suppose there was an f here as well so what are the queries that are here these are a b c d and e okay and what is the second thing the second thing is this should not be here so out of these things what are the things that are here so they are b so b will be removed that is a so a will be removed this is f but f is not here so we are fine and the final return from here will be c b now do you guys think that we could have actually directly used this minus statement in the previous question what would we have done instead of writing we are not in we could have just done minus here right so if we were doing here we could have just done minus here and we would be fine correct great so that is the minus query and then what is intersect intersect is also a set function and intersect between a set a and a set b is represented by an inverted u sign and it says it returns values present in both set a and set b so let us say that set a had the values 1 2 3 4 5 and 6 and set b had the values 2 comma 4 comma 6 comma 8. now if you do a intersection it will return those values that are present in both of those sets right so it will return something that are present here as well as here so those are things like 2 4 and 6 right great now let us actually i mean like now we understand that okay what are these commands doing but how will we actually write them in sql how will we write how will we use them in a sql query in these sql queries these statements are between two select statements so how will it be represented so one way can be that hey select name from students minus select name from failed students what will this query do this query will return all those students the names of all those students that are students but are not failed students now i tell you that you need to return everyone who is a member of my university so suppose my university can have students and he can have employees okay and it can also have other things but let us say that for now these are the only two things and you need to return everyone who is member of the university community so now you need to represent a union of those two things right either that person can be a student or that person can be an employee so what will you do you will do select name from students union select name from employees okay now there can be one thing that hey i need to select those students i need to select those students who are actually let us say living in a particular city who are living in delhi okay let us say how will we do that so we will say select name from students okay those are all the students right and then i have a different table let us say my database was arranged like this that i had a students table and i also had a delhi students table okay so i need to select all those students that are first of all students and the second thing that they are also delhi students right so i will do an intersect i will intersect with select name from delhi students so this will return me all the the list of people who are present in this set as well as this set okay as i discussed earlier these terms are actually related to set theory and an rdbms is more of like sets and not of more like arrays okay or what is your table okay so these are sets this is set one this is set to and this is a set operation of intersect okay so there is a query that is it minus or except this is a minus okay uh this depends upon different database management systems as well okay i mean like depending upon different dbms system which are implementing these concepts might be known by different names but mostly these are known by the common terminology of union union all intersect and minus okay great now let us discuss one of the most important topics that are there in database management systems that is joints what is a joint basically now as we discussed earlier that hey data doesn't doesn't appear in silos right some of the data might be here also some information about that student might be in some other table similarly and so on right let us say that we are maintaining data about an organization okay let us say that we are maintaining data about an organization so in the organization table in the organization data set we have first thing we have employee table and the second thing that we have is let us say employee salary statement okay okay so now the thing is that i need to know the salary of a particular employee okay i need to know the salaries of particular employee or i need to return to you someone comes to you that hey please return me let us say that this employee table is storing id is showing the first name he is storing the last name and let us say that he is like uh i'm like he's storing the rule so these are the four informations that are maintained in an employee table and let us say the employee salaries is nothing but an id and there is a salary okay now someone comes to you that hey please give me please give me the list of all the employees along with their salaries so now what you need to do is you need to return some data from here along with some data from here right so you need to return a group of things so suppose there was an id one the first name was a the second name was b his role was let us say uh i'm like he's a ceo and then the salary of id one is let us say 10 000 some units okay then there is an id two first name is a two people can have the same first name right the last name can be c and then say his role is a vp the salary of vp is something like let us say 8 000 and so on and what you need to return you need to return 1 a b c u and 10 000 to a c v p and 8 000 so now you see that hey to return my answer i need to actually fetch two tables i need to fetch data from two tables okay but how will you how will you ensure that this data this data corresponds to this data and this particular row this particular record corresponds to this particular report how did you come to know that you came to know that based upon the id here and id here you joined or basically you selected those like you combined by the id where this id matched you combine those right this is the use of joins it allows you to fetch data from two different sources from two different tables based upon something that matches okay so now how is this happening let us discuss different type of joints when this will become clear so the very first join and the most important join is the inner join inner join allows you to basically join based upon a particular column and the data should be present in both of those things so suppose suppose there was a id 3 and he had a salary of 6000 but you don't see any employee with id 3 here so what is the what is even the use of returning this data right so i mean like if still the same person ask you to return all the employees along with their salaries you only need to return this correct because you don't know if this three person is here and let us say that there was an id5 and his first name was b his last name was e and he was also a vp but you don't have his salary information so you don't have his salary information there is no seller information available here so you only need to return those data whose information is available here as well as here right so this is the concept of an inner join okay so let us discuss that how this inner join is going to work so this is going to i'm like the normal function how do you write is that select star from first table by the way what is this select star doing this select star does nothing but returns all columns of the table all columns okay not the rows chicken so we select star from table a and then when we have selected everything so basically i have selected everything from this table then i also need to select everything from the employee sellers table right so then i will also select star from table b okay but i need to join them i need to join this with the second thing right how will i join this i will see that hey id here matches the id here right so what i can do is rather than doing this so i say select star from table a i select everything from the first table and i join and i join with what i join with table p that's it this is equivalent to select star from table a inner join table b so riding inner join is normally in most of the db dbms is not mandatory okay so when you have done this you get the result of this based upon these two tables why how it automatically selects that what should i group by it sees that hey there was an id column here there was an id column here as well as there was an id column here because both of those columns had the same name so it makes sense to i'm like it makes sense to choose that as the common name and then group by that okay and then join by that so that is the inner join that is the most common join that is used the second type of join is left joint this is a left outer join but let us call it left what it says is select everything from left side select everything from left side and if corresponding values are not there on the right side fill those values with null let us take the above case so suppose instead of doing an inner join instead of doing an inner join where the value was present in the left side as well as in the right side i was doing the left join up on this table so what would i be returning so i will definitely be returning everything which was from the left side so i will be returning 1 i will be returning 2 i will be returning 5 but there is no corresponding data for row 5 on the right side so for those particular things for all those values of this thing i will put null and null in the salary so what will i be returning i will be returning 1 who has a first name of a b ceo and his salary is of let us say 10 000 i will be returning 2 a c vp where the salary of 8 000 i will also be returning this because this is the left join so i will be returning 5 d e v p but i don't have any information about this so i will replace this by null so this is the left turn as there is a left join so obviously the opposite also has to be true so the opposite is right join what this right join means this right join means select everything from the right side now you have to do the first selection on everything that is on the right side now if the corresponding data if the corresponding data of the similar column is not available on the left side fill the left side with null okay fill the left side with null if corresponding is not available on the left side fill the left side so what will it return it will return 1 it will return 2 it will return 3 for 1 and 2 there is the data on the left side but not for 3 so what i will be returning will be 1 2 and three are the ids for one i know the first name i know the last name i know the uh rule so this is ceo and i also know his salary okay for two for two i also know everything so i know that his name is a uh his surname is c it is a vp and it is 8 000 but there is a person 3 whose first name and last name i don't know so what will i return i will return 0 sorry i will return null null null and 6000 so this is a route right join okay so we have done left join we have done right showing what can be other thing the other thing can be if there is select everything from the left side select everything from the right side if left side has corresponding data in right side obviously do the join but if there is no data on the right side fill with null similarly if there is something on the right side which doesn't have a corresponding data on the left side fill that with null so it's a combination of left join plus side join and what will it return it will return uh or and i'm like it's known as the full join as well full join select everything join if a match else fill left side or right side by null depending upon the situation so let us see what will be the full join output for this particular table i will be returning everything from the left side right so i will be returning 1 i will be returning 2 i will be returning 5 so it will definitely be returning at least these three things okay but i will also be returning three so i will also be returning three because it is present on the right side but it is not present on the left side so i will also be representing this thing so if you see this is the output of left this is the output of right what is the output of a full join output of a full join is nothing but union of left and right right so basically what will be the output of a full join it will be one a b ceo who has the salary of 10 000 and there is 2 a c vp where the salary of 8 000 then there will also be 5 whose name is d e then he's a vp but i don't know his salary but i am also doing the right join so i will also be returning this so it will be three null null null and i know his celery six of them so this will be the output of a full joint now there is one more thing that i mean like uh that is also there that is a cross joint so let us say that we have two sets basically each select query is nothing but a set right so we have a set a and we have a set b uh and there are multiple values here let us say they are a these are different rows right so these are a b c d these are let us say f g and h okay if we have two things if we have two different sets and you have to make a cartesian product cartesian product or a cross product cartesian or cross current okay what this means is that hey combine all the values from the left side with all the values of right side so basically what will that be the final output there will be this one row this one wrote these so there are three rows similarly there are three rows from here there are three rows from here and similarly zero so the final d if there are four values in the left side and three values in the right side how many values will be there in the final set of the cross join if it is a cross join and one side has four values and the right side has c values the final values will be nothing but four multiplied by 3 why because each row on the left side is going to produce 3 rows because it is going to be combined with every value on the right side and just produce 0's each of those so we will be getting 4 into 3 which is 12 as the final table okay uh so there's a question that what if there are more than two tables if there are more than two tables you can use just parenthesis to say in which order do you need to find the outcome okay and all these functions are actually commutative i mean like union and intersection functions are commutative so any of those order works suppose you have to do intersection of three sets okay so then you can do select star from a then you can do union select start from let us say b now whatever all these values we got from here then we need to do intersect select star from c so we can put this in parenthesis so that this is executed first then an intersection with this thing will be executed and there will be an outer parenthesis as well so we can group those statements together as we want them okay great now we have been discussing a lot a lot different kind of i mean like uh joins but what are we actually working on we are actually working upon the data we are actually working upon getting the data suppose you have the data what is your main idea when you want to get that data as fast as you want to right i'm like you you want that hey please get me the data as soon as you can okay so you need to ensure that my queries queries should run fast how will you make the queries run fast uh i think you everyone must have heard about arrays right everyone must have heard about arrays and you guys would have also heard about hash maps what is the difference between searching a value in an array and searching and searching a value in a hash map searching in an array is a linear time operation whereas searching i mean like if the array is not sorted but and searching in a hash map is probabilistic order of one right okay so what we observed from here was that hey in a hash map we use some kind of a different space or some other optimization or some other conversions to improve our search time complexity right yeah so if we want to optimize if we want to speed up our queries we can probably use some other memory we can use some memory to speed up our queries okay using some memories some memory to speed up queries is known as indexing okay now let us say that you know that hey a lot of times a lot of times i need i need to find i need to find all those students who had a score who had total score greater than 80 who had total score greater than 80. so suppose you have a table suppose you have a student table in which there is an id there is a name and there is a total score again recall that hey sql is not a array sql is a set okay and there is no order in a set a set can be returned in any random order so suppose there is an id student here who has a name a and whose score is 60 then there can be two whose name is b whose score is 10 then there is a 3 whose score is 90 and it is his name is c then there is 4 whose also name is e it can happen that two people have the same name then it's also 80 then there is 5 whose name is l let us say and his score is 5 okay now always there are a lot of queries that come that aka each query you have is that hey find all the users find all the users or find total number of users who had some or who had score greater than equal to x if it was an array i mean like if suppose this was the final data set that you had if this was the final data set that you had and you knew that you are getting a lot of function calls just finding score greater than equal to x would you like this data to be arranged in some kind of order would you like this data to be arranged in some kind of order you would like that hey this data if this data is sorted by the total score right if this data is sorted by total score then you can answer each of these queries using binary search in order of login right so you need to do some kind of post processing okay and also you need to know what are the common operations that your database has or what are the common queries that your database has so this is known as a database indexing what is an index first of all an index is nothing but a data uh to study which is a data structure that actually does that is not the scope of today's lecture but if you want to study that you can you should definitely see about that b3 and b plus trees uh what are these so this is how indexes are actually uh i mean like most of the times implemented so an index is nothing but a data structure that provides quick lookup okay because you need to arrange the data i'm like hash table is also nothing but a data set right so quick lookup based upon a query based upon queries in a column or a set of columns what do i mean by set of columns five set of columns okay sometimes it can happen that hey suppose a lot of times that you have queries that that are actually not just based upon a particular column but are based upon a conjunction of multiple columns right that all the students who have a name beginning with let us say b name beginning with b and who had a score of less than equal to 80 okay so then you probably need an index upon two columns which can be named and the second thing can be total score so how to choose which will be the columns that you will index upon that that depends upon what your application is showing what data is your application assessing a lot of times if you see that a particular data is being assessed a lot of times it makes total sense to add an index over those particular columns how will you create an index by the way to create an index in sql you run this so you run a statement like this create so by the way i'm like if you ever have to create something in sql you use the create statement if you have to create a table you use this you have to create a database you use this and this time you have to create an index so you do create index you can also name the index okay i mean you can call the name of index something that you want to do so let us say that i call this index name score so i create an index whose name is name score then i also specif i also need to specify what are the columns that i am creating that index upon so i am creating that index upon columns that are name and total score but these columns can be present on a large number of tables right these columns can be present in a lot of tables how to decide that which is the table i'm talking about so i also need to mention the table so i will say on students name and total score so if i run this particular query it will create an index upon these two things what is the disadvantage of an index though the disadvantage of an index is that he it needs extra space but that is fine and extra space is not a big issue but it can slow down rights so let us let us say that okay you i'm like let us say we don't know about b trees or b plus trees but you had to actually you had to actually implement and index yourself okay if you had to implement an index yourself on this particular thing you can say that okay i will always maintain this table in sorted order of table score and then if insertions happen on this particular table what will be the time taken to insert it will be linear right so i'm like because you always need to ensure that the table is sorted so then you can't do it in i mean like in order of one or in constant time so indexes can slow down rights because they need to process the new data that it achieved okay that is an issue with indexes but otherwise they are actually always beneficial okay three now what kind of indexes can be there the indexes can be of two types i mean there can there are two ways in which you can classify indexes the very first way in which we can classify indexes is unique and non-unique index what is unique indexes unique index basically maintains unique index basically meant allows you to maintain that if a particular data is there is if there is a duplicate in a particular column or in a particular set of columns of the data suppose you have a data in which you want to always ensure in which you always want to ensure that no two people no two students have the same name no two students have the same name how can you do that to do this thing you can create a unique index on name column of students right so what will happen is that at any rate whenever a write happens whenever a write happens it will check the index if if a constraint that was set in any of the index is being broken or not okay if we had not indexed this thing checking this would have been a higher would have been a more complex operation or a more uh computationally expensive operation but as we have maintained an index over that particular column it immediately allows me to check that if that constraint of uniqueness is being meant is being broken or not okay so unique indexes are are there to to ensure some constraints in there then what is the definition i'm like why is there a need of non-unique indexes non-unique indexes exist to speed up the query so while unique indexes the main purpose of unique index index is to maintain the constraints or data integrity right they need to ensure that the data integrity is maintained but the function of non-unique indexes is only to speed up the queries okay and that is the biggest advantage that non-unique indexes have okay now there is also one another way in which we can classify the indexes this way is known as clustered and known cluster indexes okay the very first thing that i told you was that hey database a relational database is not a table but it's a set okay so that means there is no definite order in which the data would actually be stored in memory right it could it could be stored in any way okay now if i tell you that my query my query is always to select people in order of their role numbers if i say that i have a student table again okay i have their role number and let us say that i have their name and i tell you that my queries are always going to be selecting students in the order of their role numbers but as the databases are set so the role numbers can be arranged in any order so 3 can be here 2 can be here 4 can be here and like this name is a name is b name is d let us say name is c okay so data can be arranged in this order but i tell you my queries fetch students always in order of role numbers now what would you like to have i'm like will there be something that makes immediate sense that hey if my queries are always fetching data in the order of roll numbers should i arrange my data in the order of row numbers if i have arranged my data in the memory in or in the in the order of roll numbers it will speed up my queries right because then i need to just iterate over the data and i am done okay so what clustered indexes allow you clustered indexes they change the way data is stored in the database as per the index so if i create if i create a clustered index based upon roll number what will it basically do inside the memory inside the storage where the data is actually stored this will change to 1 2 3 4 and 1 has c 2 has b 3 has a and 4 has d so now if my queries are always in the order of roll numbers they will become very fast okay so that is what clustered indexes are but what are non-clustered indexes known clustered indexes maintain a separate data structure to optimize queries let us just see only this definition of clustered indexes if clustered indexes change the way in which data is stored in the memory can i have more than one clustered index no right because if i have more than one clustered index then i need to store the data inside the memory as per the conditions of two indexes which is not possible right because there can be only one way in which i can depict i can dictate the order the data has to be stored in the storage right okay so one issue with the or basically one uh thing with the clustered indexes is the very first thing is that there can be only one clustered index one clustered index while there can be multiple non-clustered indexes okay the second difference between clustered and non-clustered index can be that here uh the clustered index changes the order clustered index affects how data is stored in memory y non-clustered indexes don't okay okay okay let us say that we have these two things if we have a clustered index upon a particular column and also if we have a non-trusted index upon a particular column which of those do you think will be faster if we have a clustered index basically because clustered index is actually directly affecting the data set right and it is storing the data in the way you are assessing also you have a non-cluster data set which of those do you think will be speeding up the queries more obviously the clustered index will have even faster queries right clustered indexes have faster performance with respect to non-trusted okay because in a non-clustered index you actually first talk with a different data structure and then that data structure depicts that okay now fetch this data and now fetch this data whereas in a clustered index the data itself is stored in that manner and thus it helps you to speed up those queries okay great now let us actually talk about something called as views what are views what a view is let us say that i need to have one source of truth okay so i say that there is always one source of truth and a lot of times i am storing data about students again let us say and i am also storing their gender i have students i have suppose i have their id there i have their name i have their patch and i have their gender okay okay so let us just write few uh things okay 2020 gender can be male 2 which mpp which is 2020 gender can be female and three can be in um let us say c dispatch is 2018 who can be let us say again female and four can be t 2019 can be of me okay okay so this is the data that we have okay now what i tell you that there is one person there is one person in my university who ensures that uh who i am like whose job is to ensure or to do data analysis upon the data of females okay suppose her job is that okay let me actually analyze the data of females do some operations with it try to find out some information from it okay how can i ensure that the purpose that the repeated task of that particular employee in my company whose task is only to just do multiple queries upon the data of females okay so this is students then one we can be that i create another female students table so one can be that i create another female students table and that female students table will be like this name patch gender and then there will be 2 p 20 20 female then there can be 3 c 20 18 and female that is one way in which you can do that do you guys realize that there is some issue with this there is some issue in which the data is being arranged here the issue with that is now if a new student gets added suppose there is a new student that gets added whose id is let us say 5 name is e batch is let's say 2019 and she is also a female now we don't just need to put the data here but we also need to put this data here okay and if by mistake if by mistake you forget to put this particular data at this side then the employee who's the employee whose job was to ensure the data i mean like to do some uh operations or analysis over the female data will go wrong okay so what would you ideally like to have you would ideally like to give the employee who is working on the female data a view a subset view over the student's data right that hey he can see what is the data of students but only that subset of the data of students where the gender was given right that makes sense how can we do that we can do that by creating a view so a view is nothing but a select statement is nothing but a select statement that that that gives an intuition of a different table and intuition of a different table while actually while in reality data is present only at one location let us see how this works like suppose we have this data only uh then what will have you do a view will actually let us say that this is it kind of like is a camera over that thing that okay it allows you to see this thing but with a filter it allows you to see this thing but with a filter so here this view is let us say that the female student is no longer a table but female students is a view this view behind the scene is just running a select query which is just selecting those students from the students table that have gender espionage but the person but the employee whose task was to work upon female students can now use it as she would have instead used a female student statement that is what the view does so view this and now what would happen now if you ever do a right here now if you add a new thing you just need to add it here as soon as you add it here this view will automatically get updated because there is only one single source of truth okay awesome now let us discuss some of the uh i mean like how can we do the where clause okay i mean like we have a weird clause right that we have discussed one way in which we have used the where clause till now is using equal tools right using directly checking for equality or checking for less than equal to and all those things let us discuss something called as wild card patterns and other things that you can use in the virtues okay so where clause let us say pattern matching okay so in very cross pattern actually let us discuss different kind of things that can happen the very first thing is wild card patterns suppose suppose your complaint comes to you a complaint comes to you about a person and the and the person who actually did the complaint didn't know the exact name of the person who did the crime okay and then what he tells you that i just know one thing that he his name starts with k h that's the only thing that you know now you can't just do a db query uh you can you can't just do a sql query where name is equal to kx something like that right so you would like the name i mean like so you want to do a sql query where name starts with kh okay how can you write such query in sql in sql you can have pattern like k percentage what kh percentage means it this means th and followed by any sequence of vectors this can represent kh this can also represents kha this can also represents k h a y and similarly right great so this is what a percentage or a wildcard pattern is so how will you use this file card pattern suppose the task that is given to you is find all students whose name begins with kh okay suppose this is what the uh data that is the question that is given to you and the data set is something like this this is the student table and in this student table you have an id you have the name and you have let us say batch that's your suffice so there is a student with id one whose name is kitati and the batch is 2016 then there is student name number two whose name is let us say aman and who's back is also 27 let's say 2017 then there is student 2 who is khayal let us say that might also happen then his batch is 2016. you need to find all the students and let's say that there is also one more who his name is kamal now what will this query do what will so we need to find all those students whose name starts with kh right whose name starts with kh so that means we need to return this we need to return this and that's it okay we don't need to return this because this starts with ka so what sequel provides you the sequel provides you first the wildcard pattern and the second thing is a like statement is a like even so you can write thing like that hey select star from students where name see the in when we actually know the exact name we use the equal to sign right but now we don't know the exact name so instead of equal to sign we have to use like where name like and then i will say k h percentage i hope that is clear okay now rather than finding all the students whose name is kh i just tell you that hey the question is changed but i need to find all those students in between their names suppose a suppose i need to find all the students that have ama in their name anywhere in the name i'm like it might not be the starting characters it might not be the nd characters what can be a real world use case suppose uh suppose what do we say that okay uh i'm like an examination is going on and the in which letter finds a chit and then we click and then which later finds that on that the name of a person was written it was ama now the invitation wants to know who might be the students who might be the students who would have done whose chit that might be okay so now you need to find all those students that had ama in their name how can we do that to find all those students that had ama anywhere in the name we can write percentage ama percentage so what this percentage symbol is representing basically if we see from this particular thing and from this particular thing is any sequence of zero or more characters okay so this percentage ama will match amon this will also match naman but this won't match a myth okay so what can we do we can just write a statement select start from students where uh here we wrote your name like this so here we can write where name like percentage hear me now we had also discussed a thing like we had also discussed i'm like in the very beginning of this video that if we want to remove a subset of the queries from my statement right so i had used a not keyword right i had used a not keyword what this not keyword allows you to do this not keyword allows you to omit or make those results present in something else present in something else so let us say that my just query just changed i somehow know that okay the person who had did this i mean the person who did this thing who's his name just doesn't have ama that's the only thing that i know okay then what can i i'm like how can i find all those students that had i how can i find all those students that didn't have ama in their name i have to find all those students that didn't have ama in their name i can just use this not keyword i can say select star from students fair name first we were doing we are named like now we don't want the name to be like some things right so we can say we are named not like percentage ama percentage so if we run this query if you run this query this will return amit but this won't return a month okay now we have discussed three things we have discussed percentage at multiple places we have also discussed not there is also a specific sign okay a wild card for a specific position that is nothing but the underscore sign okay what it says suppose i want you to find i want you to find all those people all those students the third character in whose name was let us say m okay so if i also want if i only want you to find all those students the third character whose name was m but anything else can be anything else okay so i want to i want to return naman and i want to say let us say that there is something called lamboth i need to return this as well i need to return this as well but i don't need to return amit okay suppose this is what i want to return okay so how can i do that i know that the first two characters can be anything the first two characters can be anything then there should be an m then there can be any number of remaining characters okay if i write percentage m percentage will this work no this won't work why will this not work because this will also return a myth because amit also satisfies percentage m and all this as percentage so what can i do i can say that the first two characters should be underscore so underscore matches any character any single character okay so first two characters should be underscore then there should be an m then there should be percentage what this means is that the first two characters so that numeric value that there should be a percentage then there should be an m that should be a percentage that is fixed so i can find all those students who had the third character as m by something like select star from students where name like slash underscore underscore m percentage okay now let us say let us let us take talk of another question let us talk of a question where i had to return i had to return all those students all those students whose name had more than four characters i had to return all those students whose name had more than four characters how can you do that if the name has to have more than four characters we know that the first three characters can be anything the first four characters can be anything so we can just write that by underscore underscore underscore underscore that means the first four characters can be anything then it can be percentage i mean there can be any number of characters after this so a query to select all those students who had name greater than four characters can be something like select star from students where name like underscore underscore underscore underscore and percentage okay so that was in wildcard pattern searching of strings in our database let us also talk about let us also talk about what kind of database i mean like what kind of operations can actually have can happen on a database because if you if you are using a database management system you need to know what are your requirements like what kind of data that you want to have okay or what kind of operations happen or what kind of requirements are there from the data set so that you can choose a database system that actually conforms to those requirements so there can be two kinds of database management systems that are commonly known the first type of database management systems are oltp and the second thing is o l ap so how to distinguish between these two you can distinguish between these two types of data sets using the word t and a okay what is t means t means transactional what is a means a means analytics let us try to understand the difference between oltp and olap so as you see from the name that oltp database is more for transactional things okay what do we mean by transactional things transactional thing is a large number of queries but each query is very small okay i mean like let us say let us say that very simple thing let us say that i just need to select all those i mean like i just need to increment the value of something by one or let us say that i just need to i still have the students table and i have their marks as well let us say so i have students tables i have their marks uh let us say the student table is something like this id common name comma marks okay so there is id 1 a initially his marks are 20 then 2 b 30 something like this okay so now my queries are things like hey my query something i like that he insert a value or update a value things like that these are very small operations but these these operations are happening a lot of times in those scenarios you need a transactional database management system so what the transaction management transaction database management system will be will need to do it should have actually a very fast response time you will be very sad if just to create a like if just to submit a lie it takes a lot of time for the facebook's database system to actually store that like in the db and return you that okay you have liked that post okay okay let me actually just tell the full form of these things ol stands for online and p stands for processing so online transaction processing and online analytical processing okay so these are this this is the difference between oltp and olap okay so in an oltp database i need fast response time okay so my cpu requirements are not that much but i need to have need to be able to serve a lot of requests in very fast okay so normally oltp databases are actually distributed okay because you need to serve a lot of requests so a lot of parallel requests which are normally short so you should distribute your load whenever you actually have to have a lot of small queries the best way is that you distribute those things and have multiple different computers handle it rather than having a vertical scaling approach okay whereas consider you are a company consider you have a database of a lot of users being stored since long okay and then every two months or every one month at the end meeting you do a very big processing over those database you try to find all those users who had posted more than x messages or you find all those students who had actually attended more than five classes and then who had actually also solved more than call more than x contest and solve those okay so in online analytical processing these databases are useful for business analytics and intelligence smaller number of queries happen but each query is quite complex can be quite complicated we will say okay because i mean one query might be just fetch you might be fetching from a lot of tables and doing a join between them and trying to find a lot of other things also in olap database management systems other things that are actually i mean like if you're doing a business intelligence visualization becomes very important right so visualization etc are common features okay so in this thing being distributed is one important aspect but in this thing having a large support for visualizations and other thing is a very is a more important task okay now let us actually talk about a very important thing in database design i'm like how will you even create a i mean like how did we decide that what tables do we need to create or what do we need to store in what table how did we decide that let us discuss this actually this is a very uh i mean like uh important topic as in in terms of database management systems in terms of understanding database management systems this is normalization normalization allows you to have good database design good database design in terms of what in terms of in terms of how we are arranging entities and relationships between them okay so normalization also allows you to reduce data redundancy okay let us say i had the student table okay in the student table now i'm also storing the address of everyone i'm also storing the address of everyone okay so let us say that student has id he has a name he has a city where he lives he has a pin code and these are the things that i need to store okay so let's say that this is the database so let us say that we have id one his name is a he lives in delhi and his pin code does not live in delhi because delhi has multiple pin codes let us say he lives in a city xyz that has only one pin code and let us say that the pin code is double one triple zero one then let us say that there's a student two whose name is b who it is he lives in city abc and supreme court is one double three double zero one then there's a student three who also lives in city i'm like whose name is c who also lives in city xyz and the name is double one triple zero one okay suppose after few days after a few days government decides that okay i will be changing we will be changing the pin code of the city xyz what can happen what can be an issue in my this database design in my this database schema design the issue can happen is that he suppose government says that the city with xyz will now have a pin code of one two seven two zero one suppose this is a pin code that the new pin code of xyz has to be now if this happens what you will have to do is you will have to go on this student table everywhere where one one zero zero zero one is there you have to change one to seven two zero one you have to change one to seven two zero one and all those things which is a very bad design right what can also happen is what can also happen is that suppose there was also another student c let us say t he lived in city xyz and head up in code of 1 1 0 0 1 but you somehow forgot to change this you somehow forgot to change this and that's a bad thing for you now your data at some places is storing the pin code 127201 for uh the city xyz but at some places it is showing double one triple zero one that means the data is not consistent what do we mean by that we mean irregularities in the same in the information so what would you ideally like to what would you ideally like to have you would ideally like to have is that hey all these cities i mean like the city and pin code because a city can be a city can be recognized just by the pin code right so i would ideally like to have is that somewhere i am maintaining the pin code and the city name if i am somewhere maintaining the pin code and the city name i will be i can ensure that these hidden these consistency issues are reduced to minimum right so what will be very good for me is that let me have a id name and pin code here or let us say instead of having one table storing this i can have a student table that only stores id that stores name and that's to city id right and i have another table which is city table that is storing city id city name and pin code now we have one a and let us say one here let also we have three c and one we have four d and one now we have two b and two let us say so we can say that the city id one has name uh xyz and has a pin code of double one triple zero one city id two has name abc and one double three double zero one so now if government decides to make the change you only need to make one change that is here and this thing will automatically conform to new changes that happened here right so this is the advantage that you get by making your designs of databases very good okay so these are known as normalized databases but how will you decide that there is a need to improve the database design let us discuss normal forms for that there are six normal forms actually but uh greater than three normal forms are not actually practically not actually used much so we will be discussing here one nf two nf because those are more prominent let us discuss what one nfc's a one nf data a data a table or a database schema design is known to be satisfying one nf if there are no multi-valued attributes what do we mean by no multi-valued attributes suppose you know you have a library management system and in other library management systems you store which books which books have been allocated to a particular student so you need to you have a table let us say a location table in which you have a student id and you have a books a list of books okay so suppose there is a student whose id is one and he had bought and he had linked rented let us say five books so those books had id one zero one ones two zero one one three one twenty and let us say one twenty one and let us say one eighty okay so there can be a student two who has rented 3 books let us say 11 113 and 21 so on this database streamer design in which any of the table can have more than one rows is i'm like in which any of the column can have multi-valued attributes because this attribute has multiple values this is not just a single value this is not just an atomic value so this does not satisfy one and f so how will we convert this data into one nf form how will we convert this data into one nfo we can construct we can change this data into one nf form by splitting this data by spreading this data like this student id and books and say one here's 1 0 1 1 1 2 0 1 1 1 3 1 1 2 1 and 1 180 similarly 2 has 11 2 has 1 1 3 and 2 has 21. okay this data this satisfies one and f this does not satisfy one nf okay so that is how you convert a data set that is not satisfying one nf into a let us discuss about second normal form as well to nf data i mean like the exact theoretical definition of this is that he there should not be any column there should not be any column or a set of columns that can be uniquely identified that can be uniquely identified by anything other than by anything other than the primary key or the candidate keys i'm like what are the primary keys and what are the candidate keys we will discuss in a moment but let us talk here let us take care of this thing let us see let us see the example that we had here let us see the example we had here what was the primary key of this uh this table let's firstly define primary key as a row as a column value that has to be unique that has to be unique for any for any record in the in the table so for example if we see the id has to be unique i'm like no two students can have the same id that is the main source of distinguishing between any two data any two records okay so what it says is that let us see this pin code and this city thing do we think here that pin code pin code actually doesn't need this id to be uniquely identified pin code can be uniquely identified if we just know the city but city is not the primary key right i'm like pin code can be identified by the cd but cd is not the primary that means there is a subset there is a subset of columns in my schema design that can be uniquely identified without even the primary key without even the primary key which is id so how can i convert this data set into how can we convert this data set into second normal form is what we just did here this but the conversion that we had done here was nothing but the conversion of a data set that is that does not comply with second normal form into a data set that complies with the second normal form let us actually let us actually uh take one more example let's actually take one more example in which we can do that okay suppose let us say that uh this is something actually present on also in the interview practice uh like form of this so what it says is that hey let us say we have a students table we know the student id we know their name and we also know if he's a minister of his or misses okay then we say that okay let us say that we have students we have id we have name we have gender and we say that what do what what is the salutation that we use for them okay so let us say that salutation can only be mr mess or let us say it can be doctor okay these are the three salutations that are allowed okay can we somehow knows know these three things by some other thing i mean like let us say let us say that currently i'm maintaining students like this one whose name is a whose gender is let us say for now we have only mr and miss okay uh we name it a and gender is a we have student b whose gender is female we have sent three christian is a whose name is b this salutation will always be mr this will be mr and this will be miss right but actually what we realize here is that he if they just know the gender we actually know the salutation so what happens what happens if i suddenly decide that or i will call all the males not mr but suppose master i might call it i might decide that then i would have to iterate over the students table i will have to trade over the students table and update this and update this which is and that can lead to consistency issues so this is where i mean if these are the two columns if these are the two columns that can be uniquely identified by something other than the primary key we split these set of columns into a different table so we split this by only maintaining gender here so let us say that we are maintaining id name and we are making gender id okay so we are saying one two three she is a is b then gender is one two one then based upon gender id i can store the name i can also know the salutation so i can say that gender id1 is male and the salutation is mr and the gender id2 is female and the salutation is miss so this is how i convert a table or converter schema design that is not into the second normal form into something that is a second normal form compliant okay great now let us discuss uh one last thing before we actually uh enter today's lecture is something called as procedures okay something called as procedures in novel functions in normal functions when you would have i mean like a normal programming that we do in normal programming that we do we don't just write code sequentially right we don't write code sequentially but we actually make our schema design procedure right we say we have a function called print this we have a function called two specific task to ensure that our sql from sql amla code uh that means our normal program is modular okay that should look modular okay how can we do the same thing in sql in sql we have something called procedures procedures are nothing but select statements they are also select statements that can be identified by a function call we can create procedures and each procedure is doing nothing but a select statement okay so each procedure is doing nothing but a select statement there are there's like statements that are identified by the name now these procedures can be something that also that also manipulated right they can actually change the data as well that whatever is in the uh data set at that particular location so suppose there can be a procedure or this can be update statements modification statements okay so example the one one example for that can be suppose this was the thing that happened that hey you decided to call all means master okay suppose you decided to call all the maze master now what you will do you can just write you can write a procedure you can write a procedure which is called change salutation it can take in gender and it can take it new salutation right and then this recursively runs the sql query and then changes it okay now when we are actually discussing this let us actually type of let us actually discuss what kind of sql statements we had what kind of sequence statements that we had and let us actually parallelize its intuition with how you build a house when you are building a house what are the things that you need to do okay and like when you are building a house first you need to decide that okay how will my house look like right how will my house look like so that is basically definition okay then the second thing can be who will live in the house right who will live in the house okay what can be the other things the other thing can be you put something in there right you actually put some value there or put some data here and all those things right so the other type of queries can be uh that hey you manipulate or you change the design that you say that okay i will put one more thing in the kitchen or i will do says these things okay so those can be uh but we say controlling it or we can say it as modifying it or manipulating it okay and what can be the fourth kind of thing the fourth kind of thing can be that hey you have manipulated you have queried you have uh i'm like you have defined the things you have created you have manipulated you also say that for who is the control who is going to control the thing and who has what assesses so these are the four things that are actually i mean like in sql these are the four kind of statements that exist the very first kind of can be data definition language these statements these statements allow you to define how my data is going to look like that okay this is going to have something like this this is going to have something like these these statements are create and all the statements okay these can be create these can be drop these can be truncate i should not truncate trumket it's not actually a data definition language then the second thing can be query for querying in a database what are the statement that we had actually used one most prominent statement that we use for query in a sql database was select so that is a sql statement that is used for selection for query right and the third thing can be manipulation these manipulations can be insert update and all those things right insert this do this and all those things okay what is one more important thing one more important thing is who actually has assess who actually has access to my table because data is very private so you can't give access to everyone right so you need to have some kind of control of who has access to the data so i'm like in a sequel the database administrator actually gives you a control that okay there is a user this who can actually create uh america who can actually write to this data or this user cannot write to the data but he can only read so these control statements can be grant and revoke so in a sequel all these statements can actually be segregated into these four things there can be a definition statement which can be creating dropping this can be querying which can be like select this can be manipulation inserting something or updating something and these can be controls these controls are allowed i mean like these control statements are there so i'm like give some read writes read read writes or only write writes and all those things to the database management system okay so these are the four things that are there in this now let us actually discuss some i mean like some tricky kind of thing let us discuss one tricky question that is normally asked in a database uh interview and then we're going but the question is that hey you have to create a new table create a new table with structure with exact data structure of another table okay suppose there is a there is a table called students and you don't know that there is a table called students you don't know this okay so there is a table called students but you don't know what is inside this table so there is suppose id there is name there is two three more things but only you know that there is a table called students and you need to create a table called students copy which should have which should be having the exact same structure as the students table without knowing that how what is the structure of students but how can you do that so this is actually a very tricky question that is normally that's uh that can be asked so what this i mean like how can you do this thing anyone has any ideas here let us try to see let us try to see what a select statement was doing what a select statement was doing select statement actually returned me select statement actually returned me whatever the data was present in my table right so if i don't know students table at least i can run this select select query to get their data in that form right so i can still get select start from students okay but then what will i do now i at least know that what is in the data i'm like but i'm like what is the structure of students table but what should i do now am i like what can i do i need to i need to store whatever was whatever was the structure that came from here into some other table right so sql allows you another keyword which is into i say i select star into student copy from now where am i selecting from i am selecting from students right okay what will this thing do what will this statement do if my statement is only this particular thing if my statement is only this particular thing what is it this going to do into is basically into does nothing but copy everything that was in the first table as it is to the next day okay so for example if students table had one two i mean like one a x y z two b a b c and three c d e f okay so this statement i'm like this is the students table this statement will actually just copy everything as it is into the student's copy table okay but but i don't want the data i only want i only want this structure i only want this structure how will i do that i can say i mean because i have written a select statement then i can have a where cross right then i can have a where cross okay i will have a weird clothes but what to put in the wear clothes what to put in the vehicles i need to put something in the where clause such that none of these rows none of these rows actually get carried forward here so what so i mean like the statement should be something that is always false right that is always false so that nothing from here gets carried forward here so what can that statement be i mean like one very hacky thing is where 3 is equal to 4 this statement can never be false right this this sorry this statement will never be true this is always false so select star when the select star thing gets the table structure it creates a new table stress student copy because you are putting into here so it creates a student copy but because the where clause was never satisfied because of where clause were never satisfied we actually never put anything there okay but actually we could have done where zero or where false that would have also worked perfectly okay great now let us actually discuss some of the aggregate functions of the in sql that are present in the sql because that that is something that people tend to miss out because i'm like um otherwise you have to see the documentation let us quickly discuss that and then we will be ending the today session so let us discuss aggregate functions in sql okay so let us just list them list them down and let us see what those are the very first function can be average avg so this function this function takes in a list of values this function takes in a list of values and returns the numeric mean of them okay one more function that we had actually discussed in the beginning of the lecture in the in between the lecture was the count right count statement returns just the number of rows the number of rows or the number of records that are satisfying that particular statement so if i just do select count of star from students what will this do i'm saying the count statement just returns the number of records that satisfy my that that satisfy my select statement right so if i have select and i'm saying select everything from students so what is the count of everything this is nothing but number of students so one hacky way to get the number of records that you have is just select count star of student said that was perfectly fine okay let us discuss other functions that is min min also works upon a type of data then there is max because there is average then obviously there also has to be a sum there is first and last what are the first and last doing by the way i mean like people tend to get confused by first and last what is the like how are they going to be decided they are going to be decided by the order by the order in which the rows are returned so the first will return the first element in the order in which select statement would have returned the values are null values counted yes i mean if the whole uh row is null null and ll but it is still present so yes that will be counted because it because that record is still there unless you have maintained primary key constraint in which that case it will anyway fail right yeah so similarly the last the last fetch is the very last particular record for that particular element okay when we were in the middle of the lecture what we found about that what we found what did we observe about these aggregate functions these aggregate functions allow you to these aggregate functions allow you to group by i'm like they are used with group by and having right so these are the aggregate functions when you aggregate upon something when you are doing an aggregate so let us say i am going to take average of all me suppose a question that comes to you is that hey given a student table where student table is something like id name gender and score okay you have to return average of males and females respectively okay so the very i mean very very easy question i mean a very easy version of this is that hey i just need to return the average of all the students in which case you can just do select average of score from students but now you have to select average of males and female in different groups how will you do that in that case you will have to group you will have to group those students by their gender right you will have to group the students by their gender so you will still have to select average of score from students but now all these students are not one group all these students are not one single group there are multiple groups and how are those groups being made those groups are being made by their gender okay select average of scores from students group by gender okay so this is how the group by statement comes into effect i hope that is clear okay now let us actually discuss these are the these are the functions that are aggregate functions these are working upon a set of data there are also other functions i mean like many people feel that okay it's very difficult to i mean like it's normally a better choice to use a programming language along with i mean like sql uh otherwise it's difficult to write a lot of things but actually sql allows sql has inbuilt scalar functions so what are those scalar functions these take in one value and return one value so basically like in a multiple programming languages suppose you have a capitalized function right suppose like in let us say in python you have a capitalized function actually let us write those functions in sql only so i should not confuse people so let us in sequel there is a function called new case if upper this function is nothing but this takes in a string this takes in a string and returns uppercase version of the string similarly there can be lowercase as well okay then there are multiple other functions they are concatenation of different strains then there are some mathematical functions which are actually useful these are rand for random then there are round one of the most important function that i've actually personally used in my like uh in real life environment is the timestamp functions so i'm like if you are working with let us say uh data warehousing solutions like redshift and all those things timestamp timestamp sql functions are very actually useful so these can be like two timestamps then there can also be now function that returns the current date and time so one thing i mean like most people think that sql is just about the query language it's just about querying but it actually has a very strong set of inbuilt functions that are available directly that you can use and do a lot of tasks that you can actually probably do with only programming i mean like obviously you can't do a lot many of them but i'm like it's it's more than what normal people think to be okay okay one thing actually we missed out in the medium of the lecture was keys right we actually missed discussing them indeed so let's just throw a brief write on them and then we'll be ending it let us discuss primary keys and foreign keys and how to create those and foreign even before we discuss primary keys let us actually just discuss a term called as candidate keys candidate keys are a set of column values which can uniquely identify every other value select a set of columns actually set set of columns which can uniquely identify every other identify every other value value in a record what do we mean by this so basically let us say let us take care of our students let us take care of i'm like let us take care of a student's table again for the last time so let us say the student has an id he has a name and let us say he has a marks okay and that's it well let us see even given as a gender okay so let us say the student with id a has name a score 20 and gender m then id is 2 he has name b he has scored 30 nine gender female yes from three he has name c 31 and me okay so suppose i just tell you the id of the student if you just if i just tell you the idea of the student you can directly go and say that okay the student with that id had this name had that score and that made okay so i mean like if you just know the id if you just know the id you can know all these three things right let us only consider this table the current values in the stable do you think in in this current value neem will also be uniquely able to identify all the other attributes if i tell you that p is get me data where name is e please get me data where name is a will it be able to uniquely identify all the values yes in the current set it will be able to because there is only one person with one name so a has only one person b has only one c has only one so if i only know name i can directly get the score i can directly go to gender i directly get the agenda and directly get the id is gender enough is gender enough to get the data no gender is not enough to get all the other values of the data set because there are multiple people who have the gender mail but but have different name different id and different scores so the columns that is for this example name and id that can uniquely identify every other values are candidate keys so candidate keys can be a single column or a set of columns what is primary key then primary key is the key that the dbms uses to uniquely identify our record it can also be it can also be a single column or it can be group of columns okay so let us let us see let us see the student and books table that we had actually written about right above we had actually written a student table where uh what we had was that hey which student has rented which books so there we had a student id and book site and book id right so if student one had taken book two zero one he had taken book two zero two he had also taken book two zero three then student two has taken book one zero one he had also taken two zero two he had also taken let's say that there's just two and three who has taken two zero three suppose these are the students and this is a table what do you think can be a primary key of this table can it be only student id can it be only student id no because there is no i mean if i just tell you student id you can't uniquely identify the value this student id is associated with this book id i'm like there is this thing this is also associated with this this is also associated with this so basically primary key can be set up can be the i mean it can be the set of columns whose value if you know you can uniquely identify a row you will definitely you are guaranteed to return a single row okay so for this particular table for this particular table the primary key will be student id comma book id both the columns together constitute the primary key and let us actually discuss how will we create our primary key i'm making a sequence statement how will we create a primary to create a primary key you can either do the very first way which you can do that is while creating table so while creating table you can do create table you tell the name of the table let us say that the name of the table is students you create table students in this table we are actually maintaining student id and book id let us talk about this thing let us say here we maintain the ids test okay so when we create a table we have to tell what is the name of the column and then we also have to tell what is the data type of that column so let us say that id is an integer okay and i mean let us for now keep it as it is then we say that okay we are also storing a name name is nothing but a string right in sql a string is a vector it's a variable character of how many characters max let's say it's 255 so at max that can be 255 characters and then here we have let us say school which can also be an integer and let us say we finally have a great uh i mean let's say we don't have a gender for now okay then we have to decide the primary key so we can write primary key and in the parenthesis we set what that primary key is okay that is one way while we create the table we actually write what is the primary key going to be but sub suppose you had actually created the table and you forgot to add the primary key what will you do if you forget to do something that you had actually written while creating a data or while defining the data you can use the altered keyword alter keyword is used to alter keyword is used to alter the initial data definition that you had done so you can do alter table students where and you i'll first you see that i am now going to alter my table so that means i'm going to add something to it what i'm going to do i'm going to add primary key and that primary key is going to constitute only id that is how i use the alter keyword and get this particular thing done okay so that is about the primary case let us actually briefly discuss i'm like before we come to foreign keys let us actually briefly discuss the constraints okay so i also want that hey i tell you that there should not be any student whose name is empty okay i don't want any student whose name should be empty okay that means i want that student's name should definitely be present so sql provides us a list of constraints that we can use upon our data definition okay so one of those constraints can be unique then the other constraints can be not null then there are other constraints like that can check a particular value that okay unique constraint says that value in a column or a group of columns should never be duplicated okay not null says value should never be empty then one of the constraints that we have discussed is primary key that primary key by default says that it should be unique and it should be not null okay then there is also one more constraint that you can see we can say default so i tell that hey if i somehow if i somehow miss to give the value of a particular column please set it to this value please set it to the default value okay then one thing can we check this check statement can actually verify that a value is satisfying a particular condition for example i can say that let us i mean suppose my i had also i also had a gender here i also had a gender here so i can say that it's a gender and it's in character okay then i can maintain a check that hey gender should be only mrf okay so this is what i'm like this is what we maintain my gender that okay i put a constraint that okay i can't i mean there's no predefined constraints so let me actually create my own constraint that hey the value of gender should only be m or f okay and the next there is also one more constraint which is the foreign and let us discuss this foreign key constraint now okay so what is the foreign key when we actually were creating uh the i mean like the original thing i'm like when we actually created the employee table very uh in above what we actually done we had two tables right so the very first table that we had was employee data in which there was an employee id his department and let us say his title and all those things okay let's say we had one this table and the second table was let's say employee salary and this had employee id and this also had salary okay so if we have these two things does it make sense does it make sense that hey there is an employee but an entry corresponding to him is not present in the employee salary table is does that make even any sense no right because i mean like if there is an employee here whose department is let us say tech and his title is let us say cto then there can be another id 2 whose department is let us say program management and whose title is let us say hey i'm like let's say it's a general one it's program management one then there can be another person three who is also a program manager let us say his title is pm2 and all those things and let us say there is four who is in tech and his software engineer let us say this is these are the rules that we have and corresponding to id1 uh i have a salary let us say 200 2000 it is saying that i have a 72 these are three thousand i have a salary five i have six thousand and i have a salary three who is let us say four thousand and i have a salary for us let us see two thousand does this make any sense i'm like there is a there is a salary of an employee but that employee does not exist this does not make any sense right i mean like there should not be i mean there cannot there should not happen that hey in employee salary there is an id there is an id but that id is not present in employee right so we need to ensure that if if an employee salary is present here that employee id should also be present here as well right so we can add we can add a foreign key to the employee salary table but what should that foreign key reference to that foreign key should refer to the id column of the employee table okay so what can you do it can say i'm like how can we add this i can say that hey when i create the employee salary table i say create table employee salary okay when i'm creating the table i need to have an id then i also this is an integer okay and i also need to have let us say the salary which is also an integer okay now i need to add a foreign what is the foreign key upon foreign key is upon this id right foreign key i add upon this id but what should this foreign key refer to what should this foreign key refer to this foreign key should refer to id in employee table right so i say foreign key id references this references uh employee id okay so this is how i create a foreign key if i forget to create foreign key i can just i'm like like we add primary key later we can do alter table foreign key uh sorry alter table uh employee salary alter table employee salary and then what i do i have to now add a foreign key right so i add a foreign key i add a foreign key upon which column i add a form keep on the id column and this references employee id okay so this is how i can add a foreign key later as well okay by the way i'm like any time when we have to do a modification to the data whenever we have to do any modification to the data we actually have to use this alter command this alter as we know is a data definition thing and this can actually i mean like alter the table alter the definition of the data this allows you to do that okay okay finally i think there is one more confusing thing that i just saw someone in the comments what is the difference between drop delete and truncate what is the difference between these three things i mean these three things uh in english-wise mean the same thing right these three things made the same that okay you are deleting something perfectly okay but is there any difference between these things why why does sql has these three things like why okay so the difference between these three things is that hey delete is used to delete a row from a table delete is just opposite of select okay in select statement you select some set of tables to view but in delete in delete command just select a particular set of records to remove them from your sql table okay so i'm like what you can do is suppose you have to delete all those students i mean i suppose your university decides to remove all the students who had less than 40 marks so but less than 40 score so your university can do delete from students okay then you can use everything here where what you use in select statement so you can use everything here so you can select where let us say score is less than equal to 40. this will do what this will just remove every i mean like every data from the student table from the students table that had a score in which a student existed who had a score less than equal to 40. that is a delete command then there is also a truncate command what this strung command is used to do this deletes all the rows this deletes all the rows but table is still there but table and its definition constraints everything is there definitions constraints are still there and then the final thing is drop remove every existence of the table okay remove complete existence of the table so let us actually let us actually actually give you an intuition of this with a diagram okay suppose we had a table like this we in which we have an id in which we have a score okay let us say we have id one whose score is 50 id2 score is 60 id3 whose score is 20 id4 score is 10 id5 whose score is 70. okay let us run three commands here let us run and this is id and this is size okay this is suppose the table and let us say the first command that we run is a delete delete from students where score is less than equal to 40. what will this return to this will change it to uh id and score and this has 150 because this is there 260 and 570 okay other things will get deleted due to truncate if you do truncate you are only remaining with id score no data is remaining okay nothing else is remaining and if you do drop if you don't draw do drop nothing is remaining i mean there is complete empty thing nothing is nothing is repeating yes uh rahul uh where clause can be applied in delete that is what we have written here right yeah so let me actually give an example of how to write the truncate command to completely remove the students table you can do truncate table i would like to truncate all the data that is there in this so you can do truncate table students uh and to remove the students i would like to to go into this thing that there is no existence of students table at all you can do drop table students okay so they do they completely remove the data or the second thing the drop table actually completely removes the whole existence that is there of that data okay yeah so that's all that i had from my side today uh i hope you liked the session it went for around two and a half hours so yeah thank you for being a very patient listener and uh okay uh and by the way guys i mean like we have actually a very uh i mean like all these things we have actually written into a well-defined article as well on the adobe platform so that is present on this particular link that i just pasted on the chat so please i'm like if you want to practice all these sql statements you can you can actually write those sql statements there and see if the code with the sequel code that you wrote was also good okay yeah awesome have a good night please stay safe and stay healthy