okay hey guys i'm tawfiq in this video i'll be talking about sql joints now there are several types of sql joins and if i try to cover each and every sql joins in this video then the video is going to be pretty long and that is why i'm going to split this video into two different parts now this is going to be the first part where i'll be covering inner join left join and right join and then hopefully next week i'll be posting the second part of this video where i'll be covering the remaining joints that is the full outer join cross join self join and natural join hopefully with these two videos you should be able to get complete idea about what joints are why we should be using them and how to use them now before i can start i'd like to make a quick announcement i have recently started providing live sql training sessions on a platform called as lighthall.com now this is a platform where you would find a live sessions being held by teachers across the globe covering various different topics now on this platform you would find live classes being held related to data science personal development some chemistry classes and so many other various fields now if you are interested in attending some of these live classes do check their platform out i'll leave the link to their platform in the description below now on this platform i have actually started providing live sql training sessions for complete beginners i have already finished two sessions and in this first batch i have six more sessions to go where i plan to cover all the basic sql concepts so if you are someone who has absolutely no idea about sql i'll start from scratch and then hopefully by the end of this class you should be able to at least write basic to intermediate level of sql queries and that is the plan now i already started my first batch on 3rd of jan 2022 and i plan to start the second match on 17th jan 2022 so if you're interested in joining some live sql training sessions for free then do consider joining this session i'll leave all the details that you need to register on this platform and then to join my class in the description below so do check that out secondly i just started a discord server with an intention that if there were any questions that you wanted to quickly ask me about my videos or about the live sql training session that i'm having then you can quickly ask that in the discord server and i'll try to answer them as much as possible also it's a great place where all you guys the like-minded people with an intention of learning sql python or data analytic concepts you can just be in one single group and you can share your knowledge and i'll also try to share any resources that i might find interesting for which might help any of you learners so if you are interested in joining that discord server i'll leave the invitation link in the description below finally if you like my work and if you'd like to support this channel do consider subscribing to the channel and give me a thumbs up on this video thank you and let's begin okay so before i can talk about different types of joints let's first try to understand what joints are and why do we need them now we know that sql is a programming language that is used to interact with relational database right and in a relational database data is stored across multiple different tables and all of these tables will be related to one another in one way or the other right now let's consider an example let's say if you are trying to create an office database you would have information related to employees departments managers projects etc and all of this information would be stored in its own specific tables for example all the employee details would be stored in an employee table manager details should be stored in a manager table department details should be stored in the department table and then project details should be stored in the project table right so let's say someone asks you to fetch all the employee details along with their manager name their department name and the projects that they are working on then the only way that you can fetch these details is by accessing all of these different tables now when you have this kind of requirement where you need to fetch details which are scattered across multiple different tables then the only solution that you can do in sql is to bring all of those tables together and in order to bring all of those tables together this is where you need joins basically we need to join multiple tables together in a single query and then from that single query you will be able to fetch the details or the data that you want and this is where you need joints now the tricky part is that there is no single type of join there are several different types of join and depending on what your requirement is and what you are trying to achieve you may have to use one type of join or the other okay so now that you understand what joints are and why we should be using them let's try to understand the different types of joints and also try to understand when your query contains these joins how actually sql treats these queries and how it executes them okay now to explain all of this i have created four sample tables so i have the employee table and you can see that it has five different columns there is the employee id column employee name salary department id and manager id column then i have the department table which basically has four records only it has the department id and the department name and in the employee table i have six employees here so just make a note of that and then i have the manager table which contains four different records basically the information about four different managers so i have the manager id manager name and their department id and then finally i have the project table which basically indicates the employees who are working on the project so it can be an employee or a manager who is working on a project so i have the project id the project name and the team member so the team member id can either be an manager id or it can be the employee id who is working on this project okay now using these four tables i'll try to explain the concept of inner join left join and right join okay now these four tables kind of looks like it's part of an office database and let's say you are working on some sort of an office database and your supervisor comes to you and tells that you need to write a query to fetch the employee name and the department name that they belong to okay so this is basically the requirement that has been given to you by your supervisor so whenever you have been asked to write an sql query the first thing that you need to do is the output the result that you need you need to check which are the different tables you will need to fetch in order to arrive at that output okay so from this question i can clearly say that i need to fetch the employee name and i need to fetch the department those employees belongs to okay so i have these four tables so let's try to understand in which table i will find this information so just by looking at the employee table i can see that i have the employee id employee name salary department id and manager id so i have the employee name here and i have the department id here but the requirement is not to fetch the department id but i need to fetch the department name okay so one thing i know that employee name i can get it from the employee table so this is definitely a check okay so i need to use the employee table and then there is another table department and here i have two columns the first column is department id the second column is department names and this is the column that actually i need for my output so it means that this is also the table that i will need to use in order to arrive at my result for this particular question okay so basically from this i can see that the sql query that i am expected to write will need to use these two tables okay now these two are completely separate two tables right if i have to write a query using these two tables and i need to fetch the data from these two tables the only way i can do that is i will need to connect these two tables together that is join these two tables and this is where we will need to use the joints now the question is what sort of joints would you use now the most basic type of joints that we have in sql is called as an inner join okay now inner join can either be represented by the keyword inner join or it can simply be represented by the keyword like join so if you see a sql query where it is mentioned join or it is mentioned as inner join they basically both mean the same they both represent inner join okay now what exactly we need is we need to fetch the employee name and their department name okay so let's try to write a query and then like let's try to see if we are able to achieve our outco or our result okay so the first thing is we need to have a select clause to basically print the columns that we need to fetch and then we need to use the from clause where we need to mention the table so i know that i need to use two tables the first table is employee and the second table is department and i know that i will need to join these two tables so first of all i'm just going to use a join i'll not specify what sort of join whether it is an inner join left join outer join or right join etc okay let's just use a simple inner join okay so this is basically the default join that we would generally use when we want to connect two tables now i know that the two columns that i need to have in my output is the employee name that is employee underscore name and this employee name comes from the employee table so it has an alias like e and then i need to fetch the department name okay and the department name comes from the department table which i will given alias like d here okay and then the next thing that i need to do is whenever i'm trying to join two tables i cannot just specify the two tables that i need to join the most important thing is i need to specify the condition on which i need to join these two tables so when i say the condition basically what is a join condition what are the columns on which these two tables have to join okay so basically whenever you want to join two tables you need to join them based on some columns okay you cannot join them just like that you need to have some columns based on which the join needs to happen so let's try to find out which are the columns based on which we can join these two tables and whenever we want to connect two things we need to find out basically connect two tables we need to find what are the common columns that are present in both these tables now in the employee table i can see that i have a column department id and then in the department table also i can see that i have the column department id now one thing to remember is whenever you're using joins and you're trying to join these any two tables based on certain condition it does not matter if the column names are same or not okay now in these both the tables this particular column is called as department id that is fine but let's say instead of department id in the department table this was called let's say xyz underscore id even then i can still use the same column for joining because the column name does not matter when joining what matters is the value that is stored in that column the value has to be similar the value has to be kind of the same values that are present in both the table so you need to join based on similar values okay so let's try to join these two tables based on the department id columns i'm just going to say e dot department id equal to d dot department id okay and i think this query is done so basically in this query what i'm doing is i'm joining two tables using an inner join i have specified the join condition basically the column on which the join should happen and then in the select clause i basically specified what is my output okay so now if i run this you can see that i'm able to get four records so i'm getting the employee name manoj rahul michael and james and the department that they belong to now this is fine and in short the output is exactly what your supervisor asked for because your supervisor said fetch the employee name and the departments that they belong to and that is what i have got here okay this is fine now let's try to understand what exactly sql did when it executed this query now you have this join here so i'll try to do one thing i'll just move this to the line here whenever we are using join right we need to have at least two tables or you can have a table and a sub query or two sub queries now i'm not going to be talking about sub queries in this video i'll make a separate video about sub queries so for now let's just treat tables okay so whenever you're using join you need to have a table on the left hand side and you need to have a table on the right hand side in this case since i'm just using join or i can just represent it like inner join okay so we generally use it like join because it's a short form right we don't need to specify inner join every time but if you if you are just getting started and if you want to be more specific you can use inner join so just that it becomes more cleaner for you to understand what actually what type of joints have you actually used so if i execute this you can see the output is the same so whether you use inner join or join is the same now what you need to know here is whenever you're using join or you're trying to join two tables you will have the join keyword in this case the inner join keyword and then you will have a table on the left and then you'll have the table on the right and then finally you will have the join condition and this is the most important thing what an inner join will do is it will try to fetch only those records which are present in both the tables and when i say records it's going to find those records just based on the join condition now we know that the employee table has five different columns department has two different columns but it's not going to match every column from the left table with every column from the right table it's only going to match the column that you have mentioned in the join condition in the join condition we have just mentioned department id and hence the join or the matching will happen only based on department id and whatever records are getting matched or present in both these tables only those records will be fetched now let's just try to understand this better if i go to the employee table and look at the department id field here i can see that i have d1 i have d2 and then i have d10 right and then in the department table i can see that i have b1 b2 so i have b1 i have d2 i have d3 and then i have d4 now just by looking at these two data i can say that d1 and d2 are the common departments that are present in both these tables so any record present in both this table which has a department id as either d1 or d2 will be written in in this particular query okay so in this employee table i can see that i have rahul manoj james and michael these are the only four employees who are having these departments d1 and d2 okay and then i have two other employees ali and robin but their department is d10 and this d10 is not present in the department table hence this gets excluded okay and similarly if i go to the department table you can see that i have the departments d1 and d2 hence this will get fetched because d1 d2 is present in employee table as well but d3 and d4 is not present in the employee table hence this will get excluded okay so only the records which are present in both the tables will be fetched from the inner join and when i say record you don't need to match every single column of both these tables you just need to match the columns which you have specified in your join condition and this is exactly what an inner join does i hope this is clear now let's say your supervisor comes to you and sees this result and he says that okay so you have been able to fetch this value so you are fetching four different employees and their department but i know that there are more than four employees in the employee table so why have you not been able to fetch that okay so he tells you that you need to modify the query such that you need to fetch all the employees okay so basically he will tell you to write another query so basically i'll just move this here and let's say now he's going to tell you to write a query fetch all the employees so this keyword he's going to tell you fetch all the employee name and their department name in this case what do you do because if you just use an inner join you know that inner join will only try to match with records which are present in both the table and i know that there are certain employees in this table in fact ali and robin are the two employees in this table who belong to a department d10 which is not present in the department table so just by using inner join this d10 record will always get excluded so there is no way that this will be part of your final output right so what do you do so whenever you have a requirement where you need to fetch a record from a table which may not join with the other table in that case this is the best scenario where you will need to consider either the left join or the right join okay now in this case to write this query what i'm going to do is i'm just going to copy the same query and i'll just paste it here okay and what i'm going to do is i'm just going to see how i can modify this query such that i will this query will always return all the employees irrespective whether this joint condition will be successful or not and how i can do that is i can just change this inner query to a left join okay or basically the inner join to a left join now what happens with the left join is as i told you whenever you're trying to join two tables you'll have the join keyword in this case it's the left join is the join keyword and you have a left side table and you have a right side table okay whenever i'm doing left join it means that the left side table will basically take priority or it kind of becomes your main table okay so what a left join will do is it basically does two things okay so this is the important thing that you need to remember a left join will first try to basically do an inner join okay initially it will just do an inner join and whatever records are matching in both the left and the right table it will just fetch it and then additionally it will check for any additional records in the left table okay so any additional records in the left table which were not returned from the inner join okay this is what the left join does this is basically the formula of left join so whenever you see a left join it's basically just doing two things first it will do an inner join so it will fetch all the matching records second it will just go to the left table and from that left table if any of the records were left out it will just try to include those records also as part of this query okay so now if i just execute this query let's see what the output is now you can see that previously when i did an inner join i just got four records that is these four records but now when i did a left join you can see that i'm able to fetch six records and robin and ali are the two additional records that i have got so even though in the employee table i have this robin and ali i can see that they belong to the department d10 and department d10 is not present in my department table still my left join query here is able to fetch those two employees and the reason for that is this formula that i just mentioned here okay so if i just comment it so you can see that what basically happened was i did this left join so initially sql will just do an inner join between employee and the department table based on the department id column and it will be able to fetch these four records okay so that is fine after this it will go to the employee table and it will see are there any additional employees that have been left out from this inner join and when it goes to the employee table it can clearly see that there are two other employees robin and ali who have been left out from the inner join and hence it will include those two employees as well okay and this robin and ali are basically the employee name which is fetched from the left table that is employee table hence the values will be populated here but then there's one thing that you need to remember in in the left join is that if your select clause will have any columns that is fetched from the right table which is not satisfying the join condition for those records this particular column will just be returned as null and that is what is happening here robin and ali are belonging to the department d10 and detail is not present in the department table hence this join condition will fail okay so since this joint condition will fail for those records these are the two records only where the join condition is failing so for these two records the department name will just be printed as null because this department name is actually coming from the right table okay so this is basically the concept of left join okay the most important thing that you need to remember is whenever you're using a left join or a right join the placement or the position of your table is the most important in this case employee was on the left side hence this became my left table and department was on the right side and when i say left and right side it just means with respect to the join keyword which table is placed on the left side of the join keyword and which table is placed on the right side of the join keyword now here i'm explaining everything just with an example of a table but let's say instead of this table you had some big sub query even then the concept is the same okay whatever the result will be fetched from that sub query it will just treat that as your left side table and if you have a sub query on the right side even though that sub query may be using 10 different tables the final output from that sub query will be treated as a right most table for this particular join keyword okay so this is the most important thing when you are seeing a left join and the right join you just need to focus on to the left side of the join keyword which table or sub query lies or what is the result that you will be getting and to the right side of the joint keyword what is the table you have or what is the result that you will be getting either from a table or from some sub query etc okay i hope this was clear now let's say instead of this instead of doing this left join i just changed something and i wanted to test out right join okay so let me just do that so let's say instead of this left i'll just use right join now what happens basically what happens here is the formula is again almost the same so right join when i say right john again initially it will just do an inner join okay that is the first thing so whether it's a left join or a right join the first thing that your sql is going to do is it's going to do an inner join and whatever records gets matched by both these tables based on this join condition will be returned that is the first step and then it will additionally go to the right table in this case the right table is a department table and it will fetch any records that were missed out from this inner join so any additional records from the right table okay now if i just execute this query you can see that i'm still able to get six records but the output is slightly different so these four records are still the same because manoj rahul michael james and the department that they belong to were basically part of my inner query but the last two records are the ones that are changing the reason for that is now since i am doing a right join the table that exist on the right side of the join keyword is treated as the main table or basically is given priority so what it will do is from inner join you will get these four records and after that it will go to the rightmost table basically sql will go to the rightmost table and it will see in the right table that is in the department table are there any records that were left out from the inner join and if i go to the department table i can see that d1 and d2 is fetched through inner join and then there are additionally two records that is d3 and d4 which belongs to finance and admin right and that is why when i did write join even though this finance and admin belongs to a department where there are no employees in the employee table still that will get fetched because in when i'm doing a right join and since my department table is on the right this gets the priority this becomes the main table so whatever record is present in the department table will definitely be fetched okay and that is basically what a right join does i hope this is clear so basically your left join and right join the only concept that you need to remember so or basically i would say that only two things that you need to remember is always look in your query which table is on the left side of your join keyword and which table is on the right side of the key join keyword and based on that your left or right join will work okay so that is it this is the only logic of left join and inner join that you need to know so these are the three types of joints inner join which basically joins all the matching records left join which again will just do inner join plus additionally it will fetch any additional records that are present in the left table and then right join which will again just do an inner join and then additionally it will look in the right table if there are any additional records now i think understanding inner join left join and right join just by using two different tables to join is pretty simple right but let's say your supervisor now comes to you and tells you that you need to write a query to fetch all the employees their managers their department and the project they work on so you need to basically fetch all of these details okay from your table now one thing to remember is he's asking you to fetch all the employees so when you're trying to fetch all of these details you should make sure that you don't miss out any employees from your final output so how do you write a query like this so as i told you whenever you have been asked to write a query the first thing that you need to do is the details that you need in your query you need to see in which tables they exist now i know that i need to fetch the employee name so i definitely need to look at the employee table and then i need to fetch the manager name okay so manager name is present only in my manager table and i know that so i definitely need to use the manager table as well and then they are telling that i need to also fetch the department name so department name is only present in the department table and then i need to fetch the project that the employee is working on so the project details is only present in the project table so it means that in order to fetch this output or write this query i need to basically be using all of these four tables because the output that i want is present or scattered across all these four tables so that means i will need to now join all these four tables but making sure that whenever i'm joining these four tables i don't miss out a single employee from the employee table so how do i write a query for that and this is where it might get a little tricky and that is why we'll try to write this query step by step from scratch okay so the first thing is i need to write a select loss because i need to fetch some columns and i know that i need to first fetch the employee name so i'm just going to write one column that is the employee name and then i know that the tables that i need to fetch are the first table that i need is the employee table i'm going to give an alias like e and then i'm just going to join this table with the department table and i'm just going to say d and then i also need to specify the join condition so again i'm just going to use the department id to join this so department id i'm just going to use the alias e dot department id equal to d dot department id so basically this is fine i have joined the employee table with the department table this is exactly what we did previously also and then here i can also fetch the d dot department name so this is fine and i'm doing a join here okay so let's see what output of this query is now the output of this query is i'm getting only four employees but i know that my my requirement is to fetch all the employees so i cannot just use an inner join so i have just mentioned join here but this basically means inner join so i cannot do this i will need to use some other type of join so what other type of join i need to use i know that my requirement is to fetch all the employees and all the employees are coming from the employee table and with respect to this join my employee tables is to the left okay so if i just move to this in the single line then you can see that this employee is on the left and department is on the right okay but let's say in my query if i had returned department in the left and employee on the right then i would have to use the right join okay but for now i'll just keep it like this okay and now what i just need to mention is i just need to mention this left join keyword here now what happens is my left table becomes takes priority so all the records from the employee table will always get fetched so now if i just execute this query from four now you can see that six records are being fetched so this initial check of all the employees being fetched is actually met but this is not my final query because here i have only fetched the employee name and the department name additionally i also need to fetch the manager and project detail so let's try to modify or upgrade this query now so the next thing that i need to join is the manager table and i think the manager table is yeah manager and i need to give an alias like i'm going to give m and i'm going to join it so how do i join it now whenever i want to join i need to look for the common join conditions or the columns that may be present in both the tables but the column name does not have to be the same that is one thing that you need to remember now you can see that i have the manager id here and then if i go to the employee table i have the manager id here as well so i can just join these two tables based on the manager id because i know that the manager id present in the employee table is basically representing the manager of that employee so i can just use that column so i'm just going to say m dot manager id equal to e dot manager id and then here i'm going to fetch the manager name so i'm just going to say m dot manager name and now let me just try to run this query let's see it works okay so i'm still able to get all the six employees so i think this works here i have just used inner join and i think it's still working so instead of just mentioning join i'll just mention inner join just to make it more clear for anyone okay so you can see that even though i have used inner join i have not actually missed out any records the reason for that is i can see that all the employees that i have belongs to the managers m1 m2 and m3 and then in the manager table i have data for all of those three managers m1 m2 m3 manager has some manager table has some additional managers as well but that does not haunt us because our requirement in this particular case is to fetch all the employees not to fetch all the managers if i had to fetch all the managers then here i would have to use a right joint so i will be able to fetch all the managers but in this particular case i just need to fetch all the employees and just by doing an inner join i'm not losing any records so just using an inner join should work fine even if i had used left join here it would still work fine because a left joint would just make double sure that all the employees are fetched because in future if an employee is added who belongs to some manager who is not present in the manager table in that case if i just use a left join here it would still work fine okay but for now for the data that i have i'm just going to keep it like inner join okay so if i run this query you can see i'm getting the output now the final thing that i need to do to achieve my result is i need to know all the projects that these employees are working on so i have this six employees i need to know what are the projects they are working on and i know that the project details is present in the projects table so i'm just going to join the projects table and i'm going to give an alias like p and then i'm going to find a join condition so in order to find the join condition let's go back to the projects table and see what is a column so in the projects table i have this column team member id now team member id can either be an employee id or a manager id now we are only interested in fetching the details of the employees so let's do one thing from our employee table if i just join the employee id with the projects table of the team member id hopefully i should be able to get the output so what i'm just going to do is p dot team member id equal to e dot employee id and now i'm going to here fetch p dot let's say project name and if i run this okay you can see that it's not showing me any error but the number of employees have reduced previously i knew that i had six employees but from this particular output you can see i'm only getting three records and you can see the employees that have that have been returned are rahul and manoj only so only two employee details have been fetched four employees are actually missing here and why only two employees have been fetched here is because i'm doing an inner join so this join when i mentioned it basically meant an inner join and what an inner join will do is it will try to match the records which are present in both the table so in the project table it will let's see what are the member ids the in the projects table i have the team member id like e1 e2 and then e1 here so m3 and m4 are managers let's ignore them for now so the employees that are present here are only e1 e2 and e1 so e1 is basically an employee who is working on two different projects so so you might end up getting two records but basically you can see only two employees are working on projects the remaining four employees are actually not working on any project and that is why when you do an inner join the employees who are not part of any project are basically getting left out because you are doing an inner join an inner join will only fetch records that match in both the tables right and this is where you need to use either the left or the right join so how do you know whether you need to do the left join or the right join you just need to know which is your primary table in this case i know that employee is my primary table or my main table because i need to fetch all the employees that is what my requirement was given they did not tell you to fetch all the projects right or all the managers right they asked you to write all the employees and i know that my employee table is on the left side so when i say left side this is one thing that you need to remember okay now when i say left side it doesn't just mean the absolute left of this join okay because absolute left of this join would be this manager table right but it's not like that it's basically when i say left to a particular join keyword it basically means the total outcome that is returned from the all the queries or all the tables and join that is mentioned from the from class until this particular join keyword so from the from class until this particular join keyword whatever is on the left is whole treated as a left table or a left result set okay and in this case when i joined the employee table department table and manager table i knew that i had got six records and that is what i showed you previously right so let's say if i just comment this and if i just run this just the output of this you could see that i was able to get all the six employees okay so i'm able to get all the six employees just from this and then when i'm doing this join it's reducing from six to just two employees okay so i if i just do a left join here the thing that you need to remember is when i do a left join here this left join is not just applicable to this two lines it will be applicable to the whole thing because the left table in this particular case is not just this manager table but everything that is returned from these three lines okay so basically any result set that is returned from your from class until that left keyword is met is all treated as your left table or your left result set okay so this whole six records that will be written from these three lines will basically be treated as your left table or your left result set and your right table will be the project table so when i do a left join what happens is it will first do an inner join then it will check any additional records were written from the left table or in this case the left result set and all of that whatever was the left out will also be included in your output okay so i hope it's not too confusing but now let's try to execute this okay so i'm just going to uncomment the project name and if i execute this you can now see that i'm able to get details of all the employees so i have rahul manoj james michael ali and robin so all the six employees i'm getting details but the number of records have read have increased from six to seven and that is because i have this particular employee rahul who is working on two different projects so you can see he's working on etl tool development project as well as data migration project so that is why there are two records but that is not a problem for me because my intention here was to fetch all the employees and the projects they are working on along with their manager and the department details and that is exactly what i have got so this is one thing that you need to remember whenever you are writing a query where you might be joining multiple tables you need to know what a left joint does what a right joint does what an inner join does so this is exactly what i explained when i use the left join at the end don't read that this left join is only applicable to just the table that was mentioned just before the left join no it's not just the table mentioned just before the left join it's actually the output that is returned by the entire query until that line until that point so i hope this was clear now if you have any questions you can ask me in the comments below i'll try to answer them additionally one thing that i might want to mention is if you want to learn more about joins if you want to practice some sql queries now there is a fantastic course and this is a course that i have talked about in my previous video it's from a platform learn sql.com now on this platform you would find i think there are three or four different courses on joins so you would find several different queries where you can write these queries to learn about joints so if you have the means definitely uh consider doing that course on this particular platform but if let's say you do not want to do that course or you do not have the means to purchase that code you can also join my live sql training sessions uh that i am conducting on lighthold.com as i have mentioned in the beginning of the video all the details will be mentioned in the description and i will be covering more about the joints in the future sessions that i'll be conducting on that platform so i hope this video was helpful you got some idea about inner join left join and right join in the next week's video i'll be posting about all the remaining joints i hope that video will be coming next week so stay tuned for that so thank you to everyone who are still watching and see you soon in the next one bye