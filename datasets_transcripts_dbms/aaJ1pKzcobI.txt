[Music] thank you [Music] Hello friends welcome back to our channel so in the previous session we have discussed about the introduction to normalization and why we are moving towards the normalization so normalization is mainly used to avoid the redundancies and to overcome the problems coming from the anomalies that means while inserting the data updating the data or deleting the data and as we discussed in the previous session so this normalization comes with the different levels so coming from the 1nf two NF 3 and F B C and F 4 NF and 500 these are all called as a normal forms right so if any relation if any relation or any database okay so which satisfies up to the third normal form and the vcnf that implies the database design is a good design the schema is a good design right so in this session we'll start with the first level that is a 1nf so from the unnormalized data to 1 NF how can we convert or how can we know that whether the relation is in one and a format so one NF so this is also called as first normal form first normal form so the input the input for this one is unnormalized data and normalize the data and output will be a relation relation with 1 and F such relation satisfies with one angle so that will be the output and see how can say the relation is in one s right so the first point all the attributes all the attribute values all the attribute values should be atomic should be atomic so that means it should have a single single value and attributes should not have multi-valued attributes or multi values or composite that means the attribute can't be divided more right counts should be unique should be unique so no two attributes should have a same name so that type of redundancy should not be accepted in this one and F right so the first one all the attitude value should be Atomic and attribute should not have any multi values or a composite so every attribute should have only single value and all the attributes should be unique so they should not be redundancy on the attributes so all the attributes should be unique no no two attributes should have the same name so if if any relation satisfies these three points we can simply call it as a one at F so we can say the relation is in one atom let me tell you an example this is this is a very simple normal form so let us take the student details student table with a student ID student name and course related to that particular student okay enrolled by the student so let it be some 101 is a ID Sandeep is a student name so Sandeep enroll to C C plus plus Java so one student enrolled 2 multiple courses multiple courses next coming to the second one zero two let us take the name of the student is sarathi enroll to C plus plus python C plus percent python let us take the third one satwik and roll two Java python now let us check whether the this particular table so this is a primary primary key let us check whether this table satisfies the 1 and F the points we have discussed it just now the first one so it should be having Atomic values yes second one it should not contain the multiple values or a composite values so all these two are not a composite and this is also not a composite so composite means further divided okay if the attribute is furtherly divided so we can say it as a composite and see uh course there are multiple values for the particular course so C C plus plus and Java and it violates the second point it should not contain a multi values so we have to avoid this one so how can we avoid this one simply we can include another row with this particular details okay so that will avoid the multiple values and all the attributes should be unique so there are no two attributes with the same name yes that's satisfied so only one point that violates the one and F is multi values so this can be converted to yes ID yes name and of course and you can see 1 0 1 Sandeep enrolled to c one zero one Sunday enroll to C plus plus one zero one Sunday enroll to Java similarly one zero two Saturday enroll to C plus plus one zero three sarathi and roll two python and one zero sorry one zero two itself right next one zero three satwik enroll two Java one zero three satwik and roll two python so you can observe this is the table which satisfies all the points which we have discussion for 1 and F so this is a table now you can see we have converted this type of relation to this relation now you can see there are no multi values multi-valued attributes right so num of the attribute is having a multiple values so in order to avoid that if we are having this one in order to avoid that just inside one more row okay insert one more row so like this we can avoid the multi values so every attribute is having only one value every cell is having only one value right so this if the relation is in this form we can say this is in 1 and f that is the first normal form okay this is unnormalized a relation unnormalized relation so this is the relation with 1 and F relation in one and F so from here we need to go with the next levels so coming to the 2nf if you want to find out whether this relation is in 2nf so first it should satisfy the one and F conditions that means the input for two NF is the relation with 1 and F okay the input for 2nf will be relation with 1 and F so input for this 1nf is on normalized data so from that we have to achieve the 100. right so hope you're understood this first normal form so let's stop here in the next session we'll go with the another level that is a two Ender right so if you are having any doubts regarding this one feel free to post your notes in the comment section definitely I will try to clarify all your doubts and if you really enjoyed my session like my session share my session with your friends and don't forget to subscribe to our Channel thanks for watching thank you very much