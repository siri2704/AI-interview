hello everyone So this course is on DBMS in one go right and uh it's not like our applied OS where we you know uh coded each and every example we made five plus projects right this uh course is intended to make sure that you are able to you know crack uh DBMS interviews DBMS rounds in your internship placements or in general if you are making any project you are aware how to you know choose databases what aspects you have to take in mind before you know working with databases So all these things will be covered in one go and uh just to give you a TLDDR I will be going through theory right evolution of databases different different type of databases evolved over the time and uh what exactly are relational databases what is non-reational database and uh how they are storing you know things under the hood like B+ indexing hashing uh schema of database er diagram we will be designing some of the er diagrams of Uber of Instagram and I will walk you through step-by-step process of how to collect requirements from the interviewer how to you know uh revisit the requirements if you're stuck and how to go with the flow right flow means key collecting requirements then coming up with an idea and then asking for feedback and all these things process put into the place and all these things are covered in this course Right so without any further ado I will start but before starting this course uh this course will be around 3 to four hours and uh for this efforts you can like the video you can share on Twitter so that other people can hop on over the video So yeah let's start the video So a bit of theory right uh why because see uh databases in general are theoretical when it comes to you know choosing databases and all but when you will go and make projects you will get to know that how to use that theory right how to you know use the theory of ER diagram to uh make sure how to you know uh design your database for your project how to come up with SQL or NoSQL choice right all these things are related to theory and obviously we'll cover some of the use cases some of the real world examples right so that you are not bored right yeah so let's start so DBMS what exactly DBMS means is that database management system that is a full form right database management system is a kind of way to organize the data maintaining relations giving types or names to data and so much more right so what does this mean is key whenever you are you know dealing with database management system it's not all about storing data right it's not all about that you store data in file and uh it will persist at that file forever until you delete right until you modify So it's not like that Database is way more than storing the data into files or into somewhere right But uh few of the things are organizing the data So it's not storing about the data It's about how you organize the data right So yeah one of the key thing is that right and then maintaining relations Maintaining relations So basically when your data is related right let's suppose a student is related to his class right a student is related to a school or a professor or a teacher right then that relation you will be able to set up in database management system right and then giving types or names uh types means that uh let's say I have uh uh age of 25 years right my 25 years age can be represented as an integer right so the type of my age will be integer right or if I will say my name my name could be represented using text right using string So these are the types that will give you a structure to your data when you will store when you will retrieve right So database management system is more about storing and retrieving the data So some of the things are giving the types giving the names uh obtaining the relationships and uh quering the data is also there So why DBMS over a traditional file system right so this question is a very generic question that any interviewer can ask key why DBMS are in present at the very first place right So why databases are there right when you have a file system why databases exist So basically file system is an interface over on top of your uh operating system uh system calls where your you know file write file read file append all these things goes to right So this is a file system when you can open your you know folders files directories So file system is basically maintaining folders in an hierarchical structure What is hierarchical structure we'll see Uh it's a very basic structure Uh it's just a flowchart right whereas in file one can store text binary executable data video audio etc But file system lacks few things like relation constraint data type inconsistency and redundancy So in database and management system inconsistency and redundancy these both terms are very important See inconsistency a very simple example for the time being is key let's suppose you have two files right let's suppose you have two files file one and you have file two right file one file two so if you have written uh file one uh at the very first place you have written file one right you have copied file one to file two right now let's suppose in file one you write something else let's suppose it's a text file and you appended something let's suppose my name itself love priit and if you have appended something here it will not go directly to file two So this is what is called inconsistency means these two files are same this were same actually actually these files were same but after appending something in file one it's not being reflected into file two right so this is where the consistency is broken and inconsistency is there right and redundancy is basically when you are copying the files at multiple places all the those files all those same files can coexist at the same time in different folders and redundancy means duplic duplicacy right when you are duplicating something so the file system main problems are redundancy consistency and the second thing is you can can't obtain relationship like let's suppose file one is related to file 2 by let's suppose relation R1 how to represent that in database we will represent that don't worry but how to represent this relation in file management system you can't right so that is one of the you know uh uh cone of file management system uh though it is a great interface file system is a great interface for you know managing your files managing your data But when it comes to relationship when it comes to giving data types like integer string to your content in stored in the file uh so it has some down limits right so uh these points are explained in detail like data redundancy and inconsistency What does that mean is key that let's suppose if user one uh wants to access the data it might come from file one right while same data can be duplicated in file two Okay So the two files exist let's suppose copy of each other and two users exist on my PC User one tries to access data it comes from file one User two tries to access the data it comes from file two Uh they will get the same data Right but if you will makes changes in file one then user two will get old data and user one will get latest data from file one So this is what uh the changes will not get reflected in file two Hence file system is not aware about redundant data duplicate data and no guarantee of consistency across the redundant data same data right data sharing and concurrency Now the second like uh most important con is key uh DBs can share the data uh easily because of one centralized place and on files there is no isolation See in databases the data the way the data is stored it can be shared You can make views on top of your databases right we'll come to that view uh admin view and all but the thing is key you can abstract out more things upon like on top of databases right if multiple users are reading making changes into a file there are some chances of anomalies where DBMS provide locking mechanism it will come later in acid properties see it's written here but what does it mean is key that let's suppose uh you have m you have a file and multiple users are accessing that file Right though we have locking mechanism like we can implement the locking mechanism in file system but uh file system is not meant for that right So if multiple users are accessing a file and making the changes I anomaly anomaly is basically what does that mean is key some inconsistency can occur right So databases they have logs at uh the database layer itself So if two users are accessing the data at the same time then database due to acid properties right consistency atomicity due to this uh databases have lo mechanism we'll come to that when due to this uh there will be uh less chance of anomaly right data search and integrity so DB provides simple queries to search data so basically in file system as you have already seen that uh let's say I have tons of file in my system and I want to search I want to query a file key select all the files where my file include let's suppose text student it's not possible right there is no query engine written on top of file system although there can be okay endless possibilities are there there could be a query engine in the out in the market but the thing is if you'll go and think about it that the structure of the data is such that in file system the queries will not be get optimized right and uh according me it will take a lot of time okay even if the query engine is there so data Data search and integrity in databases due to the structure due to the index and hash all these things the search of the data inside million of records is easy right and you can note apply constraints on the files also right let's say uh in my DB I want some value to exist but I want that value only present when it is nonnull right so in file system it's not like that you can't put constraint let's suppose I want to put constraint on my age I want to store all the students if age is more than 5 years right for my database Let's suppose my database is of primary school So that's how you can put constraints also You you have more control over the data in databases right while in file system you don't have So others miscellaneous things are key system crash recovery your editing a file and uh your system crashed Then what about your backup what about your uh replication all these things right okay So this question was important Why not file system instead of databases right so couple of cons I have already mentioned Okay Now the applications of DBMS as you already know that uh all most of the enterprise applications have databases and that two are in you know uh relational database and uh few of the examples are ticket booking right why ticket booking because uh why ticket booking because see uh railway tickets has users has uh tickets has trains right so the relationship and if you are booking a train right and uh you are booking a train in emergency window there is something called emergency window and if you are booking a train in emergency window your app has to be you know fast almost real time as it it should be right so it will uh fetch the trains like it will fetch uh seat right how many seats are vacant how many trains are there for your location A to B so all these things uh we need almost real time so We want good search capability right we want fast retrieval All these things are you know offered by DBMS databases management system And similarly financial data as you already know that if you want to although it can be through any mode of communication like so and all but the storage of persisted data right the persistence of the data which is all you know not volatile that is into stored into DBMS right similar for e-commerce similar for patient record healthcare etc Right now this question is very important What is the three-level uh architecture of DBMS so whenever you give any interview um or online round uh in MCQ uh you'll get this question Okay most of the time because see this is very important why because see every computer program or programmer wants abstraction and nowadays why LLMs are you know more uh liked by the developers is because of its abstraction It provides so many things and you don't have to learn anything right under the hood So DBMS for DBMS uh same uh that people used complex data structure which is hard to directly interact to So under the hood the data structures that are being used in DBMS is hard okay are hard hence to make retrieval if you have to know the data structure see what data structure I should use to retrieve what data structures are used when I'm storing So this is very hard very complex right so that's why there are couple of abstract layers So first layer is internal level second is conceptual or logical Third is view level or external level Right so here you can see the first layer uh is you can see uh internal layer logical view external view Right so goal of three view architecture is uh so there are three goals This will not be asked mostly but for your information that uh why this abstraction is there in place is key because user should be able to view the data without accessing the low level details What does I mean that mean is key let's suppose a normal user who only knows about spreadsheet right he should be able to u you know observe the data like a spreadsheet right a very simple view he should not know like array is used or map is used right he should not be aware about this and the second point is every user can have a customized view see now uh in my company let's suppose I am a developer someone is from analytics team someone is from product team right there are some details that you have to hide from anal analytics team there are some details that you have to hide from developers or product managers right so all these customized view let's suppose I have a student table right I have student table and I have student ID I have student login ID and I have student password right this is student uh let's suppose login dashboard data so this password I am only I only want to show this password to developers because for if they wants to debug and that two encrypted password right this column itself I don't want to show to any analytics team guy so what I what what do I do is key I will make a view out of it a customized view that will be accessible to the people who I am you know giving the access to right like analytics team so that's how every user should be having customized view that is the second goal because of abstraction it is possible okay database architect like the guy who work under the hood is key if he's changing array or data structure whatever uh the data structure is used any buffer whatever the nature of data structure was there if he's changing that the topmost user who is a you know very uh normal guy who only understand spreadsheets he should not be able to see any clear difference key okay someone behind the scene changed something and I don't know and my spreadsheet is matched now this should not happen right so this is the uh you know goal of abstraction so physical layer logical layer external Internal layer physical layer is basically let's suppose uh where you you so basically let's suppose for customer table right any customer of any shop or any uh shopping mall let's say the records are stored in the files on which disk right this is one of the way uh to address physical layer and uh uh DBA also wants to understand how the indexing is being used right how indexing is used this is also uh the another way like how B + trees are organized what data types how many page size you are using mostly on Linux and all 4 KB is a page size What is page size we'll come to that Then logical Now the logical layer guy how he will see the database you know uh overall scene He will see the customer is an entity right with customer ID name and with other attributes He will define the data types and keys He don't care about how indexing and hashing is used in under the hood how B+ trees are organized etc etc Right external the most topmost guy he only knows that let's suppose a sales guy sales point of view can show customer ID order amount that's it Shipping point of view can deal with name and address These are the you know business people who are dealing with our database They don't care about anything else any any other layer Talking about the database uh evolution you can pay attention to this because uh sometime uh if a question uh if a you know interviewer wants to question you uh just a tricky question he will ask on hierarchical key there is a hierarchical database he will explain you key uh in hierarchical database this is uh what a b c d these points are applicable Now we are in relational models What differences do you see uh the clear differences that you can see among themsel right so and uh in general also you should know how database evolved So first of all before the evolution of entity relational model the model that we'll come to and we'll design a database also for Instagram So er model in entity relationship model uh we have different data models to store the data right First model is hierarchical model This was built by IBM and still is in use I think it's called IMS IMS I think in 1968 and the data is stored in tree format which each children having one parent So the redundancies here I will explain you So let's suppose electronics uh table is there right electronics could be of many types and we have taken televisions portable electronics and television from television itself we have two categories LCD plasma and for portable we have MP3 we have CD for MP3 we have flash so this is a kind of parent child relationship advantages of this kind of databases how this data will be stored uh don't worry it it will be let's suppose electronic ID Right electronic name here it will be television ID tpple only okay television ID name uh warranty price etc So tpples only records now these tpples can could be organized using you know uh any data structure that we are not focusing to So the the overall structure of the database is like this right and it's very you know simple it's not too complex to you know understand the structure of your database and retrieving one to many data is easy and efficient one to many why I'm seeing saying that is let's suppose television is an electronic right and television also comes in gadget so here one child couldn't have two parents right otherwise it will become many to many many to many so what does one to one many to many one to many many to one means you have two sets one set is here one set is here you have elements A B See here you have element D E F It is one to one if each element is marked to another element and uniquely right It is many to many If it is uh okay control Z is not working A B C D E F So like this right so here you can say that one parent can have uh sorry one child can have one parent Okay one parent can have many child So one parent many child So one to many So if I'm coming from top to bottom one parent can have many child So one parent could be mapped to multiple things So that's why it's one to many mapping right but the opposite is not uh correct If opposite is also correct then it will become one many to many So it's very uh you know simple to retrieve one to many data because you know if you want to retrieve flash right you will go through television right electronics you will go to portable electronics you will go to MP3 you'll go to flash that's how you'll retrieve now disadvantages incorporating complex data structures is difficult obviously you can see that if I want to incorporate a student who belongs to a teacher who belongs to school so a student is a child and parents are there are two parents so to represent this data what you have to do is you have to maintain something called uh two trees One tree is for let's suppose uh teacher how teacher is related to student and how student is related to class and all and then another structure is because see hierarchical is only able to hold the data which is of one to many type right now another thing is called to student So now now it is called redundancy Why why why see here let's suppose any student S1 is present here also that student S1 is present Now this S1 is duplicated here That's what we call redundancy and consistency is also not there Let's suppose I S1 is uh you know terminated This student is removed from the school So I am deleting here and somehow I have to delete the data from here And there are high chances of inconsistency occurring if your student is multi you know duplicated at multiple places So that's one of the disadvantage Network data model Second model is network data model Here it is similar It is similar to what we have discussed just now which is hierarchical It's just that it is holding many to many relationship That's it So this is also I think uh in IMS from IBM they made network you can search about it But network data model is a directed graph or network of different records Multiple parents and multiple children can come into your concept So basically a project students started a project and sub project one belongs to project project two belongs to project and then uh there are departments let's suppose department one department two department three department three can have uh department three is having project two project one both department one is also you know having both project and department two only have project one right so here if you will pick any children department one it has two parents right it has two parents and if you pick any parent it has multiple child So parent to children is also you know multiple relations is possible and uh children to parent multiple relations are possible So you can say many to many relationship is possible here in network uh data model It is very similar to hierarchical just that it the more flexibility is there Disadvantage is complexity increased See I want to check department 3 project Okay So there are multiple ways First I have to explore Okay This is a project started by uh this is project started and project one is started under this project Let's suppose this is a government uh something fund which is a project from government and we started some let's suppose uh robotics something project one Okay And this belongs to uh electro electrical engineering department So now government fund is related to robotics Robotics is related to electrical Fine Well and good But this is also related to AI Project 2 is AI So I have to explore all the paths So the people who know you know uh data structure a bit They know breadth first search and they know depth first search So here in the top thing depth first search is possible and it's very straightforward will get only unique path right one path because of one to many relationship here you will get multiple paths and complexity has been increased obviously and with time you can assume it will become a forest not a tree it will become a forest and to explore all the things in a forest it's a very hard task it's a very brute force way right so it's not easy to work with as a user okay now the third model the OG model is relational database model so here the database um you can visualize the data structure in a kind of you know in a way of tables right the tables are 2D matrices where you have columns right here you have columns student ID student name student address date and students gender right so this is called the number of columns is called degree so degree of this uh so degree of this uh you know uh schema or you know relation is 1 2 3 4 5 around five right yeah five so and the cardality see these two terms are very important See whenever you will get MCQ in your online assessment most of the people talk about cardality they will not say key rows right and number of rows is basically cardality or sometimes people say number of unique rows is also refers to cardality right let's say uh uh the gender of the person the sex of the person is only possible male female that's it okay male female and the cardality people can say is two because of two unique values or you can in general for the overall table you can Say cardinality is the number of rows right so these are the data values right these are the data values See ids are integer data values are string string this is date this is enum or string So data values can be represented like uh what is the data value what is the default value so data value is string Default value is null Default value means whenever you are inserting something a record in your database and that student address is not available right or that student birth date is still under progress or whatever that value could be stored as null So that's what we meant by default values Advantage high data independency and flexibility So basically now the data you can retrieve the data there is no dependency strong dependency that you have to retrieve you know like in network data model you have to go from a b c d only then you will be able to check key how d is coming in place from a right here you just have to you know search couple of rows depends on some if else let's suppose if gender is male if student birth is under this range find the student where name is like this so the structure allowing us to make the query such a way that we are able to understand the queries Right the second advantage is remove duplication by norm what normalization is we'll understand we'll discuss but something is there which due to which we will remove the redundancy means if student is present in table one this is a table one and the same student is present in table two is there any way to merge the tables or to abstract out the student so that I don't have to you know make the change in both the table whenever student is updating his information right so Yeah So you can use normalization What normalization is we'll come to that But normalization is just that you are giving your tables good flexibility and on the parallel ways you are giving it uh basically consistency and non-redundancy Right so disadvantage is complex for straightforward search Now the my straightforward search is retrieve a person whose name is uh love priit very straightforward but I have to go through a number of rows to check that right now the second thing is needs deeper understanding of normalization queries right so this is one of the disadvantage that you have to understand normalization if you don't know normalization and while designing your schema you will end up in raise condition most of the time or inconsistency most most important inconsistency in your project when it will go to production right so yeah so we'll discuss about entity relation model we'll We'll discuss about ER We will discuss about EER So ER is entity relationship model and EER is enhanced entity relationship model Both are very important There are some companies startups who ask specifically about ER model design your database design and you have to just design a ER model diagram Okay So ER model follows entity relationship presentation right that can be used to represent any kind of DBMS schema So this is theory like ER is just that entities there are entities there are relationship and you just have to draw that right and uh why diagrams are preferred at the very first place instead of you know directly going to the database schema because diagrams give you the relationship in irrespective of SQL or NoSQL right it just tells you that if your data whatever you want to store if that data is related to you know if let's suppose uh data D1 is related to data D2 Is there any relationship existing if there if there do exist any relationship then obviously ER diagrams help you to understand how your database schema should be designed Second thing is is there any relationship which is so generic that you can go to NoSQL database Okay SQL is okay for the people who don't know SQL is just you can as of now you can assume SQL as relational see uh tables structure no SQL is just that a file is there and all the data let's suppose your student name ID class everything is being puted to that file that's it okay yeah so uh there are some symbols there are some representation that you have to uh remember obviously there are some things you have to remember anyway so So while designing ER diagrams you have to remember these symbols So first one is rectangle So whenever there is entity what is an entity we'll come to that entity is being represented by a rectangle and uh the attributes are represented using ellipse right and the diamonds represent the relationship among the entities Line is just to attach something very simple doesn't matter Double ellipse is multivalued attributes What is multivalued attributes we'll come to that Double rectangle is weak entity What is weak entity we'll come to that So er model is about these things only and that's it Entity could be of two types Weak Weak entity You have already uh seen that it's like this double rectangle Strong entity is just rectangle Attribute can be a key right let's suppose my name a composite key uh composite name sorry A multivalued a right we'll come to that Don't worry Relationship is relationship could be one to one right a student is related to teacher and student could be related to many teachers right one to many many to one uh many teachers are related to one student or many to many all teachers are related to no many stu teachers are related to many students right more than one so entity is an object or real life thing that has existence see whenever you are talking about anything let's suppose I'm talking about uh here it's written car student merchant let's suppose I'm talking about uh um my company right let's suppose or I'm talking about let's say a stadium a cricket stadium in cricket stadium what are the entities so first of all what is your use case my use case is to represent the stadium the cricket uh people the audience right so there is something called uh entity right so entity is physical object or physical things that has some existence or that could be related to someone else Now the first thing is one of the entity is a normal person Person is an entity who is a player also who is an who is present in audience also Right so uh he could be in uh you know playing uh field or he could be in audience stance So the entity is person that's it Now the person could have multiple things right player audience people or a water boy or whatever Now the second thing is key uh I I'm talking about the strength of people right again that involves people So the my my use case will always revolve around the people in the stadium right and the stadium itself Stadium is also an entity Why because stadium has properties What properties stadium has its location Stadium has its size Stadium has some capacity to hold some people Right so there is relation of this stadium with something else So a entity is kind of a object that either is related by something or either a physical entity right strong entity doesn't depend on another entity See strong entity doesn't depend on another entity The very good example is key let's suppose uh your company is uh storing employee information right and the company is also storing employees spouse information right let's suppose this employee is male and his spouse is uh female right now when employee resigns from the company this entity wouldn't make any sense why if the employee is not there in company I could mark this employee as X employee right or I can just delete this employee itself from the database Now this entity is a lose entity This entity has no existence without its parent which is the employee itself So this entity is a weak entity and I have to remove this entity Right so weak entities always depend on something else Strong entities can exist on their own They don't need anyone's anyone else existence Right so weak entity can't exist without a dependent The relationship between weak entity and its identifying strong entity is called identifying relationship and represent by double diamonds So see a company storing employee dependence like spouse children employees dependence can't exist without the employee because company the main entity is related to employee and that employee is the first and foremost importance right and all the dependents of that employee is related are related to employee only then that's it right so these dependents are related to this employee and they haven't have any uh existence without this employee so that's Why this is called weak entity right this is anyways a strong entity and if you want to represent although there is no need to represent a relationship uh because uh you know that employee independence but yeah relationship would be weak relationship Attributes are the properties that one entity has What what are attributes so my address has attributes right so again don't think about the tables when you are uh drawing ER diagrams right because ER diagrams the main goal the you know the final goal of ER diagram is not to make SQL or NoSQL tables it's about to identify all the relationship that your DB has right so that after uh building all the relationship you can decide if you want to use SQL if you want to use NoSQL or what exactly the schema of your DB is going to be right so That's how that's why year diagrams are there right so don't think about the tables and all So let's switch to attributes So whenever my address is there my address has attributes like city my street my state my country my house number whatever and that is called composite attribute The attribute that is made up from multiple things right My name is made up from first name last name middle name right so the key attribute which uniquely identifies a entity So if my student table has role number role number can uniquely identify my attribute um sorry my entity and that attribute of my entity my entity is student attribute is role number that attribute is called key attribute and it is represented by this is attribute anyways represented by an underline right multivalued attribute again phone number the attribute having more than one value present in an entity so my phone number could be like my mobile number and my let's suppose second mobile number so this attribute can hold multiple values for the same user So this is called multivalued attribute and the attribute multivalued attribute is represented with double underline Drived attribute is age Dived attribute is the attribute which don't need any storage Right you could can just drive How age can be dived from my date of birth Age can be dried from my date of birth So if my date of birth is being stored in my entity let's suppose entity is person and person has attribute do obed attribute why because I know the today uh I know the latest time right time I know the latest time right and I know my age right so I can check how many uh difference of years or uh months or days is there and I can derive the age attribute so age attribute can be derived right so Student attribute uh student entity sorry the complete student entity is here So the entity is represented by a rectangle student entity What are the attributes name Name is a single valued attribute D date of birth Right phone number Now phone number can hold multiple values So that's why it's a multivalued attribute Age can be derived So drive attribute But before uh saying age is a drived attribute Check if do ob is there If age could be derived from the existing attribute Yes Then mark it as a dashed attribute Then address Add address is a derived drive attribute right Uh sorry address is a multivalued attribute Uh see here here here composite attribute Sorry Multial valued is phone number and drive is age Yeah sorry So address is a composite attribute which is made up for forum state city street country Right And so this is the complete entity for student Now coming back to the relationship type and relationship sets So degree of relationship there is something called unary relationship where one entity set participating in a relation So basically uh a person is married to person right there there doesn't have to exist any another entity like let's suppose they don't have to exist another person will marry to person right so it could be like it's like uh you have a person entity right relationship is person wants to marry something or person is married to someone so what you'll do is you the relationship is married to Right what does this mean is this mean is a relationship Right what is a binary relation most of the time you will deal with binary relationship when two entities participate in a relationship So a student is an entity A course is an entity So a student is related to a course with relationship enrolled in If this is not a student and this could have been let's say teacher Now teacher teaches the course The enrolled in relationship will only be in student and course Right similarly turnary relationship and and ar relationship whatever cardality Now this is how you can represent the cardality right this so one employee can own only one laptop So employee is an entity laptop is an entity Now employee can have attributes like name uh age right and laptop can have attributes like suppose warranty right date of uh issue or whatever right so one employee can only own one laptop at a time so relationship is owns now if if relationship is own so first you have employee second you have a laptop so you know the entities now you have to uh make make the relationship among the entities so the relationship which makes sense is employee owns laptop So now you have identified entity relationship The third thing is if there is any weak entity or not if etc etc Last thing is if uh what is the cardality of the uh entity right so the cardality is one employee can own one laptop So one to one Now the second is you have CS department you have professor right so CS department entity has professors So one CS department can have multiple professors That is true But multiple pro professors can not have multiple uh departments Right so what I'm saying is key now it depends on the situation you are draw you know designing your database It is uh very highly dependent in your interview what you are working on Now if I'm working on a college ER college college database ER diagram I'll I'll tell the interviewer that my assumption is that uh CS professor can't teach in civil department right according to that assumption my relationship is one to many now many to one so multiple surgeries single surgeon so multiple surgeries can be done by single surgeon but single surgeon I mean or the other way around single surgeon can do multiple surgeries right many to many one employee can have multiple projects multiple projects can own like can be owned by multiple employees so let's suppose three employees are working on one project and two projects are owned by uh single employee so it's many to one one to many to many to many so uh you can more like read more about many to many relationship but it's just that understandable that if employee and projects is there so multiple employees can work work on one project and multiple projects can be owned by one employee right so from you will just go left to right right to left from left to right multiple employees can work on one project multiple projects can be owned by one employee so it's many to many this is how it works right now the last thing is I think participation constraint So there is total participation and there is partial participation Total participation is that your entity is student and your another entity is course relationship is enrolled in Now the cardinality is M2N I mean multiple students can be enrolled in multiple courses and uh multiple courses can be enrolled by multiple students So yeah enrolled in is uh M2N or many to many relationship but it's a complete or total participation of student entity So you are a student in this relationship and you have to enroll into at least one course So any student into this entity S1 S2 S3 every student has to enroll in some course So all the students will have the participation in this relationship and that's called total participation and it's partial participation If the uh the course is elective let's suppose the course is elective then it's not necessary for all the students to enroll that course right so that's how it will become a partial participation and partial participation is just mean that like a single line and the total participation is double lines Okay So that's about representation that's about drawing er diagrams that's about you know relationships cardinality uh type of relationship etc etc Now comes the concept of you know uh there are some more concepts of enhanced uh year diagram Then we will come to Uber Uber diagram uh ER diagram then we will uh design Instagram and we'll design that live only uh like in today's lecture So uh coming to how to draw ER diagram So whenever you are going into an interview so make sure the very first step is identify all the entities So uh note down these steps because you have to follow the steps according to this only if you are drawing any uh year diagram So first of all you have to identify all the entities So whatever let's suppose you are designing Uber So Uber uh ride system ride hiring system if you are designing you have to identify all the entities according to me The entities could be ride the person uh the rider u uh the customer vehicle uh location all these things right location could be an attribute Yeah but yes you have to identify all the entities place them in rectangle Now the next step is identify all the relationship and place them in diamonds So what relationship could you can see from your requirements place them in diamonds then attach the attributes like for a a rider what could be the attribute his license number right his uh name right his let's suppose do obar number so all these things like attributes should be placed inside uh ellipse remove redundant entities so after a point of time when you will be done with your entities with your uh relationship with your attributes you will see at you have you might have drawn something which is redundant which is duplicate so you can remove the redundant entities or relationship which doesn't make sense or either duplicate it at multiple place you can remove them and then at last add cardality add relationship add participation that's it right so before going to uh designing something we want to discuss eer so enhanced entity relationship model why eer came into the picture is because see there is something called uh subclass superclass specialization and generalization Heavy words fancy words uh doesn't you know it's not too complex So basically in ER model we have entities right we have attributes we have relationships three things we have now ER enhanced ER model we have subclass and superclass doesn't make sense right because it's very normal thing specialization generalization category attributor relationship and inheritance we'll talk about it so what is subclass and superclass so when your uh entity is science right when your entity is science let's suppose Your entity is science right now This uh science entity can have physics chemistry So these are just uh you know uh special version of your normal class So if you have done object- oriented programming you would know key parent class is there children class is there It's very similar to that only Right now this generalization specialization is highly uh linked with this subclass and superclass concept How specialization is a special or subclass of a generalized or a superass this is usually is a relationship See over all these things this thing is the most important one right is a relationship like laptop is a computer developer is a employee right it is inspired from object- oriented programming So let's say you have one table now I am talking in table but you should not And it is storing number name salary tpples Okay this is the first tpple This is second tpple or record This is the third tpple Now this employee have two special classes which is tech department employees customer success employees all of them have similar things number name salary or rating right so it has some other attribute typing because tech department I want to track their typing for customer success I want to track their behavior kind of key matrix but both of them have these things common number name salary right so common things I have abstracted out right let's say I am not abstracting these things out let's suppose two tables are there tech department customer success then I have to uh duplicate the things which is name number salary number name salary Right instead of that I have you know uh abstracted out number name salary out of these two tables and I have I have taken that those three attributes out of those tables and made another table which is employee And now this is what we call as specialization or generalization Right now people could uh argue that what is the difference between specialization generalization See there is no difference If you want to go in deep depth there is a difference But for year diagram you know for drawing year diagram you should consider that is it as a superclass or subclass that's it here it is actually a generalization and from from right to uh left if you will see it is a generalization from left to right if you will see it's a specialization so it's a kind of process you have taken to abstract out doesn't make sense it's just parent class child class right multiple inheritance which is union a subclass can be a subclass of multiple classes or an entity can belong to multiple entities In this case attribute or subclass are the union of all superass doesn't make sense Doesn't make sense Why because see if you are designing your real diagram this complex then either you are doing you're making some mistake or your application is very complex So what is it saying is that let's suppose you have uh employee right you have address you have employee you have address let's say let's say I'm just taking an example and you have a tech employee so tech employee is also an employee tech employee is also having some address and in address street all these columns are there employee name number salary is there and in tech typing is there let's suppose now what it is saying is Union what does union mean is key when I want to fetch any tech employee its attribute will be tech employee attributes plus employee attributes plus address attributes why to generalize this too this is too much right so I have just told you what union means what multiple inheritance someone could ask that is is there multi-inheritance possible in ER diagram you can say yes and this is the case or you can think more about you know good examples but when you are uh designing the ER diagram make sure you Don't do this right So designing ear diagram of Uber hiring system you will design this uh ear diagram today right and uh in next part of the course you will complete acid properties and every depth of uh you know B+es because that is complex kind of thing and I think if you have come this far in this course and you would have understood most of the things and in next part it will you know go little little you know up the way right it will not too basic like today but Still from overall our DBMS course this is one of the most important thing year diagram Second most important will be SQL Third most important will be acid properties Last and not the least is u uh this uh uh B plus 3 is hashing indexing Right Okay So first of all uh the interviewer okay now this is a kind of mock interviewer Interviewer will ask interviewer will ask we have to design Uber ride hiring system So then what I will do i will first of all collect requirements So I will list down the requirements I will type that user should be able to create his profile So under you know uh under the hood I will think about how Uber works How two-day Uber works He could have uh told me that we have to you know design Uber like hiring ride hiring system right or he could say we have to design a photo sharing app like Instagram Right think about Instagram only Think about Uber only I am downloading the app today What I will do i will create my profile So first requirement user should be able to create his profile Second thing is after creating my profile I will try to book a cab or ride So user should be able to book a cab or you can say ride right third thing what I will do is I will pay after you know completing my ride So what will the third requirement is that user should be able to pay using any cash method Think about it right This is how you will use the app Then the last thing is rider should be now switch your gears right So if I'm talking about my Amazon uh you know system I will first talk about as a user I should be able to create my profile I should be able to see my orders I should be able to order I should be able to search this that and then when my requirements are done I will ask the interviewer do I need to uh design for the other person which is customer uh sorry uh merchant on Amazon Similarly on Uber I would not ask because the requirements are already very you know less requirements are there but if requirements are you know going out of the boundaries let's suppose you have come up with 10 15 requirements then you should ask the interviewer that can we pick this this this this this top five requirements first right so my requirement is rider should be able to accept the ride and rider should be able to accept the cash from the passenger so these are the requirements right so go through the requirements What are the entities that you can see the user is there The writer is there Both are the entities right both are the physical objects They should have from the user point of view they should have rating They should have name They would have something called uh number of rides Let's suppose uh okay from user point of view number of ride doesn't make sense So from rider point of view license number uh had number uh rides completed rating all these things So first entity is a person right now I can specialize this entity which is user p us user and rider right Now the second thing is um my next entry is vehicle right my uh next entity is payment and next entity is ride So why I have made payment and ride as an entity See I have already told you either your object is an physical object So there will be a high probability that your if your object is a physical object which is a person or user or rider then that object would be related with your system right now the payment is payment a physical object not necessarily but is payment have some attribute right does payment have some attribute let's think about it now payment could be through cash through UPI right but is it related ated first thing Second thing does it have any attribute attribute it has like payment is made on some date payment is of some amount right otherwise if you are not storing payment you will store amount in your user table You will store same amount in your ride rider table which is doesn't make sense So that's why payment is a entity and because first of all it has some attributes Second of all it is related to our user It is related to our rider Right similarly ride see ride has some attributes like drop location like pick location like ride time and it is related to our user and rider Now comes the point key If you are the person who is designing this ER diagram and I am the interviewer and you have missed the ride uh entity will it you know uh hamper your progress as you will um draw E diagram no See when you will draw the diagram you will come to know that now you have to uh store uh let's suppose user is uh booking a ride you have to store the locations from where he booked a ride Now that user user is an entity how you will store the ride and there is a rider Would you say that user is hiring a rider yes you can do that Now the attribute of pick location and drop location would you what you will do you will store pick here You will store drop here and same thing you will do here Now you are the person who forgot about uh having this ride entity in your uh system and then you went uh ahead with vehicle payment user rider role and while designing you got to know that user and rider both have these attributes which is pick and drop What you have to do just abstract these attributes pick and row because these are commons to user and rider and make them as ride Right now user and rider uh have the relation with ride Right now user uh book a ride and rider accepts a ride These are the relationship And now ride will have both the attributes drop location and pick location Drop location and pick location Right as simple as that relationships find Now the uh next thing is after doing this after collecting the requirements after defining the entities find a relationship So the relationship is user is a person right I have already applied specialization in my mind though rider is also a person rider accepts a ride user requests a ride Rider and user make a payment at ride completion So this is the relationship and again I'm saying if you are the person who has let's suppose another kind of relationship doesn't m you know matter it doesn't matter see in year diagram in low-level design in a highle design there are multiple possibilities and only thing you have to have in your mind is that there should be at least one reason why this thing exist right there is a reason writer and user makes a payment ride completion why why because ride is completed what do you expect from after completion of red right so yeah there is a reason make that a relationship right and it doesn't have to have like my you know uh relationship that I have made here it doesn't have to be like that only now the next thing is you will draw and everything and you will define the cardinality so first thing I will define person right person very generic thing person will have attribute like onboard date when that person onboarded doesn't matter user writer whatever we have person ID Now person ID is just a incremental ID like first person came into my database it's ID is one now the second person had two three so it's unique so I can identify this person using P ID attribute so I have put a underline here this person has name this person has do ob here so age will be a drive attribute so this is a drive attribute this person has profile picture now this profile picture is a URL and this URL is made up from name let's suppose this person profile name is http my base URL slash name / do ob/ whatever right let's suppose some another URL so this complete thing will make my profile picture URL and uh that's how I've introduced name do obl on the go I am defining the attributes person now rider is also a person he will make a rider now rider have rating specific to the rider right rider have ride ID rider have number of rides completed rider have KYC completed or The data type will be boolean Writer has license Now the next attribute I'll make entity make user User has user ID User has rating User has ride Number of rides uh requested I have payment Payment has date amount type Payment ID Similarly ride Ride has ride ID Ride has pickup location Drop location Ride time Now drop location and pickup location is a drive attribute and it can be dried from sorry composite attribute Again and again I'm confusing you guys Sorry it is a composite attribute that can be composed from multiple uh things Drived attribute is age right okay Pickup location can be uh compos composed from street city house uh and drop location also City house street Don't think about tables nothing else Just think about entities their attributes their relationships Right now vehicle vehicle as vehicle ID vehicle as type let's suppose two wheeler four-wheeler vehicle as license number vehicle as registered date Right now all the things we have identified right uh we have identified um your uh entities your uh uh attributes right and the type of attributes like multialued like uh drive attribute like composite attribute we have derived attribute here age we have composite attribute like profile picture here we don't have any multialued attribute though but if user has phone number then user can have multiple phone numbers but again you will think let's suppose user have phone number here phone number is it a multiple uh multivalued attribute think about it now if I could have been into my school database I could have uh marked this phone number as multialued attribute now in my Uber account I will say that uh to the interviewer that sir this user can have phone number and similar for the rider but this user in my Uber system I am assuming that one user account which is user ID one user ID or user account can have only register to one phone number and that's it unique So in this case in Uber system my phone number will be single valued not multialued right So this is how you know you your diagram will change according to your use case Now the last thing is key uh you have to identify the relationship and before that you have to make sure this this is a generalization or specialization car symbol uh you have generalized the person into rider and user or I would say if you go bottom to top rider and user have some common attributes like name onboard date and etc You have abstracted those components and put have you have put that uh uh you know attribute in person and from bottom to top you have generalized something So you will uh attach rider user with person with this diamond shape which is called generalization Right now now comes the uh relationship part So this uh rider so first of all let's uh uh complete user So user is related to payment So all the entities I will iterate through user payment user ride user rider user vehicle everything User makes a payment So relationship is make right second thing is user request right relationship is request Just attach single lines at first Single line single line single line And then user is related to person with a generalization That's it Now to complete the user I will check one user can make multiple payments but one payment could not be made from multiple users Right a user is paid 10 rupees Basically user can have multiple rides in one day So he can make multiple payments Right so one it the relationship is one to many Now this is your homework If user or payment first check user if user has complete participation in the relationship or if payment has complete participation in the relationship If both has you will obviously make this line as double line double line If one of them has let's suppose every user make at least one payment means every user in this entity will have relationship with a payment then you will make only user line as double line which means total participation right that is your homework Now uh user is related to ride as request User request a ride What is the cardinality user can request multiple rides Yes User can have multiple rides in uh in a day Multiple rides One ride can be requested from multiple users No A ride may multiple users account So it's also one to many So similarly rider accepts a ride vehicle belongs to rider So now here you can see all my system will only store the vehicles of the user which are related to rider I will not store all the vehicles in my city Bangalore Right i will only store the vehicle in my system which are related with rider So that's how you will communicate to your interviewer that I'm assuming that all the vehicles I am deleting Let's suppose a rider dregister So delete his account I'm also deleting all the vehicle related to that user because from my database I don't care right So all the vehicles that I have in my DB which belongs to which belongs to which belongs to rider they will have complete participation So one rider can own multiple vehicle but one vehicle can't be owned by multiple riders So one rider can own multiple vehicle right you could have activ cab whatever but one cab can't be owned by multiple users That's how my Uber car uh DB you know design is putting constraints and then again another relationships are there uh rider accepts or payment or payment is accepted by rider whatever right so I will attach all the notes in description don't worry so yeah so first thing is uh check the entities second thing is key uh draw the attributes make sure you know the attributes behavior like multialued composite single Well all these things then make sure you know the relationships So relationship are uh see these are relationship Then attach the relationship with your entities Then define the cardinality and participation That's it Here you can see generalization specialization Generalization is a bottom to top approach of extracting out common duplicate attributes and putting them in generic class You can see student and patient they both have both are person So this is how I'm generalizing it Specialization is dividing one entity to more than one specialized entities and it is a top to bottom approach So I have a bank account which has balance and account number and this account can be uh you know divided into current saving account and saving account So both of them will have uh account number balance though in your in in the tables they will have these attributes at account uh entity only I've just uh you know draw I have just drawn these attributes account number and balance here also but this doesn't mean that account number let's suppose one account number account number one and balance is 1,000 rupees for person let's suppose U1 is also present here it's not like that right I've just drawn these attributes here so generalization and uh specialization both are the ways to make the things clearer right generalization abstract the common attributes specialization make makes things more clearer But again if you are confused about generalization specialization don't worry about it Just uh make sure you know about generalization That's the thumb rule right so that is our part one of DBMS in one go In the next part we'll start our DBMS in one go in uh from designing Instagram I will design uh the requirements I'll write down the requirements I'll define the entities I'll define the relationship I'll attach the entities with relationship cardality participation everything and then obviously your homework is to design the Instagram and in comments you have to give uh the Google drive or whatever link of your PDF or your image or whatever right where you have drawn the Instagram and uh I will post them on in uh Twitter or somewhere else right but make sure this is your homework and you share with me and from the next part we'll design Instagram and we'll go to acid properties normalization and these concepts are a little bit you know uh complex than the topics that we have discussed