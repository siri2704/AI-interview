hi everyone this is VI many students come up to me and ask me vi where do I study cor CS from and in general you have a lot of theoretical resources which talks about OS networks dbms and all these things but one particular piece that I feel is missing everywhere is the initial session where everything gets connected together most topics start from the depth and each of the components is explained in too much of depth whereas what I feel should be the first thing that you learn is what are the main pieces and how they connect together because then only you will be able to make sense why is OS doing this piece this way why is uh Assembly Language being ran this particular way in the pipeline and things like that right so you have compilers COA OS all these subjects that pieces together to make your programs run you have networking dbms to make sure that all the things that we are running on internet are kind of supported so this is what in this live session I talked about so I have make sure that this recording is also added on YouTube so that you can enjoy this and in fact I have went through like actual computers like motherboard right I mean I think many many students don't even know even after graduating from csit that how does a computer actually runs maybe you have seen that in cyber cafes but actually piecing them out and seeing how does actually a ram works or maybe just removing off uh say a core and seeing how does actual microprocessors work what exactly their works are very very layman term in layman terms but again super important right so that's what you will find in this particular video make sure you hit the like button and enjoy the rest of the session see you in end [Music] bye-bye how does computer works that's what we're going to talk about today 8848 how many how many of you know the reference of 8848 I think somebody already wrote in the chat do you know what is the reference of 8848 no yes it's exactly it's Mount Everest height right it's 8848 m so uh we are going to look at how computers or Tech realm works from the height of Mount Everest um and we are going to like try and get like the clear picture of what all components exist and this is I think one of those sessions that I wish somebody would have taken in my college to me to make me understand like how beautiful this realm is how many of you have uh studied computer science in your college what you had some subject plus one minus one you had this compiler Osa subjects here you had this subjects in your college plus one minus one okay and I expect minus one for today's class like what we will go through you need zero zero knowledge right but I expect everybody to know the dssp we have learned okay I mean I expect you to know ke what is a q what is a like C++ code and stuffff so these all things I'll expect in the lecture but except this everything else I'll expect that you would learn from here itself okay so today will be like more like an introductory class and I will not like double click on anything how does OS works or how does uh networks exactly works and stuff like that but essentially connect all the dots so it will be like outside the map and see okay this is a piece this is a piece and so on right yeah so many of you are not from computer science department if you are not from a computer science Department then uh most probably you didn't had this subject but let's not worry about that now whatever we'll cover that will be sufficient so today's class will be the first class and then we'll follow along with other things okay CH let's start with this so I would love to get some perspective from you guys chat right quickly how do you think computer runs what what what exactly happens behind the scen keyboard mouse you just play some keys mous screen that is itself computers or there is some coding and stuff electricity electricity is another point I should have added in the slides right coding because there are some programs and stuff that is why we are running it CPU okay processors maybe magic that is also for most non-tick people if you go to like Indian um even cities and maybe Villages too you'll you'll realize that people don't even understand they just understand electricity and Magic most probably right but you are going to be a computer scientist to some degree not not a scientist a computer science student if not computer science degree but still you're going to be in software engineer realm so if you don't really know how computer works I feel that's a very bad place to be in because if you are somebody working on a certain piece of Stack what there is certain things related in your industry right if you don't know the Holy Grail just I mean in fact all of you guys are working on computers only mobile or laptop if you don't understand how that works even some certain percentage what kind of engineer software engineer are you right so before even becoming software engineer I think you should all appreciate here how much grateful we are for the things that we have right I mean personally I never realized these things in my college only when I started working I realized yeah if I really need to be the best person best software engineer in my team right I need to know how things are running internally and believe me when I say this you will realize this too after one and a half to two years in your job yeah yeah if I would have had read these subjects properly maybe I would have been better at my job because initially it feels like it's just about writing codes but it is not okay some people are saying Compu that is what expectations somebody who doesn't know Tech expects but I hope expectations right how many of you next question how many of you know how a real computers work Compu I mean laptop monitor you know but yes plus one minus one computer under you have touched you have touched a ram you have touched a motherboard you have touched these things plus one or minus one plus one nice okay dial okay so you guys are some people are are doing these things right so even I did it in my school days right some hacking here and there right but I felt some of you still might not have seen it before so I thought let's get a computer and show you guys actually so let's do a quick demo we have this professional setup today unboxing which is this okay I don't know if you are you guys able to clearly see this this is not Raspberry Pi this is actually a CPU just a smaller version yes so if you guys open a computer this is what most probably you will see so you you guys see this computer CPU right there's a cabinet board right this is a board right and like you would have slot in this you have this is the ram like let's try and open this up this is the ram that you have inside it this Ram so in computers you can actually assemble these things uh inside the slots right and 4 GB Ram 8 GB Ram you can actually buy and like add it to your CPU like this itself okay so this is a ram U there is this like there is something called as bios and stuff sometimes there is there are batteries that power certain things that need initial power before even you have like computers chip coming in this is called I think seos battery I forgot the name but I think there is a seos battery C yes CIS M battery yeah correct so that is there then you have connectors which connect to hard disk and stuff uh I'll I don't have a hard disk but like typically a hard disk would look something like this like this is H external hard disk similarly you have internal hard disk and stuff right so you have a wire that connects to this and like the 1 TB 512 GB space that you see it's in hard disk then you have like around 4 GB 8 GB Rams like this right so these are two main pieces and then if you uh open this up right there is a this is the processor right this is the the Intel i7 I5 right like whatever processor you guys see in the computers this is what you see in this this is what you buy when you say I want to buy an I3 or an i5 this is what changes inside it right this is the processor slot so like it closes and you can add different you can change it configure it right so this is the processor which essentially does the CPU Alla work right so sometimes like when I was in my school I used to think is CPU is that daba the cabinet where the whole thing is like where you press the button and computer starts essentially CPU is this this is CPU okay this is motherboard right that is the cabinet and you plug and play things and make it work right so this is essentially the three main pieces that you need to know about one is processor okay Intel i5 i7 AMD processors very similarly you have GPU slots like this computer doesn't have one but you have GPU slots on top of that you have coolers and stuff you have other things as well but those are like not relevant from a beginner's perspective like you can start learning about those two they have internal stuff and all but this is essentially the whole piece of computer computer this is what we are looking at okay cool practical right yes I I bought this just to show you all obviously I don't have a work of a computer this is uh so like in these processes I'll show you next day we read this properly and then I'll I'll show you is meaning right what exactly happens with the processors there is something written in clock speed G gigahertz right so we'll talk about that too so today's is the introductory session we'll not go into details of numbers and stuff next session wise we'll double click on this on RAM on other things and stuff okay so we'll see that to overview what all things these are but we'll double click on each of them and we'll understand what happens okay so now let's let's move to the next thing which is now you know what computers are there is a motherboard something similar to this we didn't cover much uh but this is essentially the there are bunch of slots over here right so you might be using this Lan wire over here right there this Lan wire which you connect to your computer so similarly you have this embedded in your like motherboard even your laptop has a Slimmer motherboard in it okay everything is on motherboard your laptop is is also a motherboard the space that you see it's a motherboard inside it the below your keyboard your keyboard is on the motherboard basically okay there are a bunch of slots and stuff like you can see these colored uh audio jacks and stuff um all the things related to pen drive USB drives and stuff okay so this is essentially how computers look like now let's focus a little more on the slides motherboard I think I've already showed you uh real CPU this is this is what we talk about right HDMI port is also there are bunch of ports where you connect wires and connect let data transfer CPU this is the real CPU right um memory in total is like divided into three parts like you have CPU or the core which also has its own memory this also has some memory things designed inside it we'll talk about it next class okay then you have this Ram which we talked about this Ram has like around 4GB 8 GB kind of memory it right and then you have the hard disk this which is like 256 GB 512 GB one 1 TB nowadays you have tbs in your computers right so that kind of hard dis is there you your C drive D drive if you add the total space that that is actually in this okay cool Cho so if I if I have to Define like what computers are is this simply uh a machine that execute sequence of in instructions right which we call as programs right C++ codes all these are programs right using Hardware components like CPU memory and storage right these are the things that the uses and there what's SSD SSD HDD SSD is the way these memories work internally we'll go deeper into these don't worry so today like we'll touch upon simpler terms for next classment double click in everything right sdd SSD difference speed of transfer all these things we'll talk about it by the end of this lectures most probably you might not know equivalent to somebody who has gone through a theoretical course but you will know more as a practical person what you should know right that's what I want to know that's that's want to teach you guys and most interviewers also care about most of those things plus few theoretical things that covers that are covered in these subjects so we'll cover that plus the real practical aspects of all these subjects why are we actually doing it why is this this way can we do it this way why not things like that okay so is this part clear to everyone let's I'll just adjust this a little more I think so clear till this part computer computer you now have seen one inside it in case you hadn't seen it before but I think most of us break some computer before so we see it right same for me so once I went to cyber cafe I saw it being opened once then I did it myself once and I just opened that and that's how I saw it first time but I thought what kind of computer scientist you would be if you would never see it even in this class chello next so uh I feel computers are very very similar to factories um very similar to any supply chain that you might have read about okay so computers are just things that run on softwares and pieces like it there will there is there are similar things that happens in factories and almost the responsibilities are very very similar okay so Factory things Hardware everything happens in a hardware step think about let's suppose manufacturing a shirt right shirt like this so yarn to this yarn to fiber like like actual Cotton to yarn to its like supply chain to its final T-Shirt Factory to finally retail all these things that happens right very is very similarly you have uh like for software also that some code generates an assembly to it goes to your CPU runs it maintains in a box and stuff like that right very similar things happen U like just like you have input output devices everything needs to take some input and you need to give an output every every piece of thing like even even this CPU core is going to take some input and give an output back to the to the motherboard right so essentially every device every compon component has its own input layer and an output layer this is the input that it will take and this is the output that it will give back right so interfaces works with input output plus you have input output devices right I mean there are certain like devices like this monitor you are watching it on U the keyboards and stuff these are devices which are designed to just do input output there are no other purposes right but input output in general is just like a layer right similarly you have bunch of things in um factories also right memory versus Warehouse I mean you have memory warehouses and storages very similarly in factories right long-term storages you need to store things in dark stores to be so think about blinket zomato right so do you know how they work there's something called as dark stores which means there are certain stores that they buy where they like locally keep the things and then they deliver from there to you in like seven eight minutes right uh s instamart blink it very similarly even in computers you have memory which is the ram which is like whatever it's going to need it's going to load it there and then from there it will quickly deliver to CPU whenever is required okay but then there is a hard disk which is of very very big size and big programs like let's suppose you are playing a very very big game right say say GTA or stuff like that so you would store big programs there and then load the necessary informations which are frequently required in the ram that's what you do okay motherboard versus Factory floor I think that's another example I don't need to explain anymore but this is the this is the motherboard and it just basically facilitates electricity running through different devices that's what is happening um it just ARR it just arranges everything in an efficient way that's super important in factories also that's very very important okay and CPU uh basically deciding everything how does how are things going to run right the control unit so I personally think about any organizational problem right any supply chain designing anything there is huge amount of inspiration that can be taken from already solved examples like I believe even there are Innovations possible in different fields taking inspiration from things that might have already existed in other fields maybe you can someday think about an optimization that has happened in operating systems and maybe use it in business okay personally I think this is possible and I I I was discussing this once with one of uh my friends uh he works in like this green sustainable energy W ecosystem like conversion of Bio conversion to biomasses bio gases and stuff biomass into bio gases and stuff and supply chain of that we're thinking of solving certain problems and like we're discussing which ideas already exist in this okay you will get the slide don't worry okay cool Cho but I don't want to keep this boring uh today's class is not boring at all I I don't want you all to read bunch of texts that's super boring to do CPU so so why why do I want to keep it more boring so let's let's make it more interesting let's try to uh try and uh understand how a program runs all of you can write a C++ code quick plus one in the chat okay so let's try to trace how will a C++ program run in a computer okay let's try to do that in in a simpler way for today and then in next class we will double click each line and see exactly exactly right so we'll double click on each line so let's try to understand it through uh writing code and understanding every line so what is this everybody knows right vs code I I expect this much because this is obviously not a class where I'm teaching first time so ID right any code editor basically so you can write code and stuff so from the place where you have a code written to the place where you have to run it it's not super simple it's a simple step-by-step process it's a good management a factory but it's not simple but we can see it from 8848 Everest view right first time and then we can see exactly so let's take a very simple line of code program before this I think all of you can all of you can see this uh can you can you see the screen uh where I've I'm showing vs code okay so you all know this Command right g++ a. CPP and then there is a executable created and a do out run it right and it will take a name let's suppose VI and it will say print hello VI right this execution is clear to everyone right this is what we want to trace very similar to this I'll will not try to do input output because they are more complicated and there is Big Library pieces working behind the scenes so we'll do very simple instructions but like let's say there is this piece of code and these are two commands that you are running and it's making that code run what exactly is going behind the scenes to make it run because if we can trace simpler codes whatever complex including this vs code that you are seeing is also a code running behind the scenes does this make sense a code Trace so every other piece is also a code isn't it so let's try to trace this more or less like on a bird's eye view right so let's go back we will trace this piece of code because it's simpler and it's uh like easier to trace okay so let's try to trace this particular thing and see how we run it everybody can understand the code right which main start load Lo five in X X+ 2 in y That's it there's no usage of X and Y you're not printing anything but very simply loading the things in a variable okay so what happens when you have a c program like a C++ C program are very very similar what what what happens when you have a c program like this okay so this is a very very simple code so when we compile a program so the first thing that you do is you write g++ or GCC GCC is for C C g++ is for C++ I mean essentially that how the commands work so you write g++ test. C and it prints a do out it builds a a do out but there is this very nice flag Das s which tells the computer ke hey I don't want to run this file I just want to see the assembly level code that is going to be generated when this program compiles okay so let's try to run this once and see how this looks g++ d s I want to Output this in a do uh s and the file that I want to run it on a. CPP okay so it generates this a.s file which is assembly level code and it it it is fairly large some some big piece of code this is exactly what is going to run in computer we'll not be able to understand this that's why I I showed key this this example is much more complex okay but this is essentially what the coding H what what happens behind the scenes that it generates something like this which is then sent to this like code that you are seeing okay this is the work of compiler okay there is this compile step which happens which takes your code converts it to Assembly Language and then there are even more steps okay so this is a this is a statement that you can use to see comp uh the assembly level code of any particular C that will get generated now these are complex to read because these are machine generated and there is no purpose of a human reading it so they are optimized for being efficient rather than being readable right but again you can see them if you want what exactly line of instruction is going to run okay uh little more on compilation so if you just compile this piece of code I mean we can actually do that also but I'm just making it fairly simple right I've just already ran it and added the screenshot on the slide so if you run this you will see something like this happening uh in the the code piece the main will be there so we'll understand assembly level a little bit but let's quickly like see the compilation step what is happening so we are saying when you have a ccpp code the first step is pre-processors that happens right so what happens is you have this hash defines hash includes all these things right so that is a pre-processing step then after you have all these things added you have compilation step so that gener generates assembly code do s is the extension by default okay so then there is assembler that basically like takes the assembly level code and makes it uh like actually into a binary executable machine code basically but machine binary bits that computers can understand and then there is certain linking that happens based on where you are running your computer and stuff there are certain linking that happens tomorrow we will I don't want to get into these details but we can see this yes so when you run this a do out right I mean this is you can do it but uh you can generate the object files also but this executable machine code is what we are generating over here machine code okay I can show that also but for this piece of code it will be so uh I I'll take so I'll I'll do this once after the end because it will it will take a little uh I I'll show you I'll show you the the example also okay yeah this is the example essentially okay so assembly level code this is basically still readable still like a piece that humans can understand instructions in instructions definitions be given by this score but then that gets converted to a machine level it will look something like this this is a hexadecimal like uh string stream it's like just a stream of instructions this is the machine bite code that will that will be generated and then it will be sent into the core by In This stream format okay so I think generate this is what you see you'll never need to generate this in general uh because this is not human understandable so this is is essentially the function or like assembly level language this is a function actually but this is what how the Machine level code would look like once you do the translation this assemble step and then a little bit translation into how exactly on your computer which memory locations will be used for this particular program and stuff like that once those things are added you have the final executable that exactly this memory location needs to be used when you are like using this variable and stuff like that okay so that's what happens so let's try to understand a little bit on what this assembly level code looks like what it looks very weird but it's understandable let's I'll I'll show you I'll show you how it is understandable right let me see if I can draw on the screen right so let's try to see what happens there is this xal to 5 W line right it's pretty scary that's not true once you understand it it's super simple this is just another language languages might be scary because nobody designed it in a way that it should be read by human but I think it's fairly interesting once you understand it it's super interesting I'll so this looks scary it's not scary because when you started learning C++ it might have been scary but is it really scary once you have understood it not really no so see there is something five being stored in X right so there is this main program that is starting there is stack pointer we will read about what is stack pointers and stuff when we do OS key how does programs get run in memory but see move 5 into W8 what does this mean give five save W8 isn't it so something like this is kind of happening add to C whatever the value that you stored over here store it store the value in stack pointer plus 12 sort of thing then add what in the W8 so this is X x over here so this is W8 over here x is containing W8 is like a variable which stores the value of X Plus two will be stored in W8 okay and it is being used as a temporary variable for y also okay or you can say that it's being stored in the local variable there is this stack so stack pointer Plus 8 this is stack pointer stack pointer eight four space you are storing y so store in the stack pointer plus y the W value which you calculated over here stack pointer Plus 12 stack pointer + 12 x x did you get the IDE see stack pointer a memory location suppose RAM memory memory Lo we know that four four bytes like you have four bytes like space right so stack stack create function call this is the stack of the function call of the mean stack pointer so what it is saying create a variable W8 just five store five is a value 12 is a value these are values and then it is being added this is being moved to W8 W8 varable five now store in stack pointer plus 12 stack pointer plus 12 location five store so x equal to five this is what is storing the value X then load the value that is stored in X in a variable it is reusing this variable as again loading the five from here to here then it is adding plus two to this so it becomes seven now this is what it is saying is store it to stack pointer Plus 8 so it is being this location is being used as the value variable y local variable Y and then move like uh this is other parts of the code we don't need to understand this is like reverting the things poin and then return from the function sort of that all those things happen Okay but more or less connection like some connection is there right Lang we don't need to learn language but there is this move variable store variable load variable add uh store move add these are uh load register load into register so these are I generated this in Macbook so there are the construct the this is AMD processor right so AMD uses a different set of instructions over here I i7 I5 I3 these are x86 processors instructions so we'll talk about this in the next class risk we'll talk about it complex term concept simp terms that's all is happening is this too complex understandable right we don't need to learn this simple enough like how does the correlation between this line and this piece of code happens this five store and then retri this is y = x + 2 this is x = five right this is how in Fact Computers execute instructions okay could stack pointer function Callin stack gets deleted this is what you would have heard when you have read about computers being ran but we'll do it again when we actually decompose how this stack Heap things like this has created okay not today as just high level viewer okay we don't need to get into too many details this part is clear that how does computers get converted to assembly and then then is ran on core in the coree so these instructions then uh I'll just quickly do this I'll just just give me one sec why is this not moving out let's remove it off I should move it to the other screen but anyways yes so this instruction gets generated and instruction I'm using this new tool today you instruction generate so now what happens is you have this core over here this core uh computer i7 I5 whatever it is you then go through line by line and try to send it K by re there are there are two registers right there is read register one read register two so think about this this is like a instruction right you might have instruction like xal to y + Zed so X = to y + z this will be register one this will be register to it will read what is the instruction being used okay so that will get decided the instruction will come that hey you have to add these two things so you will take get these two registers is registers we'll read this in the next class but you add them and then you send them to this unit called ALU arithmetical and logical unit you send it and then you get the result and you store it in whatever variable you wanted it to write ke add w W8 + 2 and store it in W8 this is what is happening see when you add subtract there are two inputs the instruction add will be coming in so it will be like add W8 number two so it will load the number two in a register and then it will send it to the ALU yeah ALU is input it will do the computation and it will result the seven so seven it will it is also getting an input WR W8 so right register is there right data is there so it will write it to the register okay clear everyone how is this running and 50% Clarity is only needed but I think it should make sense operation code what operation is running take two registers that it will this operation will happen on and then save it in the third operation this order depends on what CPU what things you are using Okay okay so simple there is this piece of code that you have and you are sending it to this life simple because there are many codes running do you think your computer is only running one simple code like code there is a script generate send it to CPU run it get the output and stuff calculated BND if this would have been the work that we needed to do life would have been simple enough you would have programming languages a compiler to convert it to assembly level language and then like rest of the part two like to convert it to bits and bites and then send it to uh the CPU CPU will execute it get it done and you are done with the code okay but life is not so simple because even the code that you are running is running on a terminal and that terminal is also another program that is running that terminal is embedded inside vs code and vs code is also another program that is running so essentially what you're dealing with right now is there are multiple such codes which has been compiled and they need to run on a computer I'm using the same thing but understand that there are different programs different pieces of codes all of them has been compiled and you can run multiple programs at the same time that why is this not so simple what more problems do you think might be there huh it's like multitasking right multiple things happening on the screen together not everything needs just the CPU right sometimes the code might say hey print this to the screen printing to the screen isn't a work of a CPU right arithmetic and logical unit input output Network it doesn't it doesn't handle these things right you don't need any mathematical part for it no so but bits send why should core handle that okay so that is another thing that uh we we might have other devices you might think multiple programs this is another like strategy that some people think of this is like a very standard strategy even in development and all send it to the CPU get it done next W but computers are not so simple because what happens is all codes need to get fair amount of run time uh one code can keep running forever and in the behind the scenes and the other codes needs to run you might want to uh make priority across things so priority you might want to kill a process right starvation is another example that one process is running so long other things like this right so this is this is what the problems are multiple devices then there are are multiple users by program a it should not be able to like access uh the codes of other thing other programs that are running like segregation of users you have the users that you log in right computer start you are able to login into computer so you have a user associated with you so it should not be able to access other things and stuff right and there are tons of things which I think many of you have understood ke where I'm hinting towards all of these get solved by something called as operating system so somebody said by I there is somebody who is writing the piece of code like let's suppose you are a programmer and you are writing C++ code there is somebody who is writing these things let's suppose companies like Nvidia all these who are creating these chips right Intel and all these so there are somebody who's writing this there is somebody who's writing compilers so somebody's writing these pieces of code which you will do as a software engineer in most cases but somebody's also writing pieces of code that runs in this this GCC you writing is also a piece of code okay somebody's writing the way to convert this into assembly level language and binary executable and stuff somebody's writing codes that will help you help not codes but Hardware that will make it run on these chips somebody will write like drivers to make to allow programs to interact with this somebody will allow somebody will try to write pieces of codes that allow people to get segregated and what somebody said these pieces of programs can be independent services and there will be a central service called operating system which will coordinate between all of them operating systems will allow you to have users being managed it will allow those users to save files in a storage without conflicting among each other uh it will allow them to access printers keyboards in an uniformed way possibly like so that they don't have conflict it will allocate them CPU course and stuff to be used there can be multiple coures in fact so I've drawn two generally you have you can have multiple coures but generally what happens in this one like CPU core uh you have multiple like ALU units and stuff so multicore systems are generally what you see today so it's not like you have just one code there are two and then there are many programs it can be scheduled to any one of them and things like this it's like you have a factory and prod and then there are two people who are like taking and building the shirt and things like this right so that is what is what generally happens today so there somebody said there has to be a piece of software which will keep running and which will make sure that all of these things happens efficiently which is called operating systems okay so this is something that people created okay so now your computer is the computer that you see today is essentially this okay you are a user you can write your programs you can give it to OS and say by code this is my piece of code uh then the OS might decide this code is running so it needs to go to CPU okay I'll CPU I'll send it to CPU the user said command plus s or Control Plus s so save it to the hard disk the file a. CPP save it to the hard disk right the the code is now running in CPU and the code says K by see out X so okay OS will decide this needs this program needs to run and print something to the monitor so get monitor connection and send that bytes to the monitor so that monitor can show it okay things like this so OS is like product manager you can say that so OS yeah you can say OS is a product manager computer manager to some degree but yeah that is there but OS is also a program so OS has this program called kernel which we'll read about more in the next class in the next to next class actually which essentially starts up and manages all these things like that's the first program that gets started take so this is the world that we are living in how does a computer runs how is computers running uh behind the scenes okay now life was good till this point this is let's suppose 1970s or 60s I think this not really 70s this would be 80s or so when when did I I don't know the timelines maybe next time I'll add that to the slides and stuff but what would be the timeline when was OS and stuff created I think it's 80s or so right ' 80s '90s so uh that is the timeline when you would have all these process uh computers with OS and coming in and you would have SE competition between apple Microsoft Microsoft was way earlier compared comparatively and you had MS DOS all these computer OS um so this is how the computers looked at but then uh but then somebody decided he okay one computer is not enough right I don't I am sitting in my computer at my home but I want to access a program a C++ code let's say written somewhere else and I want to access it right and know 1956 by IBM first O Okay so 670s I would assume there was OSS and there were personal there were computers big computers that were available right uh first personal computer at what time somebody search and tell me no no languages comes yeah languages were before OS I think C would be before that c would be the f c would be pretty early on right yes intern essentially right actually first thing was L right internet was a little later first you had Yeah Tim Burly what was that uh uh like B Labs AT&T Labs sorry yeah so that's when you started seeing people started connecting computers and computer program run you can access through that through wire to the other computer so people started connecting computers and that's when you started having computers with things like let's say browsers earlier it was uh uh like before this so compilers so think about it now why language can language can exist without OS because this diagram language and core so it can exist without OS because multiple programs were needed to be run that's when OS came into picture no so think about the hierarchy language OSP dependent not really it's just a way to convert a program written in C to assembly level that's it and now OS is later on that came that's what always said right right correct so Linux as uh was written also in a language itself so language should exist before that I mean language is an ancest most things build on top of languages in even in society I feel so that's when people started coming to this realm VI now now one computer is there but now we'll have something like browsers and I'll try to serve the internet and I might want to run a function that is saved in some other computer right so people started this requirement I will have a simple PC in front of me but I'll have a function in some other computer I'll run that which we even use today right so you have your Chrome browser running and you want to connect to things like internet and you open that up you type in and you want to connect to Internet and get that data essentially it works this right so you have some computer this is also a computer like the just the diagram is different this is also a computer this is also a computer with OS with the same piece the same piece that is over here is everywhere the same piece is in your computer is on the web server is on database sub everything is this it's just that they have been specialized to do certain works so certain components work more certain components are not present and things like this right so that is what happens so when you have a web server this is just a diagram but it's is also a computer which has certain like special nuances right it doesn't need a monitor and stuff it just needs to get a data and get it out okay something like this so there are then people created internet there is something called as term web server what is a web server web server is something that takes the request like this has the main program let's suppose this has the main C your python any program your computer says sends a signal input pay so this this computer it will travel across internet it will get to that computer it will execute that function ke let's Suppose there is a function of uh calculating matrix product so you will send the Matrix card to input in this HTTP request and it will process over there and it will send the HTTP response and it will your computer will get it so it can show your on your browser and in fact most of internet works this way like even your like algorith website if you go and click on let's suppose the we'll see this in the network classes but when you click on any drop down any playlist anything there is a request being made to the backend server it goes there Pro gets processed your information gets created and it's sent back does that make sense this is how internets work like don't worry I'm not showing these things in real life right now because we will have a specific lecture on networks and we'll see end to end but for today I just trying to keep it at surface level as a broad level IDE that's the purpose of today so I need to know that's all I I should be able to figure out after today's class next class we'll obviously Deep dive and understand and that is also simple enough it's not complicated people make it complicated because we try to go into details too quickly it's about doing BFS and most textbooks and courses Go De FS that's the problem that's the problem in studying things in theoretical topics where where life should have been BFS people do DFS difference most textbooks has big chapters on everything right so that's that's essentially what happens so next huh now with every new requirement with every new addition to or every new feature you request every new uh benefit you want to get from anything you also get many more challenges coming up interet Compu connect how will it know which one to send okay where do you want to send how how will the actual data know is Compu how will it know that those things right um how will the actual data travel right uh what will how will the actual signal like 01 bits that's super complicated if you think about it right there are there are tons of networking Solutions built around it so engine you just take this Endo somebody's working on the software piece be between these two things right if you think about companies like Cisco and stuff so they work on this Tech so everybody has their Niche piece Sol right because there are so many problems to solve in computers right that no one one company or one person can solve it all right so that's where there is lot of collaboration in in Tech and believe me when I say this like we are not even doing 1% of the job that we are doing but there are tons of Frameworks uh OS networking already working behind the scenes that is making all your life easy function API and it's just running somehow whereas the actual hard work the like details has been already been figured out by other folks okay so if you had to solve this from end to end now like you would need ears order of ears to solve those problems so we live in a world of abstraction everything has been abstracted out for us we just need to write the last layer of things okay and people are keep people keep building abstractions on top of abstractions like you think Frameworks like react nextjs these are just abstractions built for you to be easy for you to be easy to be coding front end or backend things like this okay so that is what happens in the real world people create abstractions and people create abstractions on top of it in fact people created Assembly Language on zeros and ones to make your life easy somebody created C programming language on assembly to because Assembly Language was so hard to read so somebody created C so that you can at least do something readable and then people are creating even more readable languages people are creating like uh natural language things as well today that is what is happening everybody are everybody is just creating more abstractions layers and layers of abstraction we are living in so more and more challenges and we'll talk about these in network class and we'll try to uh break them down okay U then somebody figured out uh there is this requirement of storage right and like storing data in the server might be difficult because you might the server might go down it might crash it might burn uh and then you want to save the data there is a certain computer which needs to do specific storage stuff it it needs to just store things up right so we created something called as databases which is going to store it so now database is also a computer which runs a specific software right which makes things getting stored much more reliable and like fast so people then created specific Solutions so there are only two types of things that happen one is people create more efficient or people create new newer Solutions right like this is a new problem people create solution for that or people make or tune something to be more specific for a certain use case right so the that that's what kept happening over years people created things specific to certain use cases which are more efficient for that right so that's what happens and then like like there is like whole realm of like even distributed databases that came into picture and all but for the sake of just doing computer science for now we'll like skip the realm of uh distributed systems and all because that's again one level up that's like 2000s build right so we are going till 2000 all be micros microservices and stuff like that that's that started building so even that will be covered in hld so you can attend those classes if you want but this is essentially all there is so you might have heard about terms like front end back end so front end is essentially something a piece of software that is running on your computer to give you that like browser May UI and all right and then like it is basically doing this network P HTTP there is a backend server which has apis in it apis is just the F so you are creating functions but functions internet part API let's say right it will take the request and run the function for you so there is API being created in the back end it connects to database this is basically all of web development that you do right so client computer that's called client all these codes are front end back end is the code that you write for things that you interact with on the other side which you don't have direct access to right so that's essentially frontend back end okay but that's it that's that's how World of computers work it technically this is all now each one of this can be double clicked you front end p double click back end p double click database per double click server web server p double click internet p double click right browsers p double click OS p double click right prog compiler double clicke double click everything can be double clicked and we can see bigger picture in that Zoom right we can see that but essentially this is all that is happening in in computers that you are running clear till this point yes root level Z obviously you will not remember 50% of the terms I told today and you will not remember all the ideas I talked about today but at least you got the gist right that is how you start learning people never I in fact I cannot learned something when I read it for the first it's never possible it's not it's not hard at all you have to go level by level right why it's doing this there has to be very logical flow that builds next class so uh next class what we'll do is R was not built in a day perfect so next class will be deeper di on compiler and Kaa Kaa is computer organization and architecture like this part how does your program gets run on this these two things we'll talk about in the next class so compiler and Kaa will do first so that this Frame is clear and then obviously we'll go to OS we'll go to networks we'll go to dbms and stuff like that okay so this is like what we'll do from the next class onward but I hope interesting we'll we'll do similar classes in the next one also I'll try to make it simple enough but also pass on many many values that you actually need to learn from books and all but I know so I'll just try to keep it super interesting and very very practical okay okay so uh the slides I'll send it to you all and uh plus so the for the boot camp I think the WhatsApp group and mail has already been added so I'll send it to you all okay and I'll also I'm also thinking of like adding a slide section on the website video slides slides embedding right so I'll add it there right so classes will be afternoon so we'll we'll have the classes uh like every next day so uh so on Monday like on on the week days it will be in the 8:30 to 10:30 slot Okay cool so that will be it any queries related to this first content then we'll close the recording then maybe you can ask me more questions clear this I'll have I'll have more things covered in this also soon discuss like actually I mean I know you guys might have thought about it but actually we'll talk about it too maybe if you get time I'll take some advanced class also one advanced class like if you there a one super interesting question for you all okay think about it like this is painted black but have you seen most of M like chipboards are green in color have you seen green green do you guys know why is this green think about it okay it is definitely not because everybody wanted like the computer scientist were wanted to be like some green part of green movement and wanted to make it environment friendly for sure that's not the reason for sure so SOA think about it right but there are interesting things to learn more so we'll we'll talk about that as we go through things so that chips can do poly synthesis maybe that might be reason CH take this will be it for then at least the recording right I hope you guys enjoyed this so I hope you enjoyed the video this was a live session that happened in the alosen premium course there's a new course starting Cod starting from 8th of June so if you're interested you can join that also I have linked down every resource that you need to like self study even on these subjects best courses notes on OS networks and all these things in the link below so you can go through that as well right so that will be all from my side on this particular video in the next video maybe we'll go back to DSN CP but I hope you enjoyed this small detour into software engineering I think this is another content that maybe we can cover on the channel if you guys enjoy it do hit the Subscribe button I mean smash it and then we will meet in the next video bye-bye