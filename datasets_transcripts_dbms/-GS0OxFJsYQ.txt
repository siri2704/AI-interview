Hello friends! Welcome to Gate Smashers The topic is ACID properties in transaction ACID properties is a very simple topic This is purely a conceptual topic Means one phenomena is there Whenever we do implementation in real life Like in today's time we are using any parties Third party Like Paytm is there Many applications we are using  To execute transactions Means payment is to be done Bill payment is to be done Or money is to be transferred BHIM app is there of government of India And we also have other 3rd party transactions So these organizations Who manage transactions We cannot see these ACID properties But all these 4 properties are used somewhere conceptually  We can also say them phenomena They are 4 major properties Atomicity, Consistency, Isolation and Durability I am saying you first only That these will not be seen in real life implementation But somewhere as a developer If anyone is working on backend Then he knows that this 4 properties should be hold If in real life scenario you are using transaction management system So how this, I will explain with point of view of Gate UGC-Net or your competitive exam point of view First of all we'll talk automaticity What is the meaning of automaticity property If we see this from a simple way Then automaticity is either all or null Means, either all or null Means if there is a transaction Let's say transaction T1 And in transaction t1 there are many operations Let's say read A A=A-50 Write A Read B Read C Many operations are there This transaction is executing many operations If transaction fails anywhere If at any point it fails Just before commit If before commit it fails anywhere the transaction Then we will rollback it What we will do rollback Means any operation on transaction Will not be executed All the operations Will be rollback This is the automaticity property Which we are telling either all or none Either all means that either all the operations will be executed Until commit After commit If anyone says that transactions failed after commit After commit no transaction can fail Commit means in database It is updated When it is updated in database Then there is no question to fail So if just before commit Transaction B fails If I take a simple example There are 100 operations And if at 99th operation also transaction fails Then over here there no pity  That my 99 were done Or my transaction was 99% done, no Whole transaction will be roll back And it will again start, when? on some other time it will again start But from 1st operation So in simple way you can say this A failed transaction cannot be resumed A failed transaction will always restart And if give you an example in real life scenario Then if you do transaction from ATM Or you do online transaction So over there you perform some operations, what? First we filled the username password If I talk about online Filled username password Selected the beneficiary You filled the amount And let's say you entered the OTP As you enter OTP your transaction fails Session is out Or internet got closed Then what do you think, when you will again start the transaction Will it start from that point only? No It will always restart Even if we talk about ATM We swiped the card Selected the language Entered the pin You also selected the amount But After that if transaction fails Then will the transaction again start from there only? Never, transaction will always restart Because we will rollback that transaction Rollback means, we have to bring it to zero You have to undo it Till last This is the meaning of Automaticity property Either all until commit Otherwise none of the operation If transaction fails at 99 also Then it will be completely rollbacked It will restart it will not resume This is not like normal downloading That you are downloading, you are downloading some movie And it is failed at 90% So you can again start from 91 Or from 90, no This is not a case of transaction Second is consistency On consistency you will get many material online material You will get offline material That this is consistency that is consistency But as we talked about atomicity In that way I am telling you about consistency Before the transaction fail Before, transaction starts Before the transaction starts And after the transaction completed And after the transaction completed Means before starting the transaction And after the transaction completed The sum of the money Sum of money Or the sum of the total money should be same Should be same How? I am telling you with a simple example A transaction is t1 What are we doing in the transaction From A account In B account Let's say we are transferring 1000 rupees We are transferring from A account ot B account 1000 rupees Initially in A There are 2000 rupees And in B there are 3000 rupees In this database The permanent database that we have Over there the value of A is 2000 and of B 3000 So when the transaction will start We have to transfer from A to B so it is obvious  First of all we will have to read A Meaning of reading A is First of all I should know that In A account There are 1000/- or not If in that there is no 1000/-  Then from where we will transfer So first of all we did read of A What is the meaning of reand of A From database  we will read The value of A What value will be read? 2000 Then we will do arithmetic operation What is the arithmetic operation? A=A-1000 Means we have done 1000/- minus from A Who will execute this? ALU It is arithmetic operation so ALU will perform this And we did write of A write of A means 1000 value It was 2000 so 2000-1000=1000 Where did this data get update? In local memory The shared memory we have RAM is there, over there the value will be 1000 But still it is not updated in database Now what we did Read of B Now we are reading account of B That in B how many rupees are there? In B there are 3000/- So in that 3000 we have to add 1000 We have to add 1000/- So after adding 1000/- Write of B So we have done write the value of B We updated What it is? 4000 We added 1000 in 3000 So what did happen? 4000 Now, where is this at present? In shared memory The local memory is there In RAM over there the value is 4000 Finally we write commit Commit means Whatever changes are there Sift them permanently in database So now in database what is the value of A now? 1000, and the value of B is 4000 So my transaction is completed So over here what is the meaning of consistency? Consistency is, when the transaction started Before the transaction starts What was the sum of the money? What was the total? 2000+3000 5000 What is the total? 5000 And after the transaction completed After the the transaction completed When the transaction completed, then the value we updated of A and B 1000 and 4000 So what is its total? 5000 So the sum of the money should be Same So the sum of both is 5000 and 5000 is same It is obvious When you do transaction from ATM Form ATM you have to withdraw 5000 And in your account there are 10000/- so you swiped the card Before starting the transaction there were 10000/- You swiped the card You entered the pin Selected the language and did everything And finally Money commenced Money came out How much did it came? 5000 So 5000 are in your account And 5000 cash is in your hand So what is the total? 10000 But if the situation is that you entered the OTP Sorry you entered the pin You selected the language And performed all the operation But in last it came that money will be commencing from the machine Noise came but no money came out from the machine So if money did not came out from the machine and you get the message That  5000 debited 5000 have been debited Then how much money you have? 5000 And you did not get the cash So it is obvious Before starting there were 10000 Now how much you have? 5000 And where are the remaining 5000? They are inconsistent, so in that case Then the bank rollbacks and your transaction is performed successfully So over here we are talking that only Consistency means before the transaction starts After the transaction completed Sum of the money should be same Third is isolation Isolation property is again very important What is the meaning of isolation property We always talk about parallel transactions Parallel transactions means Where multiple transactions are running parallely Like we did read of A Then this came and did read of B This came and did read of A Means multiple transactions are running parallel When multiple transactions run parallely Means they are interfering with each other Interfering with each other Because  CPU is switching Sometimes it is executing over here Then it is executing this Then it is doing this Then again it is doing this In this way switching is done so in this case What does isolation property says That Can I convert a parallel schedule into serial schedule Not in real time just conceptually What a parallel schedule can we convert into serial schedule? Parallel schedule means Let's say there is t1 and t2 So sometime t1 will be executed Then t2 got executed Then again T1 came Then t2 Then t1 and then again t2 That is called parallel So can I convert that first t1 will be executed Then t2 will be executed Or first t2 got completed Then t1 was completed Can I convert this into this? Conceptually On this there is a complete concept Conflict serializability view serializability When we will see that concept Then it will be more clear That what is the meaning of isolation At present just remember that isolation property means We are trying to convert a parallel schedule to serial schedule This is the meaning So what will we get from that? If we convert a parallel in serial Then what will happen? Always serial schedule Is consistent So if serial schedule is always consistent If I have converted a parallel schedule to serial Then I can say that, that schedule is consistent Yes, so that schedule will be consistent Over there when we will see conflict serializability and view serializability Then it will be more clear Last is durability So durability property means That whatever changes you are doing In database whatever changes we are doing That all changes Should be permanent Means, Whatever you are changing Let's see that we have done that example When the transaction started Then in A there were 2000 and in B 3000 When the transaction got completed In a 1000  In B 4000 So we have updated Is this update for 1 hour? For 2 hours For 4 hours No This update is not for all, means for whole lifetime Until you don't update it again It should not be like that That when you switched on the system next day Then the value of A 2000 and of B 3000 So what is the benefit So that's why Why do we save in hard disk So that we get durability Durability will be only got when we will save in hard disk Like you have downloaded movie Or you have taken a movie from your friend And you have kept that movie in your drive In C:, D: or E: any drive you have kept Next day when you switched on your laptop Or you switched on the system Then that movie is not there in your laptop Is it possible? No Because it is durable Until you don't delete Or hard drive doesn't crash That is a different case But durability means, the changes that are done That are done That is the meaning of durability These are the 4 properties Automaticity,  Consistency, Isolation and Durability In the database Thank you