whenever you want to use it as an employee table the rajes detail will not be available when we are combining and when we are joining two operation there will be some loss of data such type of decomposition is called lossy decomposition in the relational one table you may have more than one functional dependency that is represented using the [Music] XMS hello everybody Welcome to the one more session of database management system myself indu faculty of computer science department vidyashram first grade College Temple of Excellence myour today we are going to discuss about the unit three in your syllabus that is data normalization okay let's see what is normalization and why we have to go for normalization different types of normalizations are there and the reason why we have to normalize the database what is the advantage of using the normalization that all we discuss in this particular unit okay let's begin with anomalies in the relational database design what do you meant by anomalies anomalies means uh some problem that exist when we are creating the database that is called as anomaly okay why we have to remove that anomaly to remove the Redundant data in the database if the database is very large and if you have a redundant data for example if you have a student one data more than 100 times that will take 100 columns and the database size will be very large and when you are searching the record of student one so all the 100 uh rows will be displayed whichever you want you cannot specifically choose that okay that is the problem when we have a r redundancy when we have a redundancy these anomalies occur uh in different types of anomalies are there let me consider insertion anomaly deletion anomaly and uh updation anomaly these are different types of anomalies we have let's see what is anomaly first anomaly means the inconsistency occurred in the relational table during the operation performed on the relational table inconsistency occur which is not consistent one record is not as exactly as the another record so that is called as inconsistency there are three types of anomalies that can occur when database is UN normalized not normalized that is when we are doing the operation how many operations we have read write and update the the basic operations what we have so these are depends on that we have a three types of anomalies this is one is insertion anomaly update anomaly and then deletion anomaly three types of anomalies we have let's see what is anomalies okay here we have a table worker table in this worker table what exactly we are inserting we are inserting the values of rames Amit vikas and Rish how many employers or how many workers are there basically have 1 2 and three and four only four workers are there but how many rows we are having we are having 4 + 2 six rows why because this is repeated right rames record is repeated and vikas record is also repeated so this is called as anomaly having more than one copy of each so here you can see the key attribute what is that worker ID is also same that gives you a problem when you are fetching the data so this is all about anomaly let's move on to the updation anomaly what do you mean by update anomaly when we update some rows in the table and if it leads to the inconsistency when we are updating it should be updated in all the columns with the all the row wherever the particular data is present so that is what updation leads to an inconsistency of the table when this anomaly occurs this type of anomaly is known as updation anomaly for you can take an example of the previous table this is a previous table where in the B table if you want to update the address of rames okay then we have to update all the rows where the rames is present in how many rows rames is present in two rows rames is present in one row you have updated the address of rames in another you forget to update the address of rames then it causes a updation anomaly next what we have is insertion anomaly if there is a new row inserted in the table and it creates an inconsistency in the table then it is called as a insertion anomaly insertion creating the inconsistency here you can say with the table if I want to add one more worker say uh with a worker ID 0 and the name is okay with the uh department and mauru okay what if happens here I have updated one column that is worker ID I have inserted one column worker ID worker name but here I have not given any value then worker address is inserted newly but if we are not inserting the worker belongs to which department right so this type of insertion is leads us to the insertion anomaly that is what we have we create a new table new row of the worker and if it is not allotted with any Department then we cannot insert it in the table so it will create an insertion anormal when we are inserting you have to fill all the attributes of that particular record if any one attribute we are not filling that that causes the insertion anomaly next what we have is deletion anomaly if we delete some rows from the table and if any other information or the data which is required is also get deleted from the database this is called as deltion anomaly for example in the table what we have we have only one worker with the one worker rajes with the single record if this rajes is is has to be fetched if that particular information of rajes has to be fetched we have to use this if I delete this if I delete this particular row delete this particular row what happens the related all the data which is related to the rajes will get deleted whenever you want to use it as an employee table the rajes detail will not be available that is called as deletion anomaly that causes the inconsistency when employee table you have a rajish but in the worker table you don't have a rajes detail so that causes deletion anomaly when you are deleting it provides an inconsistent data that causes deletion anomaly next what we have is decomposition how to overcome from these anomalies the solution simple and the best solution what we have is a decomposition decomposition means what dividing the things okay that is what the thing the process of decomposition in the dbms help us to remove the redundancy inconsistency and anomalies from the database when we divide the table into number of table what we are doing we are doing dividing we are dividing the complete a large table into small number of tables the process of decomposition refers to dividing the relation X into either X1 X2 so on up to xn how many tables we can do that depends on N number and decomposition is a dependency preserving as well as lossless we'll see what is dependency preserving in next slide okay decomposition in dbms removes the redundancy anomalies and inconsistency from from the database by dividing that into multiple number of table so now what we have is type of decomposition lossless and lossy as name itself indicates lossless means when we are dividing the table a large table into sub tabls if you're losing some of the data of the table is called as lossy decomposition if you're are not losing any data that is called as lossless decomposition let's see what is l less decomposition so if the information is not lost from the relation that is decomposed then the decomposition will be lossless when we are dividing the table into two or three subtables the data which is present in the base table should not be deleted should not have any effect on that so that is lossless the lossless decomposition guarantees that the join operation will result in the same relationship so consider if I have a relationship uh r with the attribute a b c and d right I'm dividing this particular relation r as R1 and R2 what are the attributes I have here in the R1 R2 I have a b here R2 have a c and d so now this table one is related to the relation two how it is related using a one attribute that is a attribute when we do join operation over this join R1 and R2 it will produces what R without any modification that is a b c and d without any modification when we do the join operation it will result the same relation as it is decomposed that is called as lossless decomposition so here we have a example so consider the example employe Department table in the ab relation decomposed into two relation one is employee and one is Department how many attributes we have 1 2 3 4 5 and six attributes we are having we are dividing this six attributes into two different table in the first table what will be having employee ID employee name employee age and employee City that belongs to which table employee table and this department ID and Department name with employee ID will become one more table let's see the decomposition of the particular table that is employee ID employee name employee age and employee city as EMP employee table and employee ID Department ID and Department name as Department table here employee idea of the both the table should be same because it provides the relationship between two decomposed tables so this is a lossless decomposition okay this is a lossless decomposition because when we are joining it together using the employee ID all six attributes of the table will be displayed next what is lossy decomposition here the name suggest when the relation of decomposed into two or more relational schema the loss of information is unavoidable the loss of information is what unavoidable when the virginal relation is retrieved when we are combining and when we are joining two operation there will be some loss of data such type of decomposition is called lossy decomposition so same example with all the six attributes let's see how we are going to decompose this okay after decomposition here I have employee ID employee name employee age and location as a four attributes here I have a two attributes there are two different tables right two different table we have there is no common attribute no common attribute that provide relation between two tables that provides relation between two table because nowhere we cannot uh relate these two table okay that is we are saying that this is a loss of data this data is completely lost so it is called as lossy decomposition okay next dependency preserving what you meant by dependency preserving as it is related database we are dealing with every attributes or every tiple will be related to the other hence it is dependent on other we have to preserve such dependencies so that is what it says it is an important constraint of the database that is important rule when we are designing the database in the dependency preservation at least one decompos table must satisfy every dependency that is what the example we have given R R1 and R2 R having how many attribute a b and c R1 having ab and R2 having a c in the dependency preservation at least at least one decomposed table must satisfy every dependency which is a dependent attribute here this is a dependent attribute either one table should have the dependent attribute if a relation R is decomposed into the relation R1 and R2 then the dependency of R either must be the part of R1 or it must be the part of R2 derivable from the combination that is what we have explain in this uh diagram for example Suppose there is a relationship AB r with the attribute AB b c d with the functional dependency so functional dependency functional dependency is represented as a determines BC with the functional dependency set a determines BC that is attribute a it is preserving the dependency with the B and C attributes then the relational R is decomposed into R1 and R2 either this dependency functional dependency should be the part of R1 or it should be the part of R2 then we can say that dependency has been preserved okay next what we have is functional dependency the functional dependency that is FD is the constraint that determines the relation of one attribute to the another attribute in the database management system what is is it determines the relation from one attribute to the another attribute if I say employee ID is one attribute and employee name is another attribute it provides the functional dependency provides the relation between employee ID and employee name functional dependency helps to maintain the quality of data in the database why we have to go for functional depend dependency to maintain the quality of data in the database management system it plays a vital role to find the difference between the good and bad database creation or design functional dependency is denoted with the arrow Mark and the functional dependency of X on Y is represented by X Arrow Y how do we represent the functional dependency for E ID determines e name this how we represent the functional dependency using the arrow Mark next what we have is example for the functional dependency employee number employee name salary and then the city in this example we know that the value of the employee number we can obtain employee name City and the salary what it is saying functional dependencies of the aable employee is that is employee number determines employee name and employee number from employee number we can get the employee salary right and from the same employee number we can get the city that is how we represent the functional dependency aums is a set of interference rules used to interface all the functional dependency in the relational table in the relational one table you may have more than one functional dependency that is represented using the XMS in XM we have a minimal cover functional dependency and maximal cover functional dependency what do you mean by minimal cover functional dependency e is a minimal set of dependency F that is equivalent to e every dependency in the table F has a single attribute from the right hand side so uh this is a produces b c this is our LHS so this is our rhs right what minimum cover says that here at the rhs we should have a single value that is a single attribute for its right hand side and we cannot replace any dependency of X determines a in F with the dependency of Y determines a where Y is a proper subset of X so this is one condition at the right hand side it should have only one attribute and at the left hand side it's saying that X determines a and Y determines a we cannot do this because X is a proper subset of Y what you meant by proper subset exactly the same X is equals to Y that is called as proper subset subset means sum of values of Y is present in X that is a subset proper subet all the values of Y present in x x is equal to Y so it should not be the same and still have to set the dependency that is equivalent to F there are two condition if we want to say the functional dependency has a minimal cover first is what the right hand should have only a single attribute and the second it should not have a proper subset left left hand side should not have a proper subset of another functional dependency then coming to the maximal cover the maximum possible number of the functional dependency is a number of possible left hand side multiplied by number of possible right hand side that is rhs into LHS left hand side how many possible attributes or functional dependencies are there in the left hand side multiplied by how many functional dependencies are there in the right hand side combining together you'll get the maximal cover of the functional dependency we are next we'll move to the types of functional dependency the functional dependency in the database there are mainly four types of functional dependency one is multivalued Trivial non-trivial and transitive dependency what is multivalue dependency a determine a b c d so this is called as multivalued dependency functional dependency when it comes with the trivial determines a determines itself that is called as trivial functional dependency some attribute determining itself it is common that it is must that each attribute determines itself that is called as trivial non-trivial a determines B okay except trivial if it is determining some other attributes that is called as nontrivial transitive dependency here in the transitive dependency a determines B comma B determines C in turn what we are doing a determines C that is exactly as that of your transitive law in the mathematics that is indirectly we are see is is determined by a that is called as transitive dependency understood how many types of functional dependencies are there four type of functional dependency one is multivalued dependency rhs here we have more than one value that is called as multivalued dependency or it can be LHS AB determines C this is also a type of multivalue functional dependency then trivial functional dependency the attribute defining itself is called as trivial functional dependency non-trivial apart from itself the attribute defining one more another attribute that is called as non-trivial functional dependency transitive nothing but a determines b b determines C in turn a determines C that is transitive functional dependencies what is the advantage of having the functional dependencies functional dependency can avoid data redundancy so for what we are discussing is to remove the Redundant data so functional dependencies helps to remove the Redundant data therefore same data do not repeat at the multiple location of the database it helps to maintain the quality of data in the database it is helps to remove the redundency helps to have the quality of data and helps to define the meaning and the constraint of the database meaning and then the constraint of the dat database it help you to identify the good database and bad database design it helps you to find the facts regarding the database design functional dependency mainly help you to design how the database design should be you'll get get to know depending on the functional dependencies thank you