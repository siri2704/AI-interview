hello Learners welcome to constant Learners in today's video we are going to discuss the concept of normalization that is why do we need normalization and what is the process of Performing normalization before we begin I kindly request you to please subscribe to my channel and hit the Bell notification so that you can get notified every time I upload a new video let's get started now on the screen we have a table from the college database in this table we have the student student ID student name semester that is which semester the student is studying in the department in which the student is in the head of that department and the classroom number that is which classroom is that student sitting in all right now in this table if you notice we have two rows with entirely similar data right here student ID is 2 Mina 4 CS Etc and again here we have student ideas 2 Mina for CS Etc but is this possible no it's not because your student ID is the primary key and primary key is always unique and not null so when it is unique it cannot accept number two again in this row right so this redundancy can be avoided with the help of primary key we have already discussed primary key in detail in the previous video right so primary key helps us to prevent redundancies as well as to uniquely identify any Row in the table but has the redundancy been completely eliminated is there no repetitive redundancy means what repetitive data is there no repetitive data in this column see if you notice carefully here for IT department the head of the department is Professor Khan and classroom is 21 same thing we have inserted here right for the Cs Department the head of the department is Professor valde and classroom number is 25 and the same entry is going in three different rows right now here in our table we only have six entries that is why the data is repeating only two or three times but in case of a college database there's going to be thousands of students and this data will be repeated at least hundreds of times right so that means there's going to be a lot of repetitive or let's say redundant data in our table is it okay okay to have repetitive or redundant data in our table of course not it's going to utilize a lot of memory uselessly and every time we have to insert a new data or update the already existing data or delete the already existing data we are going to face some challenges and the database design will turn out to be inconsistent and erroneous erroneous means it will have a lot of Errors right now if you notice in this table we have two types of data first is the student data wherein we have the student ID student name semester and it also has the students Department right but then we also have the department data wherein the Department's head of the department has been mentioned and the classroom which the students of that department are sitting in right so we have two different types of data in a single table which is also not a very convenient or very good design right so this redundancy or this repetition of data can cause a lot of errors or anomalies anomalies means what anomalies are flaws or errors or inconsistencies right and these anomalies are insertion anomaly updation anomaly and deletion anomaly these three types of Errors we will face when there's a lot of repetitive data in our table right now now let's discuss each of these one by one that is what is insertion anomaly what is updation anomaly and what is deletion anomaly let's say it's the mid of the semester and the authorities are deciding to add a new Department to the college right let's say it is the electronics and communication department and head of the department is Professor patan all right and the students are going to sit in classroom 21 right so I have to add this data into our table now it is the middle of the semester no students are enrolling in the EC Department only the department has been added until now no students have enrolled in it now what can I do can I add this data here that is EC professor patan and classroom is 21 but what about these columns I don't have any student whose details I can add in this column let's say uh for this student name I have declared the domain constraint to to be not null we've already discussed Integrity constraints and I've explained what is domain constraints in that video I will link that above as well as in the description box so name cannot be null so I cannot leave this column as empty so what data am I going to insert in this column in this particular cell because I have to enter this data here I have to enter this new Department in this table but what about the name what about the student ID student ID is the primary key primary key cannot be null so I cannot leave this cell also empty what am I going to do am I going to add any dummy data here something which does not belong here no that is not possible I'm going to declare this primary key as integer so I will have to add integer only in this column right this is also a domain constraint I've decided that student ID is going to be an integer only so here I'll have to insert an integer only but can I insert any integer here 1 2 3 4 5 6 six no because this is going to create inconsistencies in our table right so this is known as insertion anomaly wherein we are unable to insert some data into our table because of the missing information because we do not have any student right now who has enrolled in the EC Department we are just adding the department there's no student yet right so this is going to be incomplete data this is missing information and because of this missing information we are unable to add this data into our table right so this is known as insertion anomaly the next one is updation anomaly let's say everywhere where we have Professor wde let's say Professor Val is being replaced by Professor Vante right so we have to update this data inside the table everywhere where we have valde it's going to be replaced by Vante now here in our table we we have only six entries but what if our table has thousands of entries and let's say almost 800 students have enrolled in the Cs Department then in that case we will have to change 800 cells of data from Val to pante right in that case it's going to put a lot of pressure on our database right and it will also result in inconsistencies or errors why because there's a possibility that uh because we are trying to change multiple entries at once it may cause some entries to be missed right so if the entries are missed if in one cell valde has not been changed to Vante then that's going to cause inconsistencies and errors in our table and this is known as updation anomaly so whenever we are trying to update some already existing data in our table and there's a lot of repetitive data then in that case it's going to cause inconsistencies in our table changing the data in one single place is far easier than changing it in multiple places so that is updation anomaly and the third one is deletion anomaly deleting data from a table unintentionally removes other data that is still needed right now in this table there is only one student in the electrical engineering department in our table right I'm not talking about the entire College database in our table there's only one single student who is in the electronics engineering department let's say that student decided to drop out right so I will have to delete this data from my table right but in trying to delete this row I cannot delete half data right I'll have to delete this entire row when I'm deleting the student ID itself this entire row is going to get deleted right so then because we are deleting this data the data about the department will also get deleted there is only one student who was in the electrical engineering department so the details about Electronics engineering department or electrical engineering department that the H OD is meas sir and the classroom is 23 these details will also get deleted right so this is known as deletion anomaly wherein when we trying to delete some kind of data it unintentionally removes the data that is still required or that is still needed all right so this is is delion anomaly now how can we prevent these three anomalies that is insertion anomaly updation anomaly and deletion anomaly now as I told you in the beginning that this table is storing data about two different things that is the students as well as the department if we simply separate these two details into two different tables it's going to solve almost all of our problems so let's say now we have split this table into two first we have the students table wherein student ID is the primary key student name and semester and this department ID we're going to discuss in a bit so this is our table student table and this is our department table now what have I done in the department table along with the Department hod and classroom number I have added a department ID which is acting as our primary key so Department ID is our primary key now to know which department our student is enrolled in we are using this this department ID in this table and when we are referencing to a primary key in another table we call it as the foreign key so this department ID has been taken from this primary key from the Department table and that is why this department ID here in the student table will act as the foreign key right now let's see how we can prevent the insertion updation and deletion an normally by separating this one single table into two different tables all right so what was the insertion anomaly insertion anomaly was this that is when we had to insert only the department details without any student details then it was causing insertion anomaly because we couldn't leave these three cells as empty but here in this case we will not have to add anything in the student table if there's no student who is enrolling in the EC Department there's only new department that has been formed we can simply add the department ID as D4 let's say we have the department name as EC electronics and communication the HD is Professor patan right and the classroom where the students will sit in is number 22 we have simply added the data in this single row and we are preventing the insertion anomally we don't have to keep anything empty we don't have to add anything in the student detail because we don't have any student right now in the EC Department we have only created a new Department right then second was the updation anomaly so let's say Professor bante is now being replaced by again Professor wde so here we had to change multiple entries when it was a single table but in this case we will only have to change this entry here only one time the department ID will remain the same so here in this table if let's say there are multiple students in the same Department the department ID will not change only the name bante will change from bante to Val right rest everything in this table will stay the same so we are making only one change in this table only one cell is getting changed there's no multiple changes there's no inconsistency in the table now right and the third one was deletion anomaly that is if we were deleting a table let's say we have another student here who is Sara she's in the fifth semester studying in electronics and communication Department let's say now Sarah is dropping out right so Sarah is leaving the college so this entire row is going to be deleted right but deleting this entire row is not going to make any change in this department table it's not going to delete this department D2 here no it's not going to affect any anything here in the department table it's not deleting the department details we are only deleting the student details from this table and that's it so the deletion anomaly has also been prevented all right so this is the process of normalization and by splitting the table into two different tables the anomalies can be eliminated all right so redundancies cause anomalies that is flaws and the anomalies could be insertion updation or deletion anomaly all right and the process to eliminate or reduce the redundancies in the data is known as normalization right we cannot completely eliminate the redundancies but we can try and reduce the redundancies in our table right so we organize the data and attributes in a way that we can eliminate the redundancies all right normalization is the process of splitting the tables into smaller ones so that we can remove anomalies in the database right it has in reducing the redundancies and ensures that data is stored in a consistent and efficient manner right it involves organizing data into tables and applying some rules so that data is stored in a consistent and efficient manner all right I hope that the process of normalization was clear now there are also some other uh techniques that we apply to prevent redundancies in our table and to ensure logical storage of data inside the database that is uh we use first normal form second normal form voice card normal form third normal form and we're going to discuss all of these Concepts in the further videos all right if the concept of normalization was clear if it helped you please give this video a thumbs up subscribe to the channel share this video with your friends and stay tuned and thank you so much for watching