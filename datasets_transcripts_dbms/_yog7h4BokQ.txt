Hello Friends! Welcome to Gate Smashers Today I am going to discuss The practice questions on SQL query Actually this topic will help you a lot For your UGC NET exam For your GATE exam Even for university level exam Because at many places SQL query questions are asked And, if I say a simple thing Then in DBMS In whole database management system If a student can get stuck somewhere Means where are the chances of a student to get stuck That topic is Queries In queries also if we talk In SQL We have subqueries topic We have correlated nested query topic Over here students Get stuck many times So that's why This video will help you That how can we frame queries If I am given a database How can we actually write the queries So over here I am taking example of employee table In employee table we have 4 columns Eid, Ename, Dept, Salary And over here I have already inserted some data First of again focus on dataset Because, on this dataset we are not writing 2,3 or 4 query We are going to write near about 7-8 queries On this topic And these whole queries We will start from very simple From absolute beginning And we will go till end End means We will go till complex queries What comes in complex queries Nested queries Correlated queries, query from source All these queries Are a bit complex So we will start from beginning We will take it to end You can say this topic as SQL queries From beginning to the end But in this video We are going to first discuss 2 questions Which are on this table only On this data only Question number 1 is Write a SQL query To display the maximum salary from employee table Means, from this employee table I want to print maximum salary Now whenever max salary, minimum salary Average, sum or count number of rows What you can use over here Aggregate function And I have already made a video I will share the link of that video in the description box You please watch that video also first So that you come to know that How do we use aggregate functions So over here which aggregate function? maximum Because we have to find the maximum salary And if you see the output Then what is the salary 10,20,30, 40,50 thousand So what should be printed in the output? 50, 000 How it will be printed Very simple query Select sorry Select max (salary) Because we are going to use the Max aggregate function Select max, whose max is to be found out Max of salary Attribute name From table From table So select max(salary) from tablename So this is simple 50,000 Output will be printed This is a simple, if we talk in layman language Then it is a very simple question But, if we extend this question a bit Extend means If we take this one level ahead Then write a SQL query To display the employe name Who is taking the maximum salary Means, Now we have to print employee name Who is earning maximum salary So if you see the output first Then who is earning 50,00 Varun So that means what should come in the output? Varun But, how will you write this? How we will write this query For that we have to Select max(salary) from employee We know that what output this is giving 50,000 So now over here we will take help of nested query Or we can also call it as subquery We will take help of subquery That inside a query we have to write one more query Nested query Select max(salary)  From employee Select max(salary) employee And outer query is Select Ename from Employee where salary= and you can write this in the brackets So this is the example of nested query Or subquery where an outer query This is the outer query And this is called Inner query Inner query So how actually this query work Whenever we write this type of query So first of all inner query will be executed One time Means one time inner query will be executed What output will it give? Select max(salary) from employee So select max salary from employee What is it 50,000 So you can assume it That use of this query is over Because what it gave? 50,000 Output So over here Select ename from employee where salary=50,000 Because we cannot directly write 50,000 If we are directly writing Select employee name from employee where salary=50000 Then it is wrong Because that query will be something else That you find the name of the person Whose salary is 50,000 But no We have to find the employee name Whose salary is maximum So first with inner query We printed maximum salary output which is 50,000 Now we will compare it with '=' operator With outside query Now what will happen Select employee name from employee Where salary Now this whole table will be compared With inner Means from employee Where salary What is the first salary 10,000 10,000=50,000 True or false? False So this is False This will not come in the output 20,000=50,000 False 30,000=50,000 False 40,000=50,000 False 50,000=50,000 Yes This is true This is how the comparison will be done From employee where salary, which means All the salary that are there That will be compared With inner query output And what output inner query has given 50,000 So as we compared this is false false false false But 50=50 true When this query will return output True Then corresponding to that true I have to find employee name So what is the corresponding employee name Varun So what output this query will give? Varun So this is how the Subquery or what we can say nested query Nested query means Query inside a query One more query inside a query As we do nested for loop Where we write Let's say for(i=1 to n) then for(j=1 to m) Means for 1 value of i j will go till n For i=2, j will go till n times Same we are doing over here What we do in nested query One more query inside a query So first of all inner query will be executed one time And it will give output And we have to compare that output with the outer query We have to compare with each and every row And what we got as true Corresponding to that true in output Employee name  Will be printed So this is how the Simple nested query actually works But, on this table Not only these 2 queries On this near about 7-8 queries we will discuss Where correlated queries Query from source And more nested queries We are going to use Thank you