whenever designing database the most important thing that you need to do is to take care of the normalization rules by definition normalization says it reduces the data redundancy and creates more table than before well database can handle more tables rather than the tables that are not in normalized forms so making more tables is much more suitable for database rather than wrong tables well the advantages that normalization brings is flexibility designs flexibility database security database is much secure with normalization because more tables are formed and there are cases when you don't when you need some information to hide from some users so so it counts in data security reduces data redundancy in a much organized way these are the normalization types we'll talk about by the way when considering normalization forms you cannot bypass the previous form means first you have to go through first normal form then second normal form and then eventually third normal form you cannot bypass the first two and directly go to third one first normal form for a table to be in a first normal form it needs two criterias two things that should not happen in this table first no repeating values in a group and no repeating groups in the table what does that mean we'll see in the example in this example of the employee table it is in a perfect form employee id is the primary key and it has values of name address and phone number so far so good what if there's a possibility when employees having more than one phone number you can write them like this by separating with the columns that's repeating values in a column and it's violating the first normal form the other possibility of writing it writing them in different columns and that's repeating columns repeating columns again violates the first normal form remember what we gathered from the definition of first normal form table cannot be in a first normal form if it contains repeating values or repeating columns repeating columns are the ones that contain almost same type of information but in different columns the solution for the problem is that we'll take out the part which is which is creating problem in this table which are the phone numbers and create a separate table for phone numbers and connect them with the relevant value which is the name in this case and then join both the tables now it's in first normal form although the tables have increased from 1 to 2 but there is no repeating values or no repeating columns database can easily handle more than one tables but it does not handle repeating values and repeating columns so we'll need to take care of that and now this table is in perfectly first normal form condition the table does not contain any repeating values or repeated columns for a table to be in a second normal form it must have three things in it it should be in first normal form no partial dependency partial dependency only can occur when there is a composite key now what is composite key composite key composite key is when there is more than one primary key column means we just cannot identify the result from one particular column in this example if we only make a primary key of student id we cannot take a record of any student conveniently because what if we say give me the result of two zero one now two zero one we cannot be sure if we are asking for one two zero ones for software architecture result or quality assurance result likewise what if somebody asked us to give a result of 205 205 is enrolled in history and quality software architecture as well so we make another column as a primary key now we can easily judge a record now the question will be give us a result of student id 201 in the course quality assurance or give us a result of student id 205 in the course of history now student id was already a primary key we have also made course as a primary key as well when there is there are more primary key columns they are combinedly called as composite key now more about partial dependency student id and course are key columns name marks and teacher are non-key columns here in this table now what is partial dependency partial dependency is when any of the non-key column does not depend on all primary key columns like here a teacher only depends on the course what course does a teacher teach it only depends on code it it does not have anything to do with student id both both are key columns here is a classic situation of the fact that non-key column is only partially dependent on on the key columns so this is called partial dependency and then when there is a partial dependency we need to we need to break that that column into another table which is only partially dependent marks and name both are totally dependent on both the keys so no need there teaches column and taken away from the main table and it is it is combined with the course column two tables and both tables does not have any partial dependency so it is now considered in the second normal form for a table to be in a third normal form it must be in a first normal form and second normal form already third normal form should not have a transitive dependency what is transitive dependency we'll see in the example now one more thing to note is that if one non-key column can be guessed from other non-key column that means it is violating third normal forms rule and we need to break the table we can go through the examples to make it more understandable in this table student id is the primary key column and name exam type and maximum marks are non-key columns from the table we can guess that if a student is opting for viva means maximum marks will be 20 student is opting for theory it will be of hundred marks and practical will be of 50 marks means we can guess the maximum marks column from exam type column and it also means that maximum marks column and transitively depending on exam type column so if some student of id 209 comes and he's opting for practical exam we'll already know the maximum marks of practical would be 50. this is the classic case of violating third normal form we will break the maximum marks column and put it in the another table now it's not in third normal form there is no transitive dependency between the tables transitive dependency is bit tricky so we'll see another example of that now mesh match number is the primary key teams ground and capacity these are the non-primary keys of this table it is absolutely clear that if the match is played in mcg the capacity of mcg is 80 000. if it's played in hobart it's 30 000. likewise the other ground we already know the capacity of the grounds so if match number 9 is played in mcg will automatically put 80 000 in the capacity column so this is again capacity table is transitively depending on ground table again violating third normal form we'll break the table taking away the transitive part of the table which is capacity putting it in another table last example for the third normal form in this table if someone's designation is manager the salary he'll be getting will be of 80 000 in the database table if there is any transitive dependency between the non-key columns we'll only break the part that is transitively depending on other part transitive dependency also occurs when there is a kind of calculation performed in the tables like in this table the amount of earning is dependent on total ticket sale multiplied by the price of the ticket this is also a transitive dependency if there are a thousand tickets sold and each ticket is of 200 then there is a earning of 200 000 so if any calculation can be performed on table it is also considered in third normal form