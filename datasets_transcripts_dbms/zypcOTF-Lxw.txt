hi everyone welcome to go classes so in this session we will study we will understand redundancies in the dbms right so we will study what redundancies are possible in different different normal forms which normal form does not have redundancy okay so basically we will understand redundancies in this lecture now let me start so this is the content of this lecture in this lecture we will study first of all we will understand the redundancy what is a redundency okay then we will see why bcnf is free from FD causing redundancies okay so basically y bcnf that is free from FD uh functional dependencies caus redundancies and is bcnf free from all the redundancy that is our question that we will answer okay so this is our uh this is our content uh for this lecture lecture number 15 now let's we start okay let's start now okay so and uh you can join this telegram group okay if you uh if you are preparing for the gate exam then for all your doubt discussions you can join this telegram group this is the username get cscore go classes okay now let's understand redundancy what are redundancies let's understand this first so first of all you tell me can a trivial FD create redundency can a trivial FD can a trivial functional dependency can it create redundancy can it create redundancy no why what the reason why trivial functional dependency can never create redundancy because they are trivial right okay because they are always available they are always present in all the relations okay because yes or no they are always present in all the relations these are trivial they will always true trivial functional dependency means they are always true they will always hold in every relation they will always hold yes or no they will always hold in all the relations so these are trivial they do not cause any redundancy so who will cause the redundancy so I can say that non trivial fds they may create red redundancy right yes or no so non-trivial functional dependency they may create redundancy now let's see with example let's try to understand this so for example consider this relation a student ID a student name date of birth state district consider this relation you have okay now let me assume that there are this is a student table right okay so let's assume this is a student relation this is a student relation okay now tell me who implies whom District or state like can I say if you know the district can you tell me the state yes or no if I tell you the district name automatically you can tell me the state name okay state name so I can can say that District okay it determines state if I tell you the district name for example if I tell you Mumbai then automatically you will tell me state is Maharashtra yes or no so you can notice that District functionally determines State okay so District determines state so this FD we have and this is the primary key right yes or no this is the primary key that is student ID this is student ID this is the primary key now in this you can notice this is a what can I say about this uh District District determines State this is a non-trivial FD correct yes or no this is not a trivial FD this is a non-trivial functional dependency now this is a non-trivial functional dependency you tell me one thing in this student relation in this relation if there are let me assume that there are 20,000 students let me assume there are 20,000 students okay let me assume there are 20,000 and uh out of these 20,000 students let me assume that out of these thousand are from thousand students are from let's assume they are from okay uh I can say they are from japur let's assume okay so thousand stents are from jaur then can you notice what will happen what will happen here so if thousand students are from jaur in this table in the student relation what will happen in the student relation in the student relation this is student ID okay and some some extra things are there some extra things are there and there's district and there is District okay and there is State now you can notice that there are thousand insur who are from japur correct who are from japur okay so there are thousand insur who are from japur thousand students are from japur okay so what will happen if thousand students are from japur then what will happen the Rajasthan this will repeat this will repeat thousand times correct yes or no agree or not so if thousand are from jaur then this Rajasthan repeats so here what is redundency for example this student is from japur this student is from jaur this student is from jaur this student is from jaur this student this student okay and so on and so on so these are the jaur students you tell me is this redundancy tell me is this redundancy is this redundancy is this data redundancy tell me is this data redundancy is this data redundant tell me is this data redundant this data is not redundant right this is a important information this is a important information that S1 is from jur S2 is from jaur S3 is from jaur S4 is from jaur this is an important information this is not redundant yes or no agree or not this information is not redundant okay you are taking from every student you are asking from where you are what is your district from every student you are asking what is your District so there is nothing redundant here what is redundant the this is redundant that after asking for the district okay you don't have to ask for the state yes or no after asking the district you don't have to ask this is redundant see this is redundancy yes or no can you notice this is redundancy why this is redundancy this is redundancy because if you know if you know that district is jaur then automatically it will come automatically this data is coming tell me is this data coming automatically or is this coming automatically which data is coming automatically is this data coming automatically or is this data coming automatically so you cannot the state data is coming automatically so I can say this is redundant yes or no so this is redundancy is this clear to everyone so what is redundancy so you can notice this is a non-rival FD okay this is a non-rival FD and in this non because of this non-rival FD because of this non-ald what is happening we are getting redundancy this data okay this data is redundant you can notice for example thousand tles okay thousand tles this data will be redundant okay and so on so thousand tles of District jaur thousand Tes of District jaur so this is the data this is the redundancy remember this is not redundancy this is not redundant yes or no is this clear so this is not redundant this is the important information that you have to record you have to record this information so this is not redundant but this this is redundant so here what is a solution can anyone tell me like what could have been the solution to reduce this redundancy to reduce this redundancy what could have been a solution so this could have been a solution that what you do okay you have to put the district yes or no of course this could be a solution you have to do this so this is not rant okay so this is what you have to ask from the student what you ask you ask only district from the student you ask only a district okay so here that is fine and you create another table you create another table where you have uh where you have District comma VAR of District comma State you create another table VAR of District comma state is this clear so you can call it another table okay for example maybe uh you can call this table R so you can create this now in this table there is no redundancy in this table one time you write jaur one time you write Rajasthan okay one time you write Bangalore one time you write Bangalore one time you write Kat okay yes or no so you can notice that now there is no redundance is this clear to everyone tell me so from the student you ask what is your district from the student just directly ask what is your District but then what you do from another table you find out the state name so now there is no dcy this is a solution I can say correct or not so I can say this is a solution so this is a solution so solution is what that is decomposition so what is a solution what is a solution solution is basically decomposition correct solution is a decomposition we are decomposing okay so that is a solution so solution is decomposition but anyway did you understand what is redundancy this is what I want to teach you okay mavi is saying we are saving one column space no a lot of space we are saving M with a lot of space we are saving thousand tles of redundancy this is th of redundancy and then you can notice there will be more redundancy because there are 20,000 students okay so there will be a lot of redundancy in this table almost I can say almost all the Tes have rency correct almost all the Tes almost all the Tes they have redundancy they have redundant data okay so this is what I'm saying and this is a solution what is the solution solution is decomposition you can decompose and what you can do so this table and this table two tables you can create two relation you can create so this is the solution decomposition but did you understand what is redundancy our topic is what is our topic is understanding redundancy did you understand what is redundancy what is not redundancy what is useful data and what is redundant data did you understand that yes or no what is useful data and what is redundant data like for example consider this data okay consider this consider this table another another example I'm taking so you have three attributes a b c and you have a determining c c determining B now okay now you tell me which of them will uh both are non-trivial right yes or no can you notice both are non-trivial FD this is a non-trivial FD this is a non-trivial FD this is a non-trivial FD and this is also a non-trivial FD which of them will create a redundancy which of these fds which FD will create rency this is my question my question is which non-rival FD both are non-trivial FD both are non-trivial both are non-trivial FD now my question is which non-trivial FD May create redundancy May create redundancy in the data May create redundency in a database in in relation R okay I can say in relation R which of them can create redundancy okay which of them may create r so the answer is the answer is only this can create only only this can create so I can say only this can create remember C determining be this this can create redundancy this will not create redundancy okay let's check it out let's check it out so you have a relation R in which you have three attributes a b c and the question is saying that a b determines C and C determines B now can you notice what is the candidate key can anyone tell me what is the candidate key or I can say what is What is the the candidate key so AB is a candidate key AC is a candidate key these are the candidate key so can I call them Super Key also of course they are super key also okay so I can call them Super Key they are super key now can you notice because they are super key they can never create redundancy this AB determining see this can never create a redundancy because it can see why redundancy is happening in this table in this table why the redundancy was happening can anyone tell me in this table why the redundancy was happening because repetion of this causes repetion of this agree or not agree or not repetion of japur causes repetion of Rajasthan repetion of Bangalore causes repetion of Karnataka repetion of one column causes repetion of another column and this is not a key so it will repeat so you can notice okay why redundancy why District why District determining State creating redundancy so this you understand why this is creating redundancy this you understand why this is creating redundency there are two there are two reasons why this is creating redundency the first is because okay because you can notice repetion the first reason is repetion of District causes repetion of State yes or no reputation of a district okay for example for example let's assume Bangalore okay for example let's assume bangaluru okay nowadays so bangaluru okay so anyway so you can notice that so repetition of District that causes repetition of District causes repetition of repetion of State yes or no so this is the idea so you can notice repetion of District if you repeat the district that will cause the repetition of State for example if you repeat bangaluru then Karnataka will repeat okay so if you repeat um uh this bangaluru then automatically Karnataka will repeat and the second point and the second Point second point it is not a super key so it will repeat yes or no second Point since district is not super key yes or no since district is not super key is not super key in a student table in the student table so it will repeat so it may repeat yes or no so it may repeat so it may repeat agree or not okay so it may repeat so these are the two reasons so it may repeat so these are the two reasons you can notice okay very simple so why this is creating redundancy why this District determining State why this is creating redundancy because repetion of district will automatically repeat the state if you repeat Bangalore 100 times then Karnataka will repeat 100 times now you can notice if you repeat jaur thousand times then Rajasthan will repeat thousand times now you can and the second reason and the second reason is this what the second reason and the second reason is this that since district is not a Super Key okay so it may repeat it okay it may definitely repeat okay so that is the reason you cannot because this is not a Super Key this District this is not a super key so it may repeat so it will cause the repetion of State also okay but you can notice in this example consider this example okay a can never repeat yes or no can you notice can you notice AB can never repeat AB can never repeat okay this will never they will they can never be same they can never be same never same okay they can never be same so you cannot this AB cannot repeat this AB cannot repeat so whatever data you put in the C whatever data you put in the C can I say even if that is that is that cannot be redundant right for example with 1 two let's assume you have three okay with 2 three can you have three uh sorry with two two can you have three yeah is this redundancy okay tell me tell me tell me tell me is this redundancy this is not redundancy because for a different data this is three for this data this is three for different data you are getting three three for example your name is Akash my name is Akash okay is that redundancy tell me your name is Akash my name is akas is that redundancy that is not redundancy right yes or no okay so this is the point that that is I'm saying so you can notice different data so they can never be same you can notice they can never be same these two Tes they can never be same so now okay so if I have for example let's assume I have uh I have four four and the data is four and let's assume I have 54 and let's assume data is four okay so you can notice this is not redundancy agree not so here here if you notice this this is not not redundancy this is not redundancy this is not redundancy okay so you can very easily see that this AB determining C this cannot create redundancy agree okay agree that this AB determining C this FD this FD okay this FD does not create redundancy does not create redundancy agree not why this does not create rency because LHS is super key because LHS is super key correct because LHS is super key so it cannot repeat the LHS cannot repeat LHS cannot repeat so okay so easily you can notice there is no redundancy okay because for a different data you are getting three for a different data you are getting three for a different data you are getting four for a different data you are getting four so this is not redundancy okay so very simple so you can notice because LSS is super key so this FD this FD cannot create redundancy what about this FD what about the second FD that is C determining B consider this FD a b c okay now what you do now you consider this FD okay so now what you do now you consider this FD where you already know a a determining c c determining B now here you can notice that this is a non-trivial FD this is a non-trivial FD correct this is a non- trial FD and LHS is not a Super Key you can notice LHS is not super key so if LHS is not super key what will happen here it will happen that if you repeat this 3 3 three can I guarantee this okay see see see see very simple okay let's assume let's assume this is two now now now now now okay if I repeat this three automatically this data will repeat yes or no automatically this data will repeat agree or not automatically automatically automatically this data will repeat so this is called redundancy okay yes this is called redundancy this is called R and remember can C repeat can C repeat can C repeat yes because it is not a super key because C is not a super key so it can repeat so you can easily see that okay because of this FD we can get redundancy because of this FD we can get redundancy of course it can be like 1 2 2 3 3 4 5 okay of course okay but the point is very simple that okay so in this in this in this relation you have a determining C also a determining C also C determining B also but you can notice you are getting redundancy so you are getting redundancy so I can say this C determining B okay look at this FD C determining B this FD causes redundancy correct this FD causes redundancy and what is the reason what is the reason it is causing redundancy because LHS is not super key because LHS is not super key okay so this is this is the understanding of redundancy did you understand redundancy so can I say non- trial FD May create redundancy right agree okay I can say non-trial FD May create redundancy but okay is it true for all type of non-rival FD can I say all the non-rival FD they will create uh they will create which which non- trial FD can never create rency which which which FD which nonrival FD can never create rency where LHS is super key yes or no so non-rival FD in which LHS is super key never creates yes or no where LS is super key that will never create redundancy okay so this is a simple point if LSS is super key so very simple point this is a very simple point that if you have FD functional dependency I'm talking about functional dependency X determining something okay now if this x is if this LHS if if this LHS if this LHS X is super key then this FD then this FD cannot cause redundancy this FD cannot create redundancy see this FD D cannot create redundancy are you getting my point this FD cannot create redundancy okay this functional dependency this functional dependency cannot create redundency okay this functional dependency cannot create redundency if x is a Super Key okay very simple so if LHS is super key then definitely this this functional dependency cannot create rcy and of course trivial so so finally okay so finally what is your conclusion who can create and trivial FD cannot create redundancy trivial functional dependency cannot create redundancy so who can create so finally I can say where LHS is not super key nontrivial FD nonrival FD where LSS is not super key where LSS is not super key these people can create redundancy okay yes or no these people can create redundency so I can say that FBS that create redundency so who are are those so fds which may cause redundancy fds which may cause redundancy okay which type of fds can cause redundancy so this type of FD where X determines Alpha okay where this is non-trivial this is non-trivial of course okay this must be a non-trivial FD and and X is not super key X not super key okay so this type of fds they may create redundancy is this clear they may cause redundancy so very simple so now you tell me can bcnf have redundancy in bcnf what happens look at bcnf look at bcnf in bcnf what happens if you see any non-rival FD every non-rival FD okay whatever non-trivial FD you take so every non-trivial FD has LHS Super Key has LHS as super key correct has LHS as super key so LHS is always Super Key okay so I can say this bcnf is free from redundancy or I say okay which two statements should I say can I say it is free from can I say it is free from redundancy caused by redundancy can I say it is is free from redundancy or can I say it is free from okay which statement can I say can I say it is free from redundancy or can I say it is free from redundancy caused by fds caused by fds caused by fds so which statement should I say can I say it is a free from redundancy this I will tell you okay this I will tell you now we will explain this now okay our our topic is this okay so this statement is not correct this statement is correct is this clear so bcnf is free from redundancy caused by fds redundancy caused by fds so in the bcnf fds cannot cause redundency someone else can cause yes or no is this clear in bcnf in the bcnf fds functional dependency they can never create a redundancy someone else can create fds can never create redundency someone else can create who is that someone else that we will study now okay so in the bcnf functional dependency can never cause redundancy fds they can never cause redundancy but in bcnf redundancy can be there someone else can create redundancy who is that someone else that we will study now is this clear to everyone so if someone ask you bcnf is free from redundancy is this true or false bcnf is free from redundancy is that true or false that is false yes or no in the bcnf you can have redundancy but you can never have redundancy created by fds because of functional dependency you can never get redundancy in the bcnf okay because of functional dependency you can never get uh redundancy so bcnf is free from 100% free from redundancies caused due to fds okay let's see this okay but three can have right 3F can have redundancy due to FD agree or not three enough can have redundancy due to FD because in the three andf the LHS may not be super key agree or not the LHS may not be super key so three andf may have redundancy due to fds but bcnf is 100% free from redundancy due to fds okay now let's see is bcnf free from all the redundancy is bcnf free from all the redundancy let's see example consider this example let's assume there are two tables I giving you two tables one table is one table is courses which student has taken which course in the real life is this many to many or one to many okay can I say is this many to many or one to many look at this course courses table you look at okay so I am giving you two tables one is courses table another is movies table in the courses table you have which student has taken which course so can I say one student can take many many courses agree or not one student can take many courses and one course can be taken by many students so this is a many to one many to many or not one student can take many courses okay and one course can be taken by many students one course can be taken by many students so you can clearly see that this is many to many relationship similarly movies one student can like many movies and one movie can be liked by many students yes or no one movie is favorite of many students and one student has many favorite movies okay so both are many to many relationship agree is there any redundancy in the in this course table in the course table do you have any redundency in the course table do you have any redundancy look at the course table okay look at the course table look at the course table where you have S ID and where you have C ID in the course table do you have redundancy any type of redundancy do you have redundancy I'm ask asking do you have redundancy any type of redundancy do you have redundancy in the course table do you have redundancy any type of redundancy tell me for example let's assume this student S1 has taken three courses C1 C2 C3 will you call this redundancy will you call this information redundancy S1 S1 S1 will you call it a redundancy will you call it redundancy no this is a useful information right that S1 has taken C1 S1 has taken C2 S1 has taken C3 this is not automatic information agree or not this is not a useless information this is not a repetion this is useful this is not a repetion this is useful similarly this C3 can be taken by maybe this C3 has been taken by S2 also S3 also S4 also so you canot this is also not redundancy agree this repetition is not a redundancy this is not a redundant data this is a useful information this is not a redundant data and similarly you can notice this is not a redundant data yes or no agree is this clear so here also no redundancy so in this table this in this table we have no redundancy in this table we have no redundancy in this table there is no redundancy is this clear in this table we have no redundancy there is no redundancy you can never have in this table you can never have redundant data so any redundancy here the answer is no correct the answer is no there is no redundancy now what you do if there is no redundancy then there is no redundancy due to FD also due to functional dependency because can you notice okay can you notice in this table what is functional dependency what are non-rival functional dependency do you have any non-rival functional dependency do you have any non-rival FD do you have any non-trivial functional dependency do you have that do you have any non-trivial functional dependency the answer is no there is no non-rival functional dependency can S ID determine CD can Sid determine CD no Sid cannot determine CD look at this so Sid cannot determine CD and CID uh CID cannot determine Sid CID cannot determine Sid you can look at this you can look at this so there is no nonrival FD right yes or no we have no non-rival FD in this so remember if there is no redundancy okay which which statement is true like no redundancy like no redundancy can I say implies no FD redundancy no FD caused redundancy yes or no if there is no redundancy then automatically there is no FD CA rcy but this statement is not true right okay this statement is not true that yes or no if you don't if fds are not creating redundancy someone else can create okay functional dependency is not creating redundency then someone else can create okay now important thing what you do so you can notice one thing that any redundancy here the answer is no these two tables I gave you okay look at these two tables look at these two tabl this table this table these two table course table movie table these two tables okay these are many to many relationship both are many to to many relationship okay here also many to many here also many to many okay now is there any redundancy in these two tables in this table in this table there is no redundancy there is no redundancy but what if we merge them what if we merge them look okay look what what what if we merge them now let's assume that see okay very simple point I want to say let's assume you have a movie you have a course table right this is your course table okay in the course table you have S ID and you have C ID let's assume this S ID S1 okay has taken two courses C1 C2 okay or maybe S1 has also taken cc3 okay so far this is useful information three tles agree three Tes and this is a useful information there are three Tes okay so I can say these These are three useful Tes there is no redundancy these are three useful Tes okay I can say three informative tles correct okay three informative t now okay what I do I also give you movies table I also give you movies table in the movies table you have S ID and you have C and your movie and your movie Let's assume that this is your this is a this is student S1 has uh three favorite movies okay this student S1 let's assume this has three favorite movies uh three favorite movies three different favorite movies he has maybe okay Lord of the Rings okay so maybe Hera fairy okay and canara or maybe tbar okay so let's assume so these are his favorite movies now okay actually these are my favorite movies so anyway so let's see anyway these are the movies so you can take okay now you can also put a here that is also very nice anyway so tell me here what will happen so there is no redundancy here there is no redundancy here you have three tles here right here also you have three tles correct so there are three tles here there are three here okay there is no redundancy here there is no redundancy here so I can say there is no redundancy here there is no redundancy here and there is no redundancy here right okay we have no redundancy and we have no redundancy okay so very simple there is no redundancy there is no redundance now you tell me if you merge them if you merge them and remember there is no FD here right correct there is no non-rival FD here there is no non-rival FD here there is no FD here okay now what if you merge them then what will happen if you merge these two table and you create the student table a student table which is a course table course table plus movie table so if you merge them basically you are merging them then what will happen then you will create a student table in the student table there will be three items there will be S ID there will be C ID and there will be and there will be movie and there will be movie Okay so so there will be S ID C movie how many tles will be there can anyone tell me how many tles will be there if you merge them I'm merging them okay no not Union can you take Union these two tables you have can you take their Union are the union compatible are the union compatible are the union compatible they are not Union compatible they are not Union compatible okay if you merge them means joining them basically you are joining them okay you are joining them so what if you join them what if you join them okay what if I join them two different tables you have and what if you join them so then what will happen then there will be okay so natural join yes or no you are doing you are doing the natural join so now how many Tes will be there now how many Tes will be there if you do the natural join there will be nine tles there will be nine tles okay redundant information you will get why tell me tell me see very simple very simple okay very simple thing very simple thing you understand this and that's it so S1 course is C1 now because of this C1 course unnecessarily see okay unnecessarily because of this course there are C1 course C2 course C3 course right so far this is correct there is no problem but what will happen unnecessarily this M1 will repeat three times this movie M1 will repeat three times yes or no this this movie M1 will repeat three times this movie M2 this movie M3 okay so this is what I'm saying can you notice can you notice that this is fine this is fine these three Tes are fine but unnecessarily this is repeating yes or no agree or not unnecessarily this is repeating similarly similarly what will happen similarly S1 s S1 S1 S1 he likes M2 movie yes or no he likes M2 movie he likes M2 movie because of this M2 mov unnecessarily again this information will repeat see this information will again repeat agree or not are you getting my point please tell me are you getting this point you are repeating unnecessarily the information now because of M3 movie what will happen because of M3 movie what will happen M3 M3 M3 because of M3 movie again the courses will repeat again the courses will repeat okay so can you notice why okay what is happening is there any connection of movie comma course do they have any connection is there any connection of movie comma course they have no connection right this movie does not care about any course this course does not care about any movie they have no connection but still what is happening because of this M1 unnecessarily this this is coming three time because of M2 also this is coming three time because of M3 also this is coming three time or you can say that because of C1 this M1 is coming see because of C1 because of C1 these movies are coming three times because of C2 these movies are coming three times similarly because of C3 these movies are coming three times so can you notice there is redundancy yes or no now you got redundancy a lot of redundancy you got agree or not redundancy a lot agree or not so for example if you have like uh just think about it if you have 100 tles here 100 tles here for S1 S1 has taken 100 courses and S1 likes 200 movies S1 has taken 100 courses S1 likes 200 movies then can you notice there will be a lot of repetion a lot of redundancy here is this clear can you visualize this that a lot of redundancy you will get yes or no so if you join them okay as long as they are separate there's no redundancy in the course table no redundancy in the movie table there is no redundancy but when you join them these two tables when you join them then you are getting a lot of redundancy you are getting okay because of this movie M1 unnecessarily this these courses are coming three times for M2 also these are coming three times so okay like this so did you understand there is redundancy did you understand that there is redundancy is this clear in the table there is redundancy but but but but but in the student table is there any FD is there any nonrival FD in this do you have any non trial FD can anyone determine anyone okay in the student table can Sid determine CID you tell me this point simple point I'm asking can S ID determine CID can Sid determine CID of course not Sid cannot determine CID CID cannot determine Sid Sid CID together can they can they imply movie Sid CID together Sid C together can they imply movie they cannot imply movie so okay they cannot imply movie agree or not so they also cannot imply movie so basically you can can you notice in this table there is no nonrival FD is this clear there is no non-rival FD we don't have any non-al FD there is no non trial FD is still redundancy is still in this table there is redundancy is still in this table there is redundancy so who created that redundancy just think about it non-al FD there is no non trival FD there is no non trival FD so definitely FD did not create this redundency right yes or no this redundancy definitely FD did not create agree this FD this FD did not create this redundancy so who created this redundancy is this point clear we will see who created but is this point clear two points are they clear that very simple simple points two points I'm telling I gave you two relations one relation was courses relation many to many relation student course student course a student can take many course a course can be taken by many students so I gave you one many to many relationship uh many to many table another many to many table I gave you one student can like many movies one movie can be liked by many students so two different tables I gave you this table this table two different tables I gave you this was many to many table this was many to many table so these two different tables I gave you was there any redundancy in these two tables was there any redundancy here was there any redundancy here there was no redundancy right there was no redundency in these two tables but if you join them if you do the natural join then you will create a third table okay in the third table there will be three attributes now there is redundancy yes or no in that third table when you join them then you are getting a lot of redundance you are getting because of every movie courses are repeating yes or no courses and movies they don't care about each other course comma movie they don't care about each other but still because of every movie all the courses are repeating because of every movie all the courses are repeating because of every course all the movie are repeating because of every course all the movie are repeating so you can notice that when you join these two tables then you are getting a lot of redundancy but there is no non trial FD in the if you join the table there is no nonrival FD so FD did not create this yes or no FD what FD will say FD will say yes or no this redundancy I did not create but there is a redundancy are you getting my point there is no non-trivial FD so FD did not create the redundancy okay but there is redundancy so who created this redundency yes or no who created this redundency so that is what we need to see so is this clear so you can notice is there any redundancy the answer is yes a lot of redundancy you have okay a lot of redundancy you have so who created this any nonrival FD do you have any non- trial FD there is no non-rival FD so what you can see see the see so who was causing this redundancy FD did not create this redundancy so who caused this redundancy okay before so who was causing this redundency yes or no who is causing this FD is not creating redundancy so who is creating this redundancy yes or no so that is what we need to see so before that you ask yourself you ask yourself why this redundency came yes or no before seeing who created yes or no before seeing who created you ask yourself why this redundancy came this redundancy came but why are you getting my point there is no non trial FD but still you got the redundancy why this redundancy came and the reason is very simple what was the reason the reason is very very simple that to many to many more than one many to many relationship you are putting in a single table what we did yes or no what we did more than one many to many relationship more than one many to many relationship you are putting in a single table more than one many to many relationship you have many to many relationship okay there is many to many relationship here there is many to many relationship here so more than one many to many relationship you are putting in a single table then who two people are fighting who two people are fighting now these two people are fighting they have nothing to do with each other they have nothing to do with each other okay this is a many to many relationship this is a many to many relationship but when you put them in single table then these two people are fighting because of every movie all the courses are repeating because of every course all the movies are repeating is this point clear to everyone please tell me so this is the reason because you are putting more than one man to many relationship in a single table is this clear let me know is this Crystal Clear see a simple analogy I can give you a simple analogy I can give you like for example okay let's assume there is a um you know have you seen the Goa movie have you seen the Goa movie so in the Goa movie there is a most of the time he has two wives okay most of the most of the time he has two wives okay most of the time okay like typical Goa movie we will have at least two wives okay definitely okay at least two maybe maybe three maybe four I don't know okay but so without two wives Goa does not make any movie so you can notice that in this movie okay uh what happens initially this will happen Okay goind is very happy with the silpa city here okay okay goind first wife wife one okay they are very happy okay and in the another song He's very happy with wife too but after sometime what will happen after sometime what will happen the problem will happen Okay the problem will happen and now actually the problem is happening between these two now the problem is happening between these two okay so anyway is this clear so same seem something this is just an analogy of course this is just an analogy actually Something Is Happening Here There is many to many relationship here there is many to many relationship here now you can notice when they are separate there is no problem right yes or no like for example when they are separate when they are separate like you have S ID okay this is your goind so goind with courses okay there is no problem as long as they are separate as long as they are separate okay movie is very good movie is humorous okay so you will laugh but what will happen but what is happening here so you can notice so as long as they are in the separate table there is no redundency you have no redundancy okay so I can say Plus movies so you can notice that there is many to many relationship okay there is many to many relationship here also many to many relationship and here also many to many relationship is this clear so here also many to many relationship and here also many to many relationship so similarly here also many to many relationship a student can like many movies and a movie can be liked by many students okay so you cannot these are many to many but the problem will happen when you when you put more than one many to many relationship in a single table is this clear tell me is this clear so when you put them in the single table now the problem is happening many to many more than one more than one many to many relationship when you join them when you join them in a single table when you put them in a single table then there will be problem okay there will be problem between these two there will be problem between these two what will happen for every movie all the courses will repeat okay because of movie one all the courses will repeat because of course one all the movies will repeat so because of every movie all the courses will repeat because of every course all the movies will repeat actually they don't care about each other okay if they are separate course and movies if they are separate in the separate table they don't care about each other they don't create any problem uh they don't create any problem but if you join them in a single table then they are creating problem is this point clear let me know let me know so this is why you are getting the redundency so you are getting redundency there is no non trial FD still you are getting redundancy okay why you are getting redundancy because you are putting more than one many to many relationship in a single table and when you do this then a new type of redundance then a new type of dependency is created see when you do this what you do see see see see when you do this when you do this when you put more than one many to many relationship more than one many to many relationship if you put in a single table then a new type of then a new type of dependency is created then a new type of dependency a new type of dependency is created that is called multivalued dependency okay so when you do this remember when you do this when you put more than one many to many uh relationship more than one many to many relationship this and this when you put them in the single table then a new type of dependency is created here a new type of dependency is created here between these two between these two between these two a new type of dependency is created here yes or no can I say can I say this a new type of dependenc is created here a new type of dependency is created between these two because what will happen because of every movie all the courses will repeat because of every course all the movie will repeat yes or no agree or not is this clear to everyone please tell me so a new type of dependency is created what is this new type of dependency what is this new type of dependency so tell me like what is this new typee of dependency is created this new type of dependency is basically saying that because of every movie all courses will repeat because of every course all the movies will repeat are you getting my point a new type of dependency is created a new type of dependency is created every movie every movie causes repetition of every course every movie causes repetion of all course repetition of all courses and vice versa yes or no every movie causes repetition of all courses so you can notice that very simple point so every movie causes repetition of all courses okay and vice versa and vice versa means every course will also cause repetition of all movies every course will cause repetition of all movies so a new type of dependency has been created yes or no can you notice this is a new type of dependency this is a new type of dependency they don't care about each other are see in the FD they care about each other right in the functional dependency they care about each other like District determines state do they care about each other District state if you tell anyone okay in the world go to the go to anyone and tell District State automatically they will tell you there is some connection yes or no automatically they will tell you agree or not are you getting my point the functional dependency has a natural connection okay if you tell anyone that uh District state so they will tell you there is some connection natural connection is there functional dependency is basically a natural connection but if you tell anyone movies and courses what they will say tell what they will say they will say there is no connection right there is no there is no dependency right so if you tell anyone movies courses movies coures there is no dependency there is no dependency but still but still when you put them together a new type of dependency is created because of every movie all courses are repeating because of every course all movies are repeating so even though there is no natural connection movies courses there is no natural connection but still when you put them together in a single table then what is happening a new type of dependency has been created now every movie is uh causing the repetition of every course and every course is causing the repetition of every movie so a new dependency has been created this is not a functional dependency right this new dependency that has been created this new dependency that has been created this is not a functional dependency right yes or no this is a new type of dependency which is called multivalued dependency please tell tell me is this Crystal Clear anyone has any doubt is this explanation whatever I told you is this Crystal Clear do you have any doubt please tell me please tell me did you get it let me know is this Crystal Clear whatever we have seen so naturally there is no connection fores movies there is no connection naturally if you ask anyone there is no connection they will say there is no connection between these two okay but still what is happening when you merge them in a single table when you put them in a single table then okay some dependency is created some new type of dependency is created this new type of dependency is not functional dependency functional dependency is very natural thing okay functional dependency is a very natural natural scenario okay but this new dependency is not natural this new dependency is called multivalued dependency okay so this new type of dependency okay this new type of dependency has been created and this new type of dependency is called This is called multiv valued dependency okay this is the explanation okay I hope you like I hope you understood everything and let me tell you that so you can notice this is the idea so when we put more than one many to many relationship in a single table you have more than one many to many relationship when you put them in a single table this type of situation gives birth gives birth to a new type of dependency which is called MVD multivalue dependency more than this we don't require for the gate exam whatever we have seen so far that is enough this MVD 4nf these things are not required for the gate exam so what we have seen that is enough more than this is not required but now you can explain right yes or no if anyone ask you what is MVD you can explain right correct can you explain very natural explanation like a very logical explanation you can give in any interview whatever interview okay if the interviewer will ask you okay tell me what are FD what is MVD a very logical explanation you can give yes or no a very logical explanation you can give to the interview that this is MVD this is FD More Than This is not required for the gate exam whatever we have seen today that is enough in this lecture whatever we have seen that is more more more than enough for the gate exam okay so understood tell me understood right yes or no correct crystal clear okay so that's it so this is your topic so you can notice uh can I say bcnf the previous table was was in bcnf is this in bcnf the student table the student table VAR of S ID VAR of CID and VAR of movie okay can I say this is in bcnf why this is in bcnf can anyone give me the reason anyone anyone give me the reason why this is in bcnf because there is no non FD right are there is no nonrival FD so there is no violation because there is no non-rival functional dependency though okay so there is no violation of bcnf so we have no violation of bcnf because there is no non trial FD so there is no violation you cannot violate the bcnf okay so I can say this table was in bcnf so this table is in bcnf it still this table has redundancy okay so bcnf may have redundancy this is the final point is this clear so you can notice are there redundancies that are not okay so you can notice bcnf is free from all redundancy the answer is no BF is from R free from redund is caused by the answer is yes okay and are there redundancy which are not created by FD are there redundancy which are not created by FD the answer is yes there are redundancy so redundancy can be created by two people now can you notice redundancy can be created by two people this redundancy can be created by by functional dependencies okay so this redundency can be created by two people either it can be created by functional dependencies or it can be created by multivalue dependencies okay now is this clear okay now so is this clear to everyone Now by fds okay these can be removed by this redundancy by fds yes or no so this redundancy by fds this can be removed by whom redundancy by FD this can be removed by if you want to remove it completely removed completely by removed completely by bcnf okay so bcnf will completely remove it so this is removed completely by bcnf bcnf will completely remove it and this redundancy by MVD this will be removed by 4nf this redundancy by MVD this is removed by 4nf okay this is completely removed by 4nf is this clear this is completely removed by 4nf every FD is also MVD every FD is also MVD nikil but that we we will not go into the details of that is this clear we will not study the details of that what we can do if you want then uh maybe in the practice course maybe we can take some questions okay maybe I can give you the definition in the practice course okay but it is not required let me tell you not at all required okay this this 4nf MVD multivalue dependency these things are not at all required for the gate exam okay not even 0.001% this is not required so my suggestion is skip this okay this is my suggestion okay but still if you want that okay sir just give us the definition by chance some question comes okay just give us the definition of MVD okay then uh then maybe in the practice course we will see but that is not our priority okay this MVD forf this is not our priority okay we will if we have time at the end okay then maybe we will but anyway you can skip this is this clear so whatever we have seen that is enough you understood this right see without like whatever we did not see forget about that whatever we have seen did you understand it completely whatever I told you in this lecture in this lecture whatever we have seen every concept that we have seen every logic that we have seen did you understand that logic completely in a crystal clear Manner and can you explain this to someone like if someone ask you can you explain it to someone in a very Crystal Clear words okay so that is enough now let's move on so you can notice are there redundancy that are not caused by fds and the answer is yes a new form of redundancy a new form of dependency is it possible to have redundency without any non- trial FD yes this is it is possible okay so another example you can take this but I leave this question to you for example another example is this like CID and instructor okay this is many to many relationship one course can have many instructor right yes or no one course can be taught by many instructor like when you go to I Bombay ISC I Delhi okay when you go to top colleges then what will happen same course will be taken by uh two or three Professor okay the first half will be taken by some Professor the second half will be taken by some Professor so so same course will be taken by multiple professors okay it is also possible that three professors okay it is also possible so multiple professors will take the same course okay for example let's assume you take the dbms course in the in the ISC or I Bombay okay then what you can do the the first will be taught by someone some other professor and the remaining half will be taught by some other Professor so basically like combinely professors they will take the take the course okay so anyway here you can notice what happens that so one course can be taken by many instructor and one instructor can take many courses so this is a many to many relationship similarly similarly this is also many to many relationship okay similarly you cannot this is also many to many relationship one course can have many book and one book one book can be used in many courses so these are many to many relationship okay any Rundy here the answer is no there is no redundancy here but if you merge them if you merge them okay what if you merge them then redundency will be created okay then redundancy will be created if you merge them then redundancy will be created okay you can check it out so if you merge them then what will happen if you merge them then what will happen it will happen that because of every instructor okay the books will repeat yes or no because of every instructor because of every instructor for example because of every instructor all the books will repeat are you getting my point because of every instructor all the books will repeat B1 B2 B3 all the books will repeat similarly because of one book one book all the instructors will repeat because of one book all the instructors will repeat okay like I2 I3 so this is the I can say this is a redundancy again you got the redundancy okay here you canot again you got the redundancy okay so a lot a lot of redundancy so you got a redundancy okay this is another example the same example we have already seen so you can notice okay why we got this redundancy the reason is very simple tell me can anyone tell me why we got this redundency why we got this redundency because we are putting more than one many to many tables in the many to many relationship in the same table yes or no because because we are putting more than one many to many relation ship in the same in the single table okay more than one many to many relationship in the single table okay so that is enough so MVD 4nf multivalue dependency 4nf these things are not required for the gate exam okay so whatever we have seen that is enough that is more than enough that's it this is your chapter can you answer this question can you answer this question tell me the answer for this can you answer this question once you go to IIT ISC the understanding every course is not the purpose okay it's not like you have to understand everything like for the gate preparation you have to understand every concept okay you will focus on every concept every question you will solve many questions you will do a lot of practice for the gate exam preparation but once you go to IIT ISC uh they are basically uh the scenario is very different okay so the the scenario is very extremely different okay so anyway so let's see this let's see this question so this is a gate CSC 2002 question and the question is saying that relation r with an Associated set of functional dependency f is decomposed into bcnf you are decomposing into bcnf okay so you decompose into bcnf the r redundancy arising out of fds the question is asking the redundancies due to fds that will be zero right yes or no the redundancy due to fds that will be zero the redundancy due to fds that will be zero there is no redundancy in the bcnf nikel there is no redundancy in the bcnf in the bcnf in the bcnf there is no redundancy due to FD due to FD because of functional dependencies there is no redundancy in the BCF so the redundancy will be zero okay yeah this is f closure okay this is closure of f f f plus means F closer okay so more than zero no this is not more than zero more than three no of course less than three enough yes of course less than three enough basically it will be zero there is zero uh there is zero redundancy because of fds because of functional dependencies there is zero redundancy okay so this this is your table uh sorry this is your chapter now the chapter is over because of MVD what will happen if the same question is asking about the FD uh if the same question asks you about rcy let's assume if the same question ask you about redundancy if the same question asks you only about redundancy only about redundancy then what will happen Okay so now it will be more than zero it will be more than zero okay but less than three and half it will be more than zero but less than three and half is this clear tell me okay so the uh because of FD there will be no redundance because of FD there will be no redundancy so definitely less than three and definitely less than three and right yes or no because three and can also have this three andf can also have FD uh this three andf can also have this three can also have uh redundancy caused by fds redundancy caused by fds okay so definitely less than this but more than zero okay so that will be your answer what is f+ f+ is closer of FD we already know what is f+ f+ is closer of f closure of f set of functional dependency have we seen this concept nikil you have set of functional dependency can you find the closure of f can you find f+ nikil f+ you have set of functional dependencies f is set of functional dependencies we have already seen how to find closure of f if you have set of functional dependency you have set of functional dependencies F you can find the closer also you can find the closer also you can find the minimal cover also you can find the closer also you can find the minimal cover of f also so both we have already seen this we have seen this we have seen for this we have also done the questions of ulman yes or no do you remember we have done the ulman questions anyone remembers it we have done man questions okay so anyway now let's take a small break after the break we will start the next session okay MVD is not FD FD is MVD MVD may not be FD M mavit every FD is MVD but MVD may not be FD okay it's like MVD superet of FD MVD that is superet of FD that covers FD MVD will cover FD but anyway don't worry about okay so let's take a uh yeah after the break we will see three and and bcn of decomposition after our class compiler class will start okay so in the next session we will finish this 3 and of bcn of decomposition okay so let's start in five minutes is that clear in 5 minutes we will start okay thank you everyone