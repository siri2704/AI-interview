we have seen examples now of subclasses that were either disjoint or overlapping from a single superclass but now it's time to turn our attention to categories or union types this is when an entity type has more than one superclass so let's get into it before we discuss the union type let's talk about accounts that we may have seen before called a shared subclass a shared subclass is a subclass that is in more than one superclass subclass relationship let's take a look at engineering manager the engineering manager has three distinct subclassing relationships the engineering manager is a subclass of a salaried employee that's how the manager is paid the engineering manager is a subclass of manager that's its role and then the engineering manager is a subclass of engineer and that's its job type notice that each one of these pitchfork relationships is for a single super class and we talk about this as having multiple inheritance what that means is that the engineering manager must have all the fields of an engineer it must have all the fields of a manager it must have all the fields of a salaried employee and the engineering manager must exist as a record in all three of its superclasses this is why we say for shared subclasses that a shared subclass is a subset of the intersection of its superclasses so if we have to hank who is a salaried employee and he's also a manager and he's also an engineer then hank can be found in this superclass overlap right there in the center so in this case hank the engineering manager has to be present in all three of those super classes this is what it means to be a shared subclass and notice that i'm using the expression boolean and to describe it because you must be an engineer and a manager and a salaried employee and how do we interpret those pitch forks coming from engineering manager we say that an engineering manager is a engineer an engineering manager is a manager an engineering manager is a salaried employee the engineering manager at one time is in fact all three in this example we're going to explore this relationship here between owners and registered vehicles and so we have an owner who owns registered vehicles and we have these different attributes but owner is a subclass we can see that with the pitchfork but it's a subclass of a u and the u stands for union and that means that it will have multiple superclasses so in this case the owner of a vehicle could be a person or it could be a bank or it could be a company like our previous example owner the subclass has three super classes person banking company previously we saw an engineering manager had three super classes as well the engineer the manager and the salaried employee but there's a big difference the engineering manager was at the same time a member of all three super classes but not so the owner the owner is a subclass of the union of those entity types what that means is you take all the persons in your database you take all the banks in your database you take all the companies in your database and the owner of the registered vehicle has to be one of those so it will not be simultaneously all of those it will be in fact one of those so the pitchfork to the u is an is a an owner is a union of the three super classes but at the moment we compare owner to any one of those super classes we need to change their relationship to could be so the owner of registered vehicle 27 could be a person or it could be a bank or it could be a company but we know that the owner is a member of the union of all three of those sets similarly a registered vehicle is a subclass of the union of two super classes car or truck this does not mean that a registered vehicle is a car and is a truck it is a member of the union of those so a registered vehicle is either a car or a truck what you could say here is a registered vehicle could be a car or it could be a truck this is why we say that for the union types we're dealing with boolean oars when we talk about the super types sometimes it's actually hard to determine if something is a subclass or a superclass so if we look at our registered vehicles we can see here that a registered vehicle could be a car and it could be a truck the pitch fork is pointing down to the two subclasses and the pitch fork is still red is a but you could also say well we used this joints before you know a car is a registered vehicle and a truck is a registered vehicle so maybe maybe it goes this way so the question is what are the super classes is the superclass car and truck as the union representation would have you believe or are the super classes the registered vehicle as this disjoint would have you believe so i think you have to ask yourself the question about really true subclassing if i were to say a registered vehicle is a subclass of the union of a car in a truck either a car or a truck that makes sense um i can say a registered vehicle is a or is either a car or a truck but this way if i said a car is a registered vehicle that's a false statement because if the car is not registered then the car is not a registered vehicle so we instantly begin to see that this subclassing is not correct similarly a truck a truck might be a registered vehicle but this pitch fork is is a and a truck is not necessarily a registered vehicle not all trucks are registered vehicles but all registered vehicles are either cars or trucks so the union representation is correct and the disjoint representation is false and so the superclass remains the car class and the truck class again the same thing applies when we look at the owners you might be tempted to say well a bank is an owner a company is an owner and a person is an owner and so therefore these these relationships are correct and owner is the super class but until you realize that it's not really a person is an owner just because you're a person doesn't mean you own anything and just because you're a bank doesn't mean you own a vehicle so these relationships are not is us all of these pitch forks really we could be a a bank could be an owner a company could be an owner a person could be an owner so none of these are true subclassing so it is not a disjoint model but it is fair to say that an owner is a member of the union of persons banks and companies if i applied that pitch for directly to the super classes the three super classes i would say an owner could be a person an owner could be a bank and it could be a company but absolutely an owner is a member of the union of those three super classes so in this case the union representation is correct so the question is how would you model this in the physically in a database well you would absolutely make a table for the super classes you have a table for car and you have a table for truck you don't want a table per the class hierarchy is where you're going to smush too much together cars and trucks are distinct things so each of these two super classes deserves its own table and then similarly registered vehicle would also be its own table so this is sort of the way you would do the joined subclass modeling of a disjoint relationship you would have three tables a car table a truck table and a vehicle table in order to link them together the the registered vehicle table is going to have a vehicle id so you will put a vehicle id here and then you would repeat that vehicle id in the car and in the owner so that way the superclasses were linked to the subclass similarly up top you would have a table for each of the super classes you'd have a person table you would have a bank table and you would have a company table it does you no good to smush those into one single superclass so every superclass gets its own table and then the subclass of owner gets its own table and then up here in a very similar fashion you would need an owner id and then the owner id could then be repeated up here so each of the super classes would be connected to the subclass now what's going to seem a little strange to you guys is that when i model the owner entity type in the database it may only have one field the owner id the registered vehicle at least has two fields it would have the vehicle id and the license plate number but it might seem strange to you to have a table like owner that only has one field that's because the owner table the subclass table is the table that's in a relationship with registered vehicles in order to preserve that we need to have a table just for owner even if all it has is the owner id and so this is how you model union data types you don't come across these as often as you do the other forms of ee or diagramming but it's important to know the difference and it's important to know how to interpret an eer diagram with a union