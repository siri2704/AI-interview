hi this video is about normalizing a database uh from normal forms 1 two three and four uh for the example I mocked up an imaginary company that sells video game consoles uh some of their products are Xbox One from Microsoft PlayStation 4 from Sony and the handheld PlayStation called PlayStation VA from Sony and they also have uh two newsletters one is for Xbox One new releases and one for PlayStation for new releases signing up for these newsletters is optional it's not tied to any purchase uh member can sign up for either one of these or both of these or none of these at will uh it doesn't matter so these are some of their sales records they uh currently keep track of customer name the item purchased the shipping address what newsletter this person signed up for what is the supplier of the item and what is the phone number of the supplier and what is the price of the purchase so they have uh someone named Ellen Smith these are just imaginary items uh but anyway there somebody named Ellen Smith he bought an Xbox one he lives in Miami Miami he subscribed for the Xbox newsletter the supplier for the Xbox is Microsoft and their phone number is800 by Xbox and the price was 250 the next uh person bought named Roger Smith he bought a i Mr Roger Banks he bought a PlayStation 4 he lives on campus Road in Boston he subscribed for the PlayStation news that was supplied by Sony their phone is by Sony and the price of that was 300 um the next person Evan Wilson he bought an Xbox One and a PlayStation V he lives in Denver he subscribed to both newsletters and the supplier it says wholesale and the supplier phone number it says stf free this is what somebody entered in here and the total price was 450 and there's another item uh named Ellen Smith it's the same as this at least the name is the same this person bought a PlayStation 4 he also lives on campus Road in Boston which is the same address as for this person Roger Banks he subscribed for PlayStation news Sony by Sony and the price was 300 uh and the color code just ignore the color code there's no meaning to that it's just for visual C so anyway these are some of their sales records and I'm going to normalize these so first normal form and the criteria are each cell to be single value so Xbox one and PlayStation V occur in the same cell so is this so we have to eliminate that uh entries in the column are the same type so this one says wholesale and tollfree here these are not the same these are not the proper values so we need some kind of a entry here that matches these it would be like if let's say this field would be eye color and someone put like uh I don't know blue or green and beautiful well beautiful is not a color it's an opinion so we need some kind of a actual entry we can't we can't let this be in here uh also rows uniquely identified either add a unique ID or add more columns to make the rows unique well these rows there's no duplic in these roles so they unique in a way but there's still um a question about this Ellen Smith well this campus Road in Boston happens to be a housing for a college so this this Roger Banks rents a house while he's in college and alen Smith also rents the same house with them they rent it together uh so they have the same address while they are in college so the question is now is this alen Smith from Miami is going to college in Boston and this is the same guy is just now this is his address or they are completely different people from this table we cannot figure that out so those are the issues so this is uh the table in first normal form so each cell to be single valued so the Evan Wilson these two items was separated out to two separate rows one for Xbox one and one for PlayStation VA notice this this has four rows here and this has now five because he made two purchases in one transaction so that takes care of that entry and the column are the same type well wholesale and tollfree was replaced with the proper values so now we don't allow entry of just random values in here they have to be filled out properly and the rows must be uniquely identified so uh these people are made to create some kind of customer ID that they can sign up uh sign in to this website so this person his name happens to be Ellen Thomas Smith so he created a user ID at Smith Rogers bank has Roger 25 Evan Wilson is Wilson 44 and this person his name happens to be Ellen Michael Smith so his his uh user ID is am Smith so now we know for sure that these two people have nothing to do with each other and now we can uniquely identify each of these customers okay second normal form all attributes meaning non-key columns meaning these these white ones uh dependent on the key which is this one this red so which one of these don't depend on the key well let's see how about the price so does the customer ID determine the price in other words does the price depend on who buys it and the answer is no no and doesn't matter who buys an Xbox One the price will be the same when when alen Smith or Evan Wilson buying the price will be the same so the the key in the table doesn't determine this so we have attributes meaning columns that don't depend on the key so those have to be separated out so what I did is I take the customer ID the name the shipping address and the subscription into one table and then I take the item which becomes the primary key in the other table the supplier supplier phone number and the price into another table and obviously I'm only going to list one item one time uh so now the price the supplier and the supplier phone and the supplier depend on this because Xbox one has Microsoft to supply this is their phone number and this is the price and this customer has this is his name this shipping address and this is what it's subscribed to obviously this person subscribed to two so he's in here twice so this is great the only problem is we lost the transactions we don't know who bought what so for that uh there needs to be a a table called a junction table which is this uh and basically these in this table these are both of these are a key this is called a compound key because it's made up of two columns and now these entries from at Smith bought an Xbox One is over here so this guy bought this a Roger 25 bought a PlayStation 4 Wilson 44 bought Xbox One and the vaita and am Smith bought the PlayStation 4 so the transactions are here and now this and this are lookup table so basically am Smith bought an Xbox one who's a I'm sorry at Smith who who is that guy well his name is this he lives here and he subscribed to this what's Xbox One Xbox One is Supply by Microsoft this is how you buy more of it if you run out and this is the price so this is not in second normal form because every every attribute depends on the key we separate them out great third normal form all Fields meaning columns can be determined only by the key in the table and no other column okay so what can be the problem here well the problem is that Microsoft and the buy Xbox phone number always goes together the Sony and the Buy Sony phone number always goes together it even says in here this phone number is never going to go with Microsoft and this phone number is never going to go with Sony so in the item table if we if the only thing we would know is Microsoft we already know that this is the phone number or if we know Sony well we know it's going to be this the phone number so obviously we need to separate it out also because these phone numbers keep repeating if I would add more items here like a camera for PlayStation a camera for Xbox controller blah blah blah you would notice that Microsoft Sony Microsoft Sony and their phone numbers keep repeating so if I would change if I would have to change the phone number I would have to change it in a lot of different places is and that's not it's not normalized properly how about here uh can I figure out let's say the address from the customer name well Alan Smith there one customer name there's an address from Miami let's see there's another address from Boston so I guess there is no one toone relationship how about backwards let's see campus road goes with Roger Banks it goes with h so I guess there is no one one to one relationship between the name and the shipping address newsletter well that's definitely not going to happen because a person can sign up to multiple newsletters and multiple people can sign up to the same newsletter so there there's not going to be uh the same relationship as here we can't just separate it out just yet so what I did is basically separate this out this for now is going to going to remain unchanged but this is separated out so I would remove the the phone number column in here so now the item uh is supplied by Microsoft and it's 250 but the phone number is listed here so now if I need to change the phone number for either one of these I can I can do it in one place and not there's no redundancy and obviously the supplier is now its own primary key in its own table and is a foreign key in the item table and the forign key simply means that in here you can only enter values that appear here if it's not in here not in this table you cannot put it in here let's say if you want to put put in supplier Revlon or L'Oreal or something like that those are not those Supply cosmetic products or whatnot so they if you don't sell those you can't just enter in here it has to be in the supplier table first before you can put it in here that's what the foreign key means okay so now all columns can be determined only by the key in the table and no other column um well this side is done for sure there's no no further way to normalize it there's only this side left so forth normal form no multivalue dependencies well what does that mean what's a multivalue dependency it's basically this this field depends on the customer ID this address depends on the customer ID and the subscription depends on the customer ID so these are all dependencies of the key however there's still a problem as you can see Evan Wilson is in here twice with the same address because he subscribed to two different newsletters so if he would change his address I would have to change it two places or what if he would unsubscribe to this thing then then what do I just put a nle here or try to decloe my database uh because now I have uh two entries or what if you unsubscribe for both of them then I'm going to have two nules and two of the same values or same thing if if this person signs up for the new the Xbox newsletter I repeat his user ID and the customer name and shipping address just just basically like you either leave it as n or just randomly repeat it because what are what are you going to put there so the multivalue dependency is a situation where one column can have different values a different amount of values than let's say the other column for example in this database I didn't allow multiple shipping addresses per customer every customer has one shipping address but they have multiple newsletters but in real life let's say if you have an Amazon account you can have multiple let's say credit card numbers on file and the checkout at checkout you choose which one you want to use and you could have multiple shipping addresses one for home one for work so for one person you could have let's say two shipping addresses and four credit cards well how do you make a proper table out of that the amount of rows in this column is not the same as in this column let's say for example I would have one shipping address and two credit cards and then I would add another shipping address what would I put in the credit card field just randomly select one of them you see how that's that's a situation where you have these fields depend all on the key which is called the multi dependency but there's different amount of uh values that can be put into each each row I mean I'm sorry in each column uh so obviously at this point this needs to be separated out and what I separated out is the customer ID customer name and the shipping address is going to be one table and the newsletter and the customer ID will be another table this these remain the same so as you can see now every customer only appears once Wilson 44 was eliminated twice because we don't need that so now if I need to change his address he's only in here once I don't have to change it twice and these are his subscription he's in here twice so if the query that Returns the uh who what kind of newsletters need to go out we'll return him properly because he'll be in here twice if this person signs up to another one he'll be in here twice and the query will return it accordingly or let's say Roger unsubscribes he'll be removed and the query that Returns the newsletters will not uh return his name but he address will be still intact here no problem um these are the relationships between the tables and and also um gave the tables names because now I know what they are so this means this one too many this means the customer appears in this table one time but in the sales invoice table he will appear multiple times uh an item will appear one time in the items table but will be sold multiple times uh supplier will appear one time but can supply multiple items and the customer will appear one time here but he the person can have multiple subscriptions or not at all none at all so now this table is fully normalized and thanks for watching