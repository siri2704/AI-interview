hey everyone this is Shashank Mishra currently working as data engineer 3 at Expedia and in today's video I will be talking about basics of SQL with its practical implementation so before starting the video if you are new to the channel then make sure to hit the Subscribe button and press the notification icon also if you want to keep learning from leading industry experts then make sure to check out scalar's event page link is in the description so now let's get started so to start with the basics of SQL first we will try to set up the environment in our local machine and to our implementation part we are going to use the widely used transactional database which is MySQL so first let me show you how you can set up environment related to mySQL in your local machine be it Windows MacBook or any other laptop desktop you are having we can simply download it from the mys cable Dev this environment and we can set it up very easily in just few steps so what you need to do you can open the web browser and simply type MySQL workbench and after that you can mention your machine name directly if you have Windows or Mac whatever it is and simply click here and after that you will see this link dev.mysql.com simply click on this URL and here it will redirect you on the respective machine environment you have the operating system and even you can select it directly from here if you have Windows machine you can simply toggle onto that option and here it will provide you this option to download the respective jar files or any kind of libraries which can help you to set up this workbench so I am using Mac OS so I'll just click on here and then I will download this dot DMG file I can simply click on it and here it will ask for the login or sign up no need to do that simply click on this no thanks just start my download option and it will start downloading this package which we can see here and once this download part is done it's just all about the double click and that dot DMG file will directly install this my SQL workbench in your system so here as we can see we have downloaded this one and since this MySQL workbench is already installed in my system uh no need to do that again so I'll directly show you how you need to proceed on the MySQL workbench how it looks like and how we can perform different operations so let me go there cool so after installing the MySQL workbench it's it will look like this its environment or it completely provides you the ID sort of environment where you can write your SQL commands also once you will start setting up MySQL workbench in the local it will ask you for root user and password which you can set up accordingly because this MySQL workbench also provides you MySQL instance because this is a background service which needs to keep on running in the background so as soon as you start the MySQL workbench from your machine right you need to provide the password you need to provide the username and then it will simply start it and after that this is how the interface will look like and after that I will guide you what are the meanings of these keywords which are written here and what all operating questions we will be performing and how we will be performing so first part is the databases so when we talk about transactional databases or database management system so MySQL is what MySQL is actually a database management system which provides all those kind of environments where we can manipulate the data by using some query language and typically used like the SQL okay so first let me show you how we create the databases and what is the meaning of schemas here so that you don't get confused because the common keywords which are used across different databases that is database itself and there will be different databases where this keyword might get changed like key space schema so I don't want you to get confused with these terms so in the MySQL workbench the meaning of schema is very simple it is just like creating a different folder inside this ID itself and inside that one we are creating different different databases so that is the simple meaning and you don't need to do any sort of custom settings here as soon as you start exploring it you can definitely tune those settings but by default whatever interface it will provide it's good to go you can execute your SQL commands queries everything so first and very basic thing how we create the database in SQL what's command we will be following so the very basic thing you can see right these are the databases which I have already created for testing purpose like demo DB sys is something which comes by default because this is what this is a software itself this is uh you can say workbench or it needs to is store some metadata right whatever things we are creating whatever commands we are executing so some default tables right as a root user will be set up which different user cannot delete which different user cannot manipulate all right so similar thing we can see these are these are the default databases like says but this demo DB test to test DB test DB1 this is something which I already created but here we will create a fresh one so what's the command for that one create database and we can give a database name here so for that one first demo okay so you might be wondering how to open this notepad sort of file here so we can click on this one this left option in this menu bar right plus symbol so what it will do it will open a new SQL file like this is a blank file which you can see all right and this one which I already opened and I have placed these placeholders so that we can follow a proper sequence of SQL commands and you will be also able to relate it how these things are executing step by step so create database first demo and now how to actually execute it okay so just select this portion from here and click on this thunder kind of symbol okay so if I click on it then here in the logs you can see this log has been printed how much time it has taken or if it's a green check symbol that means this command has been executed successfully by chance let's say this command was supposed to be failed then we will also get a proper error message so that we can debug it and we can fix it so here since it's successful right now at this moment we are not able to see this database in this left panel okay so what's the reason sometimes it needs to keep on refreshing itself so what you can see you can see this refresh symbol in front of this schemas keyword so just click on it and after that it is easily visible to you this database has been created first underscore demo and if I expand it then you can see multiple options are there tables views stored procedures functions so this category is basically to provide a hierarchy in this ID itself so that let's say we are creating few tables inside a database as soon as we will create it those will be visible here with the column names and its data type all these kind of metadata information will be mentioned here so after creating a database we need to look at the command that how to use it because different tables will be created inside different databases so what's the command to go inside a database for that one we can write use database and here we need to mention our database name itself no need to use any database keyword simply use and mention the database name and if I execute it right this command is also successful now we are inside the first demo database and if you have observed there are multiple databases but when I clicked on it when I executed it this is something which is now Focus area right the Bold section on the ID itself so this is the cool part I would definitely say now we have created a database we have seen the command how to use it let's look at how to drop a database as well dropping a database let's say earlier we were doing some stuff for our testing or development now that database is not in use how to actually delete it completely okay so for that one we can use the command drop database and database name okay if I execute this one so since I have created this fresh database I don't want to delete it what I can do for my testing purpose I can delete any existing database let's say I am trying to delete test underscore 2 which I created previously so test underscore 2 let's execute it okay now you can see this is also successful and as soon as I execute it it is removed from this left panel as well all right so the database creation part is done now we will move that how to create the tables inside a database okay we created it we used now we are actually inside our first demo database so this is the command to create a table in the database these are the keywords which we actually need to follow like create table okay and after that we need to mention our table name so each table in these kind of transactional databases is like a row columnar sort of data okay so column name just like a variable which will have its own specific data type so when we create the tables in MySQL databases we need to provide few informations so if you look at this entire command this is a command we will be using to create a table so after providing the table name inside the parenthesis these parentheses we are mentioning different different column names right and after that we are mentioning the data type then we are mentioning few keywords which you might be wondering what is that and what is the reason to use these things for example not null right then this is the keyword default okay and this is another keyword primary key so let's try to understand one by one what kind of sequence we need to follow so first we need to mention the column name and after that we need to mention the data type so different type of data types available in mySQL database if something some column which is supposed to hold the spring type of value it should be named like this where char so when we Define the data type as wire chair so by default it will pick some length but if we want to customize this length for example this particular column will hardly take 10 characters so we can simply mention this thing right and let's suppose we have different data types for example integer values float values double values the date type of columns so those type of data types are also available next thing these are the keywords actually used to define the Integrity constraints so when we talk about the transactional databases one of the important property is the consistency part and we can keep the things consistent when we apply some rules and that is something which is known as the Integrity constraints in the transactional databases and I have created a similar video on scalar's YouTube channel related to this topic and it's a long video where I have covered all the database management related fundamentals so you can check that video here so talking about the Integrity constraint not null and default is another type of Integrity constraint let's say you have defined a column and while inserting the values let's say somebody is inserting null value okay and value is actually missing from that insert command so by default we don't want to keep this column empty so what we will try we will try to mention some default values so that if somebody is providing null sort of values this value will be populated with that particular default value that is the reason of this Integrity constraint and similarly you can see not null is is something which has been used multiple times so this constraint will prevent any kind of insert command which is trying to insert the null values and that is the reason these rules keeps our database tables properly consistent this keyword is something which is very much important when we talk about the transactional databases the concept of keys is super duper important and one of the you can say most asked interview questions as well like what are the fundamental of keys and why it is very much important so the fundamental of keys plays a vital role in the data anal text databases because when we try to keep our databases normalized different different tables will be created right and if there is no way to connect those two tables together then it would be hard to do the data analytics or to perform any any kind of database related operations and that is the reason there are two main things with respect to the Keys first is primary key and second is the foreign key so let's understand what is primary key it is like a key element which we generate in front of each row or you can say a combination of columns we can use from the table which we have created and it is uniquely providing the identification to that particular record overall what we can say this is the mechanism or this is the keyword let's say we have a specific column in our table for example employee ID for each employee in an organization they will be having a different different unique identification numbers right even two person having the same name they might not be having the similar employee ID right so that is the same thing ah it will help us to uniquely identify a record from a table second you can see this is another table we have defined and it is like employees this table we defined for the offices right here we are following same kind of Integrity constraint but another thing which I was talking about the foreign key concept so concept of foreign key is like we can understand with a practical example right if somebody is visiting our country from different country we call them foreigners right because they are the primary citizens of their own country but they are traveling in our country and just sort of reference so same kind of concept if we have more than one table and there is a key attribute which is a primary key of another table and we are referring it into our table to establish that kind of connectivity which I was talking about so in that case we will be using this foreign key Integrity constraint so how to declare it this is the uh syntax we can follow like constraint name so this is the Integrity constraint for each Integrity constraint we can provide a unique name so that moving forward if we want to add more Integrity constraints we want to alter it or we want to drop it we can easily do that so first we declare the name for this Integrity constraint then foreign key keyword this column office code is something which we are referring in this employee table and you can see in offices table office code is a primary key right and that is what we are trying to establish this kind of connectivity means references so in employees table office code is present here and to establish that connectivity we need to tell in this create table command that this column is present in which particular table as a primary key that's what we have done here so let us execute these commands one by one and we will be able to see these two tables inside our database so I have selected it and as soon as I execute it you can see this is successful and if I just refresh it then you can see one Arrow sort of symbol has been created and if I expand it you can see offices table has been created now if I expand it further right you will see this thing this option for the column so here office code is there City phone address line one address line two State country postal code territory everything has been created all right this is done now let's create this part as well so I have executed this command this table has also created and if I refresh it we can see employees right so if I expand it all these columns have been created and you can also see there is a option of foreign keys so if I expand it right you can see this constraint which we created right employee ibfk underscore 2 that means this is something which is referring to the foreign keypad cool so we have created our tables now let's say we are inside particular database and we want to check how many tables are already there and we just want to have a quick look at it whether table has been already created or not then what command we can use so command is very simple show tables okay if I write it in this way and if I execute it right you can see this is how we are getting our result so employees and offices if you have let's say 1500 tables all will be listed down here in the form of output all right so now moving to the next one so after creating the tables we saw that how to get the list of these tables now let's say we have created a table and we want to delete it right so there are three things to understand with respect to deleting a table or deleting a data so there is a main difference when we talk about the deletion either we can delete the data only or we can delete the entire table structure so there are three commands right which are typically related to deleting the data or the table structure first is drop table second is truncate command and third is a typical delete query so when we talk about the drop tables command what it does it can delete a particular table completely including the data and structure right and when we talk about the truncate table command it will simply erase the data it will not delete the structure of the table and same goes for the delete command let's say we have a some specific requirement to delete specific records from the table so for example let's say you have a employee data and now you want to remove all those employees from some specific location you can put some filter condition and easily those records will be deleted from the table so first let's try to run this one let's say we have created these two tables right which we can see I will just quickly drop it I will write a command to drop this table first let's say the employees right so if I write the command this is how it will look like Drop table and table name right and if I execute it right this is successful now in this left pan right you can see inside this tables now employee stable is not present all right now if I do this thing I apply the truncate command for the offices table so this is how it will look like truncate table and our table name is offices so if I use it and if I run it let's check whether the table structure will be deleted or not and at this moment since we haven't inserted any data as of now so if I simply run this command ideally nothing will happen because our table is still empty but we will verify whether table structure is gonna be deleted or not so if I execute it and run it this command is successful but you can see the office table is still there that's the difference and this is also one of the most important interview question the difference between drop command and the truncate command all right so first let me bring back the employee table again so if I select it and execute it and refresh it my table is back cool so far we have seen the basic steps now let's understand how to put some data inside a table okay so you can see I have already created a template to insert some bulk data inside the employee table and similarly in the offices table so nothing to worry about if you want to follow all these steps this whole execution step will be provided to you you can find this piece of code which I'm writing here or the SQL commands the GitHub repository link will be provided in the description and you can use all these commands as it is whatever I have been writing here so insert into then table name and inside the parenthesis what we need to do we need to provide the column sequence so this is our typical syntax of inserting multiple records so for an example at this moment what I want to do I just want to insert one single record so how we can do it so let me copy it from here and I will just paste it and will show you how we can simply insert one record and what is the actual meaning of this sort of bulk record so this is the command we need to follow insert into table name and let's say you are pretty much clear about you need to insert data in all the columns so in that case you can skip this part that means defining the column names you can completely skip this part because if we don't put this column sequence this insert statement will understand it like you want to insert data for all the columns and after that we need to use this keyword named as values and this is important so see when we talk about the table and here you can see right this office table has also a proper structure right these column names are not randomly located anywhere so while even inserting a particular record we need to follow this sequence okay and that is the reason sometimes let's say there are 50 columns in my table and I am supposed to insert the values for hardly 5 to 10 columns right so how to do it obviously we need to selectively provide the column names and the column sequence which we are providing here in the same sequence we need to insert the data as well else what will happen we will get the exceptions of mismatch data type all right so if I execute this command and ideally it will insert this one record and we will evaluate it whether this is inserted or not so let me select it and if I run it we can see so as you see when I executed this insert command it is throwing an exception that cannot add or update a child row and why is it happening because this is the first time we are trying to insert the data and as we can see from the definition this table employee table is actually referencing a column from this office table right so since this kind of constraint has been maintained obviously the level of data insertion should be from parent toward the child so in this case what would be the parent table if we just consider this foreign key kind of relationship obviously the office is stable that means whatever values we are trying to refer in this employee table first they should be available in the offices table so instead of executing this command alone first let me insert something related to this data right so first I think I have clearly explained how we can insert one single record you can just simply execute this command and this is a variation of same insert command when we want to insert multiple records in one single insert statement so in that case what you need to do only values keyword will be used once and after that in the parenthesis what we need to do we need to Simply mention our column values comma separated no need to use this values keyword multiple times just the records enclose in the parenthesis so first what I will do I will quickly insert this entire data and I selected it as soon as I execute it now we can see this insert is completely successful in the offices table now if I come back here and if I ignore this one single liner insert command and I directly try to execute this one so we shouldn't be getting any kind of error now of inserting data in this table so I have selected it and as soon as I execute it you can see this one is also successful all right so if I just refresh it one more time and how to just get the preview of the data let's say this is the amount of Records we have inserted how we can get the preview okay so for this one if I click on this thing right let's say employee table and the third option so if I click on it ideally we can see this is the preview of our data which we are getting ultimately it is running a select command and I will specifically talk about this one as well so don't worry about it at this moment so this was about the preview now insert part is also done we have inserted data in both of the tables we will look other important commands in the SQL which is let's say alteration of the table because there could be multiple scenarios where we want to change the data type of any particular existing column or let's say we want to insert a new column right if we want to perform these kind of operation in that case we need to follow this syntax right the alter keyword Okay so here let's say if we come back to our table structure there is a column let's say address line in the offices table address line and its length is 50 right its length is 50 at this moment so what we can say we want to run an alter command which will simply modify the data type or simply increase the length of existing address line one column from 50 to 100 so this is a modification in the table structure itself so for that one we can use this alter command so alter and after that we need to mention the table name which is the offices and then our column name so alter this one and here what we are going to do we are going to modify it right so modify keyword alter offices modify and the column name is address line 1 and after that we simply need to mention the new data type so this sort of thing can be implemented for other type of conversions as well let's say you have one column which is of integer type at this moment and you want to change it to the float or double that kind of data type change we can also do it from here so alter offices modify address line one and the new data type will be virtual 100 right and one keyword is missing which is Alter table right so the complete Command is Alter table offices modify address line one virtual hundred so if I select it and if I execute it we can see this is successful now and if I click on it if we come here and if I click on this column as well okay so how we can now identify it that whether the data type has been changed or not so for that one so in order to see the complete structure of the table what we can do we can simply run this command show create table and our table name after that what will happen we will get the entire table structure and if I execute it right we can see let me just expand it so we can see the complete value now just focus on this part you can see address Line 1 has been changed to Virtual hundred that is the thing which I wanted to Showcase earlier when we created this table its type was virtual 50 now it has been changed to work at 100 so similarly if you want to add a new column for an example so command is very simple alter table offices now add and here we can mention a column name write anything let us say A B C or column 1 and just mention the data type and after that simply selecting it you can execute it and the new column will be added so this is the Syntax for that one now show create table we have seen we have seen the alteration of the tables as well now coming to the important part which is to query the data which we have in our table so in the beginning when we started with the basics of SQL right we followed few sequence of the columns right so there are three categories of SQL commands as well right first is the data definition language which is ddl so data definition means any kind of SQL command which we are using and it is trying to directly indirectly impacting the uh you can say structure of the table right let us say we are creating it or dropping it these are the things these are the commands which are eventually affecting the structure of the table and even including the order command so that is related to data definition language coming to the data manipulation so insert command update command delete commands these are the commands which are actually manipulating the data which is residing in the table third is the data query language dql and dql means where we are trying to select the data which is inside the table so this is important because most of the things will be done with this one like uh how we can get the few selected columns from our SQL table and how we can rename it how we can perform different operations right so quickly look at the examples of it so here let us say from a given table if I want to select all the columns so the command is Select star from table so here if I mention offices and quickly I execute it we can see we are getting all the records from our offices table right so in total we inserted 7 we have in total seven now let's say what we want to do we want to Simply get starting two records or five records for that one what we can do we can use the limit keyword in our select operation and after that we can put some numbers and only those number of Records will be displayed in the output if I select it and I execute it you can see now only one two three records we can see in our output now let's say we only want to select few specific columns so how we can do that that is also pretty much simple just write those specific column names and that will become the part of our final output so here let's say we want to display office code and city only so office code comma separated second column City right and now if I execute this command we can see only office code and city has been displayed in the output looking at the third aspect of it which is important so this thing how to rename a particular column in the output okay so if let me just run this one again so that I can see all the columns so here let us say this is the postal code column right normally we call it like a zip code or something how to rename our columns in such a way so for that one the command is also very simple so if I put it in this way the second column is City and after that the third column is the postal code so I will make it postal code AS so this as is the keyword which we need to use in order to give some specific name to any of the column or any derived column in the final output so I will name it like a zip code okay and if I execute it we can see this output where that postal code column has been changed to the ZIP code now another operation we will look at so if I query this entire data of the offices table right we can see State country postal code territory all these things so one of the common things right mostly when we talk about the data analytics so let's say there are duplicate entries for any particular column in our table then how we can get the distinct values out of it right so we have one important operation which we can use here that is the distinct keyword on any specific column so here in our data we can see country something which has been repeated multiple times for different rows USA France Japan Australia UK right so let's try to figure out if we have let us say lacks of Records millions of Records in our table and we want to just identify what are the distinct values in particular column how to do that so for that one we will use distinct keyword and after that just mention the column name so select distinct country from offices and just execute it and we can also rename it as I mentioned about rename I can name it like distinct countries all right so let me execute it we selected it and execution done we can see now this one USA France Japan Australia and UK earlier there were three entries for USA in the input table cool so we have seen this thing now another cool aspect of this select command which is the data analytics related means how we can apply the inbuilt functions let us say we have our data we have the table how to apply inbuilt functions like count main Max sum average standard deviation so all these things are already provided in the SQL Library we simply need to use it on the respective columns so I am going to write a select command which will calculate something right on the specific columns let's say finding the maximum finding the minimum and for that one what I'm going to do I'm going to use the employee table so select star from you can say the employees table and let's look at what data we have so after selecting it we can see this is the data and this employee number is something which is of integer type so definitely if there are numerical data types we can apply count function on that one not just count function on numerical data types count is something which will help to count different type of things let's say how many rows are there distinct count for the column values but other operations like some min max average standard deviation this is something which can be only applied on numerical data types not string sort of things or the date type kind of things correct so select star from employees here I am going to use employee number to write a select statement where I am going to do different operation first let's say I want to count the total number of rows which are present in our table how we can do that we can use this thing count star and I can give a name to it total rows this one will calculate the total number of rows available in my table second one let's say I want to find because here you can see right mean these are the integer values one zero zero two numerical values so if I randomly try to identify what is the minimum value maximum value I can definitely do that so for that one I am going to use let us say this Min function and mean function and I will pass the respective column name which is employee number and similarly I will name it like Min EMP num and if I want to identify the maximum employee number we have assigned so far I can change it to Max and it will be also renamed to Max similarly if you have another column right the example you can take here the salary column in the employee table somebody ask you to identify total salary a company is paying to their employees right you need to apply the sum function and similarly you need to identify the average salary of the employees within the organization you can simply apply the average function right all those kind of calculations will be done very easily so this one we have already did from employees and if I execute it simply right we can see total number of rows total number of Records we inserted 23 minimum employee ID number was one zero zero two maximum one seven zero two so this is how inbuilt functions we can apply on different columns in the SQL table cool so when we talk about the final output or performing the select queries sometimes what we want as an end user we want our data to be organized organized in some specific column names may be ascending descending so how to do that in the SQL for that one we will be using the order by clause order by Clause we can provide multiple comma separated values and their respective Arrangement let's say ascending let's say descending all those things can be done so if I display our employee data one more time we can see this is the data and how we can arrange it so here if you look at the office code right so office code is something which is randomly right let's say one two in between 4 then 7 then 6 then 5 then 4 okay so one Arrangement can be done on this one office code in the ascending order this is number one and another one can be done for an example the reports to right reports to is basically the manager ID here and manager is an employee itself so this ID is eventually belonging to these number here so this is how we can arrange our data so let's see how to do that first I will only apply this output on B reports to not only reports to basically the office code column so select star from employees order by keyword office code right so if we execute it then let's see what happens what output will get so here now you can see it is properly arranged for us one one one one these kind of values are together two then three then four then five then six then seven so by default when we apply the order by Clause it arrange our data in the ascending manner so if we want to arrange this data in the descending order what we can do we can explicitly mention this d e s c keyword and now if I execute it this whole Arrangement will be done in the descending order of the office code which we can see here now if we want to apply multiple level of ordering as well so I'll give you an example how it can happen let us say you have employees from different different companies and you want to arrange first your data in the form of the ascending order of country codes okay or you can say simply countries so any country which is starting from let's say letter A if you talk about the lexicographical order those will be on the top then starting from b c and so on and there will be records which will be duplicated and multi multiple duplicacy there will be like the USA related records multiple times and within that particular section right the chunk which has been created for USA employees you want to arrange the data in the descending order of salary so what kind of command you can follow here I can show you the placeholder for that one so select star employees order by let's say country and comma second is the salary which is in the descending so first what it will do it will try to arrange the records in the ascending order of country and if our SQL engine sees that there are duplicated records for the country within that it will just arrange the data in the descending order of salary so that is how it is going to work here okay so now we will see how to filter the data set if we have created our tables how we can write that particular syntax which will give us some specific result in our output and that is being called as our data filtration or the filter logic or filter Clause you can say but its technical word is where clause and I will show you how we can apply selective operations like and or operation like in is null is not null and there can be multiple ways we want to query our data with some specific conditions right so if we look at our employee data here you can see multiple ways we can select the specific chunk of data and that is the condition we need to mention so for example here we can see office course right and in each office write different folks from different designations are also working right so if we want to do some kind of selective search it is easily doable so let me write it in the way we can query the data if if we want to relate here we can see reports too is something which is sort of a manager ID so here we can see this employee whose employee number is 1501 he is actually reporting to one one zero two so let's look at who is one one zero two here you can see bonder Gerard is the employee who is the manager of this employee one five zero one and its name is Larry bot okay so in the same way right a manager can manage multiple employees right so we want to query all those employees who are reporting to employee code 1102 or we can say Gerard okay so select star from employees where this is the keyword we need to use where reports 2 and we need to check what was the data type of this column as well so here if we come back and we check the data type of reports to is actually of integer type right so we can simply mention it as it is because if it was let's say of a string type we need to mention it in a different way so reports to equals to this is basically a equality comparison one one 0 2 okay so this is the filter condition we have applied we are trying to identify all those reports we are trying to identify all those employees who are reporting to one one zero two now if I select it and if I execute it we can see right this is the list of all such employees who are directly reporting to one one zero two so this is the one simple where Clause implementation we have seen here now let's discuss what could be the syntax where we want to concatenate multiple conditions together and that can be any logical condition and kind of condition or kind of condition so let's try to do that and for that one we will again look at our employee data and we can see right these are the things which we can use for our practice multiple conditions so here I am going to apply this condition first let me display the entire data set here so if I execute it this is the entire data set now let's try to check what we can use for our and part so we can see multiple designations like precedent VP of sales VP of marketing right sales representative so here specifically if we look at this thing uh the sales manager and sales representative and these two people who are having these respective designations are working in office code one office code one eventually having multiple designation folks correct so let's say if we want to filter out these records so select star from employees where office code and the office code data type is where can right so what we need to do we need to put it in this way enclosed in the double quotes or single quotes so that it will act like a string so office code one and another condition let's say from Office code one we want to identify the employee number name Etc who is having a designation of BP sales right so second will be on job title equals to v p sales okay here we can see VP sales now if I want to execute it this is how it will look like okay we can see this record only which we wanted to bring in our output 1056 Mary Patterson actually working as a VP of sales in office code one so this is the and condition okay now if we want to apply the or condition okay so how we can do that let's say if I display the entire data there are two things here what we can do either print the data of office code 1 or print the data of all such employees who are working as a sales representative let's say if you want to apply this kind of condition how we can do that we can use this similar thing here and we can just apply the or condition so or job title as sales rep means representative and now if I execute it so easily we will get the records for the office code 1 or if any sales representative right who is having this job title will be in our final output so if we have executed it right we can see the records from the office code 1 are definitely included and from other office codes we are only getting the data of job title sales representative and why it happened because of this or kind of condition okay so this is the another version or now we will look at the how we can apply these kind of operations as well right like this is another way of filtering the records based on some string pattern searching right like in is null is not null okay so one by one we will also check it so this like operation can be done only on the string based or string type of data types so select star from employees where what we want to do where we want to filter out all those kind of employees who are having a job title starting with sales it can be sales manager sales VP sales representative but what we want we simply want all those job title employees whose designation is starting with sales right so how we can use this operation select star from employee where job title equals to where job title like so this is the keyword we can use and in the single parenthesis we need to apply that pattern matching so that pattern matching is eventually related to this thing means ideally it should start from the sales after that it can be anything so there are two wild card characters which we can use one is the underscore sign another is the percentage sign so when we apply this thing percentage sign after any of the string which we have written inside this parenthesis so this percentage actually means zero or more characters so doesn't matter whatever is written after the sales right let's say we can see sales manager sales manager any representative right it will just look at in this way that this designation is starting from sales and after that whatever is written I will simply pick this one so that is how SQL engine will decide it and now if I run it and if I execute it right so in our output in our output we can easily see the data which is just related to the job titles which are starting from sales nothing apart from that one so this is also one of the important uh keyword we can say or important operation in the where clauses so this is the sales related and now try to imagine multiple scenarios where you just want to pick the record for an example you have a data for different States and there is one column name as feedback or comments and you want to search only those records where in the feedback some specific keyword is mentioned so when there is a long text and you are not even sure whether that particular keyword might lie so what we can do we can put percentage before as well and whatever text we want to identify that should be in the middle and after that we can also put the percentage so how it will look like sales anywhere in the particular string column value and before that whatever words are there doesn't matter after the sales keyword whatever words and characters are there doesn't matter so for the example of that wildcard character which is underscore let's try to implement a condition where all those employee names or you can say employee records we want to fetch whose first name is having only four characters if this kind of condition we want to apply so we are trying to restrict something we are trying to apply some strict condition on the characters present inside the first name so here we will replace it as first name and it will be like underscore underscore underscore underscore four times so one underscore represents one character here so in this case this filter condition will try to check that what are the employee records where this pattern is exactly matching with first name so if we give a quick view here we can see name starting with marry Jeff right and Louis after that Mommy right Andy these are the names which are having only four characters so ideally these kind of Records we should get in our output so if I just select it and execute it you can see these were the records which I was talking about we are getting in our output so next one is related to the in operator so in operator is just like a lookup kind of thing so when we try to write those kind of queries where in the filter or you can say where Clause we want to verify that something is specific to these particular values we are getting the output in our final result or not so in this case we want to apply lookup related query and for that one we can use this in operation so select star from this table and here what I am trying to do I want to just bring the data for the two office codes let's say one and six so how we can write this query where office code in 1 comma I have also mentioned six so now you can see this will be acting like a lookup query in this parenthesis I have mentioned only those values which will be used to evaluate the lookup part because in our office course we have seen different office codes are there let's say one four six seven and in this way when we will write this query all the records will be scanned and wherever the office code value is matching either with this one either with this one that record will be captured for the final result so now if I just execute this one and in our output we can see we are getting the data only for office code 1 and 6. after that if I again present this data in front of this screen and here you will see there are few records right or let's say this record itself which is having the null value okay and I think for this example we should use the office data because there are multiple null values present so if I write this query and we look at the office data again so offices and here is the query and we can see multiple null values here so that is something if we want to fetch all those kind of records and this is what's also very important step in the data analytics data cleaning and cleansing part where we try to identify all such Records who are having garbage null type of values we want to discard those things so how to actually identify it for that one we can use is null is not null is null will be based on the filter condition where we want to check if this particular column is holding null value or not and is not null is just a negation of that previous condition so select here we can see let us say we want to identify all those records where the value of state is null so how we can apply this condition select star from offices where state is null simple this keyword we can apply here and now if I execute it in our output we can see these are the records or office course where State value is not populated and if we do just the reverse of it that is also doable and if I apply s naught null so we should be getting all those records where value of state is populated so this is a very helpful thing when it comes to deal with the null related values in the table so so far we have covered most of the important steps but still few things which are left and that is the important part of the SQL commands like we have the data in the table how we can update particular column values based on specific conditions so let's try to have a look at it how to apply the update command in SQL and for that one I will query the full data of employee and we'll figure out the specific conditions for it so if I select it and if I execute it so here we can see this thing so let's say what we want to do we want to change the job title of this sales rep to proper name right sales representative we want to change this entire thing so what we can do we can write a simple update command and it will be done in just one single step so what's the Syntax for it update which table we want to update right update employees table and what we want to do we want to set some value to this particular column so update employees set job title equals to this new title which is just a complete abbreviation for the sales rep representative and how this update command will identify how many records I need to update right let's say there is a need of updating the entire value for an example you want to just give the same designation to all the employees you can even do it without any where Clause because at this moment if I execute this command it will simply update or it will replace the designation or the job title with this value but we need to do it selectively so how we can do it we can mention the wear condition that is specific condition where the update will be applied so update employees set job titles equals to this where job title equals to sales rep so how this command is actually working first it will apply the where Clause it will identify all those employees where job title is sales space rep and after that it will simply reset that value to sales representative now if I just execute this thing so here we can see that it is throwing an exception that you are using save update mode so this is actually a safety feature in the SQL workbench because these update command is something which is actually related to some changes and easily this can violate the safety feature unnecessarily if somebody is trying to update the values it can create the unconsistency in the table itself right so by default this save feature is set to false means if we don't turn it off then we won't be able to update the records and if we want to do that we need to mention some primary keys so first let's try to execute a command here how we can just turn it off for this one SQL save Updates this is the command we need to use and we need to set it zero and now if I run it okay this has been executed so ideally after this option if we try to run this update command we should be able to do that and that said exactly happened here we can see this is successful and now if I query the data from this table the employee table select star from employees so we should get the updated data now so here we can see this name which was previously sales rep has been changed to sales representative so similarly this is how we can keep on performing the these kind of update operations now looking at the delete command so if you remember in the beginning I mentioned about the drop command I mentioned about the truncate and there was one other way where we can do selective delete from our table with the help of this delete command so for that one how we can do it what's the keyword we we should use here so for an example from this table we want to delete all the records for the office code one this is something which we want to do and we want to remove all the employee records which belongs to office code one so for that one what kind of query we can write so delete from employees delete from employees where office code equals to 1. and if we execute this query we can see this has been successfully executed and now if I query this data again there should not be any single record even related to office code 1 which we can easily see here so that is how we can use the delete command to delete some specific rows from our input table and same way we are using where Clause you can concatenate multiple conditions based on your need what kind of the condition you want to use to delete any specific record so now we will be looking at the most important operation which is the group by because when it comes to the data analytics mean median mode some average this is fine but we need to perform these kind of operations on some specific column column values right and that is the very important part in the data analytics and this group by operation is something which plays a vital role in order to perform these operations because in this way we can granularize our data we can granularize our output let's say we have our data from the e-commerce website where in a day millions of transactions are happening and those transactions are happening from across the globe so if you want to just identify from which country how much sale has happened for today you just need to categorize this data you need to create these smaller blocks smaller chunks so that you can apply that kind of average some min max count related operations on that particular distinct values and you can granularize your analytics and for that one we can use the group by clause in the SQL so what is the syntax here and first let's understand what example we will be solving here so we can see right different different office code values in our employee table now let's say if your management team comes to you and they ask you to give this analytics to them for each office or let's say within each office how many employees are actually working all right so how we can perform this query we can write it in this particular form so I actually need to tell you one very important point and that is why I am not putting any column in the select operation at this moment I want to complete the group by statement first and then I'll tell you what is the catch with the group by operation so leave it as it is now select from employees table after that we will be writing this group by operation so select from employees grouped by office code we actually want to perform the group by operation on the office code column that's why we have mentioned it here and this part is done so when we talk about the group by operation in the final select statement we can only use those columns in the final select statement which are part of group by keyword itself apart from that whatever columns will be left they can only be used with the aggregation operations like count main Max average if we simply want to let's say select this thing office code and apart from that I simply write job title so this will definitely throw an exception let me execute it right we can see this is failing expression here because the reason which I explain the columns which are present here this is actually not the part of group by keyword itself so let's say if I'm using job title or any other operation I definitely need to put it in the some kind of aggregation functions like min max and all these kind of things so here the main problem statement was to count the employees in each office that's why we did a group by on office code after that we simply want to apply this count function right normal count function if we are doing it okay and we will name it employees in each office this is the derivation we are doing and now if I execute it all right we can simply see this output in office code 2 to employees are working in office three two employees are working in office four five employees are working and so on so this is the group by part and it can be used with multiple things and I can show you another alternative of it if we want to group by on more than one columns whether that is doable or not exactly it is doable so let's figure out what kind of ah columns we can actually use here for this sort of grouping so for this example we can see this office code and reports to so see manager is an employee of a company and when you are a global company what will happen different different employees are working from different different locations and one manager which might be present in a different location can manage all those employees who are working from different reasons so that is the same kind of metrics we can see here so this employee 15041501 right there office locations are different right one three seven zero but their reporting manager is same one one zero two so how we can write a query that for one specific manager if I want to see how many employees are working from different different reasons means the grouping on the this level means the reports to and this is this is the exercise we want to do for all of the managers right so if you want to do it how we can apply this kind of multi-column grouping so here our problem statement is we want to group first on the manager ID basis within the manager ID basis we want to group it on the office code level and then we are counting the values so here it is office code in the group by keyword and after that we are mentioning first we need to mention this reports to and after that we need to mention this part which is office code reports to comma office code now here what need mention here reports to office code office code and after this one the value which we have derived that is absolutely fine employees in each office and now if we execute this query right we have got this output where we can see for let us say this one one zero two so even the manager 1143 is also managing employees from different different reasons so that is how we can see the multi grouping can be done now let's look at the example where let's say we have created a chunk means different different groups and after calculating the values in the group by operation we want to filter out something right we want to filter out those kind of chunks where they are not following any specific condition so along with the group by Clause we can use having Clause as well and having Clause doesn't have any individual identity it cannot act like a where clause which is where Clause when we talk about it is actually like a independent entity but this having Clause can only be used along with the group not individually so let us try to write some query where we are performing some operation right here we can see our entire data set so what kind of query we can apply so let's say we are trying to calculate the strength of the employees in each office and we are only interested in these offices where the strength of the employees is more than three or equivalent to three not less than that one okay so how we can write this particular query if I paste it here this part which we have already written above and here we will simply apply this condition okay we are only interested in these kind of records so here this query will be exactly same office code grouping we have done after that we are counting the number of employees for each office code but here what we can do after this group by operation we can write this having keyword and we can apply this condition count star means whatever count which has been calculated for one individual group we are checking its value whether it is matching with our threshold value or not that is Count star greater than equals to 3 okay this is the thing which we wanted to evaluate now if I run this query okay here we can see only two office codes four and six because these are the offices where employee strength is equivalent or more than three so now let's look at the last operation of our tutorial video which is also the most important the very important the joints so why joins are actually important as I already mentioned in the beginning the fundamentals of the keys primary Keys foreign keys because data analytics is not only about one table where you have everything and you are doing everything it is always about creating a normalized database and that will definitely have multiple tables so we will be having multiple ways different different Logics different conditions to bring data together so that final informative report can be generated okay so that is why this join operation is something which will be very helpful and there are different type of joins available the most important ones are like inner join left join right join also full outer join so one by one first I will explain how inner join works so if we go back and try to just display the output for employee and the offices table so select star employees okay here if we look at this data we can see office code which was of a string type right these values are present here now if I query this data the offices so here we will also see the full detail for each office based on the office code column right so definitely this office code is the important column based on which we can join these two data sets together so first type is the inner join inner join means when we are using few key attributes for the join operation so in the final results only those records will be present which are having the same values if there is any mismatch for the values those will not be included in the final result so if you just want to imagine a vein diagram for it if you have two sets of number so whatever will be the overlapped part or the middle part that is this section we will be getting in the inner join output so let's try to write the query for it how we write the proper syntax to perform the join operation so here what we are going to do we are going to involve two tables and there is a concept of I'll giving and there is a concept of giving Elias name to the tables as well how we can do that and why it is important because in the final select statement we might be interested in few selected columns from table a table B so we should have some reference name or Alias name which can be used here so let's say employee table we will give a Alias name like EMP and for offices table we will give a Alias name ofc okay so that is why first I am writing the complete inner Joint part and at the end I will be writing the columns in the select statement so select from employees table and the Alias name is like EMP just one single space and after that whatever you are mentioning in front of the table name that will be treated as a Alias name so from employees EMP inner join offices ofc and after that we need to mention this on keyword because when we are joining the two data sets we need to mention which column we are going to use okay and for this one from the EMP table there we also have a office code column and we also have this column in the offices table okay so the same column you can see we are trying to join these two tables with the help of office code column and even this this is not necessary that column name should be same column names can be also different but with the proper aliasing name we need to provide this referencing that in which table these two columns are present so this is the condition for inner join and as I said now I will mention proper column names so here what we want to do we want to select all the columns from the employee table so it will be EMP dot star comma ofc dot start okay now you can see this is the complete statement or syntax for our inner join now if I execute it okay in our output you can see there is a very big table which is involving all the columns from both of the tables because we have done this kind of Select EMP dot star ofc dot star but the interesting thing we can see office code right the output which we are getting in our final result the values for office code 2 4 5 6 7 is present right if you remember in our office Code table itself there was a code for one value one means there was one office where the code was assigned as one but for that particular code there was no record in our employee table here using the delete command we deleted all those employees who were belonging to office code one and that is the thing which I want to highlight that if we perform the inner join those kind of Records will not come in the final output now talking about the left join this is also another version of this inner joint kind of thing so here what will happen again try to imagine the same wind diagram two data sets and if you are using some on condition and there is a table which is on the left side when we perform the join operation there will be a table on the right hand side in case of left join whatever records are getting matched properly they will definitely become the part of final output but let's say there is any specific value which is present in left hand side table but there is no specific match for that one in the right hand side table then in that case we will be getting the output from the right hand side table but those values will be populated as null okay so how we can change our query simply we need to change this keyword from inner to left all right so if we execute it right we are getting the data but if you remember in our employee table ultimately there were all such type of records for which match is definitely present in the office Code table right so for example if we try to explicitly insert few records in the employee table which are not present in the office code let's say office code 2030 we are maintaining entry in the employee table but those are not present in the office code then this left join will give us the output but the right hand side table column will not be populated they will always be populated as null now if we talk about the last operation which is the right to join for that one you can just treat it like a reverse of left join so whatever thing were happening with the left hand side table in the left join same thing will happen with the right hand side table in case of right join so if there is a match obviously those records will become the part of final output but if there is a mismatch then the records from the right hand side table will be there they will be completely populated but the records from the left hand side table will not be populated because there was no match available for that value so how we can do that one if I write this left to right and if I execute it in this case we can see this one this record is something which you need to focus on because since we deleted all the employee records which were belonging to office code one that was the reason in employee table there was no employee record related to office code one but this entry is present in the offices table and we are doing a right join so this is the right hand side section which is coming from offices table it is completely populated right you can see this is completely populated but the data which is coming from the left hand side table this is completely null and why it happened because there was no match for office code one so that's what I had for all the SQL Basics command and I'm pretty sure this practical implementation will give you the crisp idea how to set up this whole MySQL environment in the local machine system and how to perform all these basic operations with the dummy data and as I said in the beginning this entire code piece will be provided to you in the GitHub repository you can find the link in the description and you can also practice the same things so that's what I had for this video I'm pretty sure now you have a clear idea how to use and apply basic SQL commands and the code snippet and the queries which I was writing you can also use it and try to implement it practically the GitHub repository link will be provided in the video description and if you find this video informative then hit the like button and if you have any doubts any queries then feel free to put it in the comment section and don't forget to subscribe scalar's YouTube channel for more such insightful content did you know that sub queries and window functions are the two most important interview question hello my name is Sumit Shukla and in this particular video I'll be helping you to understand sub queries and window functions with example but before we start this video don't forget to subscribe to our skillers YouTube channel let's get started now let's talk about window functions now this is something which makes your life easy and also add more functionalities while you are writing SQL queries so let's try to first of all understand why we need a window function I will try to explain this particular technique which is window function by taking one example let's say we have employee ID so I'm creating a sample table I'm having a name I'm having salary then Department ID and we are having some records so here I'm having 0 1 0 2 0 3 0 4 0 5 so we have five employees and I am taking some sample names a a b a c k d m n k uh random salary is 10 12 11 15 10. random departments D1 D2 D1 D2 D3 now if I ask you to find out Department wise average salary now in order to answer this question we will be using the technique of group by and if we try to generate the output it would look something like this we will have a output table with Department ID and average of salary and since we are having three departments I will have three records over here D1 D2 and D3 with D1 average being 10.5 because here I am having one entry with 10 and 11 so 10 plus 11 divided by 2 then D2 We have 12 and 15 so that is 13.5 12 and 15 is 27 and D3 we only have one record so 10. now this is what I will get as an output when we try to find out the answer for this question what is Department wise average salary now this particular output is is basically generated after applying Group by we have used the command Group by and this is the aggregated table aggregated table which we have obtained as an output but what if I do not want this table as an output this is a separate table that is generated after applying the group by command I do not need this separate table this is a separate table I do not need the separate table so what I need I need these average values as a part of same table itself so let's say I need average of Department ID over this column itself so corresponding to D1 I'll get 10.5 corresponding to D2 I will get 13.5 D1 10.5 D2 13.5 d310 and this is the additional column that I wanted to generate now how this is possible this is possible by using what is known as Windows function now window function is something which we apply in two stages or maybe two steps the very first step is windowing or partitioning so what is windowing and partitioning let's try to understand it with an example so my step number one is I will create Windows now here we will keep the example same my objective is to generate this additional column which is Department wise average salary so while we are creating windows or partitioning the data we will partition the data according to the department ID let me show you this so we have employee ID we have name we have salary we have Department ID and let's generate the records so one two three four five so here now my objective is to create Windows so all the records according to department number one I keep it together so 0 1 a a 10 Z1 0 3 c k 11 D1 then 0 2 b a 12 D2 then 0 4 DM 15 D2 and finally 0 5 n k 10 D3 so here if you closely observe what I have done I have created some windows or partitions so this is my window number one window number two window number three or if I have to highlight the partition this is partition number one and this is partition number two so we have all together three partitions one two and three now this is my step number one or stage number one so I'll write windowing over here windowing or it is known as partitioning and I'll write one over here because this is stage number one now once I am done with creating partitions my next step is to apply aggregation function on each window so my objective is to generate average of salary Department wise in the second stage what I am going to do so again I will have all the columns employee ID name salary Department ID and let's generate the record one two three four and five again 0 1 0 3 0 2 0 4 0 5 a a c k b a DM and K 10 11 12 15 10 finally D1 D1 D2 D2 and D3 now here what is my objective my objective is to find out Department wise average salary so now on each of these salary window or salary partition so we are going to apply the average aggregation function average of salary so I am basically going to perform aggregation aggregation over each partition aggregation over each partition now here I am going to apply the aggregation function which is average so here we will apply the aggregation function average here also we will apply the aggregation function average and here now if I apply I'll get the value 10.5 over here 10.5 over here followed by 13.5 over here 13.5 over here followed by 10 over here and this is my this is my new column which is average Department salary now here we are not just limited to average we can have multiple functions we can have almost all kind of aggregation functions over here we can have some we can have count we can have minimum which is min we can have Max so all these aggregation functions can be applied over here together with the average these are my aggregation functions now how we can write the query for this so this was my stage number two how we can write the query to in order to write the query we will again follow the two steps which we have discussed so the query looks something like this we need to select asterisk asterisk means I am interested in getting all the columns so abstract all the columns followed by comma I need average of salary I need to apply average of salary aggregation function over over the window or over the partition which is partitioned by so over Partition by the column name is Department ID as average underscore DP underscore cell from the table employees and this is how simple it is those who are worried about window function can see how easy window functions are so let me just tell you again what we have done here you can see that we have applied average of salary which is my aggregation function over we use the Clause over to generate a window so I'm saying generate a window which is generated using the Clause over the window is partitioned by Department ID and this is what we have done right as average Department salary so this is the name of the new column from the table employees so here we have applied two steps to step number one and step number two if I try to map the steps in my query this is my step number two and this is my step number one right simple so let's now take one example to understand how we can apply window functions on a sample database now here I am having a database named HR and here you can see that we have following tables such as countries departments employees job job history location and region now if I look into my employees table so we'll write select a star from the table employees underscore data now here please remember one thing that I have already activated my HR database so that is the reason I was able to query the table from the HR database so here you can see that we have Department ID and the salary of various employees and their employee ID now let's say I wanted to generate the following output I need the full name full name of the employee followed by his or her salary followed by his or her Department ID and finally followed by the average Department salary now here please remember one thing if I need the date of all the employees I cannot do that using Group by because Group by returns you the aggregated table let me show you one example let's say if I have to find out Department wise average salary I can simply say select Department ID comma average of salary from the table employees underscore data now if I execute this oh sorry we have to also group the data so Group by Department ID if I execute this particular query I will get Department wise average salary but if I try to add let's say first name I'll get error because that is not possible you can see that we will be having error and the description of the error is that we haven't not added this particular column in the group by Clause so you cannot get the non-aggregated entries you have to put all those columns in the group by statement it is impossible to generate the following data or the following result using Group by now that is the reason we have learned about window functions so let's now try to generate this output let's first of all select first name so here we will use the concat function concat first name with the space with last name as full name then we need salary comma we need Department ID and then I will apply the window functions so we need average of salary over Partition by Department ID as average Department salary and here we have to just write from the table employees underscore data and if I execute this we have the result so this person were so here you can see that we have two employees working in Department 20 Michael and Pat file and their individual salaries are thirteen thousand six thousand but they are Department averages 9500 which is the same entry for both of them so this is how we can simply apply window functions before I move to the next topic I just want all of you to concentrate on this particular result by default you can see that within each window the data has been ordered according to the department ID so if you place closely observe the very first row I'm having Department IDR 0 which is the uh maybe the minimum Department ID and the last two is 110 which is the maximum Department ID now since I have not added any order by Clause within the window functions the result are automatically sorted according to the descending order of Department ID now how we can change this and how we can apply more aggregation functions with order by we will talk about this in the next slide so let's Now understand rank function rank is basically a aggregation function that works with the window function but the reason we are trying to explain it in a more detailed way is because the way we create the window is little bit different from the regular window so let's take one example let's create a sample table here we have employee ID as one of the column or maybe the field Then followed by name salary and Department ID now let's create some sample data so row number one record two record three record four record five uh zero one zero two zero three zero four zero five zero six again sample names a a b a c k n m t a d t salary is 10 15 12 11 15 11. random departments D1 D3 D1 D2 D2 D3 now what is the objective of having a rank function so let's say I wanted to generate a additional column over here let's say the name of the column is rank underscore and I want it to rank employees according to their salary within their department so if I look into the department number one this is the employee in department number one followed by this employee but among these two employees with the depart employee ID 0301 they employ with zero three employee ID is having a salary of 12 and then 0 1 is having a salary of 10. so this person will get a rank of one while this person will get a rank of 2 within their Department similarly department number two this person will get a rank of one this person will get a rank of two similarly department number three this person will get a rank of one this person will get a rank of two now how we can generate this column or a field using window functions so again we will apply the window function as regular in two steps that we have learned so first of all we will apply when doing operation I have to again generate this column employee ID name salary Department ID and now while I am creating the windows I will make sure that within each window the data is ordered according to the salary column in descending order now please carefully observe I will start from department number one so zero zero three the reason I am putting this employee 0 3 as the first row or the first record is because among these two employees who are working in department number one this person is having a salary of 12 while this is having a salary of 10 so since I have to make sure that within each window my data is ordered according to the salary in descending order I will place employee number 0 3 at my first row followed by 0 1 in my second row again I'll do the same thing for other departments so 0 5 ta 15 D2 and then 0 4 NM 11 D2 similarly for D3 0 2 ba 15 D3 and 0 6 DT 11 D3 now here carefully observe what we have done within each department or within each window so this is my window number one window two window three I have ordered my data according to the salary column in descending order if you clear closely observe these two values you will understand what we have done and now what we have to do we have to apply the aggregation operation as my step number two so let's move to the step number two so this was my step number one this is my stage number two where I am going to aggregate the data and the aggregation operation that we will apply is the rank function so let's generate the stage number two output employee ID followed by name followed by salary followed by Department ID and the additional column which is rank now again we have six entries or six records so zero one zero two zero three zero four zero five zero six so here we have 0 3 0 1 c k a a 12 10 D1 D1 and this will be rank one Rank 2 and other department zero four t a n m 15 11 D2 D2 rank 1 rank two zero two zero six b a d t 15 11 D3 D3 one and two now if you carefully observe what we have done within each window I have ranked the employee with their according to their salary in the department and this is what the rank function is now let's first of all understand how to write this query so we start with select we need to select asterisk asterisk means I am interested in selecting all the rows and columns plastic then I need to apply the rank function so rank round brackets over Partition by Department ID and order by salary in the descending order so this is very important I have to order my data within each window according to the salary column but in descending order so that within each window I can get the first row as the highest sell ride employee followed by second highest third highest and so on and from the table employees underscore data so this is how rank function works but there are some more functions which are available in SQL so we have functions like rank dense rank and the last one is row number now these three functions are very much similar to each other let's understand the difference take one sample data so here I am having a salary followed by how the rank function will work how the dense rank function will work and how the row number will work so row number clear I am writing row underscore n and let's create some rows or the records now please consider this as one window this is one window within this window I am having a person with salary of 100 98 98 95 92 and 80. now how rank function will behave in this case the person will get a rank of one two two now here the rank function will skip the rank and you will get 4 over here followed by 5 and 6. what does dense rank will do it will not skip any rank so we'll get one two two and three then four then five and row numbers are just raw numbers ranging from 1 to n so 1 2 3 4 5 6. so this is how we use rank functions and this is how we can write the query for the rank functions in SQL so let's now take one example to understand how we can use rank functions with window so here we will look into the employees table which is named as employees underscore data now let's say I wanted to find out that within each department what are the various employees and their ranks rank according to their salary so we will right select I want all the columns you can also select few columns like first name Department ID salary it is up to you but I am selecting all the columns followed by the function rank over Partition by Department ID and please remember it is very important to write the order by clause order by salary column in the descending order as rank k r n k means rank from the table employees underscore data now here you can see that we have the following ranks generated so let me expand this quickly for you and here you can see that for department number 30 we have the following employees and their corresponding ranks one two three four five six because all of them are having different salaries now let's quickly also check out other functions like rank dense Rank and row number so dense underscore rank and for the the window function creation would remain the same so I'll quickly copy this put it over here oh I'll copy this put it over here and I'll call this as D underscore RMK similarly we will use row number and I'll call this as RN and let's run this now here we can compare all the three functions so let's navigate uh in this particular row or maybe row number uh department number 100 here everyone is having the same salary so no difference okay let's focus on yes let's focus on Department number 60. now here you can see that I'm having two employees with the salary four thousand eight hundred four thousand eight hundred so here rank function has given one two three three and has skipped the fourth rank so I'm getting five here the dense rank function has given the rank one two three three and the fourth rank also and here row numbers are just the raw numbers one two three four five which is basically the number of rows in a particular window so this is how you can use the various ranking functions together with the window functions let's Now understand what is sub query and how we can write a SQL query using sub queries so first of all let's take two examples let's say I have to find out so I'm writing down the question and let me increase the so so I am writing down the question find the average salary of Department all the executive department now how we can answer this question here I am having two tables one is the employee table which you guys can see over here in the employees table we have employee ID first name last name and so on with the Department ID but I do not have the department name now where I can get the Department name in the department data table we have the details so if I look into the department data table select a start from Department underscore data I'll get the details of all the department names together with their Department ID so basically what we will do there is one way to join these two tables and then apply the filter so let's take the traditional way or maybe the most simplest way first we will join the two tables and then we will perform the filter so let's join the two tables select a star from the employees data table and I'll call this as a inner join Department data table and I'll call this as B on a DOT Department ID is equal to B Dot Department ID because Department ID is basically the common column the primary and the foreign key combination between both the tables and when I do this you can see that I'm having the joined table now I have to filter this where the department name is executive so I'll write where P Dot Department name is equal to executive executive and we are done now these are the entries wherever the department name is executive if I want the average salary I'll quickly change the star and I'll write average of a DOT salary because in the table number a which is over here I am having the salary column so I get the average salary but is this the best way to solve this question or maybe it is the is this the best way to write down this query certainly no this is not the best way and you should not be joining the tables the better way of doing this thing is to write down a sub query now what I am going to do I will be using the department data table to find out the department ID where the department name is executive over here so let's write down this query select start from Department data where Department name is equal to executive and once we execute this oh we I have missed is equal to sign when I execute this here we have the department ID 90. let's select only the department ID Department ID so I am getting Department ideas 90. now I'll be using this value to filter the employees data table so I'll write select star from the table employees underscore data where Department ID is equal to and instead of writing 90 manually I will provide this complete query the inner query the below query as a sub query so this query which I have written over here which is returning me the output 90 which is the department ID of the executive department I am using this output to filter this particular data the employee data table and let's execute this and you can see that I'm having all the employees from department 90. since I need the average of salary so I'll write average of salary and we are done right so this is how we write sub queries now let's try to understand when to use a sub query versus when to join two tables this is a very tricky situation for most of the students to to choose whether to join or whether to use a sub query now it is not that difficult let me explain you with an example so we will take two questions the first question is find Department name wise average salary now here how my output would look like since I need Department name wise average salary I'll have two Fields or two columns one of them which will be Department name followed by average of salary and here we will have the department names and we will have the average of salary now if you guys closely observe this particular column which is Department name is from the table Department data and this particular column which is salary is from the employees data table so here in the output of this query the output of this query is having columns or fields from two different tables so the output is having fields from to different tables right now let's take another example find average salary of executive department now here if I ask you how the output would look like it will be a single value just average of salary right and we will only have one single answer let's say this is the average salary but if we write down the query here I will be using the executive department as a filter right so when you are having the output where you have the column or the field only from one table which is employees data I will not be joining the tables so the learning from here is when you have output which involves field from multiple tables we have to join those tables join we have to apply the join we cannot generate this kind of output without performing join but if we have the output from a single table or maybe if we have a particular field in the output from a single table we will use sub query and this is the simple trick you guys can use to decide whether to use a sub query or whether to use a join let's now look into one example to understand when to use a sub query versus when to user join so here we have already solved this particular question using the subquery where the objective was to find out executive department average salary or maybe the average salary of the executive department now if you closely observe here we have used the filter of the executive department in the sub query so here we do not need to join the two tables but let's say I need to find out Department name wise average salary so my objective is to find out Department name wise average salary so the very simple way of doing this thing is we'll say select first of all I'll join the two tables so select a star from employees data a NL join departments data B on a DOT Department ID is equal to B Dot Department ID and here we have joined the two tables now my objective is to find out Department name wise average salary so Department name is in the table B so I'll write B Dot Department name then I need average of a DOT salary and here I have to write down Group by clause Group by B Dot Department name and we are done now here you can see that we have Department name wise average salary so this is quite easy when you get into the practice you will be easily able to segregate when to use the join or when to use a sub query now there are some rules which you have to understand while writing a subquery so let's quickly go through the rules the very first rule is sub query must be enclosed within parentheses so let me take this previous query and we will try to run it without parentheses now so I'll remove the parentheses over here now you can see that I have got a cross mark over here and if I try to execute it I'll get a error saying that you do not have you have some error in your SQL syntax you can see over here so this is the rule number one we have to place the sub query always in the parentheses the second Clauses a sub query can only have one column in select Clause unless multiple columns are in the main query of the sub query now what is the meaning of this so let's again take this example now here if you closely observe here I am having Department ID and I am comparing my department ID with this particular column which returns one value which basically mean I am comparing one value with one column one value with one column that's how the comparison is made but if I put two columns over here let's say employee ID also that is something which will give you error you can see that we have a cross mark because the mapping can only happen one to one that's what the second rule while you write a sub query let's Now understand the third rule of writing subquery the between operator can be used with the subquery let me give you one example to understand this let's first of all find out the minimum Max the maximum salary of employees working in department 30. so select Max of salary from the table employees underscore data where Department ID is equal to 30. now this will return me the maximum salary of Department 30. let's quickly copy this and convert this query as minimum salary so here I'm having another query now I want all those employees who are earning between these two salaries the minimum salary and the maximum salary of Department 30. so we can write a sub query we can write a main query which can accommodate these two sub queries using between clause so select star from the table employees underscore data where the salary between I want this salary so between the minimum salary I'll put this in round brackets because that is the rule of sub query and the maximum salary and I'll put this one also in the round bracket and finally our semicolon and we can execute this now here you can find out that we are having all the employees who are earning between these two salaries the minimum salary and the maximum salary of department 30. so that was our third rule let's understand the next Rule now for the next rule I do not have any demonstration for you but the rule is blob which is binary large object so whenever you preserve images all the data which is in binary because if you remember the image data is comes in a binary format ones and zeros and when you preserve this data in database it is preserved as blob so it is impossible or maybe it is not possible to use sub queries when your column the reference column is blob or C blob or n Club OR b files these are the file formats or maybe the column the data types with which you cannot use the sub query now these are the sum rules which we have to keep in mind when we are writing sub queries let's Now understand the difference between non-correlated sub queries and correlated sub queries to understand the correlated and non-correlated sub query we will take very simple example let's say I wanted to filter all those employees who are working executive department we have already seen the example so let me write down the query for it select star from employees data where the department ID is equal to and here we have the sub query select Department ID from the table Department data where Department name is executive so here if we closely observe there is no connection between these two sub queries this is an independent sub query and this is an independent sub query if I select the sub query so in SQL if I select the sub query and if I execute only this query it will run independently and this is what is the example for non-correlated sub queries because there is no interaction maybe there is no dependency between these two queries so non correlated sub query now let's understand correlated subquery in order to understand correlated subquery I will be required to create a dummy table so now let's understand the correlated sub query in order to understand correlated sub query we will take one example and I'll be required to create one table which is having three fields employee ID name and salary I'll create the same table for two times because we have to compare the values so it is the same table but I am creating for two times let's add some random data and the same for here also so one two three four A B C D and similarly over here one two three four then a b c d and here some random salaries the same salary over here also now let's write down the query to understand what exactly a correlated sub query is so the correlated sub queries looks something like this select I'll call this table as e while this table has P so I need e Dot name comma e dot salary from the table let's assume that the table name is employee so from the table employee e followed by the where clause where 2 is equal to and then we have written a sub query select count of salary from the table employee p now this the same table but we have referred it for two times with Elias e and P so from employees p and there is a condition where P Dot salary is greater than or equal to a DOT salary please remember we will be first executing the inner query e dot salary so this entire row will be taken and now we will compare this salary which is p dot salary whether it is greater than or equal to e dot salary or not yes it is so we'll count so because we have to count so count will become 1. then I will compare this one because I have to check how many salaries are there in my table P which are greater than this particular salary so 6900 is it greater than or equal to 7000 no 5000 is a greater than or equal to seven thousand no two thousand is it Greater or equal to seven thousand no so I'll get the count here one now one is not equal to two so this is not meeting the condition so we will not get this row as an output now I have to move to the second row now my entry value is six thousand nine hundred so here I'll get six thousand nine hundred now I will compare whether 7000 is greater than equal to 6900 I'll get one yes whether six thousand nine hundred is greater than equal to six thousand nine hundred yes so instead of this one I'll get two whether 5000 is greater than equal to six thousand nine hundred no whether 2000 is greater than equal to uh greater than or equal to 6900 no now here I'll get two so two is equal to 2 condition has matched so my output will be this particular row so my output will be e dot name which is B and salary which is six thousand nine hundred as my output now this particular query is helping us to find out the second highest salary now there are multiple ways to find out second target salary you can use limit offset but this is the way in which we can find out second highest salary using the concept of correlated sub query here what is happening until and unless my second or the internal query is not executed successfully my outer query will not execute so there is a dependency between the internal query and the external query and that is the reason this is known as the correlated subquery so with this we come to the end of this video we hope that you guys found this video really helpful to understand sub queries and window function before you end this video please like this video share this video with your friends and don't forget to hit the Bell icon so that you never miss any update from us MySQL Ms SQL Oracle post race equal are you guys confused regarding what is the difference between these platforms and when to use which platform hello my name is Sumit Shukla and in this particular video I'll be clearing your confusion in this particular video we will first understand the concept of database the difference between client and server and what exactly SQL then we'll be trying to understand the difference between various SQL vendors before we start this video don't forget to subscribe to our scalar's YouTube channel let's first of all understand the problem why rdbms was invented and why people need rdbms so we will start with the example of a multinational company since we all are very much aware about companies like Amazon I would take the example of Amazon so here we have the company Amazon now let's say we have so let's say the company Amazon has recently started and as of now they are using uh traditional storage system now what is traditional storage system uh let's say the company is preferring to use Excel files to store their data or maybe PDF files uh maybe pen drives or maybe hard paper document now these all Technologies or maybe I would say the storage options are known as traditional a storage system now if Amazon is using these traditional storage system to preserve their user data or maybe to preserve their data about everything about their orders about their customers about their payment methods and everything what all problems the company would face and you can pause the video and can comment your answers maybe you can let us know what all problems the company would face if we talk about the major problems the very first problem is the data size is huge as you guys already know that data is humongous so let me write it down data size is huge and the data is growing at an exponential rate so every day Amazon would have a bulk of data to preserve and these traditional storage system comes with a limitation so they will not be able to accommodate everything in these traditional storage system so that's a very general problem the very first problem that they would face now the second problem is with the management as the data is growing exponentially managing all these Excel files would be a very great problem where to keep all these files where to preserve them so that first of all it is secure it is not getting distorted it is not getting exposed to exposed to some of those people who are not authorized to use them so there are a lot of problems and challenges to manage all these files now the third problem that the company would face is security as I was talking about in the last point but the major problem that the company would face is regarding the same view of the data now what is same view as you already know Amazon is a multinational company multinational means they have offices across world so let's say Amazon is having their office at USA now here we have the USA office and here we have the India office now let's say there is a person um let's say this is me Sumit Sumit so let's say there is a person Sumit who is sitting in USA office working on a particular project I'll name this project as P1 here we have another person and her name is Shreya and she is also working on the same project P1 now they both need to work on the same data file so what Amazon has done we have to assume right now that Amazon does not have any technology to make the same data available to both of them or maybe the same data is accessible to both of them so what Amazon has done as of now they have provided the copy of the same file so here we have the main file I would call this as main file and one copy is provided to Summit so I'll I will call this as C1 another copy is provided to Shreya I'll call this as C2 now what is the problem the problem is any changes made by Shreya in her copy which is with her the C2 file will not be replicated or will not be available to Sumit in his file which is C1 similarly if there are any changes made by Sumit it will not be visible it will not be available to Shreya so the analysis that will be done by Shreya and the analysis that will be done by Sumit will be two different things because they have not been provided with the same version or the same view of the file and that is the major problem how to make the same data the same view of the data available to everyone who is trying to work on the same file that's very important problem the second problem is with the management of the data how to logically arrange the data so let me call this as problem number four the problem that we have just discussed the same view problem the same view problem and I would color it in red so as to mark it as a very important and maybe the very difficult problem to resolve now coming back to the last problem like there are multiple problems actually we cannot talk about everything so here we are trying to discuss the most difficult problem in the sequential order starting from very difficult to least difficult so the fifth problem is logical collection and arrangement of the data logical collection and arrangement of the data now for this also I will use a red color to mark it as very much important or maybe most difficult problem to resolve if the company wish to use traditional storage system now before I move forward let me just recap here all the problems that we are right now talking about talks about the traditional storage system if a company any company prefers to use these traditional storage systems what all problems the company would face so when it comes to logical collection and arrangement of the data let's say um so Amazon has multiple business right let's take one of the business which is e-commerce now you guys already know that in e-commerce uh various customers would Place various orders so we have the orders data then each order would have the customers data so which order was placed by which customer so we have customers data over here then we will have the customer details like uh details like what is the name of the customer the email ID or the password and mobile number and other customer Centric information then each order will be associated with a product now which product was ordered so um let's say product number one was ordered and this customer ordered product number one so there will be product details then each product will be associated with a vendor as you guys already know that Amazon is a Marketplace which connects various vendors to the customers so each product will be linked to the vendor who has placed this product in the website then we will have the vendor-centric information like who is the vendor how many orders or maybe how many products he has placed in the website uh we will also have the delivery Partners so each order will have the delivery partner details now here you can see that we are creating a mesh and then it is like a network where each data point is connected to another data point if I try to preserve the data in this format using Excel files using PDF files using pen drives I would certainly not be able to do it the reason is we do not have any mechanism which can let us preserve the data in this kind of format and that is what the fifth problem is logical collection and arrangement of the data how to logically arrange this data in such a way that it is easy to input and it is easy to retrieve the data because if I am if I am trying to preserve my data my objective is not to just preserve my objective is also to retrieve that information so that I can perform the analysis and find out some interesting insights from the data and that is why any company preserve the data so that later it can be utilized to find out interesting information right so these are the major problems that was present before the invention of rdpms now how these problems were resolved in order to resolve these problems the technology that came into existence and this technology happened to be invented in 1970 I will tell you the history of how this technology was invented who invented but right now let's try to focus on what this technology was the technology was named as Rd BMS it is named as relational database management system rdpms okay now rdbms as a technology comes with two components the very first component that is a part of rdbms is known as the server and the second component is known as the client server and the client now let's first of all understand what is a server server is basically the Central Storage of the data now please remember one thing the explanation that I am making right now is according to the latest architecture of rdbms that exists today so I am not talking about 1970s because in 1970s the technology was different the architect was different and whole technology and whole process was different so right now we are talking about the latest technology and how rdbms systems work today so right now today we have a server and we have a client now what is server server is basically the Central Storage of the data so this is a server and this is a Central Storage so I'll write Central now if you guys haven't uh haven't looked into any kind of server you guys can quickly check out Google Data Center and there is a video which will help you to understand how a Google data center look like but I have some pictures over here which can help you to understand so this is how a data center Olympia data warehouse looks like you can see that over here I have a lot of boxes now these boxes over here these boxes are known as racks so here we have one such rack this is a rack and each rack is having a lot of computers connected together to create a huge network of storage plus processing power so here you can see that each entity over here so this is one this is two this is three let me write it over here this is one this is two this is three and so on these are basically individual computers and all of them are connected together you can see that all of them are connected together with these overhead wires right when they are connected together they create a huge network of storage space and processing power and that is what is known as a server now assume that you have a central room where you have so many computers connected you have a very huge storage space and you can connect to that storage space using your ID and password that is what a server is so this is a centrally located uh storage system present anywhere in the world right now Google operates so many data centers across the world even IBM has a data center um companies like Amazon has a data center and there are multiple data centers present across the world so we can assume right now that we have one such data center of Amazon which is centrally located in let's say USA now here I am sitting in India and here is my laptop now in order to connect to this particular server I need a software on top of which I can enter my username and password and I'll be able to connect to the server so I need a software that can run on my laptop so let's quickly create a interface of software so this is my software now this software will connect to the server this software is known as the client so if I talk about client client is basically the software or the UI it is also known as GUI graphical user interface so I'll write GUI foreign graphical user interface that runs on the user's laptop now on this particular software which is client the user can input his or her credential and that will let the user connect to the server once the server is connected once the user is connected to the server the user can communicate the requirement to the server that hey server I need XYZ details or maybe hey server please return me the top 10 customers who has made the purchase or maybe hey server please return me uh the top 10 products that have sold yesterday but the problem is how we can write this or how we can talk to the server how we can communicate our requirement to the server in order to solve this problem that language was created and this language is known as SQL so please remember one thing SQL is not a programming language it is a communication language SQL is used to build a communication between the client and the server so whatsoever information I need from the server I will write down in the SQL format I will write down in the SQL query that will be communicated to the server see Server will process it and it will return it to me so SQL comes over here which act as a communication language between the user and the server so let me write it down SQL which stands for structured query language which is a communication language that act as a bridge between the users requirement which he or she will write down in the form of SQL query and the server so this is basically our language that is happening between these two components now the first problem is resolved that okay we have the Central Storage uh the all the data is present in the Central Storage so anyone who wanted to uh query that data or maybe check out that data can log in and can check it out so my problem number four which was over here is result so I'll write stick it's done but what about this problem fifth number problem how the data is logically arranged now this is something that is what the architecture of rdbms is if we try to understand the architecture of rdbms it is very simple let's understand this within a very Layman example over here um okay let's say Amazon is having multiple business and it is having multiple business actually so I'll write down e-commerce over here Ecom and then Amazon AWS then Amazon let's say Amazon entertainment TNT then we have Amazon pay the financial services now within each of these business Amazon will be having multiple data sets or maybe multiple sources of the data which the Amazon has to preserve if I take a very simple example let's say I'm having some files or maybe I am having some photographs let's say I have some uh 1000 photographs out of which some photographs belong to me so sumit's photograph some photographs belongs to my girlfriend so so much GF some photographs belongs to my parents submits parents some photographs belongs to let's say my my father or maybe let's say my brother now let's say this is my laptop so what is the best logical way to preserve all this data all these files all these photographs into my laptop and let's say I'm talking about the Deep Drive the D drive of my laptop now if you guys think about it the best possible way is to create folders so I have created folder a folder B folder C folder d and I can place all the photographs of myself in a followed by all photographs of girlfriend and four folder number B then folder number c and then fold a number D now this is the best possible way to logically arrange this data in my laptop now the same architecture or maybe the same logic is used by database in your idbms infrastructure we have two components so here we these are known as files and these are your folders so in your idbms infrastructure let's say these are my folders and each of these folders will have the associated files let's say in e-commerce we will have the files of orders the orders data the customers data are followed by vendors data so these are my files so rdbms follows what is known as the folder file format folder file format now in the rdpms term these folders are known as database and these files are known as the tables and this is what are the two initial components of a rdbms or maybe of a server in the server you will find of multiple databases so for example Amazon is having multiple business so it will create multiple databases and within each database it will have multiple files which are also known as tables we will talk more about what are the tables what are how tables look like and how they are connected to each other in the next slide now we are able to resolve the two major problems let me just quickly summarize because you guys must be feeling confused now so let's quickly summarize everything we started discussing about what are the problems and what all problems the company would face if they prefer using traditional storage system the two major problems that we uh we came up with was the same view problem how to make the same data available to everyone who wanted to query that the second problem was logical collection and arrangement of the data how to logically preserve the data so that it is easy to input the data and easy to retrieve the data we started discussing the solution and the solution was rdbms rdbms comes with two components the server and the client where server is the Central Storage of the data and client is the software or the GUI that helps the user connect to the server SQL is a communication language that act as a bridge between the client requirement and the server so whatsoever requirement thus the client is having he or she will write down that requirement in a form of a SQL query that will be communicated to the server and the server will process it to return to to return the answer to the client now uh how we were able to solve the first problem the same view problem so the same problem was resolved by creating server which was the central data storage and everyone who wanted to access that data can connect to it the second problem was resolved by creating these uh architecture which is the folder file format uh we have database we have within each database we have multiple tables but the problem is still not resolved how The Logical Arrangement will happen within these tables so that this kind of mesh like a structure is preserved because you can see that there is a network the order table is connected to product product is connected to vendor and so on so how this network can be preserved in order to preserve this we have to understand the tables now let's take an example of a company database so let's say we have this table this table is having employee ID name joining date salary and the last one is the department ID now let's say we have multiple data entries or rows so here let uh so here this table is named as let's say the employee table because it consists of all the employee specific information and then we have the Departments table so here we have the Department ID here we have the Department number and then let's say we have number of employees so let's create some data points now before I talk about how these tables are related let's talk about the terminology associated with these tables please remember that these two tables are the part of a database the company database so this is my table number one which is named as employee table and this is table number two Which is my Department stable now in this particular table these columns are known as fields while these rows are known as records now these are the terms used for the table which is the part of a database fields are your columns and records are your rows if you guys carefully observe we can find out a common column Within These two tables this particular column which is Department ID is available over here as well as available over here now this is what is known as the relation this particular common column will act as a relationship between these two tables so if I ever wanted to connect these two tables to extract the complete information I can simply use this common column to connect these two tables now in the department table in this particular table which is Department stable this column has a very special name or this field is known as the primary field now it is known as primary field because in order to input any record in this particular table I need to declare the department ID without having Department ID I cannot enter any record into this table so a primary field cannot be null not null and it needs to be unique these are the two constraints of a particular column or a field to be a primary field a particular primary field of one table so their Department ID is the primary field of Department table becomes foreign field so this is my foreign field becomes foreign for the another table so the definition of foreign field is a particular primary field of one table becomes foreign field for the another table now the combination of these two columns which is a primary field and the foreign field will establish the relationship and that's how multiple tables are connected within a database so if I quickly show you a schema maybe within a database So within a database how multiple tables are connected here you can look at a sample schema so this is known as a schema schema of a particular database so here I am having the customers table orders table order item table and product table now here you can see that in the customers table this ID is the primary key this particular primary key is connected to this column which is customer ID so this is for and I'll write F over here I'll write p over here now for orders table this is the primary key which is connected to the order item over here so this is my foreign and this is the primary key which is the order item ID here again you can find out the relationship between the product ID here it is foreign and here it is primary so you can see that all the tables in this particular schema are connected to one another and we can fetch out the complete information about the detailed information about any product any customer any order by connecting all these tables that is how the data is presented within a database so this is how rdbms resolves all the problems that comes if I use traditional storage system let's Now understand the concept of vendors now to understand this concept we will first of all take a very simple example so you guys consume copyright low we have coffee now coffee as a product you can find out coffee from the vendor Tata you can find coffee from the vendor Brew then we have Nescafe then we have other brands coming into picture so we have multiple brands and we have multiple vendors those who are basically selling the same core product so the product over here is coffee the core product is coffee now you can consume coffee from any brand which you want now what they essentially have done they have added some flavors some extra flavors and they have presented their coffee better from other so how we decide that we are going to have coffee from Tata or how we decide we are going to have coffee from Nescafe it depends on our taste our convenience and our choice the same concept goes with rdbms technology now rdbms is a technology for which we have multiple vendors we have Oracle we have Ms SQL also known as Ms SQL Server then we have my sequel then we have post Grace equal now these are the vendors which are basically running in the market they are the market leaders when it comes to the rdbms technology but how it all started or maybe who was the first person I would not say person who was the first company who developed this technology for professional use for the commercial use so let's try to understand the history Now history is something which is very important to understand to be known because it will give you an idea about how the development was made in technology it is not a very important interview question but it is very important for any technology experts or maybe as a data professional that we are aware about how the developments has been made in the technology so that is very important now this person on your screen right now this person is named as EF chord and he is the father of the technology rdbms which we are using today so in 1970 this person presented a paper named a relational model of data for large shared data banks now when he presented his paper there was a lot of disruption in the market because at that time the technology that the market was using was very much bulky now when I say bulky that basically means it was not scalable it was not organized but this person when he presented his paper in year 1970 the technology or maybe there was a disruption in the market everyone was trying out to implement this technology since this person right at that particular time was the employee of IBM uh he reached out to the managers and the maybe the leading uh leading team of IBM so I'll write M over here to depict managers and he presented his idea to the managers so he was basically trying to convince the IBM team so that the IBM team can start working on his idea and can developed a product out of it now what happens as you guys already know if a company has to work on a new technology the company has to put some extra money and that was the concern of the management so the management straight away discarded and the management was not interested in his idea EF chord started reaching out the clients of the IBM company so IBM was basically a company which was serving to multiple clients at that time and when EF court is started reaching out to the clients the clients they got an idea that this is a technology which can help them to to basically modify their existing database management system and they got an idea that this is something that can help them to scale at an exponential Pace because at that time the data was growing at an exponential rate so there was a lot of pressure that created on top of the IBM management and that is where in 1974 the company actually started a project uh named as system R and one thing which was shocking at that time was this project was not having EF cod as a team member so they started this project without EF Court but they were actually very late in implementing this technology by the time IBM was planning about this project by the time IBM was working on the idea of EF code Oracle came into picture since Oracle was already very much fascinated with the idea of EF Court they started implementing that project and they became the very first company in 1979 to make this technology named rdbms available commercially now that is how history started building up so the idea was developed by a employee of IBM but IBM since they were not interested Oracle took the time Oracle took the advantage and they developed the first commercially available rdbms now how SQL was developed so we have to go back in this project r so when the team at IBM was working on this technology project are and which they were able to develop by the year 1975 they faced a problem now previously if a particular client has to communicate to the server it was required to write a very heavy code to particularly transfer the request to the server and that was really difficult to do for a normal person let's say if I am a manager and if I am interested in finding out what are the top 10 products which my company is selling so for me being a non-technical person or maybe not a technical Advanced person writing good number of code or a huge code is a difficult task for me so the team who was working on Project R they developed a simplified language which they called as s e q u e l now that is SQL but the full form was structured English query language and this particular sequel is nowadays known as SQL so that is how this language was developed now let's come back and talk about how the vendor development happened so as I've already told you Oracle was the first company which came into the market and placed there commercially available product named rdpms now the next what happened now Oracle when they were working on uh this technology they found out that the existing SQL language has some limitations when we talk about SQL language SQL language is designed in such a way that you can use it as a communication language but you cannot write Logics you cannot use as a programming language for example let's say if I have to write a logic using IF condition using for using let's say I have to write a function which basically iterates it is not possible in the base sequel the the general sequel that we all learn and Implement nowadays but since Oracle was working on this particular technology and they were looking for a language which can also Implement these kind of procedural tasks they developed a language that was named as PL SQL PL stands for procedural structured query language now the advantage of this language was that you can actually now write your Logics write your conditions write your false statements write your Loops you can do a lot of thing with this so here in my screen I have presented a simple example of how a PL SQL language looks like so we declare then we have declared a variable where one with the data type as number we begin with the operation now variable one is valued at 10 so the value which we have provided to the variable 1 is 10 and then we have written a for Loop to display the output which is the multiplication between variable 1 and variable 2. variable one is already 10 variable 2 is from 1 to 10. so in the first iteration I'll get 1 into 10 in second 2 into 10 and third three into 10 and so on now this is something which you can not normally do in SQL but this is possible with PL SQL so Oracle is a company which developed PL SQL let's come back to the to the vendor thing and let's first of all summarize everything that we have discussed so this person EF Cod developed the idea of rdbms system which was first implemented by Oracle in 1979. SQL was a language which was developed by the IBM team those who were working in the project are and later the name was changed to SQL then the Oracle was the company who developed the language PL SQL when Oracle was already established market player why other players came into existence so we already know that we have Oracle then we have MS SQL then we have my sequel then we have postgres equal now when Oracle was already there in the market why other players started come going up in the market what was the requirement so the requirement was the problem with Oracle was that number one Oracle was costing a lot for the uh for for various clients so cost of Licensing and support was expensive it was not open source second was since internet was growing at a very rapid Pace Oracle was not compatible with websites so if I have to connect my website data with the Oracle database it was difficult to do it at that particular time as you guys already know Microsoft was a player there were so many technology that was around Microsoft so we were having Microsoft Visual Studio we were having microsoft.net framework so since Microsoft was a player there was a requirement of a technology or maybe a database which is very good compatible with the Microsoft infrastructure and that is where the second market player came into existence which was Microsoft SQL Server now when Microsoft launched themselves the very first Advantage was that it was very much compatible with the Microsoft environment the Microsoft tools so you can easily run it on your Microsoft Windows laptops and Microsoft Windows desktops also it connects very easily with the Microsoft infrastructure or maybe other platforms that is controlled by Microsoft but Microsoft also took one opportunity which they found that was a major Gap in the in the industry at that time banking industry was facing a lot of challenges because there was transactions that were happening so since internet was booming banking industry was also moving towards becoming online now when it comes to online you have to manage the transactions so what they found out that there is a lack of having a language which can deal with transactional data so they they introduced a language with this which they called as tsql Transit SQL and the advantage was transact SQL was that it was mainly developed to handle the transactional data using tsql we can still write the procedural logic writing Loops writing conditions was still simple but tsql was more profound and more uh I would say more easy to handle the transactional data now if we compare here in this particular slide I have shown you one example of how tsql block looks like so we begin the transaction if I go back and show you my PL SQL it was declared then begin simply begin but here it is begin transaction and here in the end you can see that if this condition is true then we commit otherwise we roll back now what is the meaning of commit and roll back so commit means if a complete transaction is done then we will commit then we will close it then we will register that otherwise we will come back we will come back to the initial Point let's try to understand this what is the meaning of complete Transaction what is the meaning of rollback so let's say we have two person here we have person a and this person is having 1000 rupees in his account in his or her account there is another person person B and he or she is having again thousand rupees in his or her account now let's say this person wants to send 500 Rupees to person B so this person initial image or initial initial data I will write image one is thousand this is before transaction this person initial image image one is again thousand but when this person is sending 500 Rupees to this person this person image number two will become thousand minus 500 so 1000 minus 500 which is 500 now this is image number two and for this person the image number two is thousand Plus 500 which is again 500. now this particular image one is is before transaction so I write b t before transaction this is also before transaction and this is after transaction and this is also after transaction now what is the meaning of complete process when this person will be sending the amount to percent B and if the transaction is completed then only the commit will happen so T is equal language will preserve the data when this complete transaction is done otherwise rollback will happen otherwise it will go back and it will it will show this thousand and this person will also get thousand so the transaction is not completed so it will come back to image one now in Oracle Oracle preserves both image 1 and mh2 so I am talking about the difference between PL SQL and T SQL the major difference is that in Oracle your image 1 and mh2 is both preserved but in t SQL once the transaction is completed then it will preserve the after trigger so here I have written Oracle users after and before trigger so this is before trigger this is after trigger this is before trigger this is after trigger but T SQL preserves only after trigger and the reason it preserves only after trigger is because if the transaction is not completed let's say due to some Network issue the transaction was not completed so roll back will happen and the commit will only happen when the transaction is completed now this was the difference between PL SQL and T SQL now why next player came into Market why my sequel as I already told you that since internet was growing there was a great need of having a database which is light which is light and which can easily connect with various website now when we talk about Oracle and when we talk about Ms SQL these were heavy database and they require a good amount of infrastructure to basically run them to deploy them but there was a great need of a very light database which can connect with any website and also the the particular user who is looking to use this particular database may not have to put put that much money because various startups was also growing at that time so this mySQL database came into existence and it was the very first open source database so it was free of cost to use and that is where people started adopting MySQL technology or maybe that SQL technology the rdbms technology so MySQL is a very I would say it is the 4 First Love for any data professional who is trying to learn SQL as a language because this is open source and this is very lightweight and it is having a very clean interface for anyone to understand after that the post Grace sequel came into existence now postgres is also a open source relational database management system but they solved a very different problem when they launched themselves there was a increase in the amount of textual data so people started messaging now since people were messaging the companies are required to preserve that data also and then they need some technology which can help them to perform textual search so when post gray SQL came into Market they launched very two unique functionalities number one they gave user with the flexibility to perform full text search and they came up with a lot of functions which can help you to perform full text search whereas they also launched a particular extension which they called as post GIS so this was the extension which can help the users to basically interact and analyze the geographical data now here we have one example of how we can use a post GIS framework so let's say we have to find out what all places we have around a particular region so here we have the latitude and the longitude and I wanted to find out that what all places we have around this particular place in 10 kilometers or within 10 kilometers and here you can see the sample code so select abstract and this is the point of a particular base Place let's say B this is my a here we are calculating the distance and then where we have written a condition where the distance is less than 10 kilometers so you can see that the with the introduction of postgres equal these two tasks became very easy for users to perform so let me just quickly summarize everything about how the development was made so Oracle was the very first market player which came into existence and they launched a particular SQL language which they called as PL SQL PL SQL was a language which allowed the user to write down conditions loops and write down procedural logic then the next market player was Ms SQL Server now they launched a particular technology known as t-sql which was very much simplified to work on transactional data and then we were having my sequel which was very lightweight and easy to connect with multiple website after that postgresql came into existence to basically help the user work with textual data and geographical data that is how development was made now here I wanted to talk about two additional platforms which are not database but they are platforms SQL Lite and Google bigquery now sqlite is a serverless platform please remember it is a serverless it does not provide your server it is a serverless platform which you can download and you do not have to install you can straight away start working with it it is very lightweight it performs very fast so let's say you are looking to work on pre-development Research you are working on a database where you want to research you're looking for very quick computation sqlite platform is a very great alternative when it comes to mySQL or Oracle it can connect to any server but it is basically as client which is very fast and efficient Google bigquery on another hand is a cloud-based data warehousing analytical platform which is available in Cloud infrastructure so you do not have to install anything you do not have to basically uh work on managing the server it is cloud-based so you have to just pay for the services and you can use this particular technology now this is basically a paid thing if you wanted to work on Google bigquery you have to pay but for a user who are trying to use this technology or maybe a platform for learning purpose they can use it and they will not be allowed to connect to a server so they can use the internal server or maybe the internal data which is present in this platform to play with various queries and to learn about it so we'll be also using this I'll be demonstrating you how the Google bigquery looks like and how you can use it for your personal learning but that was all about this particular video in this video as you guys already know that we have discussed about a detailed um detailed Theory and detailed history of how rdb based technology happened and what all came into market and what all Improvement were made over the period of time so we hope now you guys are clear with the difference between various SQL platforms and the history of SQL before you end this video please like this video share this video with your friends and subscribe to our scalar's YouTube channel okay so this is your dbms and SQL bootcamp so let's start let's start with basics of dbms so whenever you appear for dbms interview the basics thing you should know like what is dbm is why we are actually learning this why it's so what's the advantages of dbms right so let's first begin with what is even data like why is even data important what do you think is a data what you all think is a data if I would say the efficiency of any company or business it depends upon the data it has I mean like like uh user data data about how people are you know uh how people are interacting so data is a very important that information is very important and relevant for any company to take their business decisions to grow so data is of prime importance and it act as a core for the company's functionalities the thing is okay the data is we have enormous amount of data but how can we arrange the data to arrange data you need some kind of a system right what can be those systems yes data is some raw information any just piece of information right okay so how can you arrange the data to arrange the data we need some kind of system one basic system if I can say is let's arrange the data in files now let's arrange the data in files let's say we are developing a data for a university and I can have something about um let's say so I can have something about a student's table I can have a student's file students.txt then I can have a let's say for employees for organization I have an employer's file so employees.txt file right so that's a very fine way to store the data but that is not the you know the good way to what efficient way to store the data actually depends upon the type of data you have so that is where the concept of database management system come into picture how will you even store the data what optimization you will do you just don't need to you know store the data just pour the data no you'll have to use the data right if you don't manage your let's say your wardrobe you don't manage your wardrobe you just keep on dumping your clothes like that because you need to store that but no you don't need to actually store you need to fetch the clothes as well every day you need to find the clothes so if you just dump your clothes as it is so it will be very difficult to you to even find a particular piece of cloak right so you need to arrange it in proper shells likewise there are two important decisions that you need to do the very first storing the data next is querying over the data right okay so what does a dbms a dbms is okay a dbms is a software system that allows us to store the data and query over the data along with providing a lot of other functionalities a dbms is a software that allows us to store the data query the data along with other functionalities as well for example what are the other functionalities dbms provide us the advantages of dbms first is security constraints right concurrency how multiple users are accessing the database at the same time right there are million million of people accessing the same database at the same time how this is possible then backup facility of course backup should be there then security dbms is highly secure it's the data is first encrypted then it's stored then maintaining consistency of data right then reducing real identity repetitiveness of code okay now the thing is okay we learn what does dbm is but how can we structure our dbms of course the very first or traditional way of storing the data is files but that not the most efficient way to store the data right can you tell me uh okay let's say one of all of you let's write one one corn of uh storing the Theta in file system just one con what do you think why do you think storing the file storing the data in files is not very efficient what do you think foreign if I store the data in files if let's say you give your file to somebody they have the access of the file they can do any manipulation stuff so there is no security right so there are many there is no concurrency in files if one person is expecting the file at one time no other person is allowed to even access the file right no backup facilities or backup Channel backup you can take consistency of data no consistency at all repetitiveness of code right so these are some of the cons of file system that's why we have shifted to TBM is the database management system now okay so you want to store the data you want to store the data about something right yes data reader density cannot be avoided yes okay so now the thing is you want to store the data about something right let's say for an organization you want to store the data for students for employees yeah and for each and every store student you are storing something about it right so these things are actually known as entities so what are entities entities are nothing but about what or whom are you storing the data for so for an organization you are storing the data for students for employees for the faculties similarly there are attributes there are fields like what data about entities you are storing okay you have stored the data about student but for student you are storing their name their ID right the date they have got the admission so all this data about entities you're also storing that is called attributes attributes of the entities then let's say there are two entities College entity and student entity now you want to store the relationship between them student took the uh admission and college at this date so this is actually the relation between the two entities right there is no there okay there are separate separate entities are there no there's actually a relationship between entities right so the third thing is relationship between different entities right so a database that you can store the data in the form of entities and it can have some relations between them they are called relational database Management Systems rdbms another important thing that can be asked what is rdbms why we are using rdbms right now why it is so prevalent why we are not storing the data in traditional file systems so you will tell all the drawbacks of file systems what is the definition of rdbms what are the advantages of rdbms over file systems ticket okay so some of the popular examples can be a MySQL postgresql right now before going on to SQL part let's answer this suppose you are given design a schema for scalar in scalar you have their uh users you have students you have batches right so you have to design a schema now what do you mean by schema what do you mean by schema schema is the blueprint of your database like uh in your database what are all the tables you will be having you will be having a student stable user table bachelor's table like what are all the tables you'll be having and inside the tables what are all the primary key will be there foreign keys unique Keys what are the different keys will be there how are you arranging the data so that all the definition of data the blueprint of data is your schema take care now how can you design a schema that question can be asked uh this is just a simple scalar you can be asked for example uh for a food system a food delivery system you want to create a schema for so for that you have to design different tables write this table it will have it will have a food order table a customer's table dishes table items table right so you want to create different different tables then you need to find the primary key foreign key so let's see this so that is how a simple schema design look like you will have a you will have a user stable in this users table you will have ID name their phone number email and ID is the primary key what is the primary key of the table what is the primary key of a table primary key is the unique unique column the column that uniquely identifies your table right here ID uniquely identifies your users table so ID can be the primary key of my table unique identification key yes similarly you have a student's table then you have batches table in the students table you have id id is the primary key then you have batch ID you have name and you have user ID as well and what is this user ID this user ID is actually the foreign key right and foreign key is you will Mark foreign key like this this is the foreign key of ID then Patcher stable in batches table I have the ID as the prime taking and batch ID is the foreign key of students table right if any other key let's say a email can be unique right every user can have unique email so you can write unique that means email is a unique key foreign understanding of primary key foreign Keys unique keys so just check out my video I have paid a detailed video of this and in that I've taken a very good example and with the example I have explained each and every piece okay now so this can be a question right see uh you know a definition based question may not be asked you are some real life scenarios can be asked me just let's design a schema for that in this all your you know theories will be applied how can you create a table if you want to let's join the tables then primary key foreign Keys all of your theories are covered in this question itself right so these type of questions you need to practice okay so if you want to create a table or let's first understand what is SQL what is SQL SQL is structured query language right that is the most popular language to query upon the data that I have stored now I have stored enough data now I want to fetch some data I want to change some data manipulate insert so all these things can I can do with the help of SQL that is the structured query language and one more important thing SQL is case insensitive case insensitive means case insensitive means I can write like this then I can write like this as well okay both is the same okay it will give the correct answer for this as well for this so sqls K is insensitive okay upper lower case will not be matter okay yes now how can you create a table in SQL the Syntax for that is create table let's create a table for the students schema create table create table you have to write the name of table then inside the brackets you will Define all the columns right so ID column and you have to write the data type as well so ID is it and ID is primary key as well so you need to write this ID int and primary key similarly batch ID it's also in type name can go up to 10 characters then user ID end so there's a simple syntax how you can create a table in your SQL now another important query in SQL is Select select is very important so what's the syntax of Select select you have to give the name of columns which you want to select means actually read read this so read these columns from which table you need to define the table where you can write the condition then order by Okay order the table in business format so let's say for the students table I have their ID their first name their last name for this student's table now I need to get the first name of students okay what query can I write I need to get the first name of all the students from the students table what query can I write help me write the query to get the first name of all the students can I write like this select what column I need to select first name right from students ticket simple now let's say I have another student and its name is also same now I want to get unique names only I want to get a b and c I don't want this a again so what can I write if I want to get unique names the keyword for that is distinct yes the keyword for data is distinct okay now the next important thing to understand here is sub query sub queries or nested nested query that is very important for example let's say you have a student's table okay you have a student's table now in the students table you want to give degree to students who are in batch 2022. who pass out in Frozen 22 you want to get the give the degree student but some students will not get degree because they fail okay so we have another table here failed student with ID 2 3 just failed we don't have to give the decrease to them so we have a fail table and we have our students table now the task is you have to get the students who will get degrees uh you will only have to get those students who will get degrees okay that is the query you want have to write how can you do this can you somehow get all the students who uh have failed can you get this can you somehow get all the students who fail yes I can simply write select ID from fail student right in this from this query I'll get all the ideas of the students who fail now now my task is I want to get the students who will get the degree so can I write like this select ID from students where patch is equal to 2022. but I don't want to give the degree to this these students of these IDs right this idea I don't want to give them the degree so what can I write can I write like this and not in this is actually the keyword here not in then inside this you will write this select ID from fail students so what it will do it will first get the ID of this it will first get the ID of these failed students then it will select all the ID of these students with batch 2022 but who are not there in this inside this query so it will return just this this row we can write like this is just to understand how sub queries work okay that is very important for your interviews you can be asked about nested queries you are given two tables then you want to relate something you don't want this you want this so in that case you can write sub queries and this is just a keyword you can write just in uh you can write between keyword exist keyword so different type of keywords are there ticket okay let's move ahead now let's understand some SQL clauses the very first is where where so we all know it allows us to filter some rows based on certain conditions let's say I want to get the students who belong to back 2022 so I can write where batch is equal to something right at filter on my rows then order by what do you mean by order actually order in real life means you want some arrangement some kind of arrangement of things right in the way you want to that is the meaning of order so I said return me the list of all the return me all the students but I want order in ID as descending that means I want to get three to one first three then two then one so you can write here ascending as well descending as well whatever column you want to order by you can give the column name okay then next important important test is very important Rubio is important for interviews so group I am mostly related to your aggregate functions what are our aggregate functions aggregate functions take up some set of values and they return a single value okay they take up some set of values and return a single value can you tell me some of your aggregate functions in SQL so the aggregate functions are the very first one is sum let's say for this column you want to find the sum of then you want to find count the number of something then maximum let's say there is a student's table uh where we have ID name and some points now I want to get the maximum points which student got the maximum point so I can give Max then minimum average so these are all my aggregate functions now yeah similarly you can see this example I want to get the average of the attendance so I can give average inside this I can give name of column from students table you can want to you want to get the sum you can give some here count you can give counter right so these are my different aggregate functions now let's say this is not clear now let's say I want to find average attendance of every batch now I don't want to get the average attendance of whole table I want to get average attendance of each batch every batch for example I want to get output like this for batch one average attendance is 70 80 and 60 averages 70. for batch 2 averages 80. right so this I want to return now so this you'll see I don't want to do the aggregate functions in my whole table I want to group some something and then I want to perform the aggregate functions right so the very first thing that I can do is group different rows of the table I need to group these rows then I need to group these rows and after that on every group I need to find the average right this I need to do so how can I write the query for that select what I need to select I need to select the batch ID and average of the attendance from students table Group by their batch side so first how this query will work it will group all the batches and in that group by it will perform the average function is also very important then in group by you will you are you will be having a having clause if you want to filter after grouping your rules right after that you want let's say I want only those attendants who are greater than it so from this table you only want this column after grouping by you want this row so after grouping by you can use a having clause okay now let's come on to joins joins are again very important we have what are joins first what are joints what do you mean by joins uh in joints you can be asked like why joints are important or you are given some kind of tables you need to join join them let's say you are given uh this this columns and you need to perform a query you need to return that uh let's say this this columns are given to you now you see okay these columns are not present in one table so you need to join multiple tables right so you can perform your joints based on the query you are given uh you will perform inner joined or outer joint in outer we have three types of join left right and full so joins are again very important they help in merging the two tables right so this is the syntax uh just you have to write the join keyword and on what condition you are joining you have to write the condition okay now let's move ahead let's say indexing indexing is again very important you will be asked like why we are actually indexing our table what's the need to perform or do even indexing foreign so we are actually fetching a lot a lot of data right we need to fetch the plot a lot of data right but what we actually want to do the idea is we want to get the data as fast as possible Right we want to get the data as fast as possible means a query should run fast so in that case we can do indexing right allows everybody you have heard about arrays and hash Maps right arrays and hashmaps you all know in arrays if I uh say about arrays if it is let's say not sorted and now you need to search an element so it will take linear time similarly in hashma it will take probabilistic around o of one right so we use indexing indexing also reduce our time it helps to query our run our query very fast okay if you want to get this query so you will create index on that so you can be asked like why we even need indexing so what you will say to fasten up our queries okay so index is again very important then you know uh you have to know about the syntax how you can create an index so what's the syntax of creating an index create you need to write index keyword then naming should be like this you first have to write idx underscore table name underscore name of the column for which you want to create the index on then on which table and which column let's again see this with the help of an example create index idx underscore let's say I want to create an indexing students table and marks column so students table marks column on students table bracket you will give the name of the column that is marks so you need to know about why they are actually creating index how can we create index okay and when to create index can you tell me if I uh can I say when you create table then just create index is this correct when you create table then create index this is actually not correct don't create index when you create the table create index when you have a query that needs to be speed up if let's say uh you are every time you are getting something related to Marks something related to Marks okay you are every time need something a little marks this column you everything I need in your query so let's create index on this right so create index because of excess pattern okay you will see the pattern okay this query is getting uh this column is getting repeated many times so then let's create index on this no how indexes actually work is it creates a table actually inside the memory it creates a table for every let's say for this marks column so 70 80 90 for every marks a separate address is assigned to it let's say for address one two three then how it actually work is it will say okay this 70 marks is actually stored at address one so it directly goes into that address and fetch that right so that's something how it uh speed up your query okay now how actually indexes work that you can check out my video there'll be how actually we are creating index I actually created index on my MySQL okay so you can check that video out all the videos will get uploaded by one week or so okay now let's move on to string matching like for all the students I want to uh get all the students whose name begin with them so there is a keyword called like if I want to match a string a word so there is a like keyword okay in this slide keyword I have two keywords again percentage and underscore percentage it matches with any number of characters underscore it matches for a single character for example let's solve this question only I want to get all the students whose name begin with it so select star from students where name like name starts with them so M after that can have any number of characters right so after that right percentage right now if you want uh let's say I want to find all students whose name begin with any single character after that m so you will write underscore because it matches for a single character just Single Character after that so this is about like keyword now normalization you will be asked like what is normalization of course but again uh it's not be the case that you will ask uh tell me what is to whenever for one and F3 and if you actually have been given a table a denormalized table is given to you uh you can be told okay normalize it or is it needed to abnormalize if you find a need to normalize it if yes normalize it that's something you can be asked about normalization okay for duplicate marks it actually create a list for that take care it will create a list for that now how actually it will be great created I can't cover indexes if you want a separate a live session on Nexus we can do that as well but of course you can watch my video okay uh in next video you will get to know all about indexes take care perfect now in normalization you will be asked like okay you are given a denormalized table let's normalize this okay so you will check okay is this following one and if is this falling to an F is this falling 3nf is it violates any of this you normalize it so these type of questions will be asked okay not a direct what tell me what is 2nf okay now another important uh thing is asset properties this is very important you need to know what is a c i d a stands for atomicity C stands for consistency I stands for isolation d stands for durability yeah what are all this atomicity means either everything should happen or nothing should happen at all consistency as the name suggests your database should be in consistent State the system should be consistent before the transaction starts as well as it should be consistent after the transaction ends similarly isolation it's also suggesting us something okay there are multiple transactions that are happening right but other transactions running in the system should not affect the given transaction all the transactions should be isolated from each other they should not hinder their output right now durability durability says after a transaction is ended its results should persist this does not be the case like if there is a hardware failure is there and the result is just gone no if the transaction is ended your results should persist it should be there so how transactions actually handle concurrency and show the asset properties it's there with the help of transaction for isolation levels okay so uh do check out the transaction video as well and transaction isolation levels as well read uncommitted read committed repeatable reads serializable okay so you will uh in our video we're actually doing this like in X12 what happened if your isolation level is this what happened to the isolation level in this okay so that was a very interesting video do check it out as well so what I want to tell you in this session is key exact questions and not be asked it give me the definition of this give the definition of this right so we ask them by twisting and turning the things right like a normalization you are given a table just normalize it so these type of questions can be asked with some real life scenarios type of questions can be asked ticket so you will have to prepare likewise about views okay uh what do you mean by views okay if I say views are fewer kind of an abstraction they are kind of an abstraction over real tables they will provide a visibility of data that you want to provide they act like a table but there is no data stored in them for example let's say you are in an organization and you have prepared a table for uh you have to pair two tables okay some tables let's say some students some employees something another department someone come to you and they want the complete information about both the tables now I don't actually want to give them the X's of the tables right they can manipulate your tables they can uh they can change the rows so what you can do is you can actually create a view over them and you give them the view so they are the kind of abstraction they're actually not the real table now they can't they can't change or manipulate your real tables but then also they have the complete information right they can use it they can query over your views as well okay and how can you create a view what's the syntax of you create you have to write the view keyword then name of the view let's say I want to create a view on students and employees so if students comma employee then as you want to give you have to write all the query just just this syntax it will create view on whatever query you will write it will create view on that yes a kind of a virtual table kind of an abstraction over your table it's not a real table it's kind of an abstraction over your real table okay if you want don't want to give your tables complete tables then you can create view on that right or let's say you always want to you know want something from this both the tables students table as well as employees table so every time you are performing joints so what you have done you have created a view over that so that you can now perform all your queries in that queues you don't need to join students and employees first then you can perform your query okay your view is created and you can directly perform all your queries in that groups okay uh communication is not that great can you give few tips also how to prepare for SQL especially uh okay so communication skills you don't need to actually uh work on your communication skills what you can do is you can remember you can learn this like let's say for views so what you can do is you actually uh learn what is view how can we create views so just try to explain someone or try to explain yourself see how you will explain to someone okay take uh something pen and paper and try to explain if someone someone wants to learn views how can you explain views to them so first you will tell them the definition then you will take an example then you will take some real life scenario so that they can connect well right so then slowly and slowly you can able to improve your communication skill with respect to dbm as an SQL directly if you work on as communication skills so it will take time okay so but this can improve your communication as well as your uh subject as well thank you suggest we need to prepare for service based companies or subject service based companies to prepare well first you need to do DSA DSA is very important then your resume should stand out you should have a good LinkedIn profile then uh then you should have basic knowledge of development as well so all this we have already covered you can watch our video on this resume LinkedIn DSA then you can uh watch our JavaScript videos and you can have we have some basic front-end projects also you can take up that little bit of Cs knowledge is necessary dbms OSCN okay when I'm facing technical interview I know the concepts and queries but I get nervous and forget what should I say okay this will happen but uh the fear will get away if you practice more so try to do uh some mock interviews before actually getting on to the actual interview try to do some mock interviews this will help and of course the trick you can also apply try explaining to yourself if you want to explain uh joins to someone how can you do this then your nervousness or your you know thing will get solved and try walk interviews it's very important hello everyone welcome back to scalar Academy YouTube channel myself in this particular tutorial we will be looking into the another article from the interview bit okay what is this article all about so after I used to get a lot of questions from my juniors regarding the product based companies interviews not even product based companies interviews it's yeah like it's about every company interviews okay so the question was apart from coding what are the other areas they will be asking questions from so I used to say a dbms OS and computer networks so yes so these are the very important things so that will be focused in an interview apart from coding as well so in this particular tutorial we will be learning one such topic like subject named database management system so what is database management system and what kind of questions that you can expect in an interview Okay so now in the next one hour one and a half hour what are we going to cover so we will be starting right from the what is it data and then database then dbms and how that data has been stored in and different manners and where does that database has been placed and how to interact with the database and how to access the database data from the databases and what are the ways to access the data and uh how to store such a huge data in One Singular database will it be over like we will be discussing all the pros and cons of storing uh data in the database and what are the other Alternatives that are being we will be having and also we will be learning about normalization to try architecture of a database three type of nature of a database and what are different types of database structures okay like um so it will be easy to code and it will be easy to represent like store but how to communicate with others okay how to like it's not like oh okay tell me about how did you stored are your data in this particular database it's it's easy to show your database like code so this is how I have written the code and this is how I will be uh storing my data so here comes the picture called NDT relationship diagram okay so that is the actual thing so we'll be asked in a system designing rounds okay uh if your interviewer is focusing more on to the low level designing okay so I highly recommend you guys to watch this video till the end okay so that you will get a bigger picture and better picture on what we are going to do in next two hours and how to answer such a questions if you are in an interview so before moving on to the actual video I highly recommend you guys to please do subscribe to this Channel please hit that like button up and please let us know in the comment section how did you feel about this particular video so let's discuss the very first question so the question stated was uh what is mean by dbms and what is its utility explain rdbms with examples so they are asking us so Define what is dbms and what is it necessity like what is the need of dbms and rdbms so rdbms is one type of dbms okay and they are asking us what is it dbms sorry rdbms and explain it with example okay so let's try to understand what is dbms first DB image so let's try to decode this whole world okay so a database management system okay and again we'll talk about this first so even in this we'll talk about this data so what is a data what is your data so can I say that a raw input which is needed in the future we did that aim we will be preserving that okay like what I'm trying to say was so the data is something which you felt okay uh which is a very needed one it might helpful in our future so that if you fail that is uh needed and helpful in the future then you must need to store that right preserve that data so then it is called as a data now what is a database now um instead you can say that a group of interrelated data what does this interrelated data so let's say um let's say we are in a college we are in a college in in college there will be around a 5000 to 10 000 students right five thousand to ten thousand students now I need to keep them like I need to keep all the students data forever like at least for next four years if I joined in my first year I need to preserve that data for the next four years so what will College do so they will store all the details of CAC people in some place in some table let's say like in some place just assume that it's a block okay CSC and then easy then Tripoli and even they do all these storing in some other folder let's say let's say 2070 to 2021 so 2017 to 2021 is a you can consider as a folder and again in that folder we will be having other folders like ecsc ECE Triple E and in that CSC folder we will be storing our data so here all the CSC data has been stored somewhere so can I say that this isn't related data so that is called a database so this entire thing now is called as a database done now we'll move to the next thing called management system so uh basically let's say let's say uh I have stored all the data of first year students now after moving them to the second year so I need to update the courses which they have enrolled or let's say a few students left to the college okay two students left to the college so I need to update the DB did the DB or I need to update my pass so delete few students delete few students are are so there were some people who joins in the second year right so I need to insert them inside the students so can I say that all these were few operations that I need to perform on database so just imagine okay just imagine like um you would be having some kind of interface okay you will be having some kind of interface and you will be having your database here this is your database and this is your interface which helps you to perform all these kind of operations easily okay then then this is called as a management system and with the combination of this mission is called as a DB MS now you've got the what is dbms right so database management system so you will be having database okay and also you will be provided one interface which is we are calling here it has a language so that you can easily update your tons of data in a single go either it can be delayed insert update kind of stuff okay so that is what dbms means for so now I guess uh we have answered the very first question now explain rdbms with example now what is this rdbms so we know what is dbms we know what is dbms so in dbms we um we have different types like types in the sense how we are storing our data that's it okay so one of the ways are dbms so which is called as a relational database management system so a relational means storing the data in the form of tables so what does it mean by tables so let's say I have this kind of one table so generally for every table we will be having some uh rows and columns right rows and columns so all these were rows Row one Row 2 and these are our columns column one column two column three column four column five now what does this column States for so the column States attributes are of properties and columns are like rows are the data which we wanted to store which we wanted to store so let's see let's take one example and then I will try to explain it with you so earlier we have talked about college data right so now let's say we are storing um some student details so if I wanted to store the student details what are all the details which I am going to store so can I say that I have to store the student ID which in terms called as a roll number and I need to store the name mail ID and branch and like C GPA so Etc mobile number so these are all the common properties of every student okay common properties so these are called as attributes as well attributes okay attributes now what is a row so row means each student data each student data okay we'll we'll draw one table here so I will be taking only few uh columns so roll number name and a branch okay now this is our table this is our table now I will be storing the very first student let's say roll number is 100 name is x y z branch is CSE now again I need to store another student this roll number is 101 name is ABC branch is easy then goes on okay so this is can I say that this is called as a one student data student one data this is called another student so all these were rows and also these can be called as a tuples as well couples so these were columns are referred as attributes so this is what if we store our data in this particular format this is called as an rdbms okay relational DB so this is called relational DB and rdbms means it's a language so it's an it provides an interface called it might be MySQL SQL Ms equal okay so yeah these are all the very famous rdbms languages now you can use any of these things and you can interact with the DB and you can perform some operations on the DB whatever we you want okay so there were some commands so known as SQL commands my SQL commands so by using that you can interact with your DB okay so we'll talk about those things as well in the later part now uh that is what we have seen for this thing this particular example okay so uh they have taken one website okay they have taken one website so um yeah so here there is a website website printing and you uh just assume you have requested some data okay like you have an interface like this you have an interface like this look where uh you will be giving the student role role number like 100 or 200 something then submitting okay so after submitting you you will be getting all the students like um all the details of that particular student who is bearing that role number okay now how it should go so you have a website then it will make a call to the DB which is an fetch okay fetch date fetch data then it will go to the database so here you can find the student record okay so that has been returning here then it will return here okay this is how the flow the control should go here okay I hope you got some enough idea on what is DB sorry what is data what is database what is dbms what is rdbms and how does it work okay and what kind of data we store there and how we store there okay now the second question is what is mean by database I guess we have answered this question earlier so let's go try to walk through this definition that's it so a database is a organized consistent and logical collection of data that can be easily updated accessed manageable okay so earlier we have discussed a formal like informal definition now you can see the formal definition so if you are in an interview you should something first uh tell something like this okay then you can pick up one example then you can explain it in a better way okay so if you are in an interview or your interviewer expects you to tell the concept rather than a formal definition but uh don't directly jump into the real world example as well because um uh it it it won't show your communication skills okay so first tell this okay then explain it within railroad example or database mostly contains a set of tables or objects okay so that is what it is showing like whatever we have discussed so they have taken rdbms here okay that's where they are representing as a table okay so just go through that you will get it now that's next question mention the issues with traditional file based systems that make DB Ms a better choice okay so they are asking us actually why we need databases okay why we need database so we have file systems right like we are storing all our data here then what is a need so the need was uh they are given three examples I think that should be sufficient if you are in an interview okay now the very first thing is searching they are referring it as indexing as well so searching means what is what is this searching so let's assume you are in a file system environment file system environment like where are you are storing all the details in your computer manually like folders now uh I wanted to search for one particular student who's who's a role number is 201 2001. now imagine okay there were uh 10 000 students in a college 10 000 students in a college and you need to search the student a role number where it is been a call referred as in 2001. now how much time it will take how much effort you need to put yeah so in worst case if that 2001 has been stored in the very last okay then you need to cross check thousand files okay this is what I am looking is this what I'm looking so if it eventually makes your work job little hectic and complex right so that is the one of the major issue with the file system so this issue has been overwritten by the dbmss okay so they will be providing an interface okay like language then you can simply write a query okay like uh like give me the 2001 uh ID student then they then it will give you that's it it's as simple as that okay so all you need to know is just one query that's it okay it will get your job done name within fraction of seconds fraction of seconds okay so you might be thinking 10K is reasonable search but nowadays people are searching it like the data has been gone to PBS okay like 100 TBS okay it's it's you up to your imagination okay now what you can think of in a bigger way now the second solution that we were considering is concurrency control so if you don't know what is concurrency control it's okay but as of now I will be stating this in an a Very simpler manner so let's say you can consider as a multitasking multitasking okay so uh lack of concurrency control which leads to one operation blocking the entire page so they are simply stating that let's say if you are searching for a 2001 student okay then you are blocked by this particular activity only you are not able to do other activities like uh you need to delete some uh student details okay delete students now you what you need to do first you need to complete this then you need to come back to this right which is like if if it if this particular task is taking 30 minutes then you to complete this particular task you need to wait for 30 minutes right so this is one of the major problem in file system it is over coming back dbms okay so where uh dbms supports concurrency control where you can do a multiple task or data now Integrity check uh data isolation atomicity security Etc so these are some of the uh advantages over the file based systems in dbmss okay so let's move on to the fourth question which is an explain a few advantages of dbms I think like we have covered two advantages in the earlier question only but yeah so yeah these are all the few advantages we'll talk about each of them in detail first one is data sharing uh we'll talk about an scenario 800 yes back sorry yeah I if 4250 is maxed okay let's say earlier they used to store all the details in the in one mainframe system okay mainframe system so where there is no nothing called a dbms earlier now they have this so this is our their system and they have stored all the data here now uh this is employee one and this is employee two now employee 2 needs the data employee 2 needs this particular data now what happens you need to copy these things you know that it won't happen because either he has to go and use this particular system that's it that is the only possible way there so which is not possible right every employee needs and own a problem like one work so what is a kind of problem that way uh so they they decided to terminate this particular problem so how did so just imagine the case where this data has been in a some Central Storage okay Central Storage one room kind of stuff now all the systems were being linked to this okay all the systems were being linked to this now everyone like every employee can access the data with some credentials okay that's it that's as simple as that so this is one of the biggest Advantage here so you will be storing all your data in this database like cloud or something okay you will be putting it somewhere and you will be giving connections to the all the employees they can access it right so you can imagine like whatever the data you are using nowadays like whatever like whatever the app whatever the website whatever the YouTube video okay so do you do you store all the YouTube videos in your mobile no it is coming from somewhere okay they are storing it in some Big Data Centers and we are getting that that's it okay and integrated constraints so uh so the existence of such kind of such constraints allow storing of data in an organized and refined manner so basically these integrated constraints helps us to uh access the data uniquely okay and which helps to uh reduce some problems like anomalies will talk about them later our one controlling redundancy in the databases so redundancy means redundancy means a duplicates what is this duplicate stands for let's say uh like file based scenarios so you will be storing all the students details unfortunately like unfortunately you uh yeah you like just imagine okay you're copy pasting everything okay so you have copied and pasted for the multiple tabs multiple times so now uh all your files so for each student let's say 2001 it will be storing three copies of it and 2002 three copies so now just imagine if you have 1000 students then each uh student copy is been storing for the three times then it could have been gone to three thousand copies now we are wasting lot of storage here right and it will make your a system little slow on accessing and searching as well so to overcome these problems a databases usually don't allow redundancy okay it will try to reduce the redundancy as much as possible okay so it will store only the unique values so it will help you to Pro search it easily and it will uh provide and way so that you can maximize your utilization of databases now uh data Independence so here let's say yeah let's say uh now in this case in this case we'll take this particular file system example so you have identified that okay for every student you will be having two copies okay for every student you will be having two copies or uh like uh you will be storing the things in two folders okay 2001 2001. now uh you wish to delete one file okay it is to delete the student record now you will go to this folder and you will delete this okay now you like you thought this is the only folder where I am storing all the data you forgot about these two but after few years you find that I have deleted I haven't deleted the data here and which leads to the complexness right so to to overcome that kind of problems okay to overcome that kind of problems so your a dbm SS provides a way to okay so to link all the data and if you delete somewhere okay if you delete that particular idea file in some table it will delete all the existing or the same files in some tables as well okay so that it will you can use the things in an efficient manner now uh provides backup and recovery facility so yeah so like just imagine okay we have uh you have stored all the data in some folder and you mistakenly deleted that particular folder now what happens you contrary to that data now so with that thing database dbm message provide and way to backup your files and you can recover them like even after deleting them as well okay by mistakenly and data security so uh usually okay nowadays we will be having lot of security like passports a file folder passwords file passwords and all but back then that was not the scenario and um just imagine you will be saving all your bank details in one folder and if I go and if I open that folder then I can able to access all your bank details now what is it what happens bankrupt right so to overcome that kind of problems a dbmss provide and better security for your data okay you can give a personalized authentication and you can keep track of whoever are using login using that particular authentication okay so this is the advantages of uh dbms okay so let's see the next question so explain different languages present in the dbmss so following our various languages present in the dbms so languages in the sense like to interact with your DB okay so here language were some commands okay commands so in that language we will be having four types okay first one is ddl our data definition language so which helps us to created tables I created DB okay so it command it contains commands which are required to define the database okay like create so it will create it will help us to either create tables or database okay we have seen what is stable what is database right and we have alter which helps us to alter the things or the game all the other things present in the either in the table like um like table names okay column names are sizes and type like that and drop a drop is used to drop the data present in the tables and truncate as well okay so there is a small difference between drop and truncate we'll talk about them in later part so rename so rename is helps us to rename the tables and database names now the second one is data manipulation language so it contains commands which are required to manipulate the data present inside the database okay like we will be having a data okay and then we will be manipulating it means either we are updating and we are inserting and we are deleting and these are all the commands which are therefore so select is used to retrieve the data okay retrieve the data and update is used to update the data present in the table and insert is used to insert the data into the database or table and delete is used to delete the tables okay or data now the third one is DCL so data control language it contains commands which are required to deal with the user permissions and controls of a database system so basically we have talked earlier so a database provides an a better uh data security so how does it work so let's say we have it for we have a person okay and we want to like there is some table okay student table or student database okay and uh there are two people for in college let's say principal or students okay now what I need to do I can't I I need not to allow the okay I need not to allow the access permission to the students right because uh students are not like cannot access this student table so only principal and support staff should be able to access this uh particular a stored in database now just imagine another case Okay where our students are working in some project okay and they need some database access so that we can access some database like we can grant the permissions and after some time like whenever their work is done we can revoke the permissions so to Grant and revoke we will be using data controlled language commands Okay data control language commands now the last one transaction control languages so here transactions means like you will be performing a lot of secret sequence of operations right be it update beat delete beat inserting okay and we will be keeping track of all these things okay like whatever we have done so far now we need to save them up okay here commit means at whatever transactions you have made be it uh inserting update you need to store them okay you need to store them before you are leaving that is what commit means and rollback means let's say you have unfortunately the latest few uh tables now you need to get back those things so then you can use roll back so save points helps us to save at the current Point okay and these are all the different languages provided by the dbms to interact with your databases okay now the next question was what is mean by acid properties so very very important question okay very very important question so it's some crime if you are not prepared asset properties and if you are attempting any product based company so you are for sure you are going to scrub your interview I guess okay so what is mean by acid properties in dbms so acid stands for like acid stands for atomicity Tommy sitting consistency isolation and durability so we'll talk about them each okay each one now uh in simpler manner they are saying that atomicity means all the changes to the data must be performed successfully or not at all so we'll take one phone pay transaction or anything so nowadays everyone using phone payment all right so just imagine just imagine uh you started one payment okay you started one payment to the one shopkeeper okay started one payment to the shopkeeper so now what is that your aim either it has to go to the shopkeeper successfully or it should not go okay it should not uh not debited amount and not credited so in either of the cases you don't have any problem right this is what an user wants it's not like so my amount got detected from the my bank okay amount got detected from my bank and it is not credited into the shopkeeper account then there is a problem so a dbms states that make sure that uh either of the things okay either it should be success and it should not uh happen at all so this is the principle that it follows okay it should not go it should not start and it should not end in the middle okay so that is what atomicity means okay so if you have started you need to finish that okay there is no Midway coming back that is what it is saying and uh second one is consistency so consistency means uh whatever the data okay like so this property ensures that the data remains consistent before and after a transaction so you will be like you let's say so in a earlier example so your current balance was or two thousand okay and you have started a payment of 1000 rupees to the shopkeeper to the shopkeeper we shop now after okay now just just imagine the scenario us this is a success success status okay means your payment got successfully completed so if you open the current balance now after payment after then it should reflect 1000 here and in shopkeeper account it should be like balance plus thousand right if if in any of the cases if for the any of the reasons if it fails to update like this okay then we can say that this is an inconsistency data okay so if if it is a something like this only then we can say that it consistency so whatever the data happen like transaction happen Dash told all the data over there so we are good now okay so the second principle must be so after performing any operations the data has to be uh keep on updating that's it it must be stored all the updated data only now the third one is isolation so what is this isolation means so uh you might be performing uh different or multiple transactions on the same side let's say uh uh so there is a shopkeeper shopkeeper and a customer one customer to and customer three so everyone is doing phone pay transaction only okay so you are sending 100 rupees and this customer to sending 50 rupees customer three sending 200 rupees so here if you are doing your transaction you can't say stop it like okay a customer too so sorry to interrupt please be away so let me complete my transaction no you should not tell like that okay so whatever whoever completing whoever transferring amount to a shopkeeper you should respect them and you should make sure that everything goes well okay so it's support like this is how it works in the rdbms Okay so irrespect of any number of people are doing the same operations at the same time okay the data has to be stored or preserved all the time and there there should be no uh Interruption occurred to the other customers who over sharing are the same time okay so that is an other principle or property of a dbms and the next one is durability what is the durability so here let's say um like in your current balance is 1000 rupees okay and all of a sudden your mobile got switched off okay switch it off now again you put some charging and you opened again okay open your mobile again and uh you have seen that there is a 900 balance in your account so this should not be the case so every time like after every transaction you need to like keep track of whatever happened so far okay and everything has to be preserved for forever in the future so here our data is like so just imagine okay you have Ascent 200 Rupees to someone 200 Rupees to someone and still after 1000 okay so your current from the Thousand you have sent 200 to someone so now your data base should reflect 800. instead of this 800 if it is still showing 1000 rupees then it is failing right so anyhow like we are getting benefited but this is failing right in in case of missionaries so that should not be the case so the same state should reflect everywhere so if you checked it in your phone pay if you checked it in Google pay so all the same amount has to be shown okay so in phone paid is showing 800 in GPA it is showing thousand rupees if I go to bank passbook it is showing 500 rupees that should not be the case Okay after every transaction either it has been failed or passed it should save the previous state and if it is successful it should show the current state okay in all the uh possible ways that he he or she can store okay in case of different applications that nowadays we are using okay that is what this uh durability means okay now uh these acid properties make sure that every transaction like whatever operations you are performing or everything are going pretty pretty good okay nothing is happening in between and these are all the principles that every dbms should follow and will follow as well okay now let's move on to the next question so the next question is are null values in database the same as that blank space or zero good question good question like personally as a software developer I see a lot of null values in the lot of databases okay after seeing them like if you fail that this is not the case so I can't handle this and what all these null values so um then you might be uh in some wrong thing okay you should be wondering how how we need to handle that okay what if there is no data but I need to put it on the UI part okay so then you need to understand the context over there like what kind of scenario that you are considering so just imagine okay just imagine um you just imagine as a phone pair only phone pay and you need to print all the current balance so if your current balance is null as of now okay null so which means no data at all no data so which doesn't mean that it doesn't mean that zero rupee in your current balance right so just imagine just imagine like where uh in your from to your database you have a null value okay and at the same time user has asked for current balance now since you have assumed that null balance has a zero if you assume null balance is zero and for user you have shown zero rupees in your current account now user will start away ping the client services like customer support because in current balance he is thinking that he might have 25k but you are showing 0 as current balance Okay so 0 means zero null means not zero okay another bank space whatever here okay this is probably a very good example I have personally faced or seen this problem many times as a fintech company developer so no a null value is a very different from that of 0 or blank space as it's represent as a value okay so they are saying that no no null value is null value 0 is something zero only okay so they have given one example here as well but yeah so whatever I have discussed from my experience is also good so null values in number of courses taken by a student represents that its value is unknown whereas zero means in it means that student hasn't taken any courses so uh here they are considering an a scenario like table where they will be storing number of courses a student has been enrolled okay so like just imagine you have a UI and you will be providing the roll number and you will be having button like submit and after submitting this after clicking on this particular button you will be getting all the uh course details where student has been enrolled right where student has been enrolled now if you got all the null values like all the null like empty values it doesn't mean that students as an enrolled in any courses okay it means only that you will be like data is not available only okay doesn't mean that student does not enroll in any courses if one only if if I don't leave if you get 0 it means that student does not enter enrolled in any courses okay not null not equal to zero Blank Space not equal to zero okay let's see another question so question number eight what is mean by data warehousing so the process of collecting extracting transforming and loading data from multiple sources and storing them into one database is known as a data warehouse so uh they are saying that we will be getting data from the different sources okay and from that different sources we are extracting the data what we wanted Okay and like let's say let's say there is this YouTube Right YouTube so in YouTube everyone gets the uh like customized ads right customized ads or some advertisements okay posts and all so you can mostly you have related to that like so if I went to Amazon okay if I go to Amazon and if I search for any uh TVs okay if I search for any TVs or laptops and then if I go to YouTube I will get a advertisements or in between ads which are related to the either laptops or previous and even if I did the same in Google search if I go on search for a few MacBook uh prizes MacBook Air price MacBook Pro prices then if I come back to YouTube again I can see the ads of YouTube with the prices now how this is working so here the sources are very different right so here we are getting the data from apps here we are getting the data from internet browsers but but we are using that particular like we are combining all the data together and we are just searching the things right so this is what a data warehousing means okay like you will be getting data from the different sources and storing in one place and processing it together and again you will be using that uh same data for different purposes not only for one purpose let's say uh like I got the data like Amazon data and Google search history and I'm storing them in one place okay I'm storing them in one place now this is being used for YouTube and also in for Amazon also for Amazon also like it will try to show all the um things what I have searched previously on my screen only right or apps itself and for Google [Music] and flip place to okay if I go to Play Store and if I search for any shopping or app shopping app then I will get in all the shopping apps right all the like Flipkart Amazon uh may show all the things so how this is been uh happening so you are getting data from different sources and from that different sources you are processing it together and they feel that you are looking for one MacBook Pro and then they are keeping on Advertising that MacBook Pro everywhere you go okay if you go to YouTube you will see that if you go to Google you will see that if you go to Amazon website you will see that okay so this is how a data warehousing works okay let's move on to the next question so explain different levels of data abstraction in a dbms okay so here what is a data abstraction first so if you don't know what is data abstraction so a data abstraction means in simpler in oops terminology hiding the unnecessary complexity unnecessary complexity and showing only unnecessary parts okay the best example would be the ATM okay like we only care about like putting the card and entering the passport and getting the money but we really don't know how that is being processed in the back end and how your request like how your uh APN pin is getting validated and how your barcode has been scanning and all we don't care about that we only want money we are getting that that's it okay this is what abstraction means so they are asking us what is happening behind this particular data and what are the levels are there in the database transactions okay so here I would like to uh point out divide this whole path okay into the three parts okay let's say this is part one R2 and part three so one two three so just imagine you can assume this part three as in uh like UI where a user can access the data okay like you can simply consider this as one website okay come share this as a one web site and now um what all you can do so you can request the like you can submit your roll number and you can get the results right that's it that's it now uh that is what happens if the user screen okay and then in the second level this is for a developers okay this is for a Developers okay this is for developers who are developing your website okay so where they can directly interact with the DBS okay by using some commands they can manipulate the data they can retrieve the data they can update the data okay so this is what a developers can do at the level two okay level two and now this level three people like where users cannot access this level to permissions okay so level three is only um like level three people can only access the level three thing but level two people can access both level three and level 2. okay and then here comes the last level which is a level one so in this particular level we will be providing only the details of how much data has been stored okay and how much memory has been used and who are all using that it will be for uh organizing heads okay organizing X okay like all the databases are being created okay database creation and all so here this is for developers and this is for clients okay who are using your end product now if you wanted to put it in a hierarchy so uh this level People level one people can access all the three levels but level three people can access for level two people can access only two levels first two levels and a level one People level three people can access only level one okay so these are all the levels or abstraction layers available in the dbms now we they have named these levels as well so this particular level 3 is called as a view level where it can be accessed to the clients now level 2 is called as a logical level where logical implementation and actual data uh storing happens and level one where actual it is called as a physical layer okay physical level or layer whatever you call it as a and um like this is where actual databases are being stored and there will be some configuration details as well which is not occurred for developers and uses so this is the abstraction that it is following and these are all the levels of abstraction okay on layers as well so this is about this question let's move on to the next question what is mean by entity relationship explain the terms called entity entity type and entity is set in a dbms so it it is in three two questions okay and four definitions okay so what is your first question is what is er model so er stands for entity relationship entity relationship model so we are okay like so we are storing a lot of like we are having databases in that particular databases we will be storing all our tables and we will build linking like we will be having some relationship between a few tables as well so how we are going to represent them so just like as a developers we can remember them okay but uh to understand like to put it in a high level context we need to represent them as a diagrams so that particular diagram is called as a ER diagram so if you can observe here you can see right so we will be having a two entities okay this student is one entity college is one entity and what is an entity an entity is a real world object which are some existence okay so student is one object like entity college is one entity and what is the relationship between among these two tables so entity is an table okay so studying so student studies studying in college right so there is some relationship so every student will have a college right and in college uh students were there obviously so this is called as an entity so entity is an table so for every table we will be having an attribute so attributes are also columns so entity means referring to the only one particular object okay a student like only one person okay an employee one person that's it an entity type means grouping like similar kind of things okay on to this one thing let's say um you can say right so every student okay here so every student will be having the same attributes like student ID student name uh student email ID Mobile ID so every student will have the same kind of attributes then we can call them as entity type okay and entity type is defined as a collection of entities that has these same attributes okay so them so like so if I consider different students so student one will have all these student ID name and all and student two will also have the same name college and all and student 3 will also have the same so after seeing these three students I can say that ID name and branch is common for every student now I can refer them as a one like entity type so these are student types okay so it is something like data type in our programming language now the next question is entity set entity set so an entity set can be defined as a set of all entities present in a specific entity type in database for example set of all students employees teachers Etc so now whatever like whoever having the same set of entity types like here student one student two student three will have same entity types right now I can group them all and after cons after grouping them all I can say that these are all the students okay whoever having this role like uh roll number name whoever belongs to this particular College I can say that all of them as a students and whoever having employee ID employee name and so Works in some organization I am calling them as employees all employees right so this is how uh the difference between entity DD type and entity set okay let's move on to the next question so explain different types of relationship among the tables in a database so which is an very important and uh like I won't say some frequently Asked interview question but it's good to have this knowledge while because uh if you are asking to develop anybody like object oriented design or lld a low level design so this is very very important you must have to point these things okay you must have to tell the relationship between two different tables okay in that case it is very important okay so here we will be having three types of relationship one is like four types basically yeah so first one is one to one relationship so what is this one to one relationship so just imagine you have one table here and you have one table here and in this particular table one one row one row has some relationship between one row in the table two in that case we can say that it's an one-to-one relationship okay and this one to many relationship means let's say you have a table one okay where one row from the table one refers to the multiple rows in the table two now what happens so this is called as n one to many relationship like you can watch out these examples right so that's why I'm not telling them and the next one is many to many relationships so many too many two relationship means so from table one from table one many rows okay many rows refers to the many rows in the table two okay then that is called as a mini to many relationship so uh the next one is self referencing relationship so self referencing relationship means uh if you were rows okay in one table refers to the um another rows within the same table then that is called as an uh self-referencing relationship there is another thing as well um many to one okay like many to one relationship means uh many columns like many rows from the table one referring to the single Row in the table two then that is called as a many to one relationship I hope you got it so now let's move on to the next question so explain that difference between intention and extension in a database okay so intention and extension so basically uh intention means intention refers to the database schema so yeah intention are popularly known as a database schema so if you don't know what is database schema I will tell you yeah I will tell you what is the database schema database schema so if you consider a database where you will be storing all your student details then whenever you like you decided to create the database of students you should be figure out what are all the attributes that you need to store right so it is a student ID name branch email ID so you will be creating this skeleton okay so you are telling that for every student we will be having all of them and whenever you are trying to insert data into the database you must need to provide all these data okay so that is this particular skeleton is called as a database schema so a database schema is used to define the description of a database and is specified during the design of database right so when can you like when you will you uh decide all these attributes so whenever you have planned to create a database for student right so in the beginning of the uh storage as well okay while you decided to design then you need to like decide to store then you need to design an ER diagram and then you need to mention all of them in that particular diagram itself okay that is called intention and if you if you design it once like if you define the schema once it cannot be modified later okay I will tell you the reasons why we cannot modify that later the later part now the extension so extension on other hand is the measure of number of tuples present in the database at a given point of the time so okay we are done with schema now we started inserting our data okay inserting our data okay I have all the schema ready schema ready now I will start storing the data into the table right now at some point okay after inserting some 10 rows 10 Student Records I wanted to figure out how many students tables that I have inserted so far okay then I can figure out that I have inserted 10. okay which means it is called as a extension okay so the extension of database is also referred as a snapshot of database and its value keeps changing as when the tuples are created updated destroyed in a database like it's just an information or description about your our database so far like what are all the things happen and what are all how many data are present that's it okay let's discuss another uh question in the dbms interview preparation so explain the difference between a delete and truncate commands in a dbms so as we discussed during the languages in dbms we have talked about select and truncat right so now they are asking about the differences between the delete and tranquet so if you remember I have told both are being used for deleting the data only but it differs in something else okay we'll talk about that in detail now so a delete versus a truncate so which is a very very important question okay very very important question in interviews perspective so basically this delete okay this delete will delete the rows okay delete the rows but with some condition okay with condition which means let's say I have all the data of students okay now I wanted to delete the student uh data uh whose role number is equal to 200 now here I have a condition whoever a student whoever having and roll number of 200 I need to delete that particular record itself okay and in order to delete entire data okay like all the student details now I have to delete only these 200 roll number student only so here I have some condition I will be deleting that particular row now after deleting that particular row can I get that back yes you can roll back so if you remember we have discussed about commit and roll back so commit will help you to save The Preserve the changes and rollback will help you to roll get your like deleted or um eliminated things back okay as you can roll back now coming to this truncate so again it will delete the rows okay it will delete the rows but here with no condition with no condition it means that if you truncate one table like it will truncate all the data it means or delete all the data present in a table okay it won't even keep single row single record of a student it will delete all the data from the table that's it without any condition now our my question that you might be wondering can I get the data back yes you can okay you can roll back it but it has some limitations in it like few versions of MySQL databases doesn't support truncate rollback okay only few things will support the truncat rollback so if you do that it might you might face the data loss as well data loss means uh like suppose if there are a thousand records then if you are trying to roll back you might get 800 or you might your data might get corrupted as well okay and which one is faster and which one is slow so this one is slow little bit and this is fast why here you will be having some conditions you need to check right you need to travel through all the data you need to search for that particular condition then only you need to delete on top of that you will be maintaining your logs as well rocks means like what are you doing what are the data you are deleting and all because you need to roll back right so but here you you don't need any conditions you don't have any conditions all you can do is just delete everything okay so it is faster and also it won't maintain maintain logs as well okay it won't maintain locks as well means like as we discussed so that is the reason why uh your while trying to roll back you might face a data loss issues that is the difference between uh Delete and truncate which is very very important question in an interview let's move on to the next question so the next question is what is a lock explain the major difference between a shared lock and exclusively lock during a transaction in a database so which is very easy question like in terms of all the transaction questions I I had okay so uh it seems that like shared lock first we'll talk about shared lock okay so what is a log first so basically uh you will be performing I like so let's say you have a DB and this DB has access to many servers right many servers so many people can access this data now let's say um I am performing some right operations here like I'm trying to let's say I have account balance as 100 rupees now I am trying to uh Delete okay I'm trying to withdraw 50 rupees okay now at the same time like let's say person or let's say father son and father okay son and here father so uh they have joint account okay and son is staying in Hostel so he wants to withdraw the money and father is staying in some other City he also uh like um would like to with the draw only now San assumes that uh he has uh seen face with that particular current balance and he has seen there is 100 rupees now he decided to withdraw 50 rupees and at the same time dad also trying to withdraw the amount of hundred rupees now what happens it will either fail usually it will fail but to handle such kind of situations we will be having this locks okay so if one user entered into State then we are locking him and we are not allowing other users to access the data okay so this is how a lock work mechanism works and will now have two types shared lock and exclusive log okay we'll talk about the shared log now so shade lock means for read operations okay so let's say uh we have a account joint account where I have 10K in my account now my dad is also trying to um like check the current balance and me also trying to check the current balance now will there be any problem no right there is no problem is just a simple read operation we are not withdrawing the amount means not writing the amount okay so it's just a reader operation uh so you can allow as many users you want okay in shared lock shade lock has been used for uh read operation specifically okay and you can allow as many uh uses you want to access the same uh account or same database at the same time okay this is about shade lock and uh the next one is exclusively long exclusive sorry exclusive lock so in shared log we are using that for read operation but in exclusive lock it will use for write operation so as we discussed the problem earlier so right has to be only one person can perform a right operation means let's say if Sun is trying to withdraw the money so it should not allow the further to withdrawal at the same time because it will lead to the inconsistent State okay they might face a problem in the future now what I can do so let's say I have a like account like or ATM now so whenever someone else like either whoever comes first so try to withdraw the amount okay with the draw the amount then you need to lock that up okay so someone is tried to withdrawal then you need to lock this particular account until until this person completed his transaction so after completing the transaction you should remove this lock and allow other persons to access the same account okay then they won't see any problem right so because they are uh going one after one they are not doing the operations on the same time so after completing one particular task data will get updated and father can see that there is no balance okay there is only 50 rupees okay I can't with the Drone 100 rupees okay so this is how we can use this locking mechanism to avoid transaction failures and data inconsistency now the next question is what is mean by normalization and denormalization okay so a normalization is very very important okay very very important topic for interviews so we will be talking about different types of normal forms available and how to write them and how to create them as well okay now just keep this mind normalization is very very important topic so a normalization is a process of reducing the redundancy by organizing the data into multiple tables so just imagine okay just imagine you have a very big um table okay very big table where you will be storing all your data in single table okay it's a single table okay like where you will be storing all the um let's say if your Amazon thing okay so it the stable is storing all your Amazon data like a customer details or order details and the payment details all you are storing in this particular single table only so now what happens what is a problem so it keeps on increasing an exponential manner so at some point of this team state it will be overbidden for that particular table as well to maintain such a huge database at the same time you you might be taking uh different like uh different duplicates in it let's say so I will be storing uh customer details at some time let's say 100 and the same time this particular student customer ID has performance of payment failure so you will be storing that so payment success you will be storing that so he has ordered something you will be storing that so it keeps on keeps on storing expanding expanding X expanding right so you will be having different uh duplicate data So to avoid to to avoid this kind of problems we have come up with in solution called normalization okay so what is a normalization so a normalization divide your big one table to the different small tables so that the chances of um are like having a duplicate data will be less and you will be uh like your accessing the data as well from the database will be little faster when compared to the single database okay single table okay that is what and it is also easy to maintain as well right so you do like if like you are avoiding single point of contact as well so if that table has been stuck everything your entire application has been closed okay you can't use that so to avoid such kind of problems so try to normalize your data and try to divide uh not to store your data in single table okay try to put it in a different tables Okay small tables now what is a denormalization so it's in just and reverse process of to the normalization in normalization we will be saving the things from one big table to the different small tables but in normalization we are doing it in a reverse manner means we are keeping all the uh we are combining all the small table data into a once big single table okay that is called an um denomination means so yeah now let's talk about the uh different types of normalization forms in dbms okay so what is a normalization so basically a normalization is a process of organizing the data in database okay to avoid a data redundancy and some anomalies so what is a data redundancy so data redundancy means uh simply you can call as a duplicates okay so what is an anomalies anomalies or problems okay that were arised during the uh data insertion in a table log well like in database okay so let's see so let me write the definition of a DOT column okay a normalization easy process of organizing the data in a database to avoid data redundancy comma anomalies okay so this particular data redundancy means are storing duplicates permits are duplicate value okay anomalies means uh you can simply call them as a problem so hope you still might be in a confusion let's see what is this okay so let's take an example table okay where you will be having uh employee ID employee name and uh employee address sorry employee address uh this is not addressed this is uh let's cancel this is a department like where he belongs to okay where he uh belongs to and the uh Department ID okay Department ID so let's assume this is our database and we do have some records in it okay let's say when I say records it might be let's say employed 101 and name is onesie okay so employee department is let's say we do have different band names like a godavari okay so and Department ID let's say Department IDs are d one not one okay d1r1 and we now have another uh record let's say already he belongs to Krishna department and Department ID code something like this okay now we do have another thing so I want to see sorry 1C and uh he belongs to um Spider-Man or Avengers whatever you may call okay and also a wormsi is uh like one odd one this person is again belongs to another team let's say Krishna okay he belongs to Krishna team also now let's see now let's see what are all the anomalies we might get okay so first one tell me okay now there is our our two records associated with one not one employee ID now I wanted to update the address of a comsy okay I wanted to update the address of Anna update the address of one not one employee now how many times I need to update are two times now let's suppose I forgot okay I forgot to update for two times I have updated only for one time okay I have updated this guy okay so like so I have made it as a Bangalore and still he belongs to a Mumbai now tell me is this your problem this might be a problem right so this kind of problems is called as an uh update anomalies okay update Anonymous now let's discuss about a delayed environment a delete now let's say suppose I I am trying to delete the department okay so like we have an uh Spider-Man Department with the Department one or three I do we are trying to remove that entire department like means a decompose that particular uh Department okay now so if I delete this particular Department this entire record will get deleted there might be a chances so what is happening we are losing one person do you think that yes so that is called a delay term okay now what is an insert anonymous so let's say let's say so this particular Department ID is a primary key okay this is a primary key now I'm in New joining okay so I joined in a company uh like two days back so still I was I am in an um training phase only uh no department is being allocated for me okay now uh some people is trying to update my database to get an ID card for me okay so now tell me do I have uh Department ID and currently unknown because I am not belong to I am not assigned to any Department right so whatever the data I have is this particular employee ID let's say one not four and a name let's say okay so I don't have Department uh employee department and the department ID as well so it won't take the this record right you record this uh it won't take this particular record so what happens okay so it won't take that record so we lost the one particular employee name so that kind of uh problem is called as an insert anonymity okay I insert an I mean means that during the insertions like insertion into the DB so our delete announcements means uh while deleting the uh data from a DB update means while updating the data which is present in database okay now this is about normalization and anomalies so how we are going to solve this kind of problems is called as an normalization okay so we do have different types of normalizations so those were are classifications okay you might call it as a classifications as well so first one 1nf so first normal form first normal form a second normal form a 3nf and B C enough and we do have a 4 enough and five enough but but this one not um necessary okay not necessary what does it mean not necessary so whenever we achieve this BC enough for a particular table in database then we can say that there there will be no data redundancy there will be a no anomalies okay so we can say that that particular table is all set okay so we don't require these things okay so that is the reason why uh in interviews also in most of the interviews they don't track this foreign topics okay they will end up at uh bcnf okay not even bcn yeah so in some cases they will ask you PC enough otherwise they will just ask you to Define this what is um one and f 2 and f13 enough but when I say or like when they ask you to Define it's your responsibility to take and one example and then you need to explain it because uh in an interviews uh mostly interviewers are not interested in hearing the standard textbook definitions they want something like more than definition like let's say concept okay what you have understood from that particular Point okay that is what they want okay that is what they are expecting from you as well okay now let's see what is a one and F okay let's start with one and F okay let's say we have a table like this uh student ID student name and uh student mobile number okay student mobile number so what is the data it has a student ID is one or one one or two one or three names are um are ready this side okay so now mobile numbers are this guy has a two mobile number okay so I am writing only five digits okay so consider in real case Okay uh so another thing another mobile number is this and this guy has uh this and this guy has this okay these are all the mobile numbers they are holding now tell me so the formula of like what is the principality of one and a fees uh an attribute of a table cannot hold a multiple values okay it should hold only Atomic values Atomic values in the sense it has to contain only one value under one particular attribute let's say so in our case under student uh mobile we are holding are two values right so this is not the one and F principle so we need to convert this table into the one and if right so we need to convert this table to the 1 and F so here what we can do now we can simply flat this uh one another entire table so when I say flat let's say what we can do now um okay so what we can do uh let's say one not one worm C you want this one is one and I can make this one three four two five with another new record okay so same ID is same student name is vamsi but mobile number is uh one three four two five so now there is no problems in this a one not two and one or three is suppose it's suppose again one or two has uh start two or three mobile numbers let's say two more three mobile numbers okay three mobile numbers okay so now again this with this particular student ID we do have a we might have a three records okay in our flat and in our 1nf converted table okay so something like this so here we will have first number here we do have a second number here we do have a throne mobile number okay so this is what uh of first enough first normal form okay now let's talk about a second normal form so let's first discuss the principles of um second normal form so here the principles are fasting our table must be in 1nf okay so whatever so whenever we are trying to convert one particular table into N2 and if that table must be in a one enough okay it must has to satisfy that principality of one enough then second thing is are no non Prime attributes so non-prime attributes in the sense are non-primary key attributes okay is a dependent on dependent on the proper subset of candidate key step candidate Keys okay let's see with one example okay I'm sure by seeing these definitions you are not going to learn anything apart from mucking up those definitions let's see okay now let's see so we do have a uh table something like this okay so a student ID a student name and a student each okay so student ID is a one one so let's say 11 uh triple one it's not a student name let's consider it's an uh course okay which a student has been enrolled okay so one or one student ID is enrolled in let's say dbms subject and he says is 21. now again one not one student might be enrolled in other courses as well so what is that question it's a OS like operating system so again he says he's 21. so uh we do have another with a student without ID 120 okay so he is also enrolled in computer okay so this is the data we have in our table okay now it's our job is to convert it into the two areas okay now now let's say can I say that this particular table is in one NF yes so for every attribute it is containing only one value so that I can say that it is in one end now now we need to follow the second principle of this guy okay um so the here tell me what are all the candidate Keys here candidate Keys only student ID right so the case which are um helpful as to identify the record uniquely that is only this student ID so what we can say what we can do so here our primary key is prime key is student ID okay primary keys are student ID now now what they are saying so they are trying us to every non-prime key attribute has to be dependent on primary key that is what they are trying to say okay let's see so what we are trying so can I say that this course is dependent depend upon this particular student ID so if I give you particular student ID can I say all the courses that he that he enrolled in particular semester yes I can say that now tell me if I give you particular student ID can I say that so can um can I get the age of that particular student yes that might be the case so it's your table has been simplified something like this okay so let me draw here only okay so what I'm trying to do now so first I will have a two different tables one is a student age to age I age table so where I will be having uh details of all the edges of a particular student ID okay let's say here this guy triple one uh student ID with triple one having an age of 21. okay now again to Triple one twenty one yes we do have that now again 120 22 each so 120 and 22 H again 120 22 each now whenever uh I want um age of particular student okay now I can simply give you the student ID you will give Media or you can give me the student age that's okay fine now what about this course table so I will leave you that course as it is because because so if we want to to make it as a how can we make it so you can make it like this but we are violating the principality of 1 and F hope you have remembered that definition of r2nf right so that table must be in a 1nf and also that has to be in uh like all the nine non-prime query attributes must be associated with the Prime Care table so I will leave that course table I will leave that course table as it is okay something so let's say one one one one one one one one twenty one twenty first guy is enrolled in dbms again OS then CN then ml okay so whenever I want this particular student age I will simply make a call to this guy okay done this is what the two end of okay so it's very important to know the examples okay at least if you are in an interview you have to say these kind of things okay so not even like a simply drawing all the stuff even let's assume you can say something like this let's assume so we have one table which is the attributes like student ID student name under student is so here the principles of must be dependent on the primary then you can divide those things into a multiple tables that's it okay now we'll talk about three and now 300. so what is this a3nf means let's say so I can say that it has to be in table must be in to NF okay table must be into enough that is for sure now now apart from that apart from that like let's say uh transitive uh functional dependency of a non Prime attribute on any super key should be removed okay so yep it doesn't make sense to you I will will take one example and we'll see what it is actually okay let's see we have a table of employee this time let's change the tabulation okay let's say employee so employee ID employee name and I employ address now let's consider address okay so PIN code okay so pin code our ZIP code whatever you might call okay and then I am storing this date then employee CT then employee District okay so it has some data let's assume we have all the data now what I am trying to say now what I'm trying to say now so this if I give employee ID I can get this entire row uniquely is there any a key something like that unknown so here candidate key and primary key is employee ID employee ID now now is there any possibility of decomposing this table again so think think uh yes I can say one thing now let's figure out this entire table now let's assume we have this only diff you have this table now can I say that can I say that this if I give this entire pin code or chip code whatever it might be so can I get the entire row in this particular table in this particular table yes right uh under PIN code and ZIP code or pin code or zip code is very unique okay it must not be given to another uh State like another districts or another places or another uh legislators right so what I'm trying to say so I will I will decompose that entire table into two tables so I will have employee ID employee name and employee PIN code okay I will have something like this now I will make this pin code connected to another table called address table address table where I will be storing all the um all the PIN codes okay let's say I will have a PIN code then state then the city then District okay now whenever so I will give all the PIN codes you have particular employee now whenever I search with this pin code I will get a enter state and city and District details that works that works right so this is about the 3nf now um now we'll talk about the bcnf okay now we'll talk about the bcno so the full form for boys of code a normal form okay voice code normal form so again the conditions like are principles of this particular will be so it has to be in a three enough for sure like table must be in 3 NF and a second thing so like I can say that bcnf is a little sticker than a 3nf okay so a table complies with BC and nerve if it is in if it is an in sorry if it is in 3 enough and for every functional dependency okay let's say X2 y X should be Super Key of a table what does it mean let's say uh suppose let's take one example uh there is a company where our employees Works in multiple departments okay employees Works in a multiple departments let's see so employee uh employee ID employee um nationality employee Department on the department are ID Department ID and a number of people in Department particular Department okay now I will say so employed is one zero so one zero one an employee nationality is Indian here Department he works for godavari Department ID let's say 101 and in particular godavari there were a 250 people were working let's suppose okay and you do have uh so again this uh one at one guy so one double zero one guy also works in another department let's say how again he is an Indian so he's uh another department is Krishna Department ID is 102 and in that particular Department let's have 100 people out there and there is a guy with uh one zero zero again he works for two different departments and his nationalities um America again he works in both godavari so this is the table that we have okay now let's try to identify okay so let's try to identify so can I say that uh like can I say this entire like uh employee functionality is depended on this employee nationalities dependent on this employee one thing yes now I can say that employee ID gives you employee nationality now what is other case so can I say that can I say that employee uh like these things so yep uh Department ID and number of members in a particular department is depended upon the this particular department is employee Department here so I can say that employee Department is equal to employee Department ID and a number of employees okay now how we are going to take this into the bcno okay so we can break this entire table into three tables okay let's say how so first able let's say National detail nationality are table so in that I do store employee ID and employee nationality okay so 0 0 1 is an Indian and this guy one double zero two is an America that's it for this a particular table now I will have an another table okay so where um Department table okay Department table let's say I will have uh uh Department ID Department of people like number of employees okay so first Department we do have godavari and the ID is one zero zero one and number of people and then we do have a Krishna and it is a one zero two and we do have a hundred employees in that okay that's it now we have another a table uh which is currently mapping to that particular uh both tables right let's say let's say so now I will in this particular table I will have only the primary things okay primary case primary attributes let's say what is the primary attribute in a table one it's an employee ID now what is a primary attribute in and second table it's an employee Department so now I can say that one not one belongs to go without worry again why not 1 also belongs to Krishna and one or two belongs to godavari and oh this guy belongs to Krishna then so whenever I need a entire department details I will go to Krishna I will get that whenever I need an uh National deaf and particular employee I will go to nationality table and I will get the nationality okay so uh that's all about the normalization okay so I highly recommend you to think on your own okay like try to frame okay take a couple of examples and try to divide those things what kind of problems that you are going to get