hello and welcome to career right i'm nishant and today i'm gonna talk about top 20 dbms interview questions and answers for freshers and experienced professionals so without wasting time let's get started now so the first one is what is a database a database is an organized collection of logically related data where it can be accessed and manipulated a database could be big or small depending on the requirements of its purpose for example a local contractor could set up a small database of his workers details consisting of names phone numbers address salary etc a large corporation could set up a giant database where it uses the data to make better and efficient business decisions now what is dbms dbms or database management system is the middleman between the user and the database it is a software that provides a systematic approach of creating storing updating and retrieving the data stored in a database or in other words a dbms is a software for database management there are four common types of dbms and the first one is hierarchical database system and this type of database is structured as a tree hierarchy here a record can have single parent and multiple child records and this database is limited to a specific use due to its limitation next is network database system these databases also have hierarchical structure but here each record has multiple parents and multiple child records next is object oriented database system in this type of system the information is represented as objects and this type of database uses an object-oriented programming language next one is relational database management system and this is the most popular dbms here the data are stored on tables and all the tables are related to one another the data is stored in a row based table yes rdbms is most commonly used database because it is a collection of organized set of tables the data can be accessed easily in rdbions now what are the advantages of a dbms there are many advantages of dbms and the first one is data security our dbms provides an improved data security it allows only users who are authorized to access the database preventing data integrity from being compromised next is improved data quality data quality includes accuracy and reliability dbis provides the capability to impose constraints on database helping it to store accurate data now the next is faster data accessibility now dbms helps to retrieve and display data quickly making data accessing faster and easier next advantage is data backup data loss is a major concern for all businesses but a dbms can take periodical backup automatically and restore the data in case of any technical glitch simplicity are dbms operations like deletion insertion or creation of table are easy to implement reduce data redundancy dbms doesn't allow redundant data in multiple places yes duplicate data can cause data inconsistency and can provide company with unreliable information now what are the differences between a dbms and rdbms dbms that is database management system is a software that provides a systematic approach of creating storing updating and retrieving the data stored in a database or in other words a dbms is a software for database management rdbms that is relational database management system is actually an extension of dbms rdbms stores data in a tabular format consisting of rows and columns and all the tables are related to one another now let us understand differences between them dbms stores data in a flat file format whereas rdbms stores data in tables consisting of rows and columns in dbms there is no relationship between its data whereas rdbms stores data in multiple tables and there is a relationship between the tables in dbms normalization process is absent whereas normalization is there in rdbms dbms is usually preferred for small data sets rdbms deals with larger data sets dbms does not support distributed database whereas rdbms supports distributed database next is what do you understand by query optimization query optimization is the process of finding the best methods for implementing each query that minimizes time needed to evaluate a query the goal for query optimization is to speed up the process of fetching informations from the database and reducing the system resources required to run a query it enhances the performance of a query especially for the execution of complex sql statements now what is data partitioning and what is the importance of partitioning partitioning in database is a process where a large table is divided into smaller and manageable parts partitioning is done mainly to improve maintenance performance or management there are two types of partitioning methods and the first one is vertical partitioning and second is horizontal partitioning now let us try to understand each of them and the first one is vertical partitioning in vertical partitioning the table is split by column wise this where table is created with the fewer columns and an additional table is added for infrequent used columns or very wide columns now consider a table called employee table now in this table in order to improve maintenance performance or management we can partition the table vertically and keep infrequent used columns or very wide columns in a separate table now instead of one table called employee we can have two tables that is employ an employee job description coming to horizontal partitioning in horizontal partitioning the table is split row wise now consider a table in this table all reports are arranged in a single table this could be partitioned horizontally by year where each table would store monthly reports of that particular year therefore when a report is queried it could look at a particular year and access the required table which would result in better performance because of small size of table and scanning through fewer data now let us understand advantages of data partitioning and the first one is improved performance it optimizes performance since it is scanning through fewer data and second is manageability and control yes it is more manageable since it is divided into small parts and provides better controls all right so the next one is what is data replication data replication is a process in which copies of the same data are distributed in multiple locations or servers and this is done to make the data more accessible data replication helps in creating a distributed database system even though copying of the same data across multiple servers increases data redundancy there are major advantages to this process and the first advantage is disaster recovery in case of any loss of data due to a disaster or technical failure at a particular server we can recover the data from the other servers and this could save a lot of money and time second advantage is improved data accessibility with multiple copies of data at different locations users accessing from different regions can choose to access data from closer server resulting in better response time third advantage is enhanced server performance there is fewer loads on a particular server since users are accessing from different servers from different locations hence boosting the performance of servers which also improve users experience now explain the types of data replication there are different types of data replication depending on its requirement in data replication the source database is referred to as a publisher whereas the destination database is referred to as a subscriber now coming to types of data replication and the first type is full table replication full table replication copies the entire data to all of its subscribers including new updated as well as existing data and this process could involve higher cost and computing power since copying all of the data requires a higher network bandwidth especially with large databases next type is transactional replication in transactional replication the publisher database is fully copied only initially and then the subscribers would only receive updates whenever a data is modified and this process proves to be more efficient than the full table replication next is snapshot replication in snapshot replication a snapshot of publisher database is replicated in all the subscribers database and it doesn't monitor for the changes made to data and this type of replication is generally used when changes made to data tends to be infrequent and the last type is merge replication in merge replication data is merged from two or more databases into single database it is very complex process compared to other replication methods because both the publisher and subscriber database are allowed to make changes dynamically now what is normalization and what are different types of normalization normalization is a process of organizing data in such a way that it reduces data redundancy yes returning data is duplicate data stored in multiple places in the same database normalization is done by dividing the large table into multiple tables and establishing a relationship between them now there are six types of normalization which are first normal form second normal form third normal form bcnf that is voice called normal form fourth normal form and fifth normal form but we will only explain the first three in details here so let's talk about rules of first normal form in first normal form each cell in a table must contain only one value and every entity or column must contain a unique name meaning no two columns can share the same name now let's have one table so in this table we can see in the first row column subject has two values in a single cell therefore applying first normal form will be important over here and after applying first normal form the table would be like this coming to rules of second normal form in the second normal form the table should be in first normal form and all non-key columns of the tables must depend on the primary key and there should not be any partial dependency between its data now in order to understand second normal form in details let's have few concepts clear the first concept is candidate key now consider a table first okay so candidate keys are entities or columns that can uniquely identify the entire row and in this table there are two candidate keys that is student id and phone number since their values are always unique and there can be two or more candidate keys in a table now next concept is primary key again consider the same table and a primary key is a column that can uniquely identify the entire row there can only be one primary key in a table basically a primary key can be chosen from any of the candidate keys which can best uniquely identify the entire row this table the primary key would be student id now let's understand partial dependency partial dependency can arise if there are two or more candidate keys in a table and the attributes or values depend on part of candidate keys present in the table now let's consider a table called student table in this table there are two candidate keys student id and sport id and the column name age and sport id depend on student id and sports and codes depend on sport id thus the values are not fully dependent on a primary key but are partially dependent on both the candidate keys now in order to achieve second normal form we must eliminate the partial dependency by dividing the table as follows now let's try to understand rules of third normal form in third normal form a table should be in second normal form and there should be no transitive dependency now what is this transitive dependency transitive dependency arise when non-primary attributes are dependent on non-prime attributes and since non-prime attributes can store null values this can cause problems now let's consider a table and in this table the primary key is student id but the column total marks is dependent on exam type which is not a primary key hence the transitive dependency occurs therefore third normal form solves this by dividing the table as follows now here the column total marks depends on the primary key exam id which eliminates transitive dependency and is in the third form all right so the next is what is denormalization denormalization is a technique that is used to add redundant data to a table in order to optimize data access speed and in this process we actually add redundant data to one or more tables in a normalized database in order to get rid of complex join operations one important point of denomination is that it is done only on a normalized database you might ask why we need denormalization after we already normalized the table suppose we have two tables that is student details and sports details in this table if we want to retrieve the student details along with the name of coach of the sports they are playing we would have to do a joint operation and this is fine for a small database but if the database is large it would be very time consuming and inefficient to be efficient in this situation we have to denormalize it by adding redundant data to the student details table now that the table is denormalized if we want to query for student details along with their coaches name we will get better read performance since there is no need to do a join operation however we have sacrificed the right performance of the database in this process now the next question is what are the different types of keys in a database now in order to discuss keys in a database let's have a sample table over here now the first key is candidate key candidate keys are keys that can uniquely identify arrow in this table there are two columns that can uniquely identify a row and they are student id and phone numbers and these two keys are candidate keys because they contain unique values and by just specifying one of them we can get the entire row and the value for the candidate key is unique and not null and there can be more than one candidate keys in a table next key is primary key primary key is a key that is selected from the set of candidate keys which which can uniquely identify a row in a table and there can be only one primary key in a table a primary key must contain unique values and cannot contain null values now in this table the best key that can uniquely identify a row is student id as every student is assigned a unique student id now the next key is super key super key is an attribute or a set of multiple attributes that can uniquely identify a row a super key is a super set of candidate keys where all candidate keys are super keys but not all super keys are candidate keys super key attributes can contain null values and in this table the super ids are student id phone number student id and student name student id and phone number student name and phone number and these are just a few examples of keys that can uniquely identify a row now let's see these keys that is age and department together these keys cannot be super key because there can be many students in department that are of same age hence cannot uniquely identify a row now coming to foreign key a foreign key is a key that establishes a relationship between the two tables it is an attribute that references the primary key of another table now the next is composite key a composite key is a combination of two or more attributes that help to identify a record in a table uniquely the attributes cannot uniquely identify a row independently and only through combination they can identify a row now in this table student name is department is a composite key because together they can uniquely identify a row whereas independently they cannot guarantee uniqueness now try to understand alternate key or secondary key candidate keys which are not selected for primary key are called alternate key or secondary key and in this table the alternate key is phone number since student id is selected as primary key now the next question is explain the difference between unique and primary key let's have a table before discussing this question now primary key is a key that can uniquely identify a row there can only be one primary key a primary key is selected from any one of the candidate keys and cannot contain a null value and in this table the best key that can uniquely identify a row is student id as every student are assigned a unique student id coming to uniq id uniq id is also a key that can uniquely identify a row but can contain null values the not null values in a unique key must be unique and in this table the key phone number is a unique key since it can uniquely identify a row but it can have null values because there might be a student that doesn't have phone number so in a primary key the values are unique and cannot be null whereas in unique the values are unique but it can contain null values there can only be one primary key but there can be multiple unique keys in a table we cannot alter primary key but we can alter uni key as long as it is unique by coming to the next question what are the differences between trigger and stored procedures stored processes are pre-written codes consisting of a group of sql statements that are stored and executed to perform a particular task they are invoked explicitly which means they are executed only when called by the users it can accept inputs and also return a result after execution now triggers are special type of stored procedures and the only difference is that they are invoked implicitly which means they are executed when they encountered an event such as insert update delete an example of a trigger is when you sign up for a particular website and you get a welcome mail in your email here a trigger is invoked when it encounters an insert event in the database while signing up now let's find differences between trigger and stored procedures a trigger is invoked implicitly whereas a stored procedure is invoked explicitly stored processors can take inputs in the form of parameters whereas triggers cannot take any inputs stored processors can return result but triggers cannot stored procedures can be scheduled to execute at a particular time but a trigger cannot stored processors are used for performing a task that the user requires whereas triggers are normally used for maintaining the integrity of the database coming to the next question what are indexes explain the difference between clustered index and non-clustered index indexing is a data structure technique that is created for the purpose of optimizing the performance of a database by quickly locating and accessing the data in a database an index is small table that have only two columns the first column contains a copy of the primary key of the table and the second column contains the address or location of the disk block where that particular key value are stored an index in a database is similar to an index of a book where if you want to read a particular page you can just refer from the index page and go directly to the page without having to scan through the entire book there are primarily two methods of indexing clustered indexing and non-clustered indexing now clustered index is an index in which the order of the rows of the index corresponds to the rows of the table the index contains pointer to block but not to the location where the data is actually stored actually similar records are grouped together and indexes are created for these groups cluster index is like a dictionary where the data is stored in alphabetical order so in the clustered indexing records are physically reordered to match the index since the table can be stored only in one order there can only be one clustered index for a table by default the cluster index are created automatically whenever we apply primary key constraint on the table column now coming to non-clustered index in the non-clustered index the index contains pointer to the location where the data is actually stored it is similar to the index of a book if you want to read certain chapter or a topic then you can directly go to that page by using index of that book in the non-clustered index the order of the rows of the table and the index does not have to be same and the data and non-cluster index are stored separately hence there can be multiple non-clustered index in the table okay so the next question is what do you understand by cursor mention the different types of cursor a cursor is a temporary work area reserved in the memory and is allocated by database server when performing dml operations this temporary area contains data that are retrieved using sql queries and the data can be accessed in row by row manner this collection of data in the cursor is known as active set the main purpose of using a cursor is to be able to manipulate through the result set in row by row manner now there are two types of cursors based on how they are accessed that is implicit cursor and explicit cursors now implicit cursors are programmed to run automatically when a dml operation such as insert delete update is performed implicit cursors are also known as default cursors now coming to explicit cursors explicit cursors are defined by the programmer and are triggered when we execute select statement that returns a result set and this result set can now be processed one by one which provides more control to the programmers now the next question is what is sql and where it is used sql stands for structured query language and it is a language used for interacting with the database such as storing retrieving or manipulating data in a database it is also considered as standard language in relational database management system and popular rdbms such as mysql msxs oracle sql server sqlite all uses sql okay so the next question is what do you understand by sub queries in sql a sub query is simply defined as a query inside another query it is also called as inner query and the outer query is called as the main query a sub query must always enclosed by parenthesis in a nested query the sub query is always executed first and its output is supplied to the main query to perform its operation in order to understand this let's have a student table here and in this table if you want to retrieve the name and roll number of a student who belongs to computer science department we can perform a nested query so here you can see subquery is placed inside parenthesis and in the where clause alright so coming to the next question what are the differences between having and where clause where clause is used to filter records in a database in the where clause there is specified condition and the records are retrieved according to that specified condition where clause filters the data by individual rows now in order to understand let's have an employee table so in this table if we want to retrieve only those records whose country is india we can use where clause as follows now having klaus is also used to filter data in a database but why do we need it if we already have where clause and this is because the where clause cannot work with aggregate functions hence having clause is introduced so in a table if you want to display only countries where there are more than four customers we have to execute a query in this manner so in this sql query we have seen that having clause is used along with an aggregate function count now the difference between where and having clouds is that where clause filters by individual rows whereas having clause filters based on groups of data having clause cannot be used without group by clause whereas where clause can be used without group by clause where clause cannot work with aggregate function whereas having clause can work with aggregate function where clause can be used with select update delete statement whereas having clause can only be used with select statement now what are joints in sql what are different types of joints joints are used to retrieve data from two or more tables based on related column between them now there are different types of joints in sql and the first type is inner join this join returns records on a condition that there is a match in both the tables now let's have two tables called customer and order and in these tables if we want to retrieve the customer name and their order we would have to run an inner join next is left join left join returns all the values selected from the left table and only the matching values from the right table and when there is no match on the right table the result will include the row but with a null value in each column from the right so left join returns all records from the left table even if there is no matches in the right table now let's have a left join query here the left table is customer since it is mentioned to the left or before the joint statement and this will return the values as follows now right join right join returns all the values selected from the right table and only the matching values from the left table and when there is no match on the left table the result will include this row but with a null value in each column from the left now let's have a right join query now here the right table is orders since it is mentioned to the right or after the joint statement so the result would be like this now coming to full outer joins this join will return all the records from both the tables and when there is no matching value it will show value as null now let's have a full outer join query and the output of this query would be like this next one is self join in self join the table is joined to itself as if there were two tables and a temporary name is given to each table and this is useful when comparing data within a table now in order to understand it clearly let's have a table called employee now if you want to match the employees that belong to the same city we'll have to fire following query where a is the temporary name of the first table and b is the temporary name of the second table and the result would be like this okay so the next question is what are the differences between drop truncate and delete command ok so the first one is truncate truncate command falls under ddl commands type of sql it is used to delete all the rows of a table at once but doesn't delete the table the structure of table remains the same this command once performed cannot be rolled back and the syntax of truncate command is now delete command delete falls under data manipulation language it is used to delete existing records from a table it can delete a single record of multiple records depending on conditions specified and the syntax of delete command is now if the where clause is omitted it will delete all existing records from the table just like the truncate command now coming to drop command drop command falls under data definition language it is used to delete the database objects in case it is a table it will delete the whole table which includes existing records as well as the structure of the table and here is the syntax for drop command