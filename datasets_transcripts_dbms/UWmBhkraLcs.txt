today we will start uh chapter number three and that is regarding data modeling using entity relationship model so uh before describing the entity relationship model it is important to know why there is a need for er model for this purpose we look for this particular diagram and if you see this diagram then you will understand the overall database design process so database design process starts from the given mini world whatever the mini world you have because of the it is the mini world is actually you can say uh the the scope from where we have to determine those requirements or you can say mini world is your problem domain from where you will extract all those requirements which are required for data modeling so let's suppose if you want to build a database application for for a hospital so that hospital itself is a mini world for you so what is happening inside the hospital in terms of data processing in terms of output generation in terms of data they want to store or or in terms of queries so the mini world in that case is that particular hospital for which you want to develop the database model or an application similarly if you want to develop such an application for a bank then that given bank is your mini world you have to determine that what are the data requirements of of of the bank what type of accounts they are dealing with what type of clients they have what of the type of products they have and how they manage various kind of transactions and what data is relevant relevant for them so the given mini world or the third example maybe you take the example of university let's suppose if you want to build a university database then your mini world is that university from where you have to extract that information uh for instance all those courses all those programs all those teachers which are there the students who study in that university their course details so and so forth all these things become relevant apart from that what type of input is required required what type of output they want to generate may be the vouchers being generated maybe the enrollment card or student card is generated by the university which contains certain information or the transcripts or worksheets which are being generated from the examination or the semester section so the process is to determine the requirements and analyze those requirements in terms of your data requirements and then that data requirements are then led toward the conceptual design which is actually a design where you build your high level data model and the conceptual design includes the possible number of entities you have for which you want to store the data and also you will try to find out the various relationships which exist among those various entities and then you will move towards the data model mapping the concept of data model mapping is transformation of your conceptual design into an actual database or you can say into a physical design so once you make your conceptual design then when you map into the database actually then you will create the database and whatever the constraint definitions whatever the relationships you define or what whatever the cardinalities you mentioned or the attribute dimensions you mentioned will come reflect into the physical model and then you can go for the function analysis by by by let's suppose by executing various queries and to find out how it works and then it lead toward the application program design so this is the flow of the database design process so for that purpose if you are talking about a relational model as we are discussing the relational database model uh in this course so uh if you want to build the conceptual design for the relational database model the er m approach is normally used erm stands for entity relationship model or sometimes we also say erd that is called entity relationship diagram so that basically builds the conceptual design of any database which is a backbone of any database so if you have determined the requirements in a correct manner then it's the next task is to transform it into a conceptual model so for this purpose as an example database in this chapter we will take the example of a company database which i will describe in the in in the next few minutes so we need to know some of the er concepts so the er diagram basically uh is a type of model which is based on uh which is based on symbolic mutations whenever we perform modeling in computer science or we use modeling in computer science we have various approaches for example sometimes we offer the mathematical modeling sometimes we ought for graphical modeling and somewhere we use statistical modeling techniques so here we are talking about er model which is the conceptual uh which is basically the symbolic modeling approach it means that here we have the symbols which are being given which represent a specific meaning and those symbols will be reflected into the model so which includes i will discuss later on uh the about the entities attributes relationships and various rules of attributes in the relationship types so we will discuss those various entities and definitions and value sets and key attributes in the next slides so for this purpose first of all we'll try to understand the various notations we have in the er diagram the first notation you see on the top it represents an entity it's a rectangular box which represents an entity entity is something you can say is uh it can be a thing it can be an object it can be an individual it can be a place it can be an event itself or in other words you can say event is anything of significance in in the given mini world for which we need to store data or it can be described in terms of various attributes for example in the university database you might think that student is an important entity because we want to keep data regarding students and whenever you describe that student you will describe that student in terms of the in terms of the attributes so there we also have the concept of weak entity and you can see that the weak entity is reflected or represented in terms of a double line rectangular box which actually represents the weak entity the concept of the weak entity is actually uh is that its dependence its dependence is basically on the strong entity or you can say the weak entity actually depends on the other entity for its existence so or you can say that in any given mini world there is no direct requirement of that information but that information is linked with a certain entity so therefore it is being it is being modeled or it is required then we have the concept of a relationship as you can see it is represented in terms of a rectangle uh sorry in terms of the diamond box and relationship as you know that whenever we talk about relationship among the entities so there are three common types of relationships that is one is to one one is too many and many is too many i will explain these three with examples uh later on so the double rectangle box here representing a weak relationship so then a weak entity might have a weak relationship with the other entity so therefore it is represented as identifying relationship or you can see downwards the oval shape the oval shape is represented in terms of so attribute so attribute representing an oval so let's suppose if we talk about a student the student id student name uh students address are represented as an attribute then the next is called the key attribute so if you think that any of the attribute in the given entity is actually a unique attribute then you have to have underlined that attribute and for any given entity a unique attribute can be a single attribute or a group of attributes then we have the concept of multi-valued attribute which is represented in terms of double lined oval shape so multi-valued attribute is an attribute which you have identified in the given mini world with respect to any entity which keep more than one values and for example that if i want to keep data about an employee and there is an attribute which is called contact or a phone contact so they might have more than one contacts so if i want to have all those contacts into my database so i will declare this entity as a multi-valued this attribute as multi-valued attribute and later on when we map it into the database then we will decide what to do so today we are not discussing the mapping we are just discussing that how we represent that information in terms of a model the next is called the composite attribute composite attribute means an attribute which consists of some attributes for example sometimes we represent name let's suppose the employee name so employee name is can be further divided into first name or last name so i can say that name is a composite attribute which consists of first name and last name so that will be represented as a composite attribute or take the example of an address so address can be composed as well so because the address may be divided into a block into a street into a number into a city so address can also be can also be broken into sub attributes so therefore the representation is like that you can see over here the dotted line oval shape represents the drived attribute what is a drive that review drive attribute is the attribute which takes values from uh maybe other attributes or you you you take some sort of cumulative value or you calculate some value based on the other values so that attribute will be represented as derived attribute for example if i want to represent the cumulative grade point average normally we call cgpa of a student now not that cgpa is dependent on various grades which a student obtained in various courses so that has to be computed and then it will be represented so if it is represented it itself is a drive that reboot or sometime we calculate the profits and sometimes we calculate other related things then it is represented in terms of a dried attribute a dotted oval shape and the last three diagram last three symbols basically represents the participation constraint and that participation constraint if you see is either represented with a double line or with a single line here you can say here we have a double line here we have a single line so whenever we have a double line it means total participation of e2 it means all the instances of e2 will participate but few instances of this entity will participate because this is a single line it means it is a partial constraint and double line representing the the uh total uh participation constraint okay and similarly we have various relationships in terms of one is too many one is to one and one is too many which we will understand later on now these are some of the symbolic notations which we will discuss today but remember these are not the only representation these representations are represented in the classical er diagram but in the next class we will see that how we can use the extended notations as well and there we will also see some new notations which may be represented for a problem for a given problem or in a given mini world to be represented in the model so for this purpose for this purpose we need to understand a small example and that example is related to a company database here you can see on the slide the an example small case study of a company database is given to you such that you will be able to develop the entity relationship model or erm for the company database so so some of the requirements are given to us so we need to create a database schema and let's see what a company is so according to the given information the company is organized into departments so let's suppose there is any company and that company has few departments that suppose maybe those departments are referred as marketing management finance or let's suppose any other i.t department as well or production department quality and so on so forth depending upon the company so the company is organized into departments so since we have various departments each department has a name number and an employee who manages the department so each department has to be recognized with a number which is associated to it or a name you will give in to it or the additional thing is that there is an employee who manages the department so there is uh one of the employees who look after the department we keep track of the start date of the department manager so whoever is looking after the department we have to maintain the date from which date he starts he started looking after the department and a department might have or may have several locations it means let's suppose a department is located in three different places it may be located in two different places so on and so forth each department controls a number of projects so in this given mini world there is an assumption that a company is looking after certain projects and let's assume any company for example just for the sake of the example you can say a software company so that software company has many projects so you can say that various project has to be maintained or the information regarding those projects has to be stored let's suppose we're talking about a construction company the construction company might have various construction projects that has to be represented so each department controls a number of projects so department actually controls the projects each project is also identified with a unique name a unique number let's suppose any number you might say a project number is given like p101 p102 so and so forth and is located on a single location so each project itself is located on a single location not on the multiple locations the database will store each employee's social security number so obviously if we talking about a company so company consists of employees and every company wants to have the data of employees and that data of employees includes this social security number that is called ssn so in north america and other countries normally they have that ssn but let's suppose if you're talking about our own environment there might be we have the employee number itself you can generate your own employee number or sometimes you can use cnic or any other number so we need to record data about an employee so their address their salary their gender and birth date so each employee works for one department but may work on several project so each employee works for one department but may work on several projects so employee is always associated or works in a single department but it is possible in the given situation that the employee works in several projects the database db refers to the database will keep track of number of hours per week that an employee currently works on each project so at any given point in time the company wants to know that how many hours a particular employee worked on a particular project let's suppose employee e101 worked on a project p1 let's suppose for three hours in on monday and then similarly on the other weekdays so at the end of the week the total number of hours spent on a particular project can be calculated so that their effort can be effort per month can be calculated it is required also to keep track of the direct supervisor of each employee so each employee is also supervised by another employee so all employees are defined on a single location so each employee itself is is actually supervised by an employee so each employee may have a number of dependents here dependents refers to all those relationships which are considered to be a close relationship of an employee let's say family relationship such as the parents such as the spouse and childs so these these are considered as dependents of an employee so company wants to keep data off dependent because the company might offer the let's suppose the health benefits to an employee and its dependent so therefore we need to have that data and for that purpose we need to store the record as their name birthdate the gender relationship with the employee so that is the mini world for us right now to just see that how that information can be represented in the er model so for that purpose i will switch the screen and i will go to share a document and will try to build those relationship so just for the sake of time i have built a big structure but i have not made any relationship among those so employee and department so first of all in the given situation what we have identified that there are four possible entities one is called employee one is called the department the third one is called the project and we talked about dependent so actually we have the four entities just forget about the two boxes which are there at the left and right that i will show later on but in the given situation we have only four so i'll try to build those relationships and represent those relationships so that you can understand that how it is represented so here uh in the company database it is mentioned that employee works on the department so let's suppose if employee works on the department and i want to represent this as a relationship so i can put it here i can put it here so that so that you can see i add the text here and let's suppose that is works on works for or works on whatever you want to like that is what that is the relationship we have that is employee works for employee works for what works for the department so employee works for department and you see here that employee works for department that is the relationship we have and there is another relationship which exists between employee and department so it is possible that we might have more than one relationship between two entities so if that is the case those must be represented separately the second relationship in the company database which exists between employee and department is that employee manages the the employee manages the department so here i can put here just for the sake okay i can put it here what i i have written uh manages employee manages the department so that these are the two relationship which exists between employee and department so we talked about three kind of relationship which are common relationships which exist among the entities one is called one is to one the other one is called one is too many and third one is called many is too many so here that uh relationship which exists among the employee and department that i'm talking about works for and see what is the relationship so to determine that relationship we will start from let's suppose from employee and we will read in that manner an employee an employee always start with a singular an employee works for one and only one department so from here we are talking about that employee works for only one and one department but since it's a binary relationship binary relationship is a relationship where there are two entities involved so since it's a binary relationship so we also see it from here our department might have one or more employees from this side this is one is too many but here one is to one so so the relationship which holds will be one is too many so i will put here the one is too many you can represent here let's suppose in terms of this box i will just show over here so that you can see so you can put here here it will come here it will come m and many many site and and here you can write one so the relationship that exists among department employee and employee is one is too many that is i'm talking about works for now let's take the exam the other relationship that the employee manages the department so we again it's a binary relationship so between the entities it can be a unary relationship if it's a unity relationship it means that single entity is involved in the relationship if there are two entities involved in the relationship we call it a binary relationship if there are three entities involved in a relation then we call it a ternary relationship and if we have more entities which are involved in the relationship that you might that you can say it's an an area relationship so here now see the other the second relationship so an employee again i start with a singular an employee manages one and only one department so both the side there's one okay now come over here never write the relationship cardinality by just reading from one side that will misguide you so when whenever you are dealing with the binary relationship you have to see the relationship from both the sides so an employee manages one and only one department so i just mentioned from this site now you can read the relationship from this site our department must have department is managed by one and only one implies so from both side it is one so therefore that relationship is represented as one as one as one is to one as one is to one so i just put it here so that relationship between the second relationship is between employee and department and that is one is to one how you uh how you use various uh how you represent your attrib attributes the attributes are represented in terms of an oval shape like this uh let's suppose i just write down here the that employee is ssn this is ssn and and this ssn is represented here you can see this is the first attribute now let's suppose there are other attributes as well for example name so that is another attribute and what we do is that we that we connect these with the entity like this similarly i just using these diagram tools so so that you can comprehend the subject so here you can see now in this manner we actually uh put the attribute so right now i'm not putting all the attributes over here so just for example so that ssn is a unique attribute so therefore that is represented as an underline so now you understand these two relationships now let's try to discover the relationship between department and a project and if again you go back to your mini world which says that the department controls a project so that is the relationship which exists between department and the project so therefore i can put here what is the relationship that is called controls controls so that is the relationship between department and project so now we'll try to find out whether it is one is to one one is too many or many is too many so we start from here department control one or more projects so from here it is one from here it is many and when we when we see that relationship from the project site so you can say a product project is controlled by one and only one so from here it is one is to one from here one is too many so one is too many will dominate so that therefore the relationship is one is too many so i can put one here and i can put the many here so that is the relationship which exists between department and and the project so relationship is one is too many and department controls the project so here you have identified that relationship now let's see according to the given mini world what is the relationship between employee and a project so employee and a project we have a relationship that employee may work in one or more projects so if uh if you want to write out write down that what is the relationship that is works on so i can put here the relationship that is i'm sorry that is works on so employee works on project i now make the relationship employ an employee works on one or more projects so the this side is one this side is many now see from here a project may have one or more employees so one is here m is here one is here m is here so it means from both side it is one to many so if a relationship from both side is one is too many then actually that relationship is many is too many so that will be represented like this it will be represented as many as too many so here you can see the many is too many relationship why because employee works in one or more projects a project may have one or more employees of both the site if in a binary relationship from both side it is one is too many then actually the relationship is managed to many so whenever we have a many-to-many relationship it is represented as m is to n so when we speak out we say many is to many but when we write we we write m is to n okay the reason is why we we we don't write m into m because it makes the sense that from both the side the value will be same so it is not necessary an employee might work in four projects and there is one employee who might work in two projects so therefore it is always represented as m is to n now one more important thing whenever you have many too many relationship it is necessary that you must have and at least a single attribute which is not either defined in employee nor in project so we have to find out what is the what is which is the attribute which cannot be defined in employee or in project so if you see the company database that attribute is number of hours worked the number of hours worked in a particular project so if i want to put this attribute in employee there we do not have the information of a project so therefore it cannot be mentioned over there if i want to put that attribute in the project there we do not have the information of an employee so therefore that number of hours worked is actually an attribute which depends on both the entities so that type of an attribute must be defined must be defined with the relationship here so i will define this with the relationship so you can define it like this and you see i have defined hours worked i have defined here the hours worked you see here why because that attribute is actually is dependent on both the attributes that employee and the project so therefore it is defined with the relationship that is m is to n relationship or many is to many relationship between employee and a project so we have also discussed the uh we talked about the relationship between employee and a project so here let's suppose i opted for this box why i opted for this box so that because we need a double double rounded rectangle or double side rectangle why because because here this representation is for the weak entity so number for this you can say it is what it is the weak entity here i can write that what is that actually it is represent uh it represents the dependent it represents the dependent so why sorry for a bit because i'm working on the word processor so therefore there might be some overlapping but you understand the concept so this is dependent so dependent is actually what is a weak entity and it's dependent is only on its dependence is only on the employee and because of that employee the company wants to have that data so what is the relationship between employing independent employee employee have dependents so an employee might have zero or more dependents why because there might be no dependent of an employee or if there are employ more dependents then of course it is many so you can say from here it is one is too many but whenever i i read the relationship from here a dependent is in relationship with only one employee so whoever the dependent is always related with one employee so from here it is one is to one from here it is one is too many so the relationship itself is one is too many so i can put it here for your understanding you can see here and you can also see here one is too many that is the relationship we have about an employee that is the relationship of an employee one last thing which is also represented in the company database is regarding that employee supervises an employee now this is self relationship or a unity relationship because it's a unary relationship so it is described with the same entity over here you can see i can just make this relationship here so that you can understand that how it works and here you can see that relationship i can just show you how it is connected and one more line which i want to mention over here you can see like this so we have that relationship and i want to connect this with one more line to make it correct so you can see the relationship is like this now this is the self relationship of an employee and what is the relationship that employee supervises and employ so here that relationship is supervises so you can say an employee supervise one or more employee employee must be supervised by one and only one employee so again the relationship is one is too many so i can put over here one and i can put over here [Music] the many so that is the relationship we have between employee and the employees supervised by an employee and you can see that self relationship is also defined which is a unary relationship so we have binary relationships you have also observed the weak entity you have also observed one to one relationship you have also observed many to many relationship and similarly you can define the various attributes like here you can define the attributes over here and those attributes are represented like this let's suppose it is department number d n o and this is department name that is the name okay and you might have locations so you can also mention the locations so in this way you have seen yourself that you are able to develop the conceptual model that is your erd or initial your conceptual design and as soon as you add more details into it or you want to represent more concepts into this model this will become finalized but right now whatever the mini world we have in terms of the company database database you see that it is represented in this model so this one is two one one is too many and many is too many is also called the you can say a relationship cardinality or relationship cardinality or even the maximum cardinality you can also represent the participation constraint how you will define the participation constraint let's say take one example between employee and department our employee works for one and only one department yes this is participation is total because if there is any employee has to be work in a department our department might have one or more employees in a department you must have one or more employees so department cannot be cannot exist without an employee so participation constraint is total from both sides so if the participation constraint is total that line will be will be doubled like this just see for the sake of the example it will be like this and if this is also uh if this is also the total then it will be represent like this okay so employee manages the department so all employees will not manage the department only few employees will manage the department our department must have a manager so from one side it is total from one side it is partial so you can you can put the double constraint over here and i hope now you can add those participation constraints in the other relationships as well so this is the representation of the conceptual model of a company database in the given example so we just switch back to our presentation and if you can go back and see this is our presentation we're talking about and the same thing is represented in terms of a complete diagram and here you can see the complete diagram this is the complete diagram we have and you see that all representations whether in terms of attributes or a composite attribute it is there total participation or particles partial car participation is also there there are also mentioning of the drive attribute self relationship weak entity weak relationship so on so forth so now it's up to you that how you can understand that concept and try to build the er schemas for any given problem or given mini world so that is the basics of er and we will continue to [Music] to to add some more details and we'll move towards the extended model and there we can see how we can represent those relationships so here you can say all these relationships are defined works for manages controls works on supervision employee and dependence of so this is actually you can say the concept of the you can we have seen the diagram initially and in this diagram you can see that you have the mini world you have the requirement and you build the conceptual design so actually what you do what you did is you you actually make the conceptual design so that is your conceptual design so this is the end of the first lecture regarding entity relationship models or basics of entity relationship model i hope you understood the important points which are being highlighted in the lecture and i hope you will try to read out the related content from chapter number three i will recommend you to please go through with this book which is the official textbook for our course one of the best books i have seen in the databases that is fundamentals of database system so we are using the seventh edition that is by remy's al mastery and nawadi so that is normally we called al-masri and nawadi databases fundamentals of database systems so i will give you an assignment to go through with the chapter read out the chapter carefully and when we meet next time we will discuss some other problems as well thank you so much you