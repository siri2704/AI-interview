so these are the various contents that will be covering unit 6 right functional dependency functional dependency are the constraints on well-formed relations and represent a formalism on infrastructure of a relation see the first definition is a functional dependency f t on a relational schema r is a constraint x to y where x and y are subsets of the attributes of r and y functionality depend on x or x uniquely determines y that means with the help of x we can uniquely identify the value of y x is a determinant y is an attribute x determines y y is functionally dependent on x x to y is a triangle if y is a subset of x definition 2 and functional dependency x to y is satisfied in an instance r of r if for every pair of tuples p and s t and s agree on all the attributes in x then they must agree on all the attributes in y example functional dependency let r be a new student functional dependency are include student id last name so student id through a last name last name major credit status and ssn we can drive out with the help of ssn we can derive out student id last name major credit status right so this is functional dependency types of functional dependencies there are two types of functional dependency traveled functional dependency and non-trivial function diff functional dependency tribal functional dependency the fdx to y is tribal if set y is the subset of set x if a and b are the attributes of r a a b a a b b a b a b are all tribal functional dependency and will contribute to evaluation of the normalization [Music] non-trival is the functional dependency x to y is not rival is set y is not a subset was upside near like student name student id student name so it is not the subset of a there are functional uh dependency exam functional dependency are recognized by analysis of real world no automation or algorithm finding or recognizing them are the database designers task these are the various action reflexivity augmentation transitivity union decomposition or projectivity pseudo transitivity and no right these are the few x in if a is a set of attributes b is a subset of a then a tends to b right this is the example if a is tends to be holds and c is a set of attributes then c a a tends to cv right the examples are very clear ss senses name then ssn phone can lead to name and phone if a tends to be holds and b tends to c holds then a tends to c right that is transit and so the bbc is automatically leads to c right if a is tends to b and a tends to c holds then a tends to bc also holds ssn name and ssn zip that then ssn should it tends to name comma zip decomposition if a tends to bc holds then it tends to be and it tends to see see that the exams are very clear and very easy to understand just understand the word transition pseudo transfer closure of a set of functional dependency given a relation ah schema r a functional dependency f on r is logically implied by a set of functional dependencies f on r if every relation instance r r that satisfied f also satisfies small f right the closure of f denoted by functional dependency f plus is set of all the functional dependencies logically implied by f the closure of f can be found by using a collection of rules called armstrong exits right so these are all the armstrong's exims you only discuss kalyan right these are all the armstrong exams this is algorithm to compute functional dependency all the function to compute the closure of a set of functional dependency f functional dependency is equal to f repeat for each functional dependency f in f plus that means set apply reflexibility and augmentation rules on f at the resulting functional dependencies on f plus right for each pair of functional dependency f 1 f f 2 in f plus if f 1 and f 2 can be combined using transitivity then add the resulting functional dependency until f plus does not change any further large right suppose we are given a relation schema r a b c g h i right and the set of functions dependency a tends to be a tends to see cg tends to h cg tends to i b tends to h we list several members of a plus here a tends to h right we can do since a tends to be and b tends to h to transitivity rule applies cg tends to h since c g tends to h and c g tends to i the union rule implies cg tends to hi right next is a g tends to i since a tends to c and c g tends to i the pseudo to say transitivity rule up implies that a g tends to i holds right right next is the part of normalization normalization while designing a database out of the entity relationship model the main problem existing in the raw database is of redundancy redundancy is storing the data item in more than one place job data redundant redundancy creates several problems like the following extra storage space subsequently the same data in many places takes large amount of disk space entering same data more than once during data insertion right data or toti bari inside cannabi deleting data from more than one place during deletion of deletion modifying data in more than one place anomalies may occur in the database if insertion deletion modification etc are not done properly it creates inconsistency and unreliability of the database to solve this problem the raw database needs to be normalized this is a step-by-step process of removing different kinds of redundancy and anomaly at each step at each step a specific rule is applied to remove specific kind of on impurity in order to give the data base a slim and clean look subsequently unnormalized if a data contains non-atomic values at each row it is said to be unnormalized form an atomic value is something that cannot be further decomposed a non-atomic value as the name suggests can be further decomposed and simplified consider the following table right this is the table so this is the unnormalized form in the same table level there are multiple occurrences of rows under each key employee id although considered to be a primary key employee id cannot give us a unique identification facility for a single row further for each primary key points to a variable length our relation is said to be in first normal form if it contains no atomic values and each row can provide a unique combination of values the above table is an unnormalized form can be processed to create a normalized form a first normal format right as you now see each row contains unique combination of values unlike in a normalized form this relation contains only atomic values that is the row cannot be further decomposed or so the relation is in now first normal for second normal form a relation is said to be in second normal form if it is already in first normal form and each and every attribute fully depends on the primary key of the relation speaking inversely if a table has some attributes which is not dependent on the primary key of the table to attributes then it is in not in second normal form let us explain employee id is the primary key of above relation right employee name month sales and bank name all depend on employee id but the attribute bank name depends on the bank id right which is not a primary key of the table so the table is in first normal form and not in second normal form if this position can be removed and another related relation it would come in second normal form now this is the way um relationship after removing the portion into another relation with store lesser amount of data into relations without any loss of information this is also a significant reduction in redundancy the third normal form our relation is said to be in third normal form if it is already in second normal form and there exists no transitive dependency on the transitive dependency vibrato it tends to be and b tends to c that means a tends to c right if a table contains transit is speaking inversely if a table contains transitive dependency then it is not in third normal form and the table must be split to bring it into third normal form right what is a transitive dependency basically with a relation if we say eight and eight b depends on a and b depend c depends on b then we may derive a c depends on a such derived dependency hold well in most of the situations for example if we have rolled marks depends on rule and grades depend on marks then we may safely derive grade depends on role this third dependency was not originally specified and have derived it right so again there is no transit dependency exist in the table or a relation then it is in third normal form thank you i hope you understand right there are many normal forms but these are the part of your course right thank you and have a nice day