ಡೇಟಾಬೇಸ್ ನಿರ್ವಹಣಾ(database
management) ಸಿಸ್ಟಮ್ಗಳ(systems) ಎರಡನೇ ಮಾಡ್ಯೂಲ್‌ಗೆ
ಸುಸ್ವಾಗತ. ಈ ಮಾಡ್ಯೂಲ್‌ನಲ್ಲಿ,
ಪ್ರಾಥಮಿಕವಾಗಿ DBMSನ ಪರಿಚಯದ ಬಗ್ಗೆ ಮಾತನಾಡುತ್ತೇವೆ. ಈ ಚರ್ಚೆಯು ಪ್ರಸ್ತುತ
ಮಾಡ್ಯೂಲ್ 2 ಮತ್ತು ಮುಂದಿನ ಮಾಡ್ಯೂಲ್
3 ಆಗಿರುವ ಎರಡು ಮಾಡ್ಯೂಲ್‌ಗಳನ್ನು ವ್ಯಾಪಿಸುತ್ತದೆ. ಕೊನೆಯ ಮಾಡ್ಯೂಲ್‌ನಲ್ಲಿ
ತ್ವರಿತವಾಗಿ ರೀಕ್ಯಾಪ್(recap) ಮಾಡಲು ನಮಗೆ ಡೇಟಾಬೇಸ್‌ಗಳು(database)
ಏಕೆ ಬೇಕು ಎಂಬುದರ ಕುರಿತು ಚರ್ಚಿಸಿದ್ದೇವೆ
ಮತ್ತು ಕೋರ್ಸ್‌ನ ವಿವಿಧ ಅಂಶಗಳನ್ನು ಪರಿಚಯಿಸಿದ್ದೇವೆ. ಇದರ ದೃಷ್ಟಿಯಿಂದ,
ಈ ಮಾಡ್ಯೂಲ್‌ನಲ್ಲಿ, ಪರಿಚಯಾತ್ಮಕ ಮಟ್ಟದಲ್ಲಿ
ಡೇಟಾಬೇಸ್ ನಿರ್ವಹಣಾ(database management) ಸಿಸ್ಟಮ್ಗಳ(system)
ಮೂಲ ಪರಿಕಲ್ಪನೆಗಳು(notions) ಮತ್ತು ಪರಿಭಾಷೆಯನ್ನು(terminology)
ಪರಿಚಯಿಸುತ್ತೇವೆ. ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್‌ಗಳಿಗಾಗಿ
ಡೇಟಾ ಮಾದರಿಗಳು(data models) ಮತ್ತು ನಿರ್ದಿಷ್ಟ
ಭಾಷೆಗಳ ಪಾತ್ರವನ್ನು ಅರ್ಥಮಾಡಿಕೊಳ್ಳಲು
ಪ್ರಯತ್ನಿಸುತ್ತೇವೆ. ಮತ್ತು ಡೇಟಾಬೇಸ್ ಡಿಸೈನ್(database
design) ವಿಧಾನವನ್ನು ಸಹ ವಿವರಿಸುತ್ತೇವೆ. ಆದ್ದರಿಂದ, ಮಾಡ್ಯೂಲ್
ಬಾಹ್ಯರೇಖೆಯು(outline) ಈ ರೀತಿ ಇರುತ್ತದೆ. ಮತ್ತು ಇದರೊಂದಿಗೆ
ನಾವು ಚರ್ಚಿಸುತ್ತಿರುವ ಈ ಬಾಹ್ಯರೇಖೆಯ ನಿರ್ದಿಷ್ಟ
ಅಂಶವನ್ನು ಅನುಸರಿಸಲು ಸಾಧ್ಯವಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, ಪ್ರಾರಂಭಿಸಲು
ನಾವು ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್ಗಳ(abstraction) ಮಟ್ಟದ ಬಗ್ಗೆ ಮಾತನಾಡುತ್ತೇವೆ. ಯಾವುದೇ ಇತರ ವ್ಯವಸ್ಥೆಯಂತೆ
ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್ಗಳ(system) ಮೂರು ಹಂತದ ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್ಗಳ(abstraction)
ಪರಿಭಾಷೆಯಲ್ಲಿ ಪರಿಕಲ್ಪನೆ ಮಾಡಲಾಗಿದೆ. ಕಡಿಮೆ ಮಟ್ಟದಲ್ಲಿ,
ಭೌತಿಕ ಡೇಟಾ ಮಟ್ಟ ಅಥವಾ ಭೌತಿಕ ಮಟ್ಟ,
ಇದು ದಾಖಲೆಯನ್ನು ಹೇಗೆ ಸಂಗ್ರಹಿಸಲಾಗಿದೆ
ಎಂಬುದನ್ನು ವಿವರಿಸುತ್ತದೆ, ಆದ್ದರಿಂದ ಸಿಸ್ಟಮ್‌ನಲ್ಲಿನ
ಭೌತಿಕ ಸಂಗ್ರಹಣೆಯ ಬಗ್ಗೆ. ಮುಂದಿನ ಹಂತದಲ್ಲಿ,
ಅದರ ಬಗ್ಗೆ ಮಾತನಾಡುತ್ತೇವೆ, ಇದು ಡೇಟಾಬೇಸ್‌ಗಳಲ್ಲಿ(databases)
ಸಂಗ್ರಹವಾಗಿರುವ ಡೇಟಾ ಮತ್ತು ಡೇಟಾದ ನಡುವಿನ
ಸಂಬಂಧವನ್ನು ವಿವರಿಸುವ ಲಾಜಿಕಲ್ ಮಟ್ಟವಾಗಿದೆ
ಎಂದು ಹೇಳುತ್ತೇವೆ. ಆದ್ದರಿಂದ, ಇಲ್ಲಿ
ಸಂಗ್ರಹಿಸಲಾದ ಯಾವುದೇ ಡೇಟಾವನ್ನು ದಾಖಲೆಯಾಗಿ
ಯೋಚಿಸಬಹುದು. ಆದ್ದರಿಂದ, ಇಲ್ಲಿ
ಪಠ್ಯವನ್ನು ಕಲಿಸುವ ಬೋಧಕರ ದಾಖಲೆಯನ್ನು
ವಿವರಿಸುತ್ತಿದ್ದೇವೆ. ಆದ್ದರಿಂದ, ನಿಮಗೆ
ತಿಳಿದಿರುವಂತೆ ದಾಖಲೆಯು ವಿವಿಧ ರೀತಿಯ ಬಹು
ಕ್ಷೇತ್ರಗಳ ಸಂಗ್ರಹವಾಗಿದೆ. ಆದ್ದರಿಂದ, ಬೋಧಕನ
ಗುರುತಿನ ಸಂಖ್ಯೆ ಅಥವಾ ಕುಗ್ಗುವಿಕೆಯನ್ನು(shrink
) ವಿವರಿಸಲು ಇಲ್ಲಿ ಕ್ಷೇತ್ರವನ್ನು ಹೊಂದಿದ್ದೇವೆ,
ನಾವು ಬೋಧಕರ ಹೆಸರು, ಇಲಾಖೆಯ ಹೆಸರು, ಸಂಬಳ
ಮತ್ತು ಮುಂತಾದವುಗಳನ್ನು ಹೊಂದಿದ್ದೇವೆ. ಆದ್ದರಿಂದ, ಇದು ಲಾಜಿಕಲ್
ವಾಗಿ ಹೇಳುತ್ತದೆ ಇದು ಅಸ್ತಿತ್ವ ಮತ್ತು ಇದು
ದಾಖಲೆಯಾಗಿದೆ ಅಥವಾ ಇದು ಲಾಜಿಕಲ್ ರೀತಿಯಲ್ಲಿ
ಬಯಸುವ ದಾಖಲೆಯ ರಚನೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ಇದು ಭೌತಿಕ
ಮಟ್ಟಕ್ಕೆ ವ್ಯತಿರಿಕ್ತವಾಗಿ, ಲಾಜಿಕಲ್ ಮಟ್ಟವು ನಿರ್ದಿಷ್ಟವಾಗಿ
ಈ ಡೇಟಾ, ಈ ಸ್ಟ್ರಿಂಗ್ ಸಂಖ್ಯೆ(string number) ಮತ್ತು
ಎಲ್ಲವನ್ನೂ ಹೇಗೆ ಸಂಗ್ರಹಿಸಲಾಗುತ್ತದೆ ಮತ್ತು ನೂರಾರು ಮತ್ತು
ಸಾವಿರಾರು ದಾಖಲೆಗಳ ಈ ಗುಣಾಕಾರಗಳು ನಿಜವಾಗಿ
ಹೇಗೆ ಸಂಗ್ರಹಿಸಲ್ಪಡುತ್ತವೆ ಎಂಬುದರ ಬಗ್ಗೆ ಕಾಳಜಿ
ವಹಿಸುವುದಿಲ್ಲ. ಅವುಗಳನ್ನು ಸಮರ್ಥವಾಗಿ
ಬಳಸಬಹುದು. ಆದರೆ ನಾವು ಕೇವಲ ಲಾಜಿಕಲ್
ದೃಷ್ಟಿಕೋನದಿಂದ(logical view) ಕಾಳಜಿವಹಿಸುತ್ತೇವೆ,
ನಾನು ದಾಖಲೆಗಳನ್ನು ಹಾಗೆಯೇ ವ್ಯವಹರಿಸಲು
ಸಾಧ್ಯವಾಗುತ್ತದೆ. ಮೂರನೇ ಹಂತದಲ್ಲಿ ಇದು
ಉನ್ನತ ಮಟ್ಟವನ್ನು ನೋಡುವ ಹಂತ ಎಂದು ಹೇಳಬಹುದು,
ಅಲ್ಲಿ ಅಪ್ಲಿಕೇಶನ್ ಪ್ರೋಗ್ರಾಂ(application program)
ಡೇಟಾವನ್ನು ವೀಕ್ಷಿಸಲು ಪ್ರಯತ್ನಿಸುತ್ತದೆ. ಮತ್ತು ಅಪ್ಲಿಕೇಶನ್
ಪ್ರೋಗ್ರಾಂ ಡೇಟಾವನ್ನು ವೀಕ್ಷಿಸಲು ಪ್ರಯತ್ನಿಸಿದಾಗ,
ಅದು ಅಗತ್ಯವಿರುವ ವಿವರಗಳೊಂದಿಗೆ ವ್ಯವಹರಿಸುತ್ತದೆ;
ಮತ್ತು ಉಳಿದ ವಿವರಗಳನ್ನು ಸಾಮಾನ್ಯವಾಗಿ ಈ ನೋಟದಿಂದ
ಮರೆಮಾಡಲಾಗಿದೆ. ಉದಾಹರಣೆಗೆ, ಇಲ್ಲಿ
ನಾವು ಕೊನೆಯ ಮಾಡ್ಯೂಲ್‌ನಲ್ಲಿ ವಿಶ್ವವಿದ್ಯಾನಿಲಯದ
ಡೇಟಾಬೇಸ್(database,) ಬಗ್ಗೆ ಮಾತನಾಡಿದರೆ, ನೀವು
ವಿಶ್ವವಿದ್ಯಾಲಯದ ಡೇಟಾಬೇಸ್ ಬಗ್ಗೆ ಮಾತನಾಡುತ್ತಿದ್ದರೆ
ಮತ್ತು ಅದು ನೀವು ವಿದ್ಯಾರ್ಥಿಯಾಗಿದ್ದೀರಾ?. ಮತ್ತು ಡೇಟಾಬೇಸ್ ಅನ್ನು
ಪ್ರವೇಶಿಸಿದಾಗ ನೀವು ಯಾವ ಎಲ್ಲಾ ಕೋರ್ಸ್‌ಗಳಿಗೆ
ದಾಖಲಾಗಿದ್ದೀರಾ? ಅಥವಾ ಆ ಕೋರ್ಸ್‌ನ
ಬೋಧಕರು ಯಾರು ಮತ್ತು ಆ ಕೋರ್ಸ್ ಅನ್ನು ಎಲ್ಲಿ
ನಡೆಸಲಾಗುತ್ತಿದೆ ಎಂಬುದನ್ನು ನೋಡಲು
ಸಾಧ್ಯವಾಗುತ್ತದೆ. ಆದರೆ ಬೋಧಕರ ಸಂಬಳ
ಅಥವಾ ಆ ವಿಷಯಕ್ಕೆ ಸಂಬಂಧಿಸಿದಂತೆ, ವಿವಿಧ
ಕೋರ್ಸ್‌ಗಳಲ್ಲಿ ವಿವಿಧ ವಿದ್ಯಾರ್ಥಿಗಳು ಪಡೆದ
ಗ್ರೇಡ್‌ಗಳು(grades) ಯಾವುವು ಇತ್ಯಾದಿಗಳ ವೀಕ್ಷಣೆಯನ್ನು
ಪ್ರವೇಶಿಸಲು ಅಥವಾ ನೋಡಲು ಸಾಧ್ಯವಾಗುವುದಿಲ್ಲ. ಆದರೆ, ಒಬ್ಬ ಬೋಧಕನು
ಅನೇಕ ವಿಭಿನ್ನ ಕೋರ್ಸ್‌ಗಳಲ್ಲಿ ವಿದ್ಯಾರ್ಥಿಗಳ ಕಾರ್ಯಕ್ಷಮತೆಯನ್ನು(performance)
ವೀಕ್ಷಿಸಲು ಸಾಧ್ಯವಾಗುತ್ತದೆ, ವಿಶೇಷವಾಗಿ ಅವನು ಅಥವಾ
ಅವಳು ಮೌಲ್ಯಮಾಪನದಲ್ಲಿ ತೊಡಗಿಸಿಕೊಂಡಿದ್ದಾರೆ,
ಆದರೆ ಇತರ ಬೋಧಕರ ಸಂಬಳವನ್ನು ಪರಿಶೀಲಿಸಲು ಸಾಧ್ಯಾವಾಗುವುದಿಲ್ಲ. ಆದ್ದರಿಂದ, ವೀಕ್ಷಣೆಯ
ಮಟ್ಟವು ಉನ್ನತ ಮಟ್ಟದ ಅಮೂರ್ತತೆಯಾಗಿದೆ,
ಅಲ್ಲಿ ನೀವು ಅಪ್ಲಿಕೇಶನ್‌ಗೆ(application) ಏನು ಬೇಕು, ಆ ಅಪ್ಲಿಕೇಶನ್‌ನ
ಬಳಕೆದಾರರಿಗೆ ಏನು ಬೇಕು ಎಂಬ ವಿಷಯದಲ್ಲಿ
ಡೇಟಾದ ಬಗ್ಗೆ ಮಾಹಿತಿಯನ್ನು ಒದಗಿಸಲು ಪ್ರಯತ್ನಿಸುತ್ತೀರಿ,
ಆದರೆ ವಾಸ್ತವವಾಗಿ ಎಲ್ಲಾ ದಾಖಲೆಗಳ ವಿವರಗಳೊಂದಿಗೆ
ವ್ಯವಹರಿಸುವುದಿಲ್ಲ. ಲಾಜಿಕಲ್ ಮಟ್ಟವನ್ನು
ಹೊಂದಿದೆ. ಆದ್ದರಿಂದ, ಡೇಟಾಬೇಸ್
ಸಿಸ್ಟಮ್( system) ಮೂಲ ರಚನೆಯ ಇವು ಮೂರು ಹಂತಗಳುನ
ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್ ಆರ್ಕಿಟೆಕ್ಚರ್ನ(architecture)
ಮೂಲ ರಚನೆಯನ್ನು ರೂಪಿಸುತ್ತವೆ. ನೀವು ಭೌತಿಕ ಮಟ್ಟವನ್ನು
ಬಳಸಿಕೊಂಡು ದಾಖಲೆಗಳ ಲಾಜಿಕಲ್ ಮಟ್ಟದ ರಚನೆಯಾಗುತ್ತದೆ. ಭೌತಿಕ ಮಟ್ಟವು ಸಾಮಾನ್ಯವಾಗಿ
ಡೇಟಾಬೇಸ್ ಫೈಲ್‌ಗಳ ಪರಿಭಾಷೆಯಲ್ಲಿ ಬೈನರಿ(binary)
ಸ್ವರೂಪದಲ್ಲಿದೆ, ಆ ಫೈಲ್‌ಗಳ ಸಂಘಟನೆ. ಲಾಜಿಕಲ್ ಮಟ್ಟವು ದಾಖಲೆಗಳು
ಮತ್ತು ದಾಖಲೆಗಳ ವಿವಿಧ ಡೇಟಾಬೇಸ್ನ ಸ್ಕೀಮಾ
ಕ್ಷೇತ್ರಗಳೊಂದಿಗೆ ವ್ಯವಹರಿಸುತ್ತದೆ. ಮತ್ತು ವೀಕ್ಷಣೆಯ ಮಟ್ಟವು
ವಿಭಿನ್ನ ಅಪ್ಲಿಕೇಶನ್‌ಗಳಿಗೆ(applications) ಅಗತ್ಯವಿರುವ ವಿಭಿನ್ನ
ವೀಕ್ಷಣೆಗಳ ವಿಷಯದಲ್ಲಿ ಲಾಜಿಕಲ್ ಮಟ್ಟದಿಂದ(logical
level) ನಿರ್ಮಿಸಲ್ಪಟ್ಟಿದೆ. ಈ ಹಂತದಲ್ಲಿ ಈ ಸಂಪೂರ್ಣ
ಹಂತಗಳು ಮತ್ತು ಅವುಗಳ ಪರಿಣಾಮಗಳನ್ನು ಅರ್ಥಮಾಡಿಕೊಳ್ಳದಿರಬಹುದು
ಎಂದು ಖಾತ್ರಿಯಿದೆ, ಆದರೆ ಇದು ನಿಮಗೆ ಮೂರು
ಹಂತಗಳ ಅಸ್ತಿತ್ವದ(existence) ಕಲ್ಪನೆಯನ್ನು ನೀಡಲು
ಮತ್ತು ಮೂರು ಹಂತಗಳೊಂದಿಗೆ ವ್ಯವಹರಿಸುವ ಅಗತ್ಯವನ್ನು
ನೀಡುತ್ತದೆ. ಮತ್ತು ಈ ಹಂತಗಳನ್ನು
ಹೆಚ್ಚು ಹೆಚ್ಚು ಉಲ್ಲೇಖಿಸುತ್ತೇವೆ ಮತ್ತು ಅವುಗಳ ನಿರ್ದಿಷ್ಟ
ಅಂಶಗಳ ಬಗ್ಗೆ ಚರ್ಚಿಸುತ್ತೇವೆ ಎಂದು ನೋಡುತ್ತೇವೆ. ಮುಂದೆ, ನಾವು ಸ್ಕೀಮಾ(schema)
ಮತ್ತು ನಿದರ್ಶನದ(instance) ಬಗ್ಗೆ ಮಾತನಾಡೋಣ. ನಾವು ನಿಯಮಿತವಾಗಿ
ಸ್ಕೀಮಾಗಳು(schemas) ಮತ್ತು ನಿದರ್ಶನಗಳ(instance) ಬಗ್ಗೆ
ಉಲ್ಲೇಖಿಸುತ್ತಲೇ ಇರುತ್ತೇವೆ. ಸ್ಕೀಮಾವು ಸರಳ ಪದಗಳಲ್ಲಿ
ಹೇಳುವುದಾದರೆ, ಮೊದಲು ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾದ(logical
schema) ಬಗ್ಗೆ ಮಾತನಾಡಿದರೆ, ಇದು ಒಂದು ನಿರ್ದಿಷ್ಟ
ಡೇಟಾವನ್ನು ಸಂಘಟಿಸಬೇಕಾದ ಮಾರ್ಗವಾಗಿದೆ, ಇದು
ಡೇಟಾವನ್ನು ಸಂಘಟಿಸುವ ಯೋಜನೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ನೀವು ಸಮಾನಾಂತರವನ್ನು
ಸೆಳೆಯಲು ಸಾಧ್ಯವಾದರೆ, ಕಟ್ಟಡವನ್ನು ಯಾವಾಗ
ನಿರ್ಮಿಸಲಾಗಿದೆ, ಯೋಜನೆಯನ್ನು ಸಿದ್ಧಪಡಿಸಲಾಗಿದೆ
ಮತ್ತು ಆ ಯೋಜನೆಯ ಪ್ರಕಾರ ವಸತಿ ಸಮುಚ್ಚಯದಲ್ಲಿ(residential
complex) ಹಲವಾರು ಕಟ್ಟಡಗಳನ್ನು ನಿರ್ಮಿಸಬಹುದು. ಆದ್ದರಿಂದ, ಆಸ್ಥಾನದಲ್ಲಿರುವ
ಮೆಟ್ಟಿಲುಗಳಿರುವಲ್ಲಿ ವಿವಿಧ ಕೊಠಡಿಗಳು ಇರಬೇಕಾದ
ವಿನ್ಯಾಸವನ್ನು ನೀಡುವ ಯೋಜನೆ ಮತ್ತು ಕಟ್ಟಡಗಳು
ಯಾವಾಗ ಅಥವಾ ನಿರ್ಮಿಸಲಾದ ಕಟ್ಟಡಗಳ ಗುಂಪಿನ ನಡುವೆ
ವ್ಯತ್ಯಾಸವಿದೆ. ಆದ್ದರಿಂದ, ಸ್ಕೀಮಾ
ಪ್ರಾಥಮಿಕವಾಗಿ ಡೇಟಾವನ್ನು ಸಂಘಟಿಸುವ ಯೋಜನೆ ಏನು
ಎಂಬುದರ ಕುರಿತು ಮಾತನಾಡುತ್ತದೆ. ಆದ್ದರಿಂದ, ನಾವು ಗ್ರಾಹಕರ
ಸ್ಕೀಮಾದ(customer schema) ಬಗ್ಗೆ ಮಾತನಾಡಿದರೆ, ಅದು
ಬಹು ವಿಭಿನ್ನ ಕ್ಷೇತ್ರಗಳನ್ನು ಹೊಂದಿದೆ, ಅದು ಗ್ರಾಹಕರ
ಹೆಸರು, ಗ್ರಾಹಕರ ಐಡಿ ಬಗ್ಗೆ ಮಾತನಾಡಬೇಕು,
ಅದು ಬಹುಶಃ ಇತರ ಐಡಿ ಮೊಬೈಲ್ ಸಂಖ್ಯೆಗಳನ್ನು(mobile
number) ಒಳಗೊಂಡಿದೆ. ಆದ್ದರಿಂದ, ಗ್ರಾಹಕರನ್ನು
ವಿವರಿಸಲು ಈ ಕ್ಷೇತ್ರಗಳು ಇರಬೇಕಾದ ಅಂಶವು ಗ್ರಾಹಕರ
ಸ್ಕೀಮಾವನ್ನು ರೂಪಿಸುತ್ತದೆ. ಆದರೆ, ಗ್ರಾಹಕರು ಬ್ಯಾಂಕ್‌ನಲ್ಲಿ
ಹೊಂದಿರುವ ನಿರ್ದಿಷ್ಟ ಸ್ಕೀಮಾ ಖಾತೆಯ ಕುರಿತು
ಮಾತನಾಡುವಾಗ, ನಮಗೆ ಖಾತೆ ಸಂಖ್ಯೆ, ಖಾತೆ
ಪ್ರಕಾರ, ಬಡ್ಡಿ ದರ, ಕನಿಷ್ಠ ಬ್ಯಾಲೆನ್ಸ್,
ಪ್ರಸ್ತುತ ಬಾಕಿ ಮತ್ತು ಮುಂತಾದವುಗಳ ಅಗತ್ಯವಿರುತ್ತದೆ. ಇವು ನಮಗೆ ಅಗತ್ಯವಿರುವ
ಮಾಹಿತಿಯ ಕ್ಷೇತ್ರಗಳಾಗಿವೆ; ಮತ್ತು ಅಂತಹ ಪ್ರತಿಯೊಂದು
ಕ್ಷೇತ್ರದ ಪ್ರಕಾರ ಯಾವುದು ಮತ್ತು ಸ್ಕೀಮಾ
ಮಾಹಿತಿಯಿಂದ ಆ ಎಲ್ಲಾ ಮತ್ತು ಆ ರೀತಿಯ ಮಾಹಿತಿಯನ್ನು
ತಿಳಿದುಕೊಳ್ಳಬೇಕು. ಮತ್ತೆ ಭೌತಿಕ(physical)
ಲಾಜಿಕಲ್ (logical) ಮತ್ತು ನಾವು ಮಾಡಿದಂತೆ ವೀಕ್ಷಣೆಯ
ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್ಗಳಿಗೆ(abstraction) ಅನುಗುಣವಾಗಿ, ಸ್ಕೀಮಾವು
ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾದಲ್ಲಿರಬಹುದು, ಅದು ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್ಗಳ(abstraction)
ಲಾಜಿಕಲ್ ಮಟ್ಟಕ್ಕೆ ಅನುರೂಪವಾಗಿದೆ. ಮತ್ತು ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ
ಡೇಟಾವನ್ನು ಭೌತಿಕವಾಗಿ ಹೇಗೆ ಆಯೋಜಿಸಲಾಗಿದೆ,
ವಿಭಿನ್ನ ಡೇಟಾಬೇಸ್ ಫೈಲ್‌ಗಳು(database files) ಯಾವುವು,
ಅವು ಹೇಗೆ ಇಂಡೆಕ್ಸ್(index) ಮಾಡಲಾಗಿದೆ ಮತ್ತು
ಮುಂತಾದವುಗಳನ್ನು ಹೇಳುವ ಭೌತಿಕ ಸ್ಕೀಮಾವನ್ನು
ಸಹ ಹೊಂದಿರಬಹುದು. ಆದ್ದರಿಂದ, ನಾವು ಹೇಳಬಹುದಾದ
ಈ ಎಲ್ಲಾ ಮಾಹಿತಿಯು ಒಂದು ರೀತಿಯ ಮೆಟಾಡೇಟಾ(metadata)
ಮಾಹಿತಿಯಾಗಿದೆ. ಇದು ವಾಸ್ತವಿಕವಾಗಿ
ಇದು ಗ್ರಾಹಕರ ಸ್ಕೀಮಾ ಅಲ್ಲ ಗ್ರಾಹಕರು ಯಾರು
ಎಂದು ಹೇಳುತ್ತಿಲ್ಲ, ಖಾತೆಯ ಸ್ಕೀಮಾ ಹೇಳುತ್ತಿಲ್ಲ,
ಖಾತೆಗಳು ಯಾವುವು, ಅವರ ಬ್ಯಾಲೆನ್ಸ್(balance)
ಏನು. ಆದರೆ ಗ್ರಾಹಕರನ್ನು
ವ್ಯಾಖ್ಯಾನಿಸಬೇಕಾದರೆ ಅದು ಹೇಳುತ್ತಿದೆ;
ನಂತರ ತಿಳಿದುಕೊಳ್ಳಬೇಕಾದ ಮಾಹಿತಿ ಯಾವುದು, ನೀವು
ನಿರ್ವಹಿಸಬೇಕಾದ ಮಾಹಿತಿ ಯಾವುದು. ಒಂದು ಖಾತೆಯನ್ನು ವಿವರಿಸಬೇಕಾದರೆ
ಮುಖ್ಯವಾದ ವಿವಿಧ ಕ್ಷೇತ್ರಗಳು ಯಾವುವು. ಆದ್ದರಿಂದ, ಈ ಸ್ಕೀಮ್ಯಾಟಿಕ್(schematic)
ಅಥವಾ ಈ ಮೆಟಾಡೇಟಾವನ್ನು(metadata) ಡೇಟಾಬೇಸ್ನ(database) ಸ್ಕೀಮಾ
ಎಂದು ಕರೆಯಲಾಗುತ್ತದೆ. ಈಗ, ಈ ಸ್ಕೀಮಾದ ಆಧಾರದ
ಮೇಲೆ ಡೇಟಾಬೇಸ್‌ಗಳ(databases) ನಿರ್ದಿಷ್ಟ ನಿದರ್ಶನಗಳು
ಸಂಭವಿಸುತ್ತವೆ, ಅವು ಸ್ಕೀಮಾ ಪ್ರಕಾರ ವಿಭಿನ್ನ
ದಾಖಲೆಗಳನ್ನು ಹೊಂದಿರುವಾಗ ನಿದರ್ಶನಗಳಾಗಿವೆ. ಈಗ, ಸ್ವಾಭಾವಿಕವಾಗಿ
ಒಮ್ಮೆ ಸ್ಕೀಮಾವನ್ನು ಸರಿಪಡಿಸಿದರೆ, ಈ ದಾಖಲೆಗಳು
ಸ್ಕೀಮಾ ಹೊಂದಿರುವ ಎಲ್ಲಾ ಕ್ಷೇತ್ರಗಳಲ್ಲಿ
ಮೌಲ್ಯಗಳನ್ನು ಹೊಂದಿರಬೇಕು; ಮತ್ತು ಪ್ರತಿಯೊಂದು
ಮೌಲ್ಯವು ನಿರ್ದಿಷ್ಟ ಕ್ಷೇತ್ರವನ್ನು ನಿರ್ದಿಷ್ಟಪಡಿಸಿದ
ಪ್ರಕಾರವಾಗಿರಬೇಕು. ಹಾಗಾಗಿ, ಗ್ರಾಹಕರ
ಸ್ಕೀಮಾದ ಕೆಲವು ಮಾದರಿ ನಿದರ್ಶನವನ್ನು ಇಲ್ಲಿ
ತೋರಿಸಿದ್ದೇನೆ, ಅಲ್ಲಿ ಮೂರು ಗ್ರಾಹಕರನ್ನು
ಅವರ ಹೆಸರು, ಗ್ರಾಹಕ ID, ಖಾತೆ ಸಂಖ್ಯೆ, ಇತರ
ID ಮತ್ತು ಮೊಬೈಲ್ ಸಂಖ್ಯೆಯೊಂದಿಗೆ ನೋಡಬಹುದು, ಇವೆಲ್ಲವೂ
ಸಹಜವಾಗಿ ಕಾಲ್ಪನಿಕ ಡೇಟಾ(fictitious data), ಆದರೆ
ಇದು ಕೇವಲ ಈ ಗ್ರಾಹಕರ ನಿದರ್ಶನವು ಹೇಗೆ ಕಾಣುತ್ತದೆ
ಎಂಬುದರ ಕುರಿತು ಕಲ್ಪನೆಯನ್ನು ನೀಡುತ್ತದೆ. ಅಂತೆಯೇ, ಖಾತೆಗಳ ನಿದರ್ಶನವನ್ನು(accounts
instance) ತೋರಿಸಿದ್ದೇವೆ, ಆದ್ದರಿಂದ ಈ ನಿದರ್ಶನಗಳ
ನಡುವೆ ನೋಡಬಹುದಾದ ಕೆಲವು ರೀತಿಯ ಸಂಬಂಧವಿದೆ
ಎಂದು ನೋಡಬಹುದು. ಉದಾಹರಣೆಗೆ, ಗ್ರಾಹಕರ
ನಿದರ್ಶನದಲ್ಲಿನ ಮೊದಲ ಗ್ರಾಹಕ ID(customer ID) ಅನ್ನು
ಮೊದಲನೆಯದಾಗಿ ನೋಡಬಹುದು, ಕ್ಷಮಿಸಿ, ಗ್ರಾಹಕರ
ನಿದರ್ಶನದಲ್ಲಿ ಮೊದಲ ಖಾತೆಯ ಐಡಿಯನ್ನು ಖಾತೆಯ
ನಿದರ್ಶನದಲ್ಲಿ ಮೊದಲ ನಮೂದು ಮೊದಲ ದಾಖಲೆಯಾಗಿ
ನೋಡಬಹುದು. ಆದ್ದರಿಂದ, ವಿಭಿನ್ನ
ದಾಖಲೆಗಳೊಂದಿಗೆ ಸ್ಕೀಮಾವನ್ನು(schema) ನಿಜವಾಗಿ ಜನಪ್ರಿಯಗೊಳಿಸಿದಾಗ
ಮತ್ತು ಇದು ಬದಲಾಗುತ್ತಲೇ ಇರುತ್ತದೆ. ಆದ್ದರಿಂದ, ಖಂಡಿತವಾಗಿಯೂ
ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ(database) ಕಾರ್ಯಾಚರಣೆಗಳನ್ನು
ಮಾಡಿದಾಗ, ಖಂಡಿತವಾಗಿಯೂ ನಿಯಮಿತವಾಗಿ ಹೊಸ ದಾಖಲೆಗಳನ್ನು
ಸೇರಿಸಲಾಗುತ್ತದೆ, ಕೆಲವು ದಾಖಲೆಗಳನ್ನು
ಈ ನಿದರ್ಶನದಿಂದ(instance) ಅಳಿಸಬಹುದು ಮತ್ತು
ಕೆಲವು ದಾಖಲೆಗಳ ಕ್ಷೇತ್ರಗಳು ಬದಲಾಗುತ್ತಲೇ ಇರಬಹುದು. ಉದಾಹರಣೆಗೆ, ಒಂದು
ವಹಿವಾಟು ಮಾಡಿದಾಗಲೆಲ್ಲ ನಿಯಮಿತವಾಗಿ ಖಾತೆಗಳ
ನಿದರ್ಶನದಲ್ಲಿ, ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್(balance) ಬದಲಾಗುತ್ತದೆ;
ಬಹುಶಃ ಒಂದು ನಿರ್ದಿಷ್ಟ ಸಮಯದಲ್ಲಿ ಬ್ಯಾಂಕ್
ನಿರ್ದಿಷ್ಟ ಪ್ರಕಾರದ ಖಾತೆಗೆ ಬಡ್ಡಿದರವನ್ನು(interest
rate) ಬದಲಾಯಿಸಲು ನಿರ್ಧರಿಸಬಹುದು ನಂತರ ಬಡ್ಡಿದರದ ಕ್ಷೇತ್ರವು
ಬದಲಾಗುತ್ತದೆ, ಹೊಸ ಗ್ರಾಹಕರು(new customers) ಗ್ರಾಹಕರ
ನಿದರ್ಶನಕ್ಕೆ ಬರಬಹುದು. ಆದ್ದರಿಂದ, ನಿದರ್ಶನಗಳನ್ನು
ನಿಯಮಿತವಾಗಿ ನವೀಕರಿಸಲಾಗುತ್ತದೆ ಕುಶಲತೆಯಿಂದ ಸೇರಿಸಲಾಗಿದೆ
ಅಳಿಸಲಾಗಿದೆ ನವೀಕರಿಸಲಾಗಿದೆ, ಆದರೆ ಸ್ಕೀಮಾ(schema) ಬದಲಾಗದೆ
ಉಳಿಯುತ್ತದೆ. ಆದ್ದರಿಂದ, ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ(database)
ಸ್ಕೀಮಾದ ಬದಲಾವಣೆಯು ಬಹಳ ಅಪರೂಪವಾಗಿದೆ
ಮತ್ತು ಡೇಟಾಬೇಸ್ ಅನ್ನು ವಿನ್ಯಾಸಗೊಳಿಸಿದಾಗ
ಅಥವಾ ಅದನ್ನು ಅಪ್‌ಗ್ರೇಡ್(upgrad) ಮಾಡುವಾಗ ಮಾತ್ರ ಮಾಡಬೇಕಾಗಿದೆ. ಏಕೆಂದರೆ ಒಮ್ಮೆ ಈ
ಸ್ಕೀಮಾವನ್ನು ಬದಲಾಯಿಸಿದರೆ, ಅದು ಇಡೀ ಜಗತ್ತನ್ನು
ನೋಡುವ ರೀತಿಯನ್ನು ಬದಲಾಯಿಸುತ್ತದೆ, ಸಂಪೂರ್ಣ
ಡೇಟಾಬೇಸ್(database) ಸನ್ನಿವೇಶವನ್ನು ನೋಡುತ್ತೀರಿ. ಆದ್ದರಿಂದ, ಲಾಜಿಕಲ್
ಮಟ್ಟದಲ್ಲಿ ಸ್ಕೀಮಾವನ್ನು ಬದಲಾಯಿಸುತ್ತಿದ್ದರೆ,
ಸ್ವಾಭಾವಿಕವಾಗಿ ವೀಕ್ಷಣೆಯು ಸಹ ಪರಿಣಾಮ ಬೀರುತ್ತದೆ,
ಏಕೆಂದರೆ ವಹಿವಾಟು ಅಪ್ಲಿಕೇಶನ್(application)
ಅನ್ನು ಬಳಕೆದಾರರಿಗೆ ಅಥವಾ ಬ್ಯಾಲೆನ್ಸ್
ಚೆಕ್ ಅಪ್ಲಿಕೇಶನ್(balance check application) ಅನ್ನು ಹೇಗೆ
ಪ್ರಸ್ತುತಪಡಿಸಲು ಬಯಸುತ್ತೀರಿ ಬಳಕೆದಾರರ
ಸ್ಕೀಮಾಗಳನ್ನು ನಿರ್ಧರಿಸಲು ಇದನ್ನು ಬಳಸುತ್ತಿರುವಿರಿ. ಆದರೆ, ಸಹಜವಾಗಿ, ನಾವು
ಬಯಸುವುದು ಭೌತಿಕ ಸ್ಕೀಮಾ(physical schema) ಮತ್ತು ಲಾಜಿಕಲ್
ಸ್ಕೀಮಾ(logical schema) ನಡುವೆ ಸಾಮಾನ್ಯವಾಗಿ ನಿರ್ದಿಷ್ಟ
ಸ್ವಾತಂತ್ರ್ಯವನ್ನು ಬಯಸುತ್ತೇವೆ. ಇದರ ಅರ್ಥವೇನೆಂದರೆ
ವ್ಯವಹರಿಸಬೇಕಾದ ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾ(logical schema), ಹೆಚ್ಚಿನ
ಮಟ್ಟದ ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್ಗಳ(abstraction) ಹೊಂದಿರುವ ದೃಷ್ಟಿಕೋನದೊಂದಿಗೆ
ಇದು ಲಿಂಕ್ ಆಗಿದೆ. ಇನ್ನೊಂದು ತುದಿಯಲ್ಲಿ,
ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾವು(logical schema) ಭೌತಿಕ ಸ್ಕೀಮಾವನ್ನು
ಆಧರಿಸಿದೆ; ಭೌತಿಕ ಸ್ಕೀಮಾ ಎಂದರೆ ಬೈನರಿ
ಫೈಲ್‌ಗಳ(binary files) ಡೇಟಾಬೇಸ್ ಫೈಲ್‌ಗಳ ವಿಷಯದಲ್ಲಿ
ಮಾಹಿತಿಯನ್ನು ಹೇಗೆ ಆಯೋಜಿಸುತ್ತಿದ್ದೀರಿ
ಎಂದರ್ಥವಾಗಿದೆ.. ಈಗ, ಆ ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾ(logical
schema) ಬದಲಾಗಬಾರದು ಎಂದು ಖಂಡಿತವಾಗಿಯೂ ಬಯಸುತ್ತೀರಿ
ಏಕೆಂದರೆ ಅದು ಬದಲಾದರೆ ವೀಕ್ಷಣೆ ಮಟ್ಟದಲ್ಲಿ
ಎಲ್ಲಾ ಅಪ್ಲಿಕೇಶನ್‌ಗಳು(applications) ಬದಲಾಗಬೇಕಾಗುತ್ತದೆ. ಆದರೆ ಫೈಲ್‌ಗಳನ್ನು
ಸಂಘಟಿಸುವ ರೀತಿಯಲ್ಲಿ ಭೌತಿಕ ಸ್ಕೀಮಾದಲ್ಲಿ(physical
schema) ಬದಲಾವಣೆಯ ಅಗತ್ಯವಿರಬಹುದು, ಏಕೆಂದರೆ ಬಹುಶಃ ನೀವು
10,000 ದಾಖಲೆಗಳಿಗಾಗಿ ಡೇಟಾಬೇಸ್(database) ಅನ್ನು
ವಿನ್ಯಾಸಗೊಳಿಸಿದ್ದೀರಿ ಮತ್ತು ಈಗಾಗಲೇ 9000 ದಾಖಲೆಗಳನ್ನು
ಹೊಂದಿದ್ದೀರಿ ಮತ್ತು ಅದನ್ನು ಬಹುಶಃ 1,00,000
ದಾಖಲೆಗಳಿಗೆ ವಿಸ್ತರಿಸಲು ಬಯಸುತ್ತೀರಿ. ಮತ್ತು ಈ ವ್ಯವಸ್ಥೆಯು
ವಿಭಿನ್ನವಾಗಿರಬೇಕು, ಈ ಫೈಲ್‌ಗಳನ್ನು ಮರುಸಂಘಟಿಸಬೇಕಾಗಬಹುದು
ಮತ್ತು ಹೀಗೆ, ಅದನ್ನು ಬೇರೆ ರೀತಿಯಲ್ಲಿ ಸೂಚ್ಯಂಕ
ಮಾಡಬೇಕಾಗಬಹುದು ಮತ್ತು ಇದೆಲ್ಲವೂ, ಆದರೆ ಯಾವುದೇ
ಬದಲಾವಣೆಯ ಅಗತ್ಯವಿಲ್ಲದೆ ಭೌತಿಕ ಮಟ್ಟದಲ್ಲಿ
ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾದಲ್ಲಿ(logical schema) ಬದಲಾವಣೆಯನ್ನು
ಮಾಡಲು ಬಯಸುತ್ತೀರಿ. ಆದ್ದರಿಂದ, ಡೇಟಾಬೇಸ್
ಸ್ಕೀಮಾದ(database schema) ಈ ಗುಣಲಕ್ಷಣವು ತುಂಬಾ
ಅವಶ್ಯಕವಾಗಿದೆ, ಇದು ಭೌತಿಕ ಡೇಟಾ ಸ್ವಾತಂತ್ರ್ಯ
ಅಥವಾ ಲಾಜಿಕಲ್ ಸ್ಕೀಮಾ(logical schema) ಅಥವಾ ವೀಕ್ಷಣೆಯ
ಮಟ್ಟವನ್ನು ವಾಸ್ತವವಾಗಿ ಪರಿಣಾಮ ಬೀರದೆ ಭೌತಿಕ
ಸ್ಕೀಮಾವನ್ನು ಬದಲಾಯಿಸುವ ಸಾಮರ್ಥ್ಯ ಎಂದು ಹೇಳುತ್ತೇವೆ. ಆದ್ದರಿಂದ, ಇದು ನೆನಪಿನಲ್ಲಿಟ್ಟುಕೊಳ್ಳಬೇಕಾದ
ನಿರ್ಣಾಯಕ ಅಂಶವಾಗಿದೆ. ಆದ್ದರಿಂದ, ಮುಂದಿನದು
ಡೇಟಾ ಮಾದರಿಗಳು(data models). ಇಲ್ಲಿ ಡೇಟಾ ಮಾದರಿಗಳು
ಡೇಟಾವನ್ನು ವಿವರಿಸುವ ಸಾಧನಗಳ ಸಂಗ್ರಹವಾಗಿದೆ
ಏಕೆಂದರೆ ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್(database system) ಬಗ್ಗೆ
ಮಾತನಾಡುತ್ತಿದ್ದೇವೆ. ಆದ್ದರಿಂದ, ನಿಸ್ಸಂಶಯವಾಗಿ
ಇಲ್ಲಿ ಮುಖ್ಯ ಗಮನವು ದತ್ತಾಂಶವನ್ನು ಪ್ರತಿನಿಧಿಸಲು
ಸಾಧ್ಯವಾಗುವಂತೆ ಮಾಡೆಲ್(model) ಮಾಡಲು ಸಾಧ್ಯವಾಗುತ್ತದೆ,
ಆದ್ದರಿಂದ ಡೇಟಾದ ನಡುವಿನ ಸಂಬಂಧಗಳ ಬಗ್ಗೆ ಮಾತನಾಡುವಾಗ,
ಇದು ಡೇಟಾದ ಅರ್ಥದ ಕುರಿತು ಮಾತನಾಡುತ್ತದೆ
ಸೆಮ್ಯಾಂಟಿಕ್ಸ್(semantics), ಇದು ಡೇಟಾ ನಿರ್ಬಂಧಗಳ
ಕುರಿತು ಮಾತನಾಡುತ್ತದೆ. ಉದಾಹರಣೆಗೆ, ಇದು ಖಾತೆಯ
ಬ್ಯಾಲೆನ್ಸ್(balance) ಆಗಿದೆ, ಖಾತೆಯ ಸ್ಕೀಮಾದಲ್ಲಿ
ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್ ಅನ್ನು ಉಲ್ಲೇಖಿಸುತ್ತೇವೆ,
ಈಗ, ಪ್ರಶ್ನೆಯು ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್(balance) ಋಣಾತ್ಮಕವಾಗಿರಬಹುದೇ,
ಉತ್ತರ ಹೌದು ಅಥವಾ ಇಲ್ಲವೇ ಎಂದು ತಿಳಿಯಬೇಕು. ಬ್ಯಾಂಕ್ ಠೇವಣಿ(deposit)
ಇಟ್ಟಿರುವಷ್ಟು ಹಣವನ್ನು ಮಾತ್ರ ಹಿಂಪಡೆಯಬಹುದು
ಎಂದು ಆದೇಶಿಸಿದರೆ, ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್(balance)
ಋಣಾತ್ಮಕವಾಗಿರಲು(negative) ಸಾಧ್ಯವಿಲ್ಲ, ಆದರೆ
ಬ್ಯಾಂಕ್ ಓವರ್‌ಡ್ರಾಫ್ಟ್(overdraft) ಮಾಡುವ ಸೌಲಭ್ಯವನ್ನು
ನೀಡಿದರೆ, ನಿಜವಾಗಿ ಹೊಂದಿದ್ದಕ್ಕಿಂತ
ಹೆಚ್ಚಿನ ಹಣವನ್ನು ಡ್ರಾ(draw) ಮಾಡಲು ಸಾಧ್ಯವಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, ಖಾತೆಯ
ಬ್ಯಾಲೆನ್ಸ್ ನಕಾರಾತ್ಮಕವಾಗಿರಬಹುದು. ಕೆಲವು ಬ್ಯಾಂಕ್‌ಗಳಲ್ಲಿ
ಕನಿಷ್ಠ ಬ್ಯಾಲೆನ್ಸ್ ಇದೆ ಎಂದು ಬ್ಯಾಂಕ್
ಹೇಳುತ್ತಿರಬಹುದು. ಆದ್ದರಿಂದ, ಕನಿಷ್ಠ
ಬ್ಯಾಲೆನ್ಸ್ 5,000 ಆಗಿದೆ. ಹಾಗಾಗಿ, ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್(balance)
ಐದು ಸಾವಿರ ರೂಪಾಯಿಗಿಂತ ಕಡಿಮೆಯಿರಬಾರದು ಎಂದರೆ
ಬ್ಯಾಂಕ್ ಆ ವಹಿವಾಟುಗಳನ್ನು ಅನುಮತಿಸುವುದಿಲ್ಲ. ಆದ್ದರಿಂದ, ಇವುಗಳು
ನೈಜ ಜಗತ್ತಿನಲ್ಲಿ(real world) ಅಸ್ತಿತ್ವದಲ್ಲಿರಬಹುದಾದ
ವಿಭಿನ್ನ ನಿರ್ಬಂಧಗಳ ಉದಾಹರಣೆಗಳಾಗಿವೆ
ಮತ್ತು ಆದ್ದರಿಂದ, ಡೇಟಾ ಮಾದರಿ ಪ್ರಾತಿನಿಧ್ಯದ(representation)
ವಿಷಯದಲ್ಲಿ ಅಗತ್ಯವಿರುತ್ತದೆ. ಆದ್ದರಿಂದ, ಇಂದು ಅಸ್ತಿತ್ವದಲ್ಲಿರುವ(exist)
ಹಲವಾರು ಡೇಟಾ ಮಾದರಿಗಳಿವೆ. ಆದರೆ ಸಾಮಾನ್ಯವಾಗಿ
ಆಸಕ್ತಿ ಹೊಂದಿರುವ ಡೇಟಾಬೇಸ್ ಅಪ್ಲಿಕೇಶನ್‌ಗಳ(database
applications) ನಿರ್ದಿಷ್ಟ ವಿಭಾಗದ ವಿಷಯದಲ್ಲಿ
ಹೆಚ್ಚು ವ್ಯಾಪಕವಾಗಿ ಬಳಸಲಾಗುವ ಅತ್ಯಂತ
ಜನಪ್ರಿಯ ಮತ್ತು ಶಕ್ತಿಯುತವಾದದ್ದು ಸಂಬಂಧಿತ ಮಾದರಿಯಾಗಿದೆ
ಮತ್ತು ಈ ಕೋರ್ಸ್‌ನಲ್ಲಿ(course) ಗಮನಹರಿಸುತ್ತೇವೆ. ಸಂಬಂಧಿತ ಮಾದರಿಯ ವಿಷಯದಲ್ಲಿ
ಪ್ರಮುಖ ಪ್ರವಚನವನ್ನು ಹೊಂದಿದ್ದೇವೆ ಮತ್ತು
ಅದರ ಆಧಾರದ ಮೇಲೆ ಬಹಳಷ್ಟು ವಿಷಯಗಳನ್ನು ಅಭಿವೃದ್ಧಿಪಡಿಸಲಾಗುವುದು. ಆದರೆ ಸಂಬಂಧಿತ ಮಾದರಿಯ
ವಿಷಯದಲ್ಲಿ ಡೇಟಾಬೇಸ್(database) ಅನ್ನು ನೇರವಾಗಿ ವಿನ್ಯಾಸಗೊಳಿಸುವುದು
ಸುಲಭವಲ್ಲ, ಏಕೆಂದರೆ ವಿನ್ಯಾಸವು ನಡೆಯುತ್ತಿರುವ
ನೈಜ ಪ್ರಪಂಚವನ್ನು(real world) ಮೊದಲು ಅರ್ಥಮಾಡಿಕೊಳ್ಳಬೇಕು. ಆದ್ದರಿಂದ, ಸಾಮಾನ್ಯವಾಗಿ
ಕಡಿಮೆ ಔಪಚಾರಿಕ ಮಾದರಿಯೊಂದಿಗೆ(formal model) ಎಂಟಿಟಿ-ರಿಲೇಶನ್ಶಿಪ್(entity-relationship)
ಡೇಟಾ ಮಾದರಿ ಅಥವಾ ER ಮಾದರಿ(ER model), ER ರೇಖಾಚಿತ್ರವನ್ನು(ER
diagram) ಪ್ರಾರಂಭಿಸುತ್ತೇವೆ, ಇವುಗಳನ್ನು ಸಾಮಾನ್ಯವಾಗಿ
ಕರೆಯಲಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, ಆಬ್ಜೆಕ್ಟ್
ಓರಿಯೆಂಟೆಡ್ ಸಿಸ್ಟಮ್‌ಗಳ(object oriented systems) ಬಗ್ಗೆ ಜ್ಞಾನವನ್ನು
ನೆನಪಿಸಿಕೊಂಡರೆ ಮತ್ತು UML ಅನ್ನು ತಿಳಿದಿದ್ದರೆ,
ER ಮಾದರಿಗಳು ಮತ್ತು ಅನುಗುಣವಾದ ವರ್ಗ ರೇಖಾಚಿತ್ರಗಳ
ಬಗ್ಗೆ ಈಗಾಗಲೇ ತಿಳಿದಿರುತ್ತದೆ. ಆದ್ದರಿಂದ, ಇಲ್ಲಿ
ಮಾದರಿಯ ಬಗ್ಗೆ ಸಂಕ್ಷಿಪ್ತವಾಗಿ ಮಾತನಾಡುತ್ತೇವೆ ಮತ್ತು
ER ರೇಖಾಚಿತ್ರಗಳ ವಿಷಯದಲ್ಲಿ ನೈಜ ಜಗತ್ತಿನಲ್ಲಿ
ಮಾಡೆಲಿಂಗ್(modelling) ಅನ್ನು ಹೇಗೆ ಮಾಡಬೇಕೆಂದು
ತೋರಿಸುತ್ತೇವೆ. ಆದರೆ, ಅವು ವಾಸ್ತವವಾಗಿ
ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್‌ಗಳು(database systems) ನೇರವಾಗಿ ಬಳಸಿದ
ಮಾದರಿಗಳಲ್ಲ, ನಂತರ ಅವುಗಳನ್ನು ಕೆಲವು
ಸಂಬಂಧಿತ ಅಥವಾ ಇತರ ಮಾದರಿಗೆ ಪರಿವರ್ತಿಸಲಾಗುತ್ತದೆ
ಮತ್ತು ಇಂತಹ ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್‌ಗಳನ್ನು(systems)
ನಾವು ಬಳಸುತ್ತವೆ. ಮುಂದಿನದು ವಸ್ತು ಆಧಾರಿತ(object-based)
ಡೇಟಾ ಮಾದರಿಗಳು(data models). ಸರಳವಾದ ಸ್ಟ್ರಿಂಗ್ಸ್(simple
strings) ಅಥವಾ ಸಂಖ್ಯೆಗಳು ಅಥವಾ ಅಕ್ಷರಗಳಂತಹ(characters)
ವಸ್ತುಗಳು ಇಲ್ಲದ ವ್ಯವಸ್ಥೆಯನ್ನು ಪ್ರತಿನಿಧಿಸಲು ವಸ್ತುಗಳು
ಉತ್ತಮ ಶಕ್ತಿಯನ್ನು ನೀಡುತ್ತವೆ ಎಂಬ ಅಂಶವನ್ನು
ತಿಳಿದಿರುತ್ತೀರಿ, ಅವುಗಳು ಒಂದು ನಿರ್ದಿಷ್ಟ
ರೀತಿಯಲ್ಲಿ ಕುಶಲತೆಯಿಂದ ಮಾಡಬಹುದಾದ ಒಂದು ಘಟಕದ
ಪರಿಕಲ್ಪನೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ನೈಜ ಜಗತ್ತಿನಲ್ಲಿ,
ಹಲವಾರು ವಸ್ತುಗಳನ್ನು ಹೊಂದಿದ್ದೀರಿ, ಡೇಟಾಬೇಸ್‌ಗಳಲ್ಲಿ(database)
ಒಂದೇ ರೀತಿಯ ವಸ್ತುಗಳನ್ನು ಹೊಂದಿದ್ದರೆ ಚೆನ್ನಾಗಿರುತ್ತಿತ್ತು. ಆದ್ದರಿಂದ, ಆಬ್ಜೆಕ್ಟ್-ಆಧಾರಿತ(object-based)
ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್‌ಗಳನ್ನು ಬಳಸಿದ ಕೆಲವು ಡೇಟಾಬೇಸ್
ಸಿಸ್ಟಮ್‌ಗಳನ್ನು(system) ವಿನ್ಯಾಸಗೊಳಿಸಲಾಗಿದೆ. ಆದ್ದರಿಂದ, ಅವರಿಗೆ
ಮಾದರಿಗಳಿವೆ. ಆದಾಗ್ಯೂ, ಈ ಕೋರ್ಸ್‌ನಲ್ಲಿ
ಸ್ವಲ್ಪಮಟ್ಟಿಗೆ ಕಲ್ಪನೆಯನ್ನು ಮಾಡುತ್ತೇವೆ. ಅತ್ಯಂತ ಜನಪ್ರಿಯವಾಗಿರುವ
ಇತರ ಮಾದರಿಯನ್ನು ಸೆಮಿ-ಸ್ಟ್ರಕ್ಚರ್ಡ್(semi-structured) ಡೇಟಾ ಮಾಡೆಲ್(data model)
ಎಂದು ಕರೆಯಲಾಗುತ್ತದೆ. ಇದು ಪ್ರಾಥಮಿಕವಾಗಿ
XML ಪರಿಭಾಷೆಯಲ್ಲಿದೆ. XML ನ ಮೂಲಭೂತ ವಿಷಯಗಳೊಂದಿಗೆ
ಪರಿಚಿತರಾಗಿರುವಿರಿ ಎಂದು ಖಾತ್ರಿಯಿದೆ,
ಇದು ಎಕ್ಸ್‌ಟೆನ್ಸಿಬಲ್ ಮಾರ್ಕ್ ಅಪ್(extensible markup)
ಭಾಷೆಯಾಗಿದ್ದು, ಇದರಲ್ಲಿ ಬಳಕೆಯ ಟ್ಯಾಗ್‌ಗಳನ್ನು(tags)
ರಚಿಸಬಹುದು ಮತ್ತು ಡೇಟಾವನ್ನು ವಿವರಿಸಲು
ವಿಭಿನ್ನ ಮಾರ್ಕ್‌ಅಪ್‌ಗಳನ್ನು(markup) ಬಳಸಬಹುದು. ಇದು ಕ್ಷೇತ್ರ ಮತ್ತು
ಇದು ಮೌಲ್ಯದ ಪ್ರಕಾರ ಎಂದು ಹೇಳಬಹುದು. ಮತ್ತು ಇದು ಡೇಟಾವನ್ನು
ಪ್ರತಿನಿಧಿಸಲು ಉತ್ತಮ ಮಾರ್ಗವಾಗಿದೆ. ಮತ್ತು XML ಅಥವಾ ಅರೆ-ರಚನಾತ್ಮಕ(semi-structured)
ಮಾದರಿಗಳು ವಿವಿಧ ವ್ಯವಸ್ಥೆಗಳ ನಡುವೆ ಡೇಟಾವನ್ನು
ವಿನಿಮಯ ಮಾಡಲು ಇಂದು ವಿಶೇಷವಾಗಿ ಉಪಯುಕ್ತವಾಗಿವೆ. ಸಾಮಾನ್ಯವಾಗಿ ನಾನು
SQL ರೀತಿಯ ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್(database system) ಅನ್ನು,
ನನ್ನ ಸ್ನೇಹಿತ ಒರಾಕಲ್ ಸಿಸ್ಟಮ್(oracle system) ಅನ್ನು
ಬಳಸುತ್ತಿರಬಹುದು, ಮತ್ತು ನಾವು ಈ ಎರಡರ
ನಡುವೆ ಡೇಟಾ ಟೇಬಲ್‌ಗಳನ್ನು(data tables) ವಿನಿಮಯ ಮಾಡಿಕೊಳ್ಳಬೇಕು,
ಈ ಎರಡು ಸಿಸ್ಟಮ್‌ಗಳು ಭೌತಿಕ ಸ್ಕೀಮಾದಲ್ಲಿನ
ಡೇಟಾವನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಆದ್ದರಿಂದ, XML ಮಾದರಿಗಳ
ವಿಷಯದಲ್ಲಿ ನಾವು ಎರಡನ್ನೂ ಪ್ರತಿನಿಧಿಸಬಹುದು
ಡೇಟಾವನ್ನು ಪರಿವರ್ತಿಸುತ್ತದೆ. ಹಾಗಾಗಿ, ನಾನು ಡೇಟಾವನ್ನು
XML ಆಗಿ ಪರಿವರ್ತಿಸುತ್ತೇನೆ, ಅದನ್ನು ನನ್ನ ಸ್ನೇಹಿತರಿಗೆ
ನೀಡುತ್ತೇನೆ ಮತ್ತು ನನ್ನ ಸ್ನೇಹಿತ ಆ XML
ನಿಂದ ಡೇಟಾಬೇಸ್‌ಗೆ ಆಮದು(import) ಮಾಡಿಕೊಳ್ಳಬಹುದು. ಆದ್ದರಿಂದ, ಇದು XML ಡೇಟಾ
ಮಾದರಿಯಾಗಿದ್ದು, ಇದನ್ನು ಡೇಟಾ ವಿನಿಮಯದ(data exchange)
ವಿಷಯದಲ್ಲಿ ಆಗಾಗ್ಗೆ ಬಳಸಲಾಗುತ್ತದೆ. ನಂತರ ನೆಟ್‌ವರ್ಕ್
ಮಾದರಿ(network model), ಕ್ರಮಾನುಗತ ಮಾದರಿಯಂತಹ ಹಲವಾರು
ಇತರ ಮಾದರಿಗಳಿವೆ, ಇದು ಸಂಬಂಧಿತ ಮಾದರಿಯು
ಜಾರಿಗೆ ಬರುವ ಮೊದಲು ಡೇಟಾಬೇಸ್ ಸಿಸ್ಟಮ್‌ಗಳ(database
systems) ಆರಂಭಿಕ ದಿನಗಳಲ್ಲಿ ಬಹಳ ಜನಪ್ರಿಯವಾಗಿತ್ತು. ಕೆಲವು ಡೇಟಾಬೇಸ್‌ಗಳ(database)
ವಿಷಯದಲ್ಲಿ ಅವು ಇನ್ನೂ ಅಸ್ತಿತ್ವದಲ್ಲಿವೆ. ಮತ್ತು ಕೆಲವು ಹೊಸ
ಉದಯೋನ್ಮುಖ(emerging) ದೊಡ್ಡ ಡೇಟಾಬೇಸ್‌ಗಳು ವಾಸ್ತವವಾಗಿ
ನಾವು ಈ ಹಳೆಯ ಪರಿಕಲ್ಪನೆಯನ್ನು(old concept) ಮತ್ತೆ ಹೊಸ ರೀತಿಯಲ್ಲಿ
ಬಳಸಲು ಪ್ರಾರಂಭಿಸಿದ್ದೇವೆ. ಆದ್ದರಿಂದ, ಇದು ಡೇಟಾ
ಮಾದರಿಯ ಒಟ್ಟಾರೆ ಸೆಟ್ ಆಗಿದೆ. ಆದ್ದರಿಂದ, ಇಲ್ಲಿ
ಸಂಬಂಧಿತ ಮಾದರಿ ಡೇಟಾದ(data) ಉದಾಹರಣೆಯನ್ನು(example)
ತೋರಿಸುತ್ತಿದ್ದೇನೆ ಅದು ಸರಳವಾಗಿ ಟೇಬಲ್‌ನಂತೆ
ಕಾಣುತ್ತದೆ. ಆದ್ದರಿಂದ, ನೀಲಿ ಬಣ್ಣದಲ್ಲಿ
ಮೇಲಿನ ಸಾಲಿನಲ್ಲಿ ಸ್ಕೀಮಾವನ್ನು(schema)
ವಿವರಿಸುವ ವಿವಿಧ ಕ್ಷೇತ್ರಗಳ(fields) ಹೆಸರುಗಳನ್ನು ನೋಡಬಹುದು. ಅದು ಐಡಿ(ID), ಹೆಸರು,
ಇಲಾಖೆ(departments) ಹೆಸರು, ಸಂಬಳ(salary) ಬಗ್ಗೆ ಹೇಳುತ್ತದೆ. ಅವರು ನಿರ್ದಿಷ್ಟ ಬೋಧಕರನ್ನು
ವಿವರಿಸಲು ಪ್ರಯತ್ನಿಸುತ್ತಿದ್ದಾರೆ, ತದನಂತರ ಆ ಟೇಬಲ್ನಲ್ಲಿ
ಸಂಪೂರ್ಣ ದಾಖಲೆಗಳ ಸಾಲುಗಳು, ಪ್ರತಿಯೊಂದು
ಸಾಲು ಪ್ರತ್ಯೇಕವಾಗಿ ನಿರ್ದಿಷ್ಟ ಡೇಟಾ ನಮೂದು(data
entry) ಅಥವಾ ದಾಖಲೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ಕಾಲಮ್‌ಗಳು(columns)
ಗುಣಲಕ್ಷಣಗಳಾಗಿವೆ ಮತ್ತು ಸಾಲುಗಳು ಸಂಬಂಧಿತ
ಮಾದರಿ ವಿವರಿಸಿದ ದಾಖಲೆಗಳಾಗಿವೆ. ಇನ್ನು ಕೆಲವು ಡಿಪಾರ್ಟ್‌ಮೆಂಟ್ಗಳಲ್ಲಿ
ಬೋಧಕ ಟೇಬಲ್(instructor table) ಜೊತೆಗೆ ಡಿಪಾರ್ಟ್‌ಮೆಂಟ್
ಟೇಬಲ್(department table) ಇರುತ್ತದೆ. ಆದ್ದರಿಂದ, ಕೆಳಗಿನ
ಟೇಬಲ್ ಇಲಾಖೆಯ ವಿವರಗಳನ್ನು ವಿವರಿಸುತ್ತದೆ, ಆದ್ದರಿಂದ
ಅದು ತನ್ನದೇ ಆದ ಸ್ಕೀಮಾ(schema) ಮತ್ತು ವೈಯಕ್ತಿಕ ದಾಖಲೆಗಳನ್ನು(individual
records) ಹೊಂದಿದೆ.ಈಗಾಗಲೇ ನಾವು ಒಂದೆರಡು ಸಮಯದ
ಹಿಂದೆ ಚರ್ಚಿಸಿದ ಗ್ರಾಹಕರ(customer) ಮತ್ತು ಖಾತೆಗಳ ನಿದರ್ಶನದ(accounts
instance) ವಿಷಯದಲ್ಲಿ ಇದೇ ರೀತಿಯ ನಿದರ್ಶನಗಳನ್ನು
ನೋಡಿದ್ದೇವೆ. ನಾನು ಈ ಎರಡು ಪದಗಳನ್ನು
DDL ಮತ್ತು DML ಅನ್ನು ಪರಿಚಯಿಸುತ್ತೇನೆ. DDL ಡೇಟಾ ವ್ಯಾಖ್ಯಾನ
ಭಾಷೆಯ(language) ಬಗ್ಗೆ ಮಾತನಾಡುತ್ತದೆ. ಆದ್ದರಿಂದ, ನಾವು ಹೇಳಲು
ಪ್ರಯತ್ನಿಸುತ್ತಿರುವ ಪರಿಕಲ್ಪನೆಯ ಬುದ್ಧಿವಂತಿಕೆಯು
ಖಂಡಿತವಾಗಿಯೂ ಒಂದು ಸ್ಕೀಮಾವನ್ನು(schema)
ಹೊಂದಿದ್ದೇವೆ ಮತ್ತು ನಿದರ್ಶನವನ್ನು(instance)
ಹೊಂದಿದ್ದೇವೆ. ಆದ್ದರಿಂದ, ಸ್ಕೀಮಾವನ್ನು
ವ್ಯಾಖ್ಯಾನಿಸಲು ಕೆಲವು ಭಾಷಾ ರಚನೆಗಳು ಬೇಕಾಗುತ್ತವೆ
ಮತ್ತು ಆ ಸ್ಕೀಮಾದಲ್ಲಿನ ಡೇಟಾವನ್ನು ಕುಶಲತೆಯಿಂದ
ನಿರ್ವಹಿಸಲು ಸಾಧ್ಯವಾಗುವಂತೆ ಕೆಲವು ಇತರ ಭಾಷಾ ರಚನೆಗಳು
ಅಥವಾ ಅವು ಮೂಲತಃ ನಿದರ್ಶನಗಳನ್ನು ಕುಶಲತೆಯಿಂದ ನಿರ್ವಹಿಸುತ್ತವೆ. ಆದ್ದರಿಂದ, DDL ಎಂಬುದು
ಡೇಟಾಬೇಸ್‌ನ ಸ್ಕೀಮಾವನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲು ಮತ್ತು
ಕುಶಲತೆಯಿಂದ ಬಳಸಲಾಗುವ ಭಾಷೆ ಅಥವಾ ಭಾಷೆಯ
ಭಾಗವಾಗಿದೆ, ಅದಕ್ಕಾಗಿಯೇ ಸ್ಕೀಮಾ(schema) ಡೇಟಾಬೇಸ್
ಅನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲು ಒಂದು ಮಾರ್ಗವಾಗಿದೆ. ಆದ್ದರಿಂದ, ಇದನ್ನು
ಡೇಟಾ ವ್ಯಾಖ್ಯಾನ(data definition) ಭಾಷೆ(language) ಎಂದು
ಕರೆಯಲಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, ಬೋಧಕ(instructor)
ಎಂಬ ಟೇಬಲ್(table) ನಾಲ್ಕು ವಿಭಿನ್ನ ಕ್ಷೇತ್ರಗಳನ್ನು
ಹೊಂದಲಿದ್ದೇನೆ ಎಂದು ನೀವು ವ್ಯಾಖ್ಯಾನಿಸಬಹುದು,
ಪ್ರತಿಯೊಂದೂ ಕೆಲವು ರೀತಿಯ ಡೇಟಾವನ್ನು(data)
ಹೊಂದಿರುತ್ತದೆ. ಆದ್ದರಿಂದ, ID ಐದು ಅಕ್ಷರಗಳ
ಡೇಟಾ ಎಂದು ಹೇಳುತ್ತದೆ; ಹೆಸರು ವೇರಿಯಬಲ್ ಉದ್ದವನ್ನು(variable
length) ಹೊಂದಿರುತ್ತದೆ, ಏಕೆಂದರೆ ಹೆಸರು ಸ್ಥಿರ
ಉದ್ದವಾಗಿರುತ್ತದೆ ಎಂದು ಹೇಳಲು ಸಾಧ್ಯವಿಲ್ಲ,
ಆದರೆ ಇದು ವೇರಿಯಬಲ್(variable) ಉದ್ದವಾಗಿರುತ್ತದೆ,
ಅದು ವರ್ಚಾರ್(varchar) ಆಗಿದೆ, ಆದರೆ ಉದ್ದವು 20 ಅನ್ನು
ಮೀರುವುದಿಲ್ಲ. ಮತ್ತು ಅದೇ ರೀತಿ, ಸಂಬಳವೂ
8 ಅಂಕಿಗಳವರೆಗೆ ಇರುತ್ತದೆ ಮತ್ತು ಎರಡು ಭಾಗಗಳನ್ನು
ಹೊಂದಿರುವ ಡೆಸಿಮಲ್(decimal ) ಭಾಗವನ್ನು ಹೊಂದಿರುವ
ಡೇಟಾ ಸಂಖ್ಯಾಆಗಿದೆ. ಆದ್ದರಿಂದ, ಟೇಬಲ್‌ನಲ್ಲಿನ(table)
ವಿಭಿನ್ನ ಗುಣಲಕ್ಷಣಗಳು ಮತ್ತು ಅವುಗಳ ಪ್ರಕಾರಗಳು
ಅಥವಾ ಕಾಲಮ್‌ಗಳ(columns) ಪರಿಭಾಷೆಯಲ್ಲಿ ಸ್ಕೀಮಾವನ್ನು
ವ್ಯಾಖ್ಯಾನಿಸುವ ಈ ವಿಧಾನ ಅಥವಾ ಆ ಟೇಬಲ್‌ನ(table)
ರಚನೆಯನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲು ಪ್ರಯತ್ನಿಸುವುದು
ಡೇಟಾ ವ್ಯಾಖ್ಯಾನ(data definition) ಭಾಷೆಯ ಮುಖ್ಯ
ಸಮಸ್ಯೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ಡೇಟಾ ನಿಘಂಟಿನಲ್ಲಿ
ಟೇಬಲ್‌ಗಳ(table) ಗುಂಪನ್ನು ರಚಿಸುವ ಡೇಟಾ ವ್ಯಾಖ್ಯಾನ(data
dictionary) ಭಾಷಾ ಕಂಪೈಲರ್(compiler), ಅಲ್ಲಿ ಡೇಟಾ ನಿಘಂಟಿನಲ್ಲಿ
ಮೂಲಭೂತವಾಗಿ ಮೆಟಾಡೇಟಾವಿದೆ(metadata) ಎಂದು ಹೇಳಿದಂತೆ ಸ್ಕೀಮಾ
ಡೇಟಾಬೇಸ್ ಟೇಬಲ್‌ಗಳ(table) ಬಗ್ಗೆ ಮೆಟಾಡೇಟಾವಿರುವುದಿಲ್ಲ(metadata). ಆದ್ದರಿಂದ, ಇದು ಡೇಟಾಬೇಸ್
ಸ್ಕೀಮಾವನ್ನು(database schema) ಹೊಂದಿರುತ್ತದೆ,
ಇದು ವಿಭಿನ್ನ ಸಮಗ್ರತೆಯ ನಿರ್ಬಂಧಗಳನ್ನು ಹೊಂದಿರುತ್ತದೆ,
ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್(account balance) ಋಣಾತ್ಮಕವಾಗಿರಬಾರದು
ಅಥವಾ ಖಾತೆಯ ಬ್ಯಾಲೆನ್ಸ್ ಕನಿಷ್ಠ ಬ್ಯಾಲೆನ್ಸ್‌ಗಿಂತ
ಕಡಿಮೆ ಇರಬಾರದು ಎಂದು ಹೇಳಬಹುದು. ಆದ್ದರಿಂದ, ಇವು ವಿಭಿನ್ನ
ಸಮಗ್ರತೆಯ ನಿರ್ಬಂಧಗಳಾಗಿವೆ. ಇದು ಪ್ರಾಥಮಿಕ ಕೀ(primary
key) ಎಂದು ಹೇಳಬಹುದು, ನಾವು ಹೆಚ್ಚು ಆಳವಾಗಿ
ಮಾತನಾಡುತ್ತೇವೆ. ಮತ್ತು ಇದು ದತ್ತಾಂಶದ
ಯಾವ ಭಾಗವನ್ನು ಪ್ರವೇಶಿಸಲು ಅನುಮತಿಸಲಾಗಿದೆ ಎಂಬುದಕ್ಕೆ
ದೃಢೀಕರಣವನ್ನು ಸಹ ನಿರ್ದಿಷ್ಟಪಡಿಸಬಹುದು
ಮತ್ತು ಹೀಗೆ, ಇವೆಲ್ಲವೂ ಸ್ಕೀಮಾ ವ್ಯಾಖ್ಯಾನದ
ಭಾಗವಾಗಿದೆ ಮತ್ತು ಭಾಷೆಯ DDL ಅನ್ನು ರೂಪಿಸುತ್ತದೆ. ಇದಕ್ಕೆ ವಿರುದ್ಧವಾಗಿ,
ಡೇಟಾ ಮ್ಯಾನಿಪ್ಯುಲೇಷನ್(data manipulation) ಭಾಷೆಯು ಸಂಘಟಿತ
ಡೇಟಾವನ್ನು ಉಪಯೋಗಿಸಲು ಮತ್ತು ಕುಶಲತೆಯಿಂದ(manipulating)
ನಿರ್ವಹಿಸುವ ಭಾಷೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ಇದು ಪ್ರವೇಶ,
ನವೀಕರಣ, ಹೊಸ ದಾಖಲೆಗಳ ಸೇರ್ಪಡೆ, ಅಸ್ತಿತ್ವದಲ್ಲಿರುವ
ದಾಖಲೆಗಳ ಅಳಿಸುವಿಕೆಯನ್ನು ಹೊಂದಿರುತ್ತದೆ. ಮತ್ತು ಸಾಮಾನ್ಯವಾಗಿ
ನಾವು ಡೇಟಾ ಮ್ಯಾನಿಪ್ಯುಲೇಷನ್(data manipulation) ಭಾಷೆಯನ್ನು
ಪ್ರಶ್ನೆ ಭಾಷೆಯಾಗಿ ಉಲ್ಲೇಖಿಸುತ್ತೇವೆ,
ಏಕೆಂದರೆ ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ(database) ಏನಿದೆ ಎಂಬುದನ್ನು
ತಿಳಿದುಕೊಳ್ಳಲು ಬಯಸುತ್ತೀರಿ. ಆದ್ದರಿಂದ, ಪ್ರಶ್ನೆ
ಭಾಷೆಯನ್ನು ಡಿಸೈನ್(design) ಗೊಳಿಸಲಾಗುವುದು, ಅವುಗಳನ್ನು
ಪ್ರಾಥಮಿಕವಾಗಿ ಎರಡು ವಿಧಾನಗಳಲ್ಲಿ ಒಂದನ್ನು
ಡಿಸೈನ್(design) ಗೊಳಿಸಲಾಗಿದೆ. ಭಾಷೆಗಳ ಒಂದು ಗುಂಪನ್ನು
ಶುದ್ಧ ಭಾಷೆ(pure language) ಎಂದು ಕರೆಯಲಾಗುತ್ತದೆ,
ಅವುಗಳು ಹೆಚ್ಚು ಗಣಿತದ ಸ್ವಭಾವವನ್ನು ಹೊಂದಿವೆ. ಆದರೆ ಔಪಚಾರಿಕ ಆಧಾರದ(formal
basis) ಮೇಲೆ,ಈ ಭಾಷೆಗಳಲ್ಲಿ ಏನು ಮಾಡಿದರೂ ಅದು
ಸರಿಯಾಗಿದೆ ಎಂದು ಸಾಬೀತುಪಡಿಸಬಹುದು ಮತ್ತು ಅದು ಸರಿಯಾದ
ಫಲಿತಾಂಶವನ್ನು ನೀಡುತ್ತದೆ. ಆದ್ದರಿಂದ, ಅವು ಸಂಬಂಧಿತ
ಮಾದರಿಯ ಆಧಾರದ ಮೇಲೆ ವಿಭಿನ್ನ ಭಾಷೆಗಳಾಗಿವೆ,
ಅವುಗಳನ್ನು ರಿಲೇಷನಲ್ ಆಲ್ಜಿಬ್ರಾ(relational algebra),
ಟುಪಲ್ ರಿಲೇಷನಲ್ ಕ್ಯಾಲ್ಕುಲಸ್(tuple relational calculus), ಡೊಮೇನ್ ರಿಲೇಷನಲ್
ಕ್ಯಾಲ್ಕುಲಸ್(domain relational calculus ) ಎಂದು ಕರೆಯಲಾಗುತ್ತದೆ. ಈ ಮೂರರಲ್ಲಿ, ಈ ಕೋರ್ಸ್‌ನಲ್ಲಿ
ಸಂಬಂಧಿತ ಬೀಜಗಣಿತದೊಂದಿಗೆ(algebra) ಮಾತ್ರ ವ್ಯವಹರಿಸುತ್ತೇವೆ. ಸಂಬಂಧಿತ ಬೀಜಗಣಿತದಲ್ಲಿ
ಏನು ಮಾಡಬಹುದೋ ಅದನ್ನು ಟುಪಲ್ ರಿಲೇಷನಲ್ ಕಲನಶಾಸ್ತ್ರದಲ್ಲಿ
ಮತ್ತು ಪ್ರತಿಯಾಗಿ ಮಾಡಬಹುದು ಎಂದು ತೋರಿಸುವ
ಗಣಿತದ ಪುರಾವೆಗಳಿವೆ. ಅಂತೆಯೇ, ನೀವು ಸಂಬಂಧಿತ
ಬೀಜಗಣಿತದಲ್ಲಿ ಏನು ಮಾಡಬಹುದು, ನೀವು ಡೊಮೇನ್
ಸಂಬಂಧಿತ ಲೆಕ್ಕಾಚಾರಗಳಲ್ಲಿ ಮತ್ತು ಹೀಗೆ ಮಾಡಬಹುದು. ಒಂದರ್ಥದಲ್ಲಿ ಈ ಭಾಷೆಗಳು
ಅಷ್ಟೇ ಶಕ್ತಿಯುತವಾಗಿವೆ; ಒಂದೇ ವಿಷಯವನ್ನು ಅವುಗಳಲ್ಲಿ
ಯಾವುದಾದರೂ ಒಂದರಲ್ಲಿ ಮಾಡಬಹುದು, ಆದರೆ ನಾವು
ಅವುಗಳಲ್ಲಿ ಸರಳವಾದದನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತೇವೆ
ಮತ್ತು ಸಂಬಂಧಿತ ಬೀಜಗಣಿತದ ವಿಷಯದಲ್ಲಿ ಇಲ್ಲಿ
ಅಧ್ಯಯನ ಮಾಡುತ್ತೇವೆ, ಆದರೆ ಇವು ಹೆಚ್ಚು
ಗಣಿತದ ಪ್ರಾತಿನಿಧ್ಯಗಳು ಪ್ರೋಗ್ರಾಂ(program) ಆಗಿ
ಬರೆಯಲು ಸುಲಭವಲ್ಲ. ಆದ್ದರಿಂದ, ಸಾಮಾನ್ಯವಾಗಿ
ಹೆಚ್ಚಿನ ಅಪ್ಲಿಕೇಶನ್‌ಗಳಿಗೆ SQL ಎಂದು ಕರೆಯಲ್ಪಡುವ
ಕೆಲವು ವಾಣಿಜ್ಯ ಪ್ರಶ್ನೆ ಭಾಷೆಯನ್ನು(commercial query
language) ಬಳಸುತ್ತೇವೆ ಮತ್ತು ಅದರಲ್ಲಿ ಕೋಡಿಂಗ್(coding)
ಮಾಡುತ್ತೇವೆ. ಆದ್ದರಿಂದ, SQL ಇದು ಹೆಚ್ಚು
ವ್ಯಾಪಕವಾಗಿ ಬಳಸಲಾಗುವ ವಾಣಿಜ್ಯ ಭಾಷೆಯಾಗಿದೆ
ಮತ್ತು ಇದು ಟ್ಯೂರಿಂಗ್(Turing) ಸಮಾನವಾದ ಭಾಷೆಯಲ್ಲ
ಎಂದು ನೆನಪಿಡಿ, ಅಂದರೆ ಕಂಪ್ಯೂಟ್(compute) ಮಾಡಬೇಕಾದ
ಎಲ್ಲವನ್ನೂ SQL ನಲ್ಲಿ ಲೆಕ್ಕಾಚಾರ ಮಾಡಲು
ಸಾಧ್ಯವಿಲ್ಲ, SQL ಮಾಡಲು ಸಾಧ್ಯವಾಗದ ಕೆಲವು
ಲೆಕ್ಕಾಚಾರಗಳಿವೆ. ಇದು ಒಂದು ಮಿತಿಯಾಗಿದೆ;
ಇದು ನಿರ್ಬಂಧಿತ ಭಾಷೆಯಾಗಿದೆ. ಆದ್ದರಿಂದ, ಸಾಮಾನ್ಯವಾಗಿ
SQL ಅನ್ನು C ಅಥವಾ C++ ನಂತಹ ಕೆಲವು ಸಾಮಾನ್ಯ ಉನ್ನತ
ಮಟ್ಟದ ಪ್ರೋಗ್ರಾಮಿಂಗ್( programming) ಭಾಷೆಯೊಂದಿಗೆ
ಬಳಸಲಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, SQL ನಲ್ಲಿ
ಡೇಟಾ ಮ್ಯಾನಿಪ್ಯುಲೇಷನ್(data manipulation) ವಿಷಯದಲ್ಲಿ
ಏನು ಮಾಡಬಹುದೋ ಅದನ್ನು ಸಂಬಂಧಿತ ಮಾದರಿಯ ವಿಷಯದಲ್ಲಿ
ಮಾಡಲಾಗುತ್ತದೆ, ಆದರೆ ಉನ್ನತ ಮಟ್ಟದ ಭಾಷೆಯ
ವಿಷಯದಲ್ಲಿ ನಿರ್ಮಿಸಬೇಕಾದ ಹೆಚ್ಚುವರಿ ತರ್ಕವಿರಬಹುದು. ಆದ್ದರಿಂದ, ಅಪ್ಲಿಕೇಶನ್
ಪ್ರೋಗ್ರಾಂಗಳನ್ನು(application programs) ಸಾಮಾನ್ಯವಾಗಿ
ಅವುಗಳ ಮೂಲಕ ಬರೆಯಲಾಗುತ್ತದೆ. ಆದ್ದರಿಂದ, ನಾವು C ಪ್ರೋಗ್ರಾಂನ(programs)
ಭಾಗವಾಗಿ SQL ನಲ್ಲಿ ಹಾಕಲಾದ ಎಂಬೆಡಿಂಗ್(embedding)
ಪ್ರಕ್ರಿಯೆಯ ಮೂಲಕ ಇದನ್ನು ಮಾಡಬಹುದು
ಅಥವಾ ಕೆಲವು ಲೈಬ್ರರಿಗಳನ್ನು(libraries) ಬಳಸಿ ಅದು ನಿಜವಾಗಿ
C ನಿಂದ ಪ್ರಶ್ನೆಯನ್ನು ತೆಗೆದುಕೊಳ್ಳಬಹುದು
ಮತ್ತು SQL ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ ಅದನ್ನು ಫೈರ್( fire ) ಮಾಡಬಹುದು. ಆದ್ದರಿಂದ, ಇದನ್ನು
ಹೇಗೆ ಮಾಡಬೇಕೆಂದು ಈ ಸಮಯದ ಅವಧಿಯಲ್ಲಿ
ನೋಡುತ್ತೇವೆ. ಡೇಟಾಬೇಸ್ ಡಿಸೈನ್(database
design) ವಿಷಯಕ್ಕೆ ಬಂದರೆ ಡೇಟಾಬೇಸ್ ಡಿಸೈನ್(database
design) ಎಂಬ ಪ್ರಕ್ರಿಯೆಯು ಡೇಟಾಬೇಸ್‌ಗಳನ್ನು
ವಿನ್ಯಾಸಗೊಳಿಸಬೇಕಾದೆ. ಮತ್ತು ನಿಸ್ಸಂಶಯವಾಗಿ
ವಿನ್ಯಾಸದ ಮೊದಲ ಭಾಗವು ಲಾಜಿಕಲ್ ವಿನ್ಯಾಸವಾಗಿದೆ(logical
design), ಅಲ್ಲಿ ಸ್ಕೀಮಾಗಳು ಯಾವುವು ಎಂಬುದನ್ನು
ಮೊದಲು ಗುರುತಿಸಬೇಕು ಮತ್ತು ಅನ್ವಯವಾಗುವ
ನಿರ್ಬಂಧಗಳು ಯಾವುವು, ದೃಢೀಕರಣದ(authorization) ಅವಶ್ಯಕತೆ
ಏನು ಎಂದು ತಿಳಿದಿದೆ. ಮತ್ತು ನಾವು ಹೇಳಿದಂತೆ
ವ್ಯವಹಾರಕ್ಕೆ ಸಂಬಂಧಿಸಿದ ಮೊದಲ ನಿರ್ಧಾರಗಳಾಗಿವೆ. ವ್ಯಾಪಾರ ಎಂದರೆ ಅದು
ಮೂಲತಃ ಡೊಮೇನ್‌ನಿಂದ(domain) ಬಂದಿದೆ. ಹಾಗಾಗಿ, ವಿಶ್ವವಿದ್ಯಾನಿಲಯದ
ಡೇಟಾಬೇಸ್ ನಲ್ಲಿ ಕೋರ್ಸ್‌ಗಳು, ವಿದ್ಯಾರ್ಥಿಗಳು, ಬೋಧಕರು
ಮತ್ತು ಬೋಧಕರು ಯಾವ ಕೋರ್ಸ್‌ಗಳನ್ನು ಹೊಂದಿದ್ದಾರೆ
ಎಂಬ ವಿಷಯಗಳು ತಿಳಿದಿಯುತ್ತವೆ, ಒಬ್ಬ ಬೋಧಕನು ಒಂದೇ
ಕೋರ್ಸ್ ಅನ್ನು ಬಹು ಕಲಿಸಬಹುದೇ,ಅನೇಕ ಕೋರ್ಸ್‌ಗಳನ್ನು
ಕಲಿಸಬಹುದೇ, ಈ ರೀತಿಯ ವ್ಯವಹಾರ ನಿರ್ಧಾರಗಳು
ಡೇಟಾಬೇಸ್ ವಿನ್ಯಾಸಕ್ಕೆ ನಿರ್ಣಾಯಕವಾಗಿವೆ. ತದನಂತರ ಡೇಟಾಬೇಸ್‌ನಲ್ಲಿ(database)
ಇರಿಸಿಕೊಳ್ಳಲು ಬಯಸುವ ವ್ಯವಹಾರದ ಮಾಹಿತಿಯೇ
ಎಂದು ನಿರ್ಧರಿಸಲು ಕಂಪ್ಯೂಟರ್ ವಿಜ್ಞಾನದ
ನಿರ್ಧಾರ(computer science decision ) ಅಥವಾ ಡೇಟಾ ಆಧಾರಿತ
ನಿರ್ಧಾರಗಳ ಸಂಪೂರ್ಣ ಸೆಟ್ ಇದೆ, ನಂತರ ಯಾವ
ರೀತಿಯ ಸಂಬಂಧ, ಯಾವ ರೀತಿಯ ನಾವು ಬಳಸಬೇಕಾದ
ಸ್ಕೀಮಾಗಳು(schemas) ಗುಣಲಕ್ಷಣಗಳಾಗಿರಬೇಕು, ಯಾವ ಗುಣಲಕ್ಷಣವು ಯಾವ
ರೀತಿಯ ಸ್ಟ್ರೈನ್(strain) ಆಗಿರಬೇಕು, ಯಾವುದು
ಸಂಖ್ಯೆಗಳಾಗಿರಬೇಕು ಇತ್ಯಾದಿ. ಆದ್ದರಿಂದ, ಇವುಗಳು
ಭೌತಿಕ ಲಾಜಿಕಲ್ ಡಿಸೈನ್(design)ನ ಆಧಾರವಾಗಿದೆ. ಮತ್ತು ಸಹಜವಾಗಿ, ಡೇಟಾದ
ಭೌತಿಕ ಡಿಸೈನ್(design), ವಿಭಿನ್ನ ಡೇಟಾಬೇಸ್
ಫೈಲ್‌ಗಳು(different database files) ಯಾವುವು, ಅವುಗಳನ್ನು
ಹೇಗೆ ಇಂಡೆಕ್ಸ್(index) ಮಾಡಬೇಕು ಮತ್ತು ಮುಂತಾದವುಗಳನ್ನು
ನಿರ್ಧರಿಸುವ ಭೌತಿಕ ಡಿಸೈನ್(design) ಅಗತ್ಯವಿದೆ. ಆದ್ದರಿಂದ, ಉದಾಹರಣೆಗೆ
ಇಲ್ಲಿ ಟೇಬಲ್‌ಗಳನ್ನು(table) ತೋರಿಸುತ್ತೇವೆ. ಆದ್ದರಿಂದ, ಇದು ಹಲವಾರು
ಕ್ಷೇತ್ರಗಳನ್ನು(fields) ಹೊಂದಿದೆ. ಇಲ್ಲಿ ಮೊದಲು ನೋಡಿದ
ಬೋಧಕರ ಟೇಬಲ್‌ಗಳು(table) ಬೋಧಕರ ವಿಸ್ತೃತ ರೂಪವನ್ನು
ಇದು ತೋರಿಸುತ್ತದೆ. ಇದನ್ನು ಇಲಾಖೆಗಳ ಹೆಸರು
ಮತ್ತು ಅದನ್ನು ಹೊಂದಿರುವ ಕಟ್ಟಡದೊಂದಿಗೆ ವಿಸ್ತರಿಸಲಾಗಿದೆ. ಆದ್ದರಿಂದ, ಇದು ನಿಸ್ಸಂಶಯವಾಗಿ
ವ್ಯಾಪಾರದ ನಿರ್ಧಾರದಿಂದ ಬಂದಿದೆ ಆದರೆ ಎಚ್ಚರಿಕೆಯಿಂದ
ನೋಡಿದರೆ, ಬೋಧಕನು ಯಾವ ಇಲಾಖೆಗೆ ಸೇರಿದೆ
ಎಂಬುದನ್ನು ಮತ್ತು ಆ ವಿಭಾಗವು ಅಸ್ತಿತ್ವದಲ್ಲಿರುವ
ಕಟ್ಟಡವನ್ನು ಖಂಡಿತವಾಗಿ ತಿಳಿದುಕೊಳ್ಳಬಹುದು. ಆದ್ದರಿಂದ, ಬೋಧಕರ
ವಿಭಾಗವನ್ನು ತಿಳಿದುಕೊಳ್ಳುವುದು ಮತ್ತು ಆ ವಿಭಾಗವು
ಎಲ್ಲಿದೆ ಎಂಬ ಕಟ್ಟಡವು(building) ವಿಮರ್ಶಾತ್ಮಕವಾಗಿದೆ,
ಆದರೆ ಪ್ರಶ್ನೆ ಇದು ಉತ್ತಮ ಡಿಸೈನ್(design)
ಆಗಿದ್ದರೆ, ಇದು ಏಕೆ ಒಳ್ಳೆಯದು ಎಂದು ಚರ್ಚಿಸುತ್ತೇವೆ,
ಇದು ಡೇಟಾವನ್ನು ಪ್ರತಿನಿಧಿಸಲು ಉತ್ತಮ ಡಿಸೈನ್(design)
ಅಲ್ಲದಿರಬಹುದು. ಆದ್ದರಿಂದ, ಈ ಮಾಡ್ಯೂಲ್‌ನಲ್ಲಿ(module),
ಡೇಟಾಬೇಸ್ ನಿರ್ವಹಣಾ ಸಿಸ್ಟಮ್ಗಳ(database management
systems) ಮೂಲ ಪರಿಕಲ್ಪನೆಗಳು ಮತ್ತು ಪರಿಭಾಷೆಯ ಮೂಲಕ,
ಪ್ರಾಥಮಿಕವಾಗಿ ಅಬ್ಸ್ಟ್ರಾಕ್ಸನ್(abstraction) ಮಟ್ಟಗಳು, ಸ್ಕೀಮಾ
ಒಂದು ನಿದರ್ಶನ, ಮೂಲಭೂತ ಡೇಟಾ ಮಾದರಿಗಳು ಅಗತ್ಯವಿರುವ
ಭಾಷೆಗಳು DDL, DML ಮತ್ತು ವಾಣಿಜ್ಯ SQL ಭಾಷೆಗೆ
ನಿಮ್ಮನ್ನು ಕರೆದೊಯ್ದಿದ್ದೇವೆ ಮತ್ತು ಡೇಟಾಬೇಸ್ ಡಿಸೈನ್
ವಿಷಯದಲ್ಲಿ ಅಗತ್ಯವಿರುವ ವಿಧಾನದ ಒಂದು ನೋಟವನ್ನು
ನೀಡಲು ಪ್ರಯತ್ನಿಸಿದ್ದೇವೆ. ಮಾಡ್ಯೂಲ್ 3 ರಲ್ಲಿ
ತೆಗೆದುಕೊಳ್ಳಲಾಗುವ DBMS ನ ಪರಿಚಯದ ಎರಡನೇ
ಭಾಗದವನ್ನು ಹೆಚ್ಚು ವಿವರಿಸುತ್ತೇವೆ.