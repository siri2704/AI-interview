let's look at a different type of relationship and this type of relationship is actually between uh you know two entities and the entities are same so like recursion so that is why it is also called as recursive relationship I'll just show you what with an example let us say we have employee only and every employee according to the specifications I'm talking about it uh let us say the specifications are an employee is going to have a boss and that boss might have some boss right so every employee is supposed to report to at least one person and we can call them as subordinate and boss or supervisor and supervisor something and every employee is supposed to have let us say at least one supervisor right and uh you know if that is the case right so employee is going to have a supervisor and some employee at least one employee or some employees are not going to have supervisors generally they are the CEOs right and uh every company is going to have all the employees listed even a CEO is also an employee who doesn't to anyone right now I want to you know represent this particular relationship the the interesting thing about this relationship is both the participating entities are actually belong to the actually they belong to the same entity type which means employee an employee is going to manage some other employee till now we have seen an employee managing a department or employee working on a project which means there are two types of entity types and the relationship is among these two types but for now from now we are going to discuss about this thing an employee is is actually managing some other employee right so it is interesting in that way so watch it even though it is only one entity type I'm going to write it two times don't get confused so if I write it only one time and then put the relationship between them it will be really confusing just to avoid confusion I'm just going to you know elaborate it but then when we when we represent it in the a diagram I I can combine them right so even though I'm writing this set the same type entity type two times don't get confused it is actually only one entity type I'm writing the same entity type two types two times okay let us assume that employe employee all right so this is actually only one entity type but I'm representing it two times right so one time and no this employee this particular set you know set or this particular employee type is going to have a role in this relationship and he is going to act as let us say supervisor supervisor means he is the boss right and the other side he is going to act as the other side employee set it is going to act as supervisory okay so it is like B boss and subordinate that is the way I'm I'm using the roles right so this side it is the boss and that's it is a subordinate and now the relationship is you can give any meaningful name let us say the relationship name is supervisors any name you can give supervisors which means this particular employee supervises that particular employees right now there are employees here and other side also there are employees there are employees here right assume that the specifications are like every employee reports to only one employee all right which means you are not going to have two bosses every employee can have only one employee and every employee except one or two or except few are going to have I know the bosses the supervisors right therefore you know you are if you are going to report to someone you'll be reporting to only one that is meaning of it right so this particular employee is going to supervise this particular employee right as well as the same employee might be supervising some other employee right and the same employee might be supervising some other employee like this and one one thing is maybe let's not put this one this might have a different meaning in the sense you know if it is E1 and if it is E1 you might think that E1 is no supervising e 1 itself that is why E1 and E1 we didn't keep it now what is the meaning of it E1 is supervising E2 and E1 is supervising E3 therefore E2 reports to E1 and E3 reports to E1 employee number two reports to employee number one and employee number three reports to employee number one if you want employee number one also to report to someone right let us say somewhere there is E4 and employee number four employee number one reports to E4 or E4 supervises E1 then how how is relationship here see this E2 and E3 they are reporting to E1 and E1 is actually reporting to E4 are you understanding this see E1 is supervising E2 and E3 E1 is supervising E2 and E3 and E4 is supervising E1 E4 is supervising E1 that is the hierarchy isn't it so somehow you can represent the relationship on two entity types which are actually the same right in that case it is called as recursive relationship this particular relationship is called as recursive relationship what is the degree of it how many entities are participating in every relationship two entities therefore the degree is obviously two degree of the relationship is actually two right the degree is two that is fine and uh what about the cardinality so cardinality of each side so cardinality will actually be derived from the specification that you know uh requirement analysis let us say from requirement analysis the coordin you found out is an employee has to know it is not sure that or it is not always uh necessary that every employee has to know manage someone right and moreover an employee in case if he is managing some employees he might he might manage one or more right then as supervisor how many relationships can each entity participate here as a supervisor an entity can participate in many relationships right therefore the cardinality is nothing but maximum participation so maximum participation is n are you getting this an employee here as a supervisor can participate in more than one relationship therefore the cardinality which is nothing but the maximum participation is going to be n now what about this one supervisory um you know an employee here has to be managed by only one supervisor right therefore it is one what is the meaning of it uh maximum you can be managed by only one boss you cannot be managed by more than one boss so how did I get that from the specifications only right and now next one is participation so participation says what is the minimum number of relationships an entity can participate in so if you're looking at a supervisor is it always guaranteed that every employee has to act as a supervisor not necessary right therefore the minimum which means from this side the participation can be zero I mean the minimum can be zero which means there can exist an employee who will never participate in any relationship which means an employee might never manage any other employee or might never supervise any other employee he's just a you know that bottom level employee right and what about the other one what about the minimum part minimum participation here I mean the participation here every employee it is not always necessary that every employee need to have a boss also right the reason is there might be CEO who is also an employe who might not have a boss who might not have a supervisor right therefore let us say zero so participation here is partial and the participation here is partial got it now how can we write this this is a relationship and the relationship is supervisors okay and on both the sides we are going to have the same entity type and the entity type is employee right and one side it is going to act as supervisor this is the role on one side and the other side he's going to act as supervis right and then what is relationship what type of relationship is it is it 1 to n or n to n like that right what about the cardinality see now we have seen that uh you know on the supervisor side so from supervisor to supervisor it is a one to many relationship right therefore here I'm going to write one and here I'm going to write n are you getting this it means that a supervisor can have many supervisors so it is one to many relationship right now if you want to write the same thing in minmax representation now now how many minimum how many minimum relationships can supervisor side participate in zero and how many maximum can supervisor participate in N what about this how many minimum can supervisor participate in zero and how many maximum can he participate in one right this is the minmax representation I mean without these numbers this is the minmax representation and with the you know lines it is a representation anyway no nowhere we are going to have total total participation that is why it is just single lines what right it might be no it is it is actually a different case in the sense there is a difference in how we represent this one with the roles these are called as roles right the role is also represented it it is just a bit different from the ordinary binary relationships right anyway it is also a binary relationship and it is called recursive relationship even though it is called recursive it is still binary only right why because only two entities are participating in every relationship here okay fine