all right so in the previous video we talked about violations caused by insert operations now in this video we are going to be looking about the violations caused by deletion and modification operations right we talked about in the previous video that operations can be sorry the updations in the database can be of three types right insert deleted modify so we already saw the violations caused by insert operations now we are going to look at operations caused by delete and modify operations right so let us now talk about delete operation so what delete operation does is it deletes the tuple one or more tuples from the relation right so what kind of violation what what all constraints out of these four constraints can be violated by the delete operation let us look at that domain constraint in case i delete the tuple delete one tuple or more than one tuple can it lead to violation of domain constraints no why because domain constraint says that the value should belong to the domain right so that will already be checked when the tuple is inserted while we delete it domain constraint cannot be violated okay so just think about it in case i delete this tuple can domain constraint be violated no right let us now talk about key constraint can key constraint to be violated what does key constraints say that no two tuples in any state of the relation should have same value for the key attributes right so can key constraint be violated in case i delete the tuple we are not adding something into it so how do we need to check about the key constraint we don't need to check about key constraint right because what key constraints states that that the value of the key attributes need to be unique right so in case you are deleting a tuple it is not violated right you can check this out okay in case you have any doubt about it you can delete a couple and check that out look for it yourself also tell me about the lighting if this is natural light in case you uh you know you can tell me if you like this lighting more or the uh tube one more okay uh so now a key constraint is also not not violated when we delete a tuple from the relation now let us talk about referential integrity constraint so can referential integrity constraint be violated in case of delete delete operation yes it can be violated how let us talk about let us say we i want to delete a couple from the relation department whose d number is five which is this part which is that particular type of this particular table right i want to delete this particular tuple from the relation right but this tuple is referenced by another is referenced by or it may be referenced by another temple in the employee relation right since there is there is a referential integrity constraint holding from employee relation to department relation in case i delete a tuple from this particular relation then the then it may lead to violation of referential integrity constraint as some tuple from the employee relation may refer to this particular tuple let us see if this particular deletion of this particular tuple leads to referential integrity constraint violation okay so if we are deleting this particular tuple we are deleting the department number five right but here is there any double that is referring to this particular tuple that department number five yes two tuples in from this relation are referring to this particular tuple having department number five right so in case i delete it referential integrity constraint will be violated why because what referential integrity constraint states that if a tuple is referring to some other uh relation then it should refer to an existing tuple in that relation in case this tuple does not exist then it is not referring to an existing tuple in this relation then referential integrity constraint is violated right and it is logical as well okay in case i remove department number five then how can an employee work for department number five if it is not present right it cannot work so even in case an employee is working for a department that department should already be existing in the company right so that is how referential integrity constraint can be violated when we are deleting a tuple from a relation right so deletion operation can cause violation of referential integrity constraint okay entity integrity can entity integrity constraint be violated due to deletion operation no because we are just deleting a double what the entity integrity constraint states that the primary key value cannot be null so it would have already been checked while we were inserting the tuple right so again if i delete the tuple then referential integrity constraint will not be violated only this particular constraint can violate a differential integrity constraint violation can be can occur okay so the only constraint that can be violated when we perform a delete operation on relation is referential integrity constraint that you need to keep in mind right in insertion all the four constraints could be violated in case of deletion only referential integrity constraint can be violated right so what can we do what are the steps that when we can take to ensure that no constraints are violated right so only referential integrity constraints what steps can we do uh to make sure that no constraints are violated and it is valid and deletion is valid right so let us talk about the steps that we can take okay so the first way of handling this particular uh or the first method to deal with it what we are dealing with in uh we are dealing with the fact that deletion of a tuple can lead to violation of referential integrity constraint right so we are talking about how to handle that right so the first option is to reject the deletion right the same option that we considered while we were while uh insert operations led to the um violation of these constraints right when while insertion was leading to violation of constraint what what what was the default action that we took we rejected the deletion sorry we just rejected the insertion similarly when deletion is causing violation of referential integrity constraint what option can we take the first option is reject the deletion that is do not accept the deletion in case i am deleting this particular relay this particular tuple that is being referenced by some other tuple in some other relation then i just stop reject the deletion and dbms can say that this cannot be performed because referential integrity constraint is violated right let us now talk about the second option so the second option is uh to cascade uh cascade the deletion okay second option is to cascade the deletion what is cast what does cascading means in case you are getting problem in understanding any of these options don't worry we are shortly going to discuss an example and then you will understand what does all of this mean okay so cascade the deletion means propagating the deletion propagating means propagating the change right what it means is in case you are deleting a tuple from this particular relation right and it is leading to violation of referential integrity constraint because some other because um some other tuples in some other relation are referring to this particular tuple right so what you do you delete those tuples as well right in case you are deleting this particular tuple that is referenced by other tuples delete those tuples as well what it means is delete this tuple as well as delete these two tuples as well which are referencing to this particular tuple right in case i am trying to delete department number one from this particular relation delete all the tuples that are causing referential integrity constraint violation that is delete all the tuples that are referencing to this particular tuple so what can we delete so here no but no table is referring to this particular tuple so no other tuples need to be deleted so in case we are deleting this particular tuple that is tuple with d number four from the department relation what we can do is what we will do as a result of cascading we will delete this particular tuple as well okay so so as a result of the cascading what we do is we delete the original tuple as well as we delete the tupper that are referencing to this particular tuple right we deleted the uh this particular tuple and also we are deleting this particular tuple because this tuple is referring to this particular tupper that is what is the meaning of cascading right now the third option is to uh modify the value modify the referencing attribute value modify the referencing attribute value so in this particular option we have two options first is set null and the second option is set default okay is it visible no okay so the third option is i should write modify the referencing attribute value set null or set default okay so what what does it mean by this particular option in case i am deleting this particular tuple for the tuples that are referring to this particular tuple what you do is you you modify the value of the referencing attribute that is if i delete this particular relation then sorry if i delete this particular tuple then which are the couples that are referring to this particular tuple in this particular relation this tuple is referring here right so what you do you modify the its value you want if you do not keep it as full because this is being deleted what you do you set it either you set it to null or either you set it to some default value okay so default value can be specified while we are specifying or we are defining the relational schema at that point default value can be specified like let us say that default value is one so you set this to one or you set this to none okay so these are the three options or the three ways in which we deal with violation of referential integrity constraints in case of delete operation right and even a combination of these three is uh possible right how let us now talk let us say we have four relations first is employee now look at this example listen to this example very carefully okay it is very important and it is easy only okay it will make you understand all these things so we have four relations employee department and one is dependent okay one is dependent and one is works on right so dependent dependent relation the same we studied while we were studying it relation sorry er model okay so dependence relation stores data about every employee's dependence right so it includes employee social security number and then name of dependent okay i'm not able to write it is too cold outside okay so uh it includes the social security number of employee name sorry social security number of employee name of the dependent and maybe let us say relationship okay so just including few attributes only okay so these are the uh this dependent relation stores information about employees dependence okay and there is one other relation works on relation that stores information about the project on which employee is currently working right so it includes employees social security number and project number and number of hours it is working on a particular project okay so we have these four relations let us say okay so let us say i want to fire an employee i want to remove an employee from this particular relation i am saying delete uh delete um couple from employee relation where social security number is 403 okay so i want to delete this employee so what is the meaning of deleting a particular employee we are firing that particular invoice right so in case we are firing that particular in this particular employee then many relations or many tuples from different relations are referring to this particular tuple right how okay yeah so this particular this particular attribute super social security number refers to this particular tuple because so uh this particular sorry this employee supervisor is employed with the social security number 403 right so in case i delete this particular tuple referential integrity constraint is violated right what i need to say is i am trying uh if if this particular employee is fired what it means that the supervisor of this particular employee is an employee with super social security social security number 403 but that employee is already fired so how is it possible right not possible so what we should do we should should we also delete this particular tuple should we should we use this particular option cascade the deletion no right in case the supervisor of an employee is fired what we should do we should either set this to null or set it to some default value let us say none currently it does not have any supervisor right so that is the way how we can handle this particular referential integrity constraint violation right also in case an employee is fired is it okay to delete the mgrss and let us say this particular employee is also a manager of a department right so this particular attribute is referring to this particular topic right this particular sorry this particular attribute is also referring to this particular relation right so this employee also happens to be a manager of some department which department department number four right so here again referential integrity constraint is violated in case i fall uh fired this employee how can he or she remain a manager of this particular department this is not possible right so what we should do we should should we delete the department as well should we follow this cascade the deletion or should we reject the deletion okay so what we should do we should again set this value to some default value or set this to null let us say i said this to some other employees ssn let us say i have made this particular employee as the manager of this employee right so i have given two examples of this particular option that is modified the referencing attribute value right in case of this particular referential integrity violation and this particular referential integrity violation right now in case an employee is fired think logically do we still need to keep its data of dependents no right so we do not need to keep the data of its dependence once an employee is fired right so what we do we even delete the data about this employee's dependence let us say 403 has two dependents and it has some name and relationship okay so these this is also referencing uh this is also referencing to this particular relation of this particular attribute of this relation right so in case this particular employee is fired what we can do we can delete even these two tuples right so in this case we are following the cascade the deletion option right the second case uh the next case is that works on the next case is works on relation right so uh it stores information about an employee is working on project four zero three is working on two zero four four zero three is working on three to one let us say this is the project number right so this is again referring to this particular attribute right so if this if an employee is fired we can also delete the information about the projects he or she is working on right so this can also be deleted so in case of uh when this particular attribute is referring to this and as a result of this attribute is referring to this what we did is we set it to default or null or we modified the referencing attribute value but in case of dependence and works on relation what we did is we cascaded the deletion we even deleted the tuples that referred to the delete uh deleted tuple or the tuple we are trying to delete all i hope you got it right what in cascading what it means is we deleted this tuple as well as we deleted the related tuples that are causing the violation of referential integrity constraints right so that is how we deal with deletion right rejecting the deletion is not very popular mostly what we do is we either specify one of these options right either set cascade the deletion or modify the value to null or to default value right so this is the these are more popular options than rejecting the deletion so that is how we deal with ah constraint violation in case of deletion these are this is how we deal with it okay now let us talk about now let us talk about violation caused by update operations okay sorry modify modify or update you can change the name or you can use them interchangeably so what is modification modification means we need to modify the value of some attribute in some particular tuple or more than one tuples right let us say i want to modify i want to update the salary of an employee whose ssn is 102 to 28 000 right so that is an example of modify operation right we are trying to update or modify the value of some attribute from some tuple okay in some particular relation right that is how modification operation is done right so what can modification lead to which kind of constraint violation can modification lead to can it lead to domain constraint violation yes how let us say i want to update let us say i i am trying to update the salary of this employee whose name is um let us say i want to um update the salary okay so let us say i want to update the value of salary okay of this employee whose ssn is one zero two right so i want to update this salary as xxx so domain constraint is violated right all you can also see updation operation or modification operation as a combination of deletion and insertion operation how what is what is it equivalent to we are just we can see this operation as we are deleting the previous tuple whose value of salary was 30 000 and inserting a new tuple whose value of salary is 30 000 right so whatever constraints are violated by insert plus delete operations can be violated by the modification operation so insertion operation led to the violation of all the four constraints so that's the reason why updation operation would also lead to the violation of all the constraints domain constraint key constraints integrity referential integrity right how it can lead to uh violation of key concern let us say i want to update um the value of this particular tuple whose ssn is 4 0 3 2 now i want to write the new value is 1 0 2 now key constraint is also violated why because the value of the key the sorry the value of the key attribute is not unique now right it is repeated one zero two for two doubles right so it is not permissible so key constraint is also violated how can it lead to violation of referential integrity same we can insert a tuple uh with the number sorry we can just modify right we are modified right so we are modifying let us say i want to modify the value of this particular tuple with ssn is equal to what was it earlier i think 403 was okay so let us say i want to modify the value of this particular tuple whose ssn is 403 i want to update its d number as 30 now so is 30 present here no so what it is leading to it is leading to violation of referential integrity constraint so it is also violated how entity integrity constraint is violated same let us say i want to update the value of this particular uh attribute of this particular tuple whose assessment value was 403 to now i want to update it to know then again entity integrity constraint is violated right so since update operation is a combination of entity sorry insert operation and delete operations so whatever violations are caused by insert and delete will be caused by updation operation or modification operation as well right so modification operation leads to violation of all the constraints right so we talked about these three operations inside delete modify and constraint violation it can cause and how to deal with it again the same ways that we used to deal with insertion and deletion operation their violation the same ways we will be using in order to deal with the violations caused by modified operations right so that's about it uh that's about uh violations caused uh with this this particular topic is done and now let us uh and now in the next video we'll be talking about uh conversion from er to relational model and then we'll move on to the uh normalization maybe right so this is it for this video i hope you like this and understood from this and if you do then please don't forget to press the like button subscribe to my channel for more such videos i'll see you in my next one bye