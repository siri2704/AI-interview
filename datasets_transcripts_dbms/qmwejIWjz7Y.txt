hi everyone welcome back to my YouTube channel I am RTI and I'm back with a one-hot video on the entire SQL Series in this particular video we would be learning about SQL from the very basic to Advanced we would be also solving some practice question on each of the topic so that we get familiar with the topic so without any further Ado let's get started so first we will start with re- revising some older Concepts what older Concepts we are re- revising here are databases database management system types of databases now why SQL is coming into picture and much more things so firstly we start with databases what is database so database is basically collection of data now consider an example of a student database now what do you think in this student DB what all things would be there so there would be data related to the student right so there are some data which is related to the student now coming to dbms what is dbms dbms is a software application which is used to manage our data so in the student database there are some data which is present now what if I want to do some man in that data consider that I am a student my age is given there as 19 but tomorrow is my birthday and I am being 20 tomorrow so I want to update my age from 19 to 20 so what I'll do I'll do some manipulation I'll do some query which will be helpful in updating that data into the student database so dbms comes into picture there now it's understanding how a user interact with DB or you can say database DB is a short form which is used for database and I would be using DB uh so much time in the video so please don't get confused DB stands for database now here is a user now user wants to interact with database but would the user be able to interact with database directly just think once no it won't be able to interact with database directly because again as you have learned that if we want to interact with computer or if you want to interact with machine we need to interact with them using the binary language of the binary codes but we don't know that for a what is the binary code or for B what is the binary code so we choose a programming language do the coding in that programming language and that is then compiled to the machine code and which is understandable by the computer so in the same way if a user want to interact with database he or she would be needing a software layer or a software application which would be helpful in decoding all the things student want to do a query or a user want to do a query and that would be finally executed on the database so basically user goes through a software layer or you can say a software application is being used so a software layer here is being used so user add some queries in that software lay or in that software application and then from that software application user can query into database do some manipulation and different things so here what happens is there is a user he or she will use a software application now this software application may be using some programming language language and using this programming language we will make some queries which will give us the required data or update or insert the required data now coming to databases so database is a collection of data databases are of two types first is relational database and second is non- relational database in SQL mostly we deal with the relational databases that is databases which is in a tabular format so relational databases are databases which use tables to store the data so relational database mostly use the tabular format to store all the data if there is a student database that would be having a table which would be having all the details about the student now the uh examples of relational databases are MySQL Oracle and Maria coming to non- relational databases so non- relational databases are also called as no SQL databases or no SQL databases now what is non-relational databases data databases in which data is not stored in tables so in this database that is relational database data is stored in form of tables but in non- relational databases data is not stored in form of tables there might be some hashing techniques or there might be some storage optimization techniques using which the data is being stored and the most famous example of this is mongodb now we are starting with SQL but the very first question be why we are reading SQL or why we are knowing about SQL what is the use of SQL so we need a language to interact with databases as I told that there is a user he or she is using a software application and using that software application he or she is interacting with database now this software application would be needing a language you can see a programming language using which we can query into the database so we need a language to interact with databases so so we use SQL to interact with databases and do some crud that is create read update and delete operations on the database now you might have heard the term MySQL and right now you're hearing the term SQL so what is the basic difference between MySQL and SQL so let's understand MySQL is basically a relational database management system that uses SQL as a query language so what is MySQL MySQL is basically a relational database management system that is a software application which use SQL that is structured query language for query purpose so SQL is a programming language which is used to query which is used the databases and MySQL is a software or rbbs which is using SQL as a query language so this is the basic difference between my SQL and SQL now in the further videos we will be knowing about the history of SQL how we can make queries using SQL how we can install SQL in our system how we can make some connections how we can install the server how we can install the workbench and much more things so firstly we'll start with the history of SQL where this SQL originate from who made this and you have also heard the word SQL many people call it SQL many people call it SQL so what is the reason behind that so SQL was originated in 1970s from IBM research on relational databases so basically on relational databases there is a quering language which is used or there is a programming language which is used that is called as SQL which is structured query language now it started as SQL so SQL stands for Structured English query Lang language so earlier it was named as SQL which stands for Structured English query language but later it was renamed to esqu due to some trademark issues so many people call it as SQL many people call it as SQL sometimes I also call it as SQL sometimes I also call it as SQL so both are the same things it was just because of trademark issue the name was changed so earlier the name was Structured English query language and now the name is structured query language now let's start with what is SQL so SQL stands for structured query language SQL is a programming language that is used to communicate and manipulate data in the databases so let's consider an example of a student database so there is a college in college there are many students now consider that one students get shifted from one place to another so he or she may needs to update their address in the student database so that updating or that manipulation of data is done by SQL now SQL helps user in performing the crowd operations that is create read update and delete operations on database now let's understand how SQL actually help so SQL allows user to perform a variety of task related to databases now the very first point is retrieving of the data extracting precise information from a database through queries so one can use certain queries to extract some information about a student so what happens in class can we usually go to the class teacher or the class Monitor and we ask that uh tell me the details about a person whose role number is 42 I want all the details of that particular person so he or she would be able to give me but on a very large scale if I ask someone to give me all all the details about an employee whose employee ID is 1 2 3 so he or she needs to make a query into the database and retrieve all the information and provide it to me now the second one is manipulation of data or manipulating the data so adding modifying or removing records within a database can be also done bya SQL so adding some data consider a new students take an admission so his or her data needs to be added modifying consider a student is shifted from one place to another so his or her address need to be modified and deletion consider a students leave the college so his or her data needs to be deleted now the third point is defining the data so creating and adjusting the structure of database including tables views and indexes so there might be a possibility that we need to create some new databases we need to adjust some values or some views or indexes in the database so that also we can do via SQL now the fourth and final one is controlling the data so managing databases access by granting or revoking permissions so again if there is a database of student you can't allow anyone to make a query into the student details there might be some permission which would be given to a person that yes you can at least access the student data you can at least access the teacher data so there are some permissions which is provided to an individual and there are some permissions which is also removed from a particular individual when he or she leaves the institution so all these controlling of data is also done by SQL so this was all about what is SQL how SQL helps us in the next particular video we would be starting with the installation of SQL first we would install the server and then we will install the visual tool which would be really helpful for us to make the queries so before starting with the MySQL server and MySQL workbench I want you guys to know a basic concept so in the last video I told that there is a user and if the user wants to interact with database he or she will use a software application using which he or she can interact with the database and in this software application he or she can internally use a language which could be very easy for a user to interact with the database now in the last video we talked about SQL so SQL is a query language that is called a structured query language which is helpful in CR operations that is create read update and delete operations in the databases and we also talked about MySQL so MySQL is a software or we can say MySQL is a relational database management system relational basically means whenever the data is stored in the form of tables so MySQL is a relational database management system which uses SQL that is structured query language for querying purpose now uh have you ever thought that okay we are talking about the user who is making some calls to the DB but where this DB is stored where the DB physical existence lies so DB is somehow stored in servers so the first MySQL server here comes into the picture so basically we need a server where our databases would be stored so firstly we will install the MySQL server so database server where data is stored managed and exist so we will first start with installation of MySQL server and then we will proceed ahead with the MySQL workbench now what is MySQL workbench so MySQL workbench is a visual tool which is used for database design development Administration and management it provides provides a user interface to interact with the my school server now we have set up a server in that server our database like now how we can make some queries where we can write the queries so we need a UI to write that queries right so there are two ways in which we can do so so first is command line whenever we have uh established a server connection we can use the command line to make databases do some cred operations on the databases but if you want a very neat and clean way in a UI you are given queries and you can see that tables are being created some data are being inserted so we can use a visual tool for the same so in this particular video we would be learning about the MySQL server and MySQL workbench like all about the installation process of the same so first here we will install the server so first what we need to do is we will go to the myosl official website that is https wwm myql.com then we will go to the downloads then we will select the MySQL Community version at the bottom of the page we will choose the MySQL Community server we'll select the version and we'll click on download and then we will follow the instruction set the root password why this root password we need to set so whenever you establishing a connection on the server you need to provide a password for that connection so whenever you are making a new connection like you are making 10 or 11 new connections so you need to give that password to the server for you to make a new connection so this password would be asked while creating a new connection so let's see from the website itself so this is the website for the MySQL so here you can see you can find this downloads tab you can click on this download tab and here at the very bottom you can see MySQL Community GPU downloads that is the community version download now here you can find the Community server as well and the workbench as well the server and the UI where we will be writing the queries so we will first click on the myosl community server right now I'm using a Mac OS if you're using Windows the configurations May differ so you can see the configuration of your system and download accordingly so I'll just download this uh DMG file so I'll just click on download and I'll click on note thanks just start my download so it will just start my download earlier I have already downloaded this mysl server so uh this is the procedure you need to do and then when you are about to install it it will ask you for some permissions you can just accept that permissions and you can provide a root password which would be helpful when you are establishing a connection and in the same way you can go back and you can download this myos SCH workbench so here also you can give the operating system and OS version and here you can click the download button so both of these things would be downloaded on your personal laptop or computers so this is the way we can install MySQL server and MySQL workbench on our personal PCS so I already have MySQL workbench let me just show you how it looks so here you can see that myol workbench has open here we can put some queries uh here are some management inst stance and Performance Tools here you can see context help and Snippets and here you can see the action response and everything from the next video we will try to create some databases and tables inside the databases so SQL commands are divided into different categories based on their functionalities so according to the functionality SQL commands are divided into different categories let's have a look so the first one is dql commands that is data query language commands so from the word itself it's very clear data query language so any command command which is helping us to do some data query that commands comes into the dql commands the second one is data manipulation language commands so any command which is helping me to do some data manipulation like inserting some data deleting some data updating some data in the database so all these commands are helping me to do some data manipulation so that is why they are coming under the DML commands the third one is data definition language commands so again from the word itself it's very clear data definition so any command which is helping me to define the data to define the structure of the database or to define the schema of the database all those commands comes into the ddl commands the fourth one is data control language commands now again from the word itself it's very clear data control so any commands which is helping me to give some control to the data like accessing the data revoking the permission from accessing the data or granting the permission to access the data all those commands comes into the DCL command the fifth and final one is transaction control language commands that is TCL commands so any commands which help me during a transaction like consider that I'm withdrawing money from ATM or I making a online payment so all those commands which comes into picture while doing a transaction in a database comes into the TCL commands so these were all the categories of commands SQL commands based on their functionalities now let's look about each and every command in detail so the very first command is data query language commands that is dql command now dql is used to retrieve the data from the database so any command which is helping us to fetch the data from the database or retrieve the data from the database that comes into the decoil command here you can see command which is uses select so consider that I want to get the details or I want to fetch the details of a student who is in class two whose role number is three so uh what I do I'll make a database query in which I'll use the select command and in that I can Fitch all the details about a student who is in class two and having a r number as three so this select command would help me to fetch the data or to get the data from the database the second one is data manipulation that is DML command so DML is used to manipulate data stored in the database so again the same example consider that there is a college database in that College a student takes an admission so we will insert the data of that particular student consider that that student is promoted from semester 1 to semester 2 so that we need to update in the database so updates comes into picture there and consider that student has graduated from the college so we need to delete the data of student from our database College database so we will be using this delete command for the deletion purpose the third one is data definition language command that is ddl command now ddl is used to define the structure and the schema of the database so the schema of the database basically means like when whenever we provide a schema of the database we give an overview like what is the database name what all attributes or columns are there in the database what is the primary key and Etc things so we basically provides a structure or a schema of the database so the commands which we can use is create create usually helps us to create tables or create databases alter command alter command is used to modify an existing database or modify an existing table drop command drop command is basically used to delete the entire table from the database Now trunet trunet command doesn't delete the entire table it deletes the data which is present in the table and rename command is used to rename a table so all these commands comes into the ddl command which is indirectly or directly affecting the schema or the structure of the database the fourth one is DCL commands that is data control language commands now DCL deals with the control and security of data within the database commands are Grant and revoke so Grant we are granting some permission revoke we are revoking some permission so again we are taking the example of the same College database now in the college database there would be student table there would be teachers table there would be some staff table there would be principal director all those details in that particular tables now I being a student I can't see the teacher details or the staff details I can only see the details about myself teacher can only see the details about the student so we Grant some permission or some security is there so that we can control the access of data so teacher can access the student data student himself can himself or herself can access only their data so such type of commands which help in that purpose like controlling of the data or security of the data comes under the TCL that is granting and revoking the final command is the TCL command that is transaction control language command now TCL is used to manage transaction within a database the commands which comes into picture here are commit roll back and save point now why this TL command comes into picture so you have seen most of the time that whenever we are doing an online transaction we do the online transaction we pay the money we give our pin the money is somehow deducted from our bank account but the transaction is not completed so in that case what happens is can money is credited back to your bank account within three or four working days so all those things all the transaction which is happening inside a database the commands which are helping us to do that transactions comes under the PCL commands so this was all about the types of SQL command in this particular video I hope you like this video I thought to start with the creation of database But first you need to know what does this create command means in which category does this create command lies so that is why I thought to cover these types of SQL commands first and then proceed ahead with other videos so before starting let's re revise some older topics as well so what is database database is basically the collection of data now database is divided into two types first is the relational database and second is the non- relational database now what is relational database relational database are the databases in which the data is stored in the form of tables and all the tables have some relation between them there is some interrelated data what is the non-relational databases so a database in which the data is not stored in the form of table rather it is stored in the form of key value payers or something else so this is the basic difference between relational and non-relational database as of now we would be dealing with the relational databases so consider a scenario there is a user now user wants to interact with the database how a user can interact with a database so user can't directly interact with database what a user can do is a user can interact to the database using a software so using a software a user can interact with database now what this software is called this software is called as dbms that is database management system so any software which is helping us to manage our data is called as database management system now I told that we are dealing with the relational databases so we would be using rbms that is relational database management system for our purpose so example of rdbms is MySQL which we would be using as a software now we have got the software but we need to make some queries into the database like if I want to do some Insertion I want to do some deletion I want to do some update in the values so I have to tell the database okay this is the value I want to insert this is the value I need to update this is the value I need to delete so for that purpose we use SQL that is structured query language so it is basically a programming language programming language which help us to make some queries into the database like consider that there is a new student which is coming into my college so all the details about that particular student would be inserted into the database consider that there is a student who has left the college so all the particular data related to that student would be deleted from the college consider that there is a student who has got his address changed so that particular field would also be updated so all these operation the manipulation operations like insertion updation deletion we can do using this SQL programming language now coming to the database design so what is this database design and how is this important so consider a use case that I have been given that I have to design a database for student as of now I know that I have to design a database for student but do I know that if I design a database for the student what would be the tables inside that particular database as of now I only know that there is a student database I have to create that student database but do I know that what all tables would be there in that particular database what all domain constraints would be there for that particular table domain constraint you can understand in this way okay there is a field called as name there is a field called as age so age would be taking some integer values name would be only taking character values age is something which should never be null so some rules should be there so I don't know that what constraint should be there then again I don't know about the primary or foreign keys so Keys help us to uniquely identify records in a table so I can uniquely identify a record for a particular person in a table so I don't know about all these things the constraint the keys the tables only thing which I know is I have to create a database so in the database design what we do is whenever we are given a use case that we have to create a database we are also provided with the schemas so what is schema so whenever we are giving any table name or the database name followed by all the attributes which is present there we called it a schema so here you can see that there is a student schema right with all the attributes which is there is student name student R number here you can also see that there is a teacher schema which is having all the details about the table name that is teacher the characteristics of the attributes that is table name and uh teacher ID and here you can see that we are taking the database as school so we have taken the database as school School DB we have taken as of now in the school DB there are two tables first is the student table second is the teacher table now when we create a table there are multiple number of rows and multiple number of columns so these are called as rows and these are called as columns but in databases we call columns as attributes or characteristics so basically attributes are the characteristics of a particular entity like consider that there is a student database now that particular student database is having some of the tables like student course or student address details so there are two tables in that student database course and address details so both of them would be having some of the attributes like cour is having some of the characteristics such as course ID course name like all the things about the course and the address would also be having all the details about the address like Street uh flat number pin code everything right so all the attributes or the characteristics which is present uh we insert in the column and all the particular record about that particular student is inserted in the roles so basically these all are the characteristics or the attributes and this is the table name so you can see s name student name student role number teacher name and teacher ID are part of attributes or the characteristics of that particular entity or that particular table so now we are clear that we have been given us College database or a school database in which there are two tables student and teacher now in that student table there are some attributes in that teacher table there are some attributes so we have done a basic designing of our database now let's uh move ahead with the creation of database so whenever we are creating a database we create create a database in a server so what we do is first we establish a server connection to create a database so once we have established a server connection we can create databases now the first question which will arise in your mind is can we create only one database in one server or we can create multiple database in one server so the answer is we can create multiple databases in a single server uh with a different name yeah so the name shouldn't be same with a different name we can create multiple databases in a single server so consider that this is a server one in that server one there are two databases database one and database 2 so there are two databases which is created as of now in server one now in databases also the second question is in a database can we create only one table or multiple table so the answer is we can create multiple tables in a single database so you can see that there is a school database in that particular School database there is table one which is Course and there is table two which is fees and in this patient Hospital database there is a table which is patient so uh in a single server there could be multiple databases in a single M uh single database there could be multiple tables so this happens while creation of database so when you are you have established a connection in your server you can go ahead and create the database in that particular database you can create some tables as well so there is no restriction on the amount of creation of databases or the amount of creation of tables now let's start with the creation of database so there are some steps which we should follow while creating a database let's have a look on them so the first step is choose a dbms that is choose a software as I told earlier that if a user needs to interact with database he or she needs a software so we would be choosing a software as I told earlier that we are using relational databases or we are dealing with relational databases as of now so we will be choosing a rdbms and that is MySQL for now now the second one is connect to the server using command line or a graphical user interface so now I have installed the software I have the software now I need to establish a connection in the server where I would be making the databases so that I can do in two way either I can go to the command line and establish a connection or I can establish a connection using GUI or user interface which I am having in my PC so uh mostly the command Comm line is not covered here so you can go ahead and have a look on all the Articles which is presented how on the command line we can establish a server connection we can create a database or insert the database the commands remain the same but just there are two three more steps extra so the third one is create a new database so there is a command we need to execute for creating a new database in the UI or the user interface which we have downloaded for executing all the SQL queries now the fourth one is once the database is created you can use the use statement to create tables in the databases so again going back as I told that in a server there could be multiple databases so how the server would know that if I want to create a table in which particular database I want to create a table so for that case what we do is if we use the use statement used followed by the database name once I execute this particular query my server will be known that okay in this particular database now what all actions are being done is being done in that particular database like insertion deletion updation anything so I can use the use statement to tell the server as of now I'm working on this particular database and the fifth and the last step is create tables and insert data so before moving forward the SQL commands I just want to let you know that SQL commands are super easy to understand because SQL commands are very similar to the English statements consider that uh if you want someone to create a picture of yours like create a drawing of yours what you will say can you please create a drawing of mine so you say create a drawing right in the same way if you want to create a database in SQL you say create database followed by the database name so it's just like the simple English language which we use in day-to-day life and whenever I say someone that create a drawing of myself or create a picture of myself I'll just end the statement with a full stop here we end the statement with the semicolon so it's just like a statement which is ended by a semicolon so to tell the server or to tell the uh database that this particular command is being executed and the next command is in next line or whenever the next semicolon is found out so we use the create database statement to create a new database so we generally use the create database followed by the database name statement to create a new database as I told again it's very similar to the English language like create a database so create database these commands are not case sensitive so what does this case sensitive means you consider that if I am executing cre create database followed by a database name consider student if I am executing this command in uppercase and if I am executing this command the same command uh what is happening okay so create database student so if I am executing this command in upper case or in lower case both will give me the same result so this is not case sensitive like can either use the smaller cases letters or the upper cases letter so for now let's go with the upper cases letter because there would be a notion we would be following for all the particular quy so let's follow the uppercase one so we will use this particular command that is create database database name so let's go to our UI and let's learn that how we can create a database so I'll be opening my MySQL workbench so here you can see in MySQL workbench by default there is a connection which is established but I want you all to learn that how we can establish a new connection as well so we'll just click on this plus icon once the plus icon is created we'll give the connection name just give it as SQL for for now and here we can give the password which was asked while we were installing the my school workbench and server so I'll just provide the password here and once I have provided the password I can click on okay so you can see a new server connection established here so once I'll open This Server Connection now here you can see that there are many tools which is present so let me just familiarize you with all the tools which is present and then we will go ahead with the query so here you can see that there is an Administration Tab and here you can see that there are some of the instances and management status which is present so this basically deals with our server connection if you want to make a new connection if you want to end that connection and other things so there is a schema tab in this schema tab you would be seeing all the databases you have created all the tables you have created the primary key the foreign key the constraint everything in the schema tab by default you can see that there is a sys schema which is already present this is of MySQL workbench so basically the database administrators have this already created to uh see the performance how the performance is going there is a performance schema also present here which is present in this sys so we'll not touch this sys we'll just create a new database here and here you can see that there are some icons so this icon would help you to create a new SQL file so if you want all the queries to be in new file or if you are creating multiple databases or working with multiple databases you can create new files and work on that particular database here you can see that there are two run commands like if I am writing any query I have to run it right so for that particular query if I have to run it there are two tools so the first tool runs everything which is present in the file like if there are 16 or 17 SQL statements it will execute all the uh SQL statements which is present and the second one is run the selected one so if I select any of the SQL statement that only would be executed not the entire file so let's start with our first query to create a database so I'll simply give the statement create database followed by the database name as of now let's give it school and I'll just execute this line on selecting it and I can use this particular run button so here you can see that there is a success so a database with the name school is created but you won't be able to see it here so to see it here you have to do a refresh and once you refresh you can see the database with the name school is created as of now there is no tables in that particular database because I have just created a database so in this way we can create a database now um if you see here I have also written it also to avoid errors we can use this command create database if not exist database name so why is this needed create database if not exist so let me just show you so I have written this command create database School a database with the name school is already created into my system consider I am running this command again so what it's showing it's showing me an error that a database with the name school already exist so what we do just to avoid errors because errors are something which is like nightmare for developers so just to avoid errors what we do is can we put a additional check that if not exist so create a database if it does not exist so we will use this query create database if not exist and we'll give the database name now if you run the same query you will see that you're not getting an error rather you are getting a warning message that already this particular database exists so if you want to create tables in that particular database you can use that particular database so right now we are not seeing an error we are just seeing a warning so it's better to add this additional check while creating a database he create a database Whenever there is no existing database with the same name so create a database if not exist database name so this was all about the creation of database now let's see how we can delete the database so we use the drop database statement to delete a database dropping a database means deleting the entire database including all the tables so dropping a database means you consider that you have a database of student and in this particular student database you have two tables first is the course table student course table and second is the student address table so once you use this drop database command so what will happen it will delete the entire database including the all the tables which is present in this particular database all the data which is present in this particular tables so it will delete the entire database all the objects all the values which is present in that database so this command is not usually suggested and if you are a developer I would surely say that please avoid these commands and don't don't ever do this command or don't ever execute this command in the prod database because like that would be a nightmare for you so always avoid this command but since we want to know how we can delete our database this command is necessary to delete our database so the dropping means deleting the entire database including all the tables in the data all the other objects within it so drop is a ddl command that is data definition language command now these commands are not case sensitive as I told for the create command so the command for dropping a database is drop database followed by the database name so let's let's see about this command as well so as of now I have already created a database with the name school so let me just delete this database so I'll do drop database followed by the name followed by the database name just this so you can see that we have got a success so this database is deleted from our schema so here you can see that the school database does not exist now again in this particular slide you would be also seeing that I have given also to avoid errors so do we get errors while deleting the database as well so the answer is yes there could be a possibility that in the server there are many database you forgot that which database you have deleted and again you are running the same command to delete that particular database which is already deleted so it will give me an error so what we do is we write a command drop database if exist so the database should be existing only then delete the database if the database is not existing do nothing so drop database if exist the database name so let me just show you again so I have already deleted the school database let me again just delete the school database because I'm not aware that what all databases are there in my server so by mistake I have deleted the school database and again I'm deleting the school database so if I again execute this command you can see I'm getting an error because this particular database I have deleted just 2 minutes back but I don't remember that I have already deleted this database this could happen like if you have deleted a database one week ago and after one week you don't remember that if I have deleted that database or not and you run the same query or consider that you can also run the same same query for a database which is not existing in the schema so as of now consider that there is a teacher database which is not existing in the schema and if I run this particular command also it will show me an error because this particular database does not exist in the schema So to avoid such errors what we do is we include this if exist Clause so that it will check that delete the database if it exist in the server so we will use this for the school only we will use the same command so drop database if exist and here I give this command as school so let me just run it again so here you can see that we are not getting an error rather we are getting a warning message that the student database does not exist it's already deleted so in some way we are avoiding the errors we are just getting a warning messages now let's see that how we can use the database so as I told that once we have created the database there could be many databases in the server so I have to tell the server that if I have to create any tables or I have to insert any data which database I am inserting to so for that we will be using the use statement so use followed by the database name we use the use statement to use a database these commands are not case sensitive and the command is used followed by the database name so let's see so again what I'll do is I'll create a database let's create a database college so I'll execute this statement so it's success I'll just do a refresh all so here I can see a college database which is created now what I'll do is okay I'll do just use and I'll give the database name that is college followed by a semicolon and once I run this query this query is also executed with a success so now in this database only we can perform all the actions so this is the use of use statement now let's see the next command now let's see how we can see the database so showing a database we use show databases statement to see all the databases which is present in the server as I told earlier that in the server there could be multiple databases now I want to see that what all databases are there in my server so what I'll do I'll just execute this show databases statement which will show me all the databases which is present on my server so let's use this command as well so we will just do show data bases and I'll just execute this command and here you can see uh that all the databases which is present in my schema is shown now again as I told that sys performance schema is something which is related to mySQL workbench the DBA administrator use it to analyze the performance and everything but here you can see the database which we created College is already shown here this was all about create deletion seeing all the databases in the server in the next video we would be doing the same for the tables like creating the tables inserting the data into the tables deleting the tables and seeing all the data which is present into the table the last video what we did was we created a database database followed by the database name let's consider school and then we used the database to create the tables or insert the data now third step we do the table creation so let's see how we can do the table creation so we use the create table statement to create the table in a DB so once we have used the database we have told the server that this is the the database in which I want to create tables I'll use this create table statement to create the tables in the database now what is the command to create the same so we give the create table followed by the table name and then we provide all the columns which should be there in the table so again the table is a intersection of rows and column so columns tell me what all value should be there for a particular record okay so consider for now we are taking the school database now in the school database consider that there is a table student so for that student table there would be some columns there would should be some rowes so student may have characteristics such as student ID student name student age so there are some characteristics or attributes which the student would be having so we will provide all the attributes all the characteristics in the column now the second one is data type so whenever we create a variable in programming what we do is we give the data type followed by the variable name like this int a so it tells me that a would only accept integer values in the same way we provide the data type for all the particular columns in the database because there could be a possibility if I don't provide the data type for S ID someone can insert XY Z into the S ID which is not a valid student ID someone can insert 1 2 3 4 XYZ at the rate which is again not a valid student ID so I tell that this particular student ID will only be excting values of the particular data type so we provide the data type now the third thing is constraint so what is constraint so constraint is basically a set of rules which we provide to our attributes so basically whenever we are giving all the attributes we provide that these are the constraints which are there for that particular attribute now in the the constraint there could be many things like not null so if there is a not null which is provided to any of the attribute value or any of the column that particular column couldn't have any null values it needs to have some value so why this constraints are given because it helps us to eliminate the duplicate data and the data which is misleading or incorrect data so the insertion of incorrect or duplicate data is hindered whenever we provide the constraints so creating a table so create is a ddl command that is a data definition language command now here the example is given you can give create table followed by the table name let's consider a table name as employee here you can provide the First Column that is employee ID the data type that is int and then the constraint that is primary key again the second column name followed by the data type that is Ware the third column which is salary and followed by the data type that is int again uh constraints are not something which is mandatory to provide you can provide or you you can't provide like it totally depends on you if you want like some unique values some Nal values in the particular col again right now you won't be understanding these terms like primary key what is Vare what is in so as of now just forget all these just remember that to create a table we give the command create table followed by table name and we provide all the columns which should be there in that particular table so let's just execute this command in our SQL work so this is my SQL workbench let me just start with creating a database then I will create the table inside that particular database so let's just execute the command to create a database so it would be create database followed by the database name let me give it school missing okay so let's just execute this command so you can see that this command is successful let me just refresh it here so so our database with the name school is created now I'll just let the server know that I am creating all the datas in this particular database so I'll just use school and I'll just execute this so now use school is executed now I can create all the tables all the data in this particular database now let's start with the creation of table so I'll just give create table followed by table name let's just take the table name as course and then I'll provide all the columns which should be there in the course so let's take C ID horse ID and I'll provide the value as int let's take course name and I will provide the value as Vare and I'll give the limit for the number of characters that should be 50 so let's just execute the statement so here I have created a table with the name course which is having columns such as CID and having the data type as int uh course name having the value as Vare so let me just execute this so you can see that there is a successful execution of this particular statement when you will do a refresh here in the tables you can see that one table with the name course is created and the columns which is present in this table is C ID and C name which is the course ID and course name so course ID would only be taking integer values and course name would only be taking the character values so this is the way we create the table in our databases now since we have created the tables in the database how we can insert the values in that tables so inserting values into the table so insert is a DML command that is a data manipulation language command now we use this this particular command to insert the values into the database so that is insert into we'll give the table name followed by all the columns in which manner we want to insert the values so if you have provided a data like Raj here so it will insert Raj here and if you have provided the address as pun it will insert pun here so if you don't provide the column name it will insert in a sequential manner into the all the columns but if you want to insert in like a different fashion like if you want to insert the first value into the column one and the second value into the column three and the third value into the column two so need to provide the column names here so uh in whatever fashion you are providing the column names it will insert the values in that particular fashion only and here you can give the values value one value till value n now here we can see the example so here we are inserting values into the employee table we have created so we'll use insert into the table name employee and then we will give all the columns employee ID employee name employee salary and then we will provide all the values we need to insert like one Raj the salary is 12200 the employee ID is two the name is Rahul the salary is 1100 the employee ID is three the name is r and the salary is 1100 so in this way you can insert the values into the particular table and you can provide all the values which needs to be inserted let's see how we can insert the values into our course table which we have created just now so we'll just execute the command insert into we'll provide the table name that is course and then we will provide all the columns first one is C ID second one is C name and then we will provide all the values to be inserted so the first value let's insert the course ID as one and the the course name as physics let's insert the second ID as two and the course name as maths and let's just execute this okay just there is a typo so it would be values so let's just run this command so once you run this command you can see this success so all the values have been inserted with the first course ID as one the subject name as physics the second course ID is two and the course name is maths so in this way we can insert the data into our table now let's see how we can see all the values which have been inserted into our table so we created the database we used the database in that particular database we created tables we inserted some data into that particular table now we will be seeing that how we can see all the values in that particular table so to see all the specific values of a column we can either use the select statement followed by the column from the table name so it would be select the column name from and the table name so the table name is the column name is employee ID so if I want to see only the employee ID details I can just use the select the column name from the table name and here to see all the values from the entire table we can use select star from employee so whenever I'll execute this statement select star from employ it will show me all the records which is present in the table so let's use this particular statement so what I'll do is I'll use select star from and I'll give the table name as horse and I'll just execute this so here you can see that a table is created with C ID course ID and course name where the values are one for physics two for mats so in this way you can see all the values which is inserted into your table now as I told that you can see all the databases which is present in your server in the same way we can see all the tables which is present in our database so there is a command to see all the tables which is present into our database so we can use show followed by tables so show tables will provide me all the tables which is present in the database so let's see how we can see all the tables which is present in our database so we'll just use this show followed by tables and we'll just end it with a semicolon so in this way we can see all the tables which is present in our current data so here you can see that there is only one table which is present in our schema that is course so in this way we can see all the tables which is present in our database so here we are taking an example of Instagram database so let's create a database for Instagram in this we would create the database we would create the table we would insert the data into the table and we'll see all the data which we have inserted into the table so before moving forward let's understand some basic concepts so there is a server on which we generally create our databases now on a server there could be multiple databases like DB1 db2 tilted dbn here DB stands for database now in this particular database there could be multiple tables like T1 T2 T3 in this also T4 T5 and this as well till TM so what we understood is in a single server there could be multiple databases and in a single database there could be multiple tables so the very first step is create a database so we'll execute this particular query that is create database now here we are using this if not exist Clause why this Clause is needed there could be a possibility that in a server since there are many databases there could be a possibility that two databases is having a same name or we are giving the same name and a database with the name already exist so in this way we will get an error so just to avoid that error and get a warning message instead we use this if not exist Clause so it basically makes sure that create a database only if that particular database does not exist on our server so this is create database if not exist and followed by the database name so let's just see our MySQL workbench and there we would be executing this query and learning how we can imp ment all the things practically and create a database followed by table and then see all the data which is present in the table so this is the my schol workbench UI here you can see all the output and here we giveing the query so it is create database if not exist and then we'll give the database name that is Instagram e and we'll just execute this particular query so once I execute this query I can see a success here but in this schema tab I can't see my database so for that I'll just do a refresh all so once I do the refresh all I can see a database with the name Instagram DB is already created for now there are no tables as we have not created any tables but a database with the name Instagram DB is created now let's see the next step so in the step two we would be using the database to create the tables now coming to the same example so in a server there could be multiple databases so a server needs to know that if we are creating table in which particular database we are creating a table so to let the server know we use this use statement so we'll give the use followed by the dat database name that right now I using this particular database for creation of tables insertion of data into the tables and much more things so let's just go to the SQL workbench so here we'll be giving the command use followed by the database name that is Instagram DB and we'll just execute this particular query so here you can see the success so as of now whatever tables we create would be created in this Instagram DB or database now let's see the step three so the step three is the creation of tables into the database so here is the query for the creation of tables as of now are taking two tables the first table is the user table and the second table is the post table now in this particular query we give create table again here also we give an additional check what if a table with the name post already exist so create table if not exist user so if there is no table with the name user only then create a table which is named as users so now here we provide all the columns or you can call it as attributes or the characteristics of the table so the First Column is user ID the second column is username and the third column is email then we provide all the data types that what all values this particular column can hold so here we are giving the integer value here we are giving the Vare or we can say character values and here also we are giving the character values so in the third argument we usually provide the constraint so here we are saying that this particular user ID is now having a key constraint that is a primary key constraint that means this particular column user ID Can Only Hold unique values and not null values so a primary key is a key which help us to uniquely identify all the records in a table so if a column is declared as a primary key so it can't hold any duplicate values it should always be unique and it should always be not n in the same way we are creating the table for the post the query is almost same here we have column as post ID user ID and caption with the data type as int here also int and here we are giving as Vare and here also we are giving a primary key constraint for the Post Ed at the post ID will always be unique the user ID will always be unique so let's just execute it in the SQL workbench so let me just copy this command and execute it in the sqool workbench so I'll go here and I'll just paste it and I'll just do a run so here you can see a is shown in the output window but here right now you can't see the table so for that you have to do a refresh all so once you do the refresh all it will show a table with the name user which is created which is having columns as user ID username and email now let's do for the second table as well we will just copy this and we'll just paste it here and we'll just run the query so here also you can see a success report that a table with the name post is created now we'll just do a refresh all here as well so here you can see a table with the name post having column such as post ID user ID and caption is created now in the next step we would be inserting values in this table so in the step four we would be inserting the values into the table so this is the query we need to execute to insert the values into the user as well as the post table so we'll just give insert into followed by the table name that is users and then we will provide all the columns that is user ID username and email and then we will provide the values so one would be inserted into the user ID re would be inserted into the username and email would be inserted ABC gmail.com so it follows the same pattern which is is given here the insertion so in the same way the two and three would also be inserted and in the same way for the Post also insert into table name that is post then we'll provide all the columns that is post ID user ID and caption and here in the values we will provide all the values which we need to insert so let's just execute this query in the S so let me just copy it and paste it here and then I'll just execute this particular query so here you can see a success report is generated again I'll do just a refresh all so as the data is inserted we can't see it here there's a special command to see all the data which is present in the table which we will see in the step five so let's do the same for the Post table as well and I'll just run this query so you can see the success so as of now my database is created I've created two tables inside my database that is users and post I've inserted some data into the users and post table now let's see if all the data is inserted into the table or not so in the step five you can see all the tables that is present in the database so first we'll give the query use followed by the database name which will help the server to know that the next command which is being executed is being executed for the Instagram TV and then we'll give the show tables command so let's see so I'll just give use followed by the database name that is Instagram DB and I'll just give a semicolon so the execution is successful and then I'll leave show tables so this command will show all the tables which is present inside this database so I'll just execute this query so here you can see that there are two tables post and users which is present in this particular database so in the step six we would be be fetching all the values in a specified table so for the first table we would be executing select star from users and for the second table we would be using select star from post so select star help us to fetch all the records which is present in the table so let's go to the my workbench and execute this queries so we'll be just executing select star then from and then we'll give the first table name that is users and I'll just execute this query so here you can see that all the data which we have inserted is here that is 1 2 3 RTI Raj rul and the email and when we want to fesh the data for the other table we will be using the same statement just we will replace the users with the post so select start from and here I'll be giv for so let me just execute this query so here you can see 10 1 102 10 03 and all the caption and user ID is present so in this way we create a database we use the database then we create the table in that particular database we insert the values in that particular table again we see all the tables which is present in our database and then we see all the data which is present in both the tables so before starting with the data types in SQL let's just understand what was the need of introducing data types in SQL so consider an example of a company so in a company there could be many employees E1 E2 till till till so there could be n number of employees as of now I have told that I have to feed the data for each and every employee in the employee table which is having columns or attributes as name and age so I'll start feeding the data of each and every employee in this particular employee table so consider the first employee is Amit who is having an age of 27 the second employee is Raj who is having an age of 28 so first what I'll do I'll feed the data for Amit so I'll feed the name as Amit and age is 27 now in the second I'll feed the data for Raj but while feeding the data for Raj by mistakenly I feeded 28 in the name and Raj in the age so there was a reverse order in which I feeded the data so what will happen whenever I make query give me the name of all the employees whose age is 27 so what will happen in the AG section it will find out ke there is one employee with the age 27 but the second employe is having Raj which is not a valid value which should be there in age like no one age can be R right so this is kind of an incorrect data so it causes a data inconsistency so what we do whenever we do a creation of table so the command for creation of table is create table followed by table name which would be employee as of now and whenever we will create the columns for the same so what we will do is we will give name and then we will provide the data type that this particular type of data a column can store that is the main reason of introducing data type so we will give name then we'll give vard so Vare is basically used for storing the string values and when we will give for age we will provide it as int so it will make sure that name is only having Vare values and age is only having integer values so whenever we will insert data into the table while insertion only if we feed wrong data in the columns it will give me an error so data types are basically used to specify the type of data data column can store so there are numerous types of data types first is the numeric second is the character of string third is the date and time fourth is the Boolean and fifth is the binary now in the numeric data types there are many type of data types integer small end big end decimal float double so these all data types help us to store the integer values or the numeric values in the character Instinct there are three data types character Vare and text these all help us to store the string value or the character values in the date and time there is date time date time time stamp so all these data types are used on the basis of their use case but this help us to store the datea and time in Boolean there is a Boolean to store the true or false values in binary there is a binary where binary blob to store the binary values that would be zero or one so let's see about each and every data type in detail and let's understand that where the use cases of such data types occurs so first start with the numeric data type so the very first one is int so it is used for storing whole numbers without decimal points so whenever we want to store a whole number without a decimal point consider the age so we always say that age of a person is either 16 years or 17 years we never say the age is 16.5 years right so whenever we want to store a data which is a whole number we use this integer value now it is having this particular range in which all the data could be stored and it is a signed integer what does the signed integer means it means that it can also store the positive as well as the negative values so the positive and negative values both can be stored in this particular int data type second one is big in so big int is also used for storing whole numbers but it store large whole numbers so the limit here was less but here the limit gradually increases because it store large whole numbers so whenever we want to store a value which is very large right so we use this big so the third one is float so float is basically used for storing the decimal numbers so whenever we want to store the value which is in decimals we use the float uh data type now the fourth one is double so the double is used for storing decimal numbers but again in the float the range was less but in double the range becomes double so if you want to store a value like 17.5 you can store it in float but if you want to store a value like 17.55 5555555 so you can store that value in double so it gives more precise value and it gives a less precised value so if you want to store in a less precised value or in you can say a roundoff number you can store in float but if you want a very precise value you can store it in double so basically float and double both are used to store decimal values int and begin both are used to store the whole number values it's just the range which gets increased so the fifth one is decimal decimal is basically used to store some values in which we provide that this is the Precision I want in that particular value this is the scale to which the value should be so it is used for exact numeric representation p is the Precision and S is the scale so if I want a value which is having four digits after the decimal so it can help me to get that particular digit so here you can see there is a command for creating a table and providing each and every data type for each and every column in the table so in this way we provide the data type while giving the column name while creating the table so when we are creating the table we will provide the column name and then we will provide the data type like what value the column would be holding so by default all the numeric data types can have negative as well as positive values as I told about the int so int can have positive as well as negative values this restrict the range so if we know there is only positive values which is stored we use the unsigned attribute so what we do is we consider age so we know that age would always be a positive value it won't be - 17 years right so I know that age would only hold positive values it can't hold negative values so what I'll do well whenever I'll Define the age or whenever I'll provide the data type for age I'll just put this unsigned attribute after in which will help us to increase the range so what it will do it will increase the range to 256 characters so earlier the range was very less but now my range is increased to 256 characters for example salary can never be negative or age so salary or age can never be negative so we provide this attribute unsent which says that this particular ID or this particular age or this particular salary would be only holding positive values it can't hold any negative values so it help us to elate at negative range and add it to the positive range now let's see about the character data type so there are three data types here C VC and text so let's see about the C data type so C basically means character so whenever we are storing any characters we can use this C data type now here n basically means the size of string so whatever would be the size of string we would be giving here so whenever we want to store any fixed length of character strings we use this SC so the range is from Zer to 255 character that is a to z values whenever we want to store we can use this C data type now what does this fixed l of character means so whenever I'm giving a column name as SC what it will do is consider that I have given the size as 50 so it will allocate or Reserve 50 blocks of memory so 50 blocks of memory is allocated or reserved for name so whenever the first name is feeded consider the first name is Raj so I feeded Raj so what will happen that these memory spaces are wasted consider for second name RTI so I feeded RTI now these memory spaces are being wasted so these all memory spaces are being wasted and it's not utilized so it's kind of not a good practice to use car rather we use Vare now what is Vare so V here basically stands for variable and car basically stands for character so whenever we want to store variable character or variable length character strings we use Vare now what will happen Vare so consider that I've given name Vare 50 so whenever I give name Vare 50 it will not go ahead and allocate a fixed length of 50 characters what it will do whenever I'll insert the value consider reti so it will go ahead and it will insert re and all the rest spaces wouldn't be OCC so it basically inserts the value in a dynamic fashion so the memory allocation is very good because none of the blocks of memory is wasted but in C data type what happens that because it is a fixed length it will go ahead and allocate 50 blocks of memory and in that 50 blocks of memory even if you are using four blocks the is 46 blocks are wasted so that is why we usually prefer using vcat because it is for variable character string so whenever we will provide any value it will only take up that particular value and rest all blocks wouldn't be allocated so the memory consumption is good the third one is text so variable length character stricks with no specific limit here you want you have to give a limit here also you have to give a limit because it can hold only 0 to 255 characters but if you want to store more characters or there is no limit to the character string you are storing so you can use the text so this is the way we can use this Vare care or text data type create table table name followed by the column name and here we can provide the data type so the third one is date time data types here the first one is date the second one is time and the third one is date time or time stamp date is basically used for storing the date values in this format that is year month and day the second one is time time which is used for storing time values that is hour minutes and seconds the third one is date time or time stamp which is used for storing date and time values so it will give year month and day followed by the hours minutes and seconds so the command which we can use is create table table name and then we can give this created time stamp as the column name and here we can provide the data type as time stamp so it will store the values in the format of year month day followed by the time that is R minute seconds so this is basically used for storing date and time values so the fourth one is Boolean data type in this Boolean data type there is only one data type that is Boolean so Boolean is basically used to store a true or false value so consider that you are a person you want to see that if you are eligible for Vote or not so if you are greater than 18 you are eligible to vote if you are less than 18 you are not eligible to vote so you are making a column is eligible to vote or not so in that particular column there would be only true or false values so in that particular use case we can use this Boolean data type so in the same way we can use this create table followed by table name and when we are giving the column or when we are defining the column we can Define the data type as Boolean so the fifth one is the binary data type now in this binary data type there are three data types binary ver binary and blob that is binary large object so the binary is basically used for storing any fixed length of binary data so binary data is zero or one so whenever I'll give binary and the limit as one so it will only store zero or one in the same way V binary basically variable binary is used for storing variable length of binary data it is the same what we saw for car and Vare so car will only store fixed length character data Vare will store variable length of character data so even if I'm giving binary and the limit as two I can store 0 1 0 0 1 0 1 1 like without even considering about the memory what is being used now the third one is blob that is binary large object it is used for storing large amounts of binary data it is also variable length so the command which we use is while creating the table create table table name we give the column name data and here we provide blob that is binary large object which could help us to store the large amount of binary data so this was all about this video I hope you had a good understanding about the data types in depth and now you understood that why while creating the table we were using the data types what are the use case of data type where a particular data type can be used so before starting with keys in SQL let us understand what keys exactly is so here I have taken an example of employee table so in this employee table there are some columns such as ID name age phone number which are also called as attributes or the characteristics of the table and here I have feeded some data in the row which is also called as chle in dbms now here I have feeded the data for employee 1 employee 2 and employee three so ID is one name is Raj age is 27 phone number is given ID is two name is Rahul age is 27 phone number is given ID is three name is again Raj age is 27 and the phone number is given now there should be a unique identifier or a unique attribute which could help me to identify records in a table or can distinguish between two records or two tles in a table so basically employee one and employee 2 can be distinguished on a single factor that is called as key so keys are basically a unique identifiers or we can call it as attribute or a set of attributes which help us to uniquely identify records in a table so in this particular table ID is something which is unique for every employee like 1 2 3 so we can't see some duplicate values it is unique for every employe and it can help me to distinguish between two employee like employee is Raj so the ID is one this for the second Raj the ID is three so it can help me identify records in a table now the second attribute is name so as you can see name is not unique for everyone two persons can have a same name here also you can see employee one is also having name as raj employe three is also having name as raj for the age also age can be again same for different people phone number phone number can be different different people so here we can see ID is also serving as a key as well as phone number is also serving as a key so ID and phone number can help us to uniquely identify records in a table now coming to types of keys so there are two types of key first one is primary key so a primary key is a unique identifier for each record in a table so primary key is basically a unique identifier for each record in a table so here the key was ID and phone number now you will see that according to your definition key and primary key both sound similar so what is the basic difference between key and primary key so a prim key is always unique plus Nal so what does this Nal means so Nal means that particular column or that particular attribute cannot have null values so it cannot accommodate null values so here if we see id id cannot be null for any person because ID is something which is generated whenever the person is onboarded into the company so ID can never be null and ID will always be unique for a person so we can say ID is a primary key but coming to phone number so phone number would be there for each and every person but there could be a possibility that a person doesn't have any phone number or there could be a possibility that that the person's phone number is not updated in the database but still the person is onboarded so phone number is not something which would be always not null it can have null values at the very start of the onboarding maybe the values are updated after the onboarding but it can have null values so as of now ID is something which is unique as well as not null so it is unique for each and every employee and it can't accommodate null values so that is why it is called as primary key it ensures that each row can be uniquely identified and exess within the table now what is foreign key a foreign key is a field in a table that refers to the primary key of another table it establishes a relationship between the tables so as of now we are dealing with the relational databases so what is database database is basically collection of data in relational databases we deal with the interrelated data now in database there could be many table so there could be table one table two table three but as of now we are dealing with the relational databases so all these tables should have a link or should have a relationship between them so to establish this link foreign key help us because in this particular table and in this particular table we establish a link using the foreign key so foreign key help us to establish the link between the two tables so let us see about primary key and foreign key in more depth so primary key a primary key is a key which uniquely identifies record in a table as I told earlier it ensures that each tle or record can be uniquely identified within the table so there is a ID which is serving as a primary key which uniquely identify each records or tles in the table so it is always unique plus not Nal so as I told earlier that primary key is something which would be always unique and notal it can't have duplicate values it can't have n values so ID would be always uh unique for each and every employee who has onboarded in our company and ID won't be null because if any employe is getting onboarded in our company the ID would be generated for that particular employee so this is primary key so the second key is the foreign key so a foreign key is a field in a table that refers to the primary key in another table so basically a key or a field which refers to the primary key in another table is called as foreign key so consider a example there are two tables student and subject this is having all the details about student this is having all the details about the subject oped by the the student so it is having R number name and Hometown and it is also having R number name and subject now this particular table is having roll number as the primary key and this is the student table so the student table wants to have a relationship with the subject table because the subject table tells that what subject a particular student has opted so we want a relationship between the subject and the student table so what we do is ke to establish the relationship the foreign key basically refers to the primary key in another table so in this particular table the primary key is R number so let's see that is there any attribute which is kind of referencing to this particular table so that will act as a foreign key so here you can see there is a roll number which is kind of referencing to the same R number which is present in the student table so this will be acting as a foreign key which will be referencing or which would be taking values from the student RO number so in this way we can establish a relationship between two tables so this R number is called as foreign key and this R number is called as primary key this is called as foreign key because this is referencing to the primary key of another table so a relationship between two tables are established on the basis of the foreign key now there are two things here you can see base or reference table and referencing table so let's understand what is this base base table and what is this referencing table so reference table is a table which is having a primary key so whenever there is a table which is having a primary key that is called as reference table or base because this is the table which is referenced by another table which is having foreign key so that is why this is called as referenced or the base table second table is the referencing table so this is called as referencing table because this is having a foreign key and it references to another table so a table which is having primary key is called as reference table a table which is having a foreign key is called as referencing table so the very first question which would be coming to your mind would be why we are reading about constraints data types and keys at the first place so do you remember I told you a query for creating a table in the very start of the videos that was create table followed by the table name and then we used to provide the column name then the data type of the column and then the constraint of the column so as of now you would know that why we need to provide the data type so that any inconsistent or irrelevant data is not feeded into our system now the second one was the constraint which was kind of optional you can provide constraints to a column and you can't provide constraint to a column it totally depends on your use case so constraints basically Define the rules or the condition that must be satisfied by the data in the table so consider that when you are creating a table so at that particular time you are giving a column name you are providing the data type and you are providing a constraint considered primary key so this particular column would be a primary key or this particular column would have n Nal values so we are giving this constraint so whenever we would be inserting data if we insert data which doesn't follow this rule or condition would be discarded and we would be seeing an error that this particular data can't be inserted because right now it is violating the constraint which we have given so so basically whenever we are giving a rule or a condition to that particular column or that particular attribute in a table we call it as constraint so common constraint include uniqueness of the data nullability check and the default value Etc now here are some constraints which is present so the very first constraint is the unique constraint so unique constraint basically ensures that a value in a column are unique across the table so basically whenever we are providing this unique constraint to any of the column in the table it ensures that that particular column would only hold unique values it can't hold any value which is duplicated or duplicate values can't be stored in that particular column so let's see from the myql workbench there we would be creating a database and then we would be creating multiple tables in which we would be seeing about each and every constraint so this is my myle workbench let us first create a database so we would be creating a database for college so we would just give this command create database college and we would just execute it so we have executed it has done successfully let's just refresh it here and here we can see a college database which is created as of now there are no tables we would be making new tables for every constraint so let's just tell the server that right now I am using this particular database to make the tables so I'll just give use followed by the database name and then I'll execute this query so this is also successful now all the tables which would be created would be created inside this college database now let's first see the unique constraint example so we would be right now seeing the unique constraint example so we'll just comment this out and let's create a table so we'll create a table student in which we would be giving columns so while creating the tables always make sure that the table name is always in small letters it can't be in capital letters it will throw an error so we are creating a table student in this particular table we are giving some columns so as of now we are giving phone number and we would provide a data type for this and we will provide the constraint that is unique so we'll just execute this query and here you can see a success so once I'll refresh it I can see a table with the name student is created which is having a column for number now since I have given this unique constraint to this phone number column so it shouldn't hold any duplicate values so let's just insert some values into this table and check if the unique constraint is working or not so we'll just do insert into and then we'll give the table name that is student followed by the column name that would be phone number so I'll just copy this I'll paste it here and then we would be inserting the values so let's just insert some values so let's insert the first value as 1 2 3 Let's insert the second value as 456 and let's insert the Third third value again as 1 2 3 to check that if the unique constraint is working or not so let me just execute this query so here you can see that we are getting an error that duplicate entry 1 2 3 for the key student phone number so we are giving the duplicate entry and since we have given that it will be only holding unique values this particular statement can't be executed so what I'll do I'll just remove this duplicate value and then I'll try running this query so I've removed the duplicate values all the values are unique let's just run this query again so once I run the query after removing the duplicate values you can see that I'm getting a success so basically unique is somehow making sure that my particular table doesn't have any duplicated values now let's see for the next constraint that is the Nal constraint so notnull constraint basically ensures a column cannot have null value so basically notnull constraint makes sure that if a column is provided it shouldn't have or it shouldn't store any of the null values so let's see about this also in the MySQL workbench so let's see for the not null constraint so we'll just mention notnull constraint and we'll just comment this out and we'll just create a new table so let's create a table student one and let's just leave some columns for the student one so let's give the First Column as H which would be holding integer values and as of now we are not giving any constraint to the age let's give another as doll number and it would be also storing integer values and let's just put the Nal constraint here so let's just execute this query and you can see a success let me just refresh it here so here you can see a new table with the name student fun is created now let's just insert some values into the table so we'll just do insert into student one and here I'll only give one column name so that in the next column null value is automatically inserted so I'll just give here age and I'll just give the values and here I'll give the value as 27 and I'll just execute this query so what I have done is right now I am only inserting values into the age I am not inserting any value into the R number so let me just execute this query so here you can see I'm getting an error field R number does not have a default value so it says that right now field roll number doesn't have any default value so it is getting a null value and as of now you have told that raw number can't have null values so this query can't be executed but when I make this age comma RW number and when I insert some value for the RW number as well consider one and when I run this query it would be successfully run because right now I am giving a value to that R number column so it is not getting any null value values so this is how we can ensure the Nal constraint let's see about the other constraints as well so the third constraint in the list is the check constraint so check constraint basically enforces a condition to be true for each row so basically check constraint is kind of like you are making a check that if you're inserting any values into this particular column there is a check which should be true so consider that if you are inserting age of a person in a particular table so you have to only insert the age of a person if he or she is greater than 18 so that you can make a voter ID for that particular person so let's see from the myl workbench so this would be for the check constraint I'll just comment it out so let's again create a new table create table student 3 and we'll just provide the columns so we'll just give age which will have integer values and we'll just give a check constraint it check age is greater than 80 only then insert the values otherwise don't insert the Valu so we'll just execute this particular query so query is executed here if you do a refresh you can see a student 3 is also created now in this student 3 table we will insert the values so insert into student 3 and here we will give the column name that is H and now we will insert the values so let's insert so uh here I've given the constraint that the age should always be greater than 18 let's give a age Which is less than 18 let's give the age as 13 and let's just execute this query to see that if the constraint is working or not so I'm executing the query so here you can see that we are getting an error that the check constraint is present on on the student three age column so we can't insert a value Which is less than 18 and let's run the same query after giving a age which is greater than 18 21 let's just run this query so you can see a success that this particular age is already inserted because this is greater than 18 so this is how the check constraint work let's see for the next constraint so the next constraint here is the default constraint so default constraint basically provides a default value for a column if no value is specified so basically you remember that in the last example when we were inserting the data into the columns if you're not providing any column null is automatically being inserted in that particular column so if we want to avoid that null if we want a default value which should be there consider that you are a student and you are studing at a school if you forget to provide that school name in your database that would automatically take the school name so let's just uh see about the default constraint as well so default constraint basically means if no value is provided the default value will be automatically inserted so let's see for the default constraint so we'll just create a table so create table student 5 and here here we would be giving the column names so let's just give the First Column name as school name and it will take Vare values because it is a character string so it will just take 50 characters and here I'll provide this default constant so default would be XY Z like as of now I'm taking the school name as XY Z and then I'll be providing next column as H which would be taking integer values so let's just execute this query so you can see that we are getting a success now let's just insert some values into this table so insert into student 5 and then we will provide the column so as of now I'm not not providing the school name because uh it will uh by default take the default value so I'm just giving for age so I'll just give age and in the values I'll just give 19 for now we just execute this query so you can see that I'm getting a success on executing this query so let me just see if the table is taking the default value or not so I'll just do select star from student 5 so it will show all the data which is present in student 5 and I'll just execute this query so here you can see that the school name XY Z is already taken by default so I haven't entered any of the school name it has taken the school name by default so this is how the default constraint works so if we give the default constraint it will take the default value if none of the value is specified if you specify any value it will take that value but if you don't specify any value it will take the default value so the next constraint is the primary key constraint now primary key constraint basically enforces the uniqueness of values in one or more columns so a primary key basically enforces the uniqueness that two tles can be identified uniquely Whenever there is a primary key present so primary key is always unique as well as Nal both the unique and the Nal constraint together is applied in the primary key so when you are providing any column as primary key it is by default unique It Is by default noral so let's see about the primary key so this would be primary key constraint so we will see for two things first is the uniqueness and second is the notal so first we'll create a table again so we will create table and we'll give the name as student six uh don't get confused at why I am creating so many tables it's just for you to have a proper understanding about each and every constraint in depth so that is why I'm creating multiple tables we can do this in the same table as well but again that could be a bit confusing so let's just give some columns so we'll give H int and then we will give roll number int and let's just give roll number as primary key and let's just execute this query so you can see we are getting a success for this query now let's just insert the values so first we will see if it is holding the uniqueness or not and second we will see that all the values are not null so let's see for the uniqueness first so we'll just insert into again we'll give the table name that is student 6 and then we will provide the column so the First Column is age and the second column is roll number and then we will give the values so let's give the first value as let's give the age as 12 and roll number as one and then we will give another age as 13 roll number as two and here we have to check that if it is following this unique thing or not so let's just give a duplicate value so we will give age as 14 for a student and again the r number as two and let's just execute this query to see if it is taking care of the uniqueness or not so here you can see we are getting an error because we have told that once a column is declared as primary key it will always hold a unique and the Nal value and for Nal Also let's execute the same query and do some changes so we have to uh make this roll number always not null so let's just not give any R number here and let's just insert only one value in ag so let me just execute this query so here you can see we are again getting an error because for now R number is having a null value and R number is asking for a default value because primary key can never be null now the last constraint is the foreign key constraint so foreign key constraint basically enforces a link between two tables by referencing a column in one table that is primary key in another table so in foreign key what happens is foreign key is basically helping us to establish a link between two tables so foreign key links two table to have a relationship between them so there are two tables table one and table two table one is having details about the student and table two is having the details about the course or the subject now table one is having ID which is serving as a primary key as of now so if we want to establish a relationship between the student and the course table what we will do is we will search for this primary key if it's present here or not the attribute which is like kind of referencing here so we'll search for the same attribute here so we can see that there is the same attribute which is present in the course table as well so it will act as a foreign key and it will reference to the primary key of the student table so in this way our relationship is established please take care this thing in mind that one table would be having only one primary key but can have multiple foreign keys so let's just see about the foreign key constraint so we'll see foreign key constraint now for the foreign key let's create a table first so create a table with the name course that would be having some course details such as course name and we'll give it as valare 50 and then we want to establish this course table with the student table now the student six table is having age and roll number so let me just provide a roll number here so it would be roll number and that would be taking integer value now at the very last I'll just establish a relationship between this R number and the r number which is present in the student six table so what I'll do I'll just provide foreign key RW number I'll just mention it inside the brackets foreign key roll number references I'll give the table name of which we are taking a reference that is student six and and then I'll provide the column name that is roll number and okay so I've provided the foreign key and I have provided that which particular column here would be acting as a foreign key and then I have given this references there's a small typo and I'll just fix it so let me just execute this query so once I execute this query I can see a success so basically a table with the name course is created which is having a relationship with the table student 6 the student 6 primary key that is R number is acting as a foreign key here and there is a link which is being created so before starting with foreign key let's just re- revise some older Concepts so in Keys we learned about two types of key the very first one was the primary key and the second one was the foreign key now what is primary key primary key is a key which uniquely identifies all the records or we can say rows of a table now consider that there is a employe table now in this employee table we have some attributes such as employee ID employee name employee salary employee address now in this particular table we are treating ID as the primary key so we have feeded the details of employee 1 then employee 2 employee 3 followed by all the employees which is present in the organization now if I want to identify employee one from rest of the employee would this ID be helpful to me so the answer is yes the ID would be helpful for me to identify employee one among all the employees which are present because primary key say is that if we are declaring any of the key as primary key it is always unique as well as not null so what does this means uniqueness here means that ID cannot have any duplicated values so employee one and employee 2 both can't have the ID as one it is not allowed when we are declaring ID as the primary key so ID cannot have duplicated values the second one is not null so ID cannot also hold any null values because again if I am holding I ID as null here so it won't help me to like differentiate between all the employees because for employee to the ID is so null values are not allowed and duplicated values are not allowed whenever we are assigning any attribute or we can say set of attributes as primary key so primary key help us for Unique identification of all the records which is presented in the table now let's move to the foreign key so what is foreign key foreign key is a key which help us to establish relationship between two tables so whenever consider there is a database and as of now I'm taking School database as example so in the school database there would be multiple tables first one would be the student table second would be the course table third would be the teacher table and so on now the student table and course table have a relationship between them so the course table basically says that which particular student has opted which particular course so this course tables helps me to know that if a student has opted a course of let's say course code as 100 so what are the course details like what is the course name who is the course teacher and much more things and then this teacher table also have a relationship between the course table so basically the course table tells that this particular teacher is going to uh teach that particular course so somehow we are we can see that there are some relationship which is established between different tables which is present in our database so foreign key help us to establish a relationship or we can say link between two tables so whenever we want to establish a relationship or link between two tables we use the foreign ke concept now let's see the example which is present here so there are two tables first one is student and second one is course so what is the first thing we will do we'll identify the primary key of both the tables so here you can see that ID is something which is unique for each and every student so here ID is acting as a primary now coming to the course table here you can see that course ID is unique for each and every course so here we can make course ID as primary key okay so here course ID is acting as a primary key here ID is acting as a primary key now you can see that this particular ID tells about the student ID that for Rahul the student ID is one for Raj the student ID is two and for RTI the student ID is three now in this particular table if I add one more colum which is of ID like which is you can say R number like consider this as R number student roll number so if I add a same column here student rle number so I can know that okay a student with role number one is having a course ID 100 is opted Hindi as a language or as a subject and the teacher who is teaching is Ram so basically this particular ID column is helping me to establish a relationship between these two tables because from here I can see that okay the ID is one so here if I come the ID is one the name is Rahul so ID one name Rahul has opted Hindi as a course or as a subject and the teacher who is teaching is Ram so a relationship between these two tables has established so this is called as foreign key the foreign key is a key which references to the reference table and act as a primary key in the reference table so whenever there is a foreign key which is present in another table it is kind of acting as a primary key in the table to which it is referencing or to which it is establishing a relationship so as of now course table is establishing a relationship with student so there is a key which is present which is kind of primary key in another table so this key is acting as a foreign key because this key is helping me to map all the details which is present in the course table to the student table so there is a relationship which established between table T1 and T2 which is student and quote so whenever a table which is referencing to another table that is called as referencing or child table so whenever we are having a foreign key in a table that table we can call it as a referencing table or child table now what is this child table so you might have heard this parent child inheritance that child always have some properties of parents or child inherits some properties of parents in the same way here child table inherits some properties of the parent table and whenever uh there is a foreign key which is present in child table it is referencing to one of the table that is called as reference table so whenever a table is being referenced it is called as reference table or we can also say that it is called as base table or we can say that it is called as parent table so we can name it as base referenced or parent table and the table which is having foreign key and which is referencing to other table is called as referencing or child table now foreign key help us to perform operations related to the parent table such as joining tables or ensuring referential Integrity now what is this referential Integrity consider that there are two tables and they have a foreign key relationship between them or they have establish a relationship between them this is also having a column as ID and here also we are having column as ID which is acting as a foreign key here and which is acting as a primary key here consider that in this ID if I update ID from 1 to two so this particular two should be updated here as well to maintain the data consistency because consider that someone makes a query here and someone uses the same query for here that give me all the details of a person whose ID is one or give me all the course details of person whose ID is one so here one is not existing so here it it will says that okay you are making a wrong query one is not existing but here it will give the detail so basically data is kind of inconsistent so we need to maintain the data consistency that if anything is updated here or consider deleted here that should be done same in the another table or we can say the child table so if any of the update or delete happens in the base table that needs to be done in the child table so that is called as referential Integrity basically maintaining the Integrity of data all the tables which is having a relationship between them now the query to any column or attribute as foreign key so we give create table and then we give the table name so consider that there are two tables the first table we are calling as base table and the second table we are calling as child table now this table is already existing and this table we are making it new now this particular table has base ID consider name and other parameters and here base ID is acting as a primary key this particular child table is having its course ID and now it's having a base ID which is acting as a primary key in another table so this is a foreign key which is referencing to the primary key of another table so we'll give create table followed by the child table name then we will give all the attributes which are present here so Child ID then we will provide the data type that this attributes would be taking only these values so we will provide int and here C ID is acting as a primary key so we will uh provide this primary key constraint as well then we will provide the base ID and then all the values which is being accepted by the base ID that is integer then we will give this foreign key like we will tell the database that this particular column is going to be my foreign key so I'll provide this foreign key name and then I'll provide at which column in the child table we want to be a foreign key that is base ID so I'll provide the base ID and then here I'll provide references I made the base ID as foreign key but I have to tell the database okay this particular ID is being referenced as foreign key but which table it's referencing to so I'll give this references and then I'll give the table name that is base table name and then which column this foreign key is referencing to that is base ID so in this way while creating a table we can declare the foreign key so let's see from the MySQL workbench so here I am creating a database of school so I'll just execute the command so I've created a database of school I'll just do a refresh all so here a database of school is created now I'll create a table student which will be acting as a base table as of now so I'll just run the command okay so we are getting an error no database selected so why we are getting this error we have created the database cool but I haven't told the server that if I want to create the table in which particular database I want to create the table so no database has been selected so we need to execute this use command so this will tell the server okay now all the operations which are going to happen will happen in this school database now you can see we have got a success now again we will run this create table student and here you can see we have got a success so once I do a refresh all here in the tables I can see a table with the name student is created which is having columns as ID and Name ID is acting as a primary key and name in is another column now I'm creating a table course which is a child table which will be having foreign key which will be referencing to the primary key of the student table so what I'll do I'll just give course and then I'll give course ID integer and here in this particular table course ID is acting as a primary key so I'll give primary key and then I'll provide the ID which is coming from this particular student and it is taking integer values and then in the last line I'll provide that ID is a foreign key so I'll provide ID here and then I'll provide that which table it's referencing to so references references and then I'll provide which table it's referencing to so it's student so I'll provide student and then I'll provide the column or the attribute which it's referencing to that that is ID and then I'll just execute this particular query so you can say I've got a success and here I'll do a refresh all so here you can see that two tables are created first one is student and second one is course so course is having ID as a foreign key which is existing in the student table which is acting as a primary key there so now let's see about cascading in foreign key so just now I explained about referential integrity that if there in there is any update with which is happening in the base table same should be happening in the child table or if there is any delete which is happening in the base table same should happen in the child table as well so cascading are a set of rules which dictate what action should be taken automatically when a referenced Row in the parent table is modified or deleted so whenever there are two tables first one is the parent table second is the child table so whenever there is any kind of insertion or deletion which is happening in the parent table same should happen in the child table as well as they are having a relationship via foreign key so there are ways in which we can achieve the same to maintain the referential Integrity so there are three ways to maintain the referential Integrity first one is Cascade so if a row in parent table is updated or deleted all the related rows in the child table will be automatically updated or deleted so Cascade says that if I give cascet command what it will do that if any of the attribute here or any of the value here is updated or deleted same will happen in the child table the second one is setel so if a row in the parent table is updated or deleted all the corresponding foreign key values in the child table will be set to null so consider that in the ID I have updated the value from 1 to 1 so the same shouldn't be replicated here either what it will do that ID is updated from 1 to 1 a so it will set a null value there saying that this particular value is now being updated and now for now we have set the value as null here so foreign key values in the child table will be set to null now the third one is restrict on no action so what it does it blocks the modification or deletion of a reference Row in the parent table if related row exist in the child table thus maintaining the referential Integrity so so if I provide this command at the last of creation of table what it will do you consider that there is a ID which is here and the same ID is present here which is acting as a foreign key so what it will do that it will not allow any kind of updation or deletion happening in this particular ID table because it will somehow affect the ID which is present in this particular table that is the child table and it is acting as a foreign key so it will basically block the modification or deletion of the reference Row in the parent table so it will just block the modification of the ID which is present in the reference table now how we can achieve the cascading in foreign so these cascading action helps to maintain the Integrity of data across related tables in the database now there are two ways in which we can achieve this cascading first one is on delete Cascade and second one is onupdate Cascade so what does this on delete Cascade does so the on delete cascet Clause indicates that if a row in a parent table is deleted all the corresponding rows in the child table will be automatically deleted as well so it says that if I am writing the query in which I am referencing a attri as foreign key if at the very last I mention this on delete cascet it will make sure that any of the data which is deleted in parent table will be deleted in the child table as well what is onupdate casket so the onupdate casket Clause indicates that if a row in the parent table is updated all the corresponding rows in the child table will be automatically updated so it says that if there is any kind of changes or any kind of updation which has happened in the parent table the same would be reflected in the child table so while creating a table at the very last we can provide this on on update casket which makes sure that if any of the value which is uh updated in the parent table that is the base table the same should be replicated in the child table as well thus maintaining the referential Integrity so before starting with the update command let's just realize or understand what is the importance of update command or how is this update command even coming into the picture so what is SQL SQL is basically a programming language which help us to perform any crud operations on a data now what are these crud operations so crud stands for create read update and delete now whenever we want to perform such operations on our data we use SQL and there are some special commands in SQL which help us to perform all these operations so for the create we have a create command in SQL which help us to create any database any table for the read we have a select command which help us to show the data or the data which is present to make a query in the data then update we have the update command in SQL and then for delete we have a delete command in SQL so using all these command we can do manipulations in the data basically perform the cred operations now in this particular video we would be touch basing more on the update command so before starting with the update command let's just create a sample database in that sample database let's just create a table and fill in some details into the table then we would be updating some values or we can say a record in a table and see that if the values are being updated or not so before making any of the database or any of the table there are some requirements or some steps we should be following so the very first step is make a dat database for a company XY Z so we have given a requirement that we have to make a database for a company named XYZ so what we will do we will first run this particular query where we give create followed by the database and then we provide the database name that is XYZ so this is the very first step we perform now here it will create me a database with the name XY Z in our server so in the server there could be multiple databases for now it is uh creating a XYZ database now the second command is use XYZ so as I told that in a server there could be multiple databases now I want to execute some queries so how would the server know that if it's being executed in this particular database or this particular database so we give this command use XYZ which helps the server to know that if any operation or any queries are being performed it would be performed in this XYZ database so we will be hitting this particular query then the second requirement is now in that particular database we would be creating an employee table so to create an employee table we would be executing this query we'll give create table followed by the table name that is employee and then we will provide all the columns which we need in this particular table basically you can say as schema of the table or the characteristics or attributes of this particular table so we will give the column name followed by the data type basically what all values the column will be holding so ID can either hold string values integer values Boolean values any values so we will be telling that ID would only be holding integer values so whenever a person wants to insert a string value or a Boolean value it will throw an error because we have told that ID would only be storing int values and then we give a constraint so what is constraint constraint is basically a set of rules we provide to particular column so we would we are providing a constraint primary key which says that this particular ID field will always have unique as well as not null values so it means that ID can't hold duplicate values ID also can't hold null values and in the same way we will give column name followed by the data type the constraint is kind of optional so we will again give the column name followed by the data type column name data type column name data type and column name data type in this way we can create an employee table in the XYZ database now the third requirement comes in where we have to fill the Dil into the table basically insert some data into the table so for that we will execute this query where we will give insert into followed by the table name that is employee and then we will provide the order in which we want to insert all the values so basically it gives the order like firstly the value would be inserted into ID second value would be inserted into name third value would be inserted into age fourth into Department fifth into City and sixth into salary so whenever here we give the values we can provide multiple values followed by a comma like if I want to enter details of multiple employees so I can enter the details of employee one then I can give a comma and then I can enter details of employee 2 employe 3 employe 4 employee 5 now in the values the one is basically stored in the ID as this is the manner in which we are inserting the data Rahul is stored in name 25 is stored in age it is stored in Department Mumbai is stored in city and 1500 is stored in salary for the very first record we can say or the employee one record now in the employe 2 the same thing happens employee 3 employe four employee 5 so here we have feeded among five details of each and every employee including their ID name age Department City and salary so we have created a database we have used that database we have created a table we have inserted some values into the table now we want to see if all the values are inserted into the table or not so the very fourth requirement is see all the data in the table so let's see from the MySQL workbench let's execute all these queries and create a database with a table employee so that we can perform any operations on that particular table so I'll go to my SQL workbench so here you can see that I have already written all the queries just to save time but I'll be executing the queries one by one and would be explaining that how these queries are even working so the very first thing was to make a database with a company XY Z so I'll give the command create database followed by XYZ and then I'll just run this so here you can see that I've got a success but in the schemas tab you won't be able to see anything so you have to just right click and do a refresh all so once you do a refresh all you can see a database with the name or a schema with the name XY Z is created when you open it you would be seeing that there are no tables no views nothing here because we have only created a database as of now we haven't done any operation now the second operation is use XYZ again we uh use this use XYZ or use followed by the database name to tell the server that if there are two schemas Sy Ys or XYZ we want to execute all the operation on this XYZ schema now the second one was to make an employee table in the XYZ database so we will just hit this create table then we give this table name and then we provide all the columns which we need in this particular table we'll just run this query and here you can see we have got a success but here you won't be able to see anything so you have to just again go and refresh all so here you can see in the tables our employee table is created which is having all the columns as ID name age Department Citys salary now we have to fill some details into the table so I'll be just executing this query which inserts data into the table followed by the given order and then the values which we need to insert into the table so I'll just run this and here if I do refresh all I won't be able to see the data which is present here so to see the data that if the data I've provided or if the data I've inserted is inserted correctly or not or if the data is present or not I'll just hit this particular query which is Select star from employee now this particular query select star from employee help us to see all the data which is present into this employee table basically the aster here means all so select all from employee so select all the data which is present in the employee table so we'll just hit this query about the select we will be looking more on to the next set of videos but for now you can understand that here we are trying to see all the data which is present into the table so here you can see ID name age Department City salary and all the data which we have feeded is present here now let's go to the update command so the update command in SQL is used to modify existing records in a table now consider that my name is RTI I ordered something from swiigy I gave my name there but my mistake I wrote it as re e TI rather than R TI now my name is displaying as re e TI but my name is Ri so I raise a complaint to their customer care and I tell to correct my name so they will ask me that what is the corrected name so I'll provide my corrected name and I'll provide the name which is right now present so basically I am somehow updating the value here of name from re re TI to R so basically update means whenever we are modifying any existing data which is present in inside the database consider you have provided your age by mistakenly someone feed it incorrect age so you can ask that particular person to go ahead and update your correct age in the database so basically update help us to modify any records or any values which is present into our table so the query for update is this update then we give the table name and then we provide here set basically means you have to update this particular table and you have to set the column name to this particular value so basically if I am updating my name here what I'll do I'll update I'll give the table name I'll set and then I'll Prov the column name as name I'll provide the value which is need to be set so the value which needs to be set if there are more values which are incorrect we can provide it using comma separated way and then I'll give the condition okay I've given the name is equal to re you have to set in this particular table but where I have to set this particular name so I'll provide the condition where name is equal to re e ti so I'm telling my database that go ahead and update the table with the table name this set name equal to rep like the updated value and if there are more values I can give and I'll tell my database you have to update the name as re where right now the name is equal to re ti so in this manner the update query mostly works now let's see some examples of this update query some practice question and then we will go ahead in the myol workbench and execute this queries so the very first practice question is write a query to update the salary for all employees in the HR department to 50,000 so basically for HR department now there has been an increment which is applied to all the people who are working into the HR department so rather than going ahead and manually correcting all all the salary it's better to go ahead and execute a query which will update all the salaries of the people who are present in HR department to 50,000 so what the query would be I'll give update then the table in which we created employee and then we will give the set salary equal to 50,000 so this is the updated value which I want to set so I'll set the salary equal to 50,000 and then I'll provide the condition or the Clause where Department equals to HR so go ahead update the employee table where department is equal to HR and set the salary as 50,000 so let's just go ahead and execute the particular query into our mysq workbench so let's just execute that particular query so what we will do we'll give update and then we will give the table name that is employee and then we will provide set and the value which we need to update salary equal to 50,000 and then I'll provide the condition that where I need to update this so where Department equals to HR and I'll just just execute this particular query so here you can see that while executing this query I've got an error unknown column salary in the field list so basically it's a typo and I'll just correct it and I'll just execute it again again I've got an error so what this error says you are using a safe update mode so what is the safe update mode so let's learn about this safe update mode so what happens ke right now we are creating some databases we are creating some tables we are doing update into the table we are deleting some tables we are deleting some databases but in a normal scenario this doesn't happen or in a real world scenario this doesn't happen because there are companies who are having huge databases which are having databases of employees workers their salary details their personal details and much more things so whenever we are performing any update or the delete command that could be harmful because there might be some apis which would be depending on the data which is present into the database so whenever we are updating any values or whenever we are deleting any values we have to make sure that we are turning off the safe mode which means we are telling okay I know that I am updating the value okay I know I'm deleting the value please turn off the safe mode so for that we will just execute this query that is set SQL safe updates equal to zero so I'll go here so I'll set SQL save updates equal to zero and whenever I want to RT this I'll execute this query and I'll just provide here as one and I'll just execute this query so this query is successful now let's just execute this query of update and now it's successful so now we want to see that if the update has happened successfully or not so we will just see all the employee details I'll just run this command and here you can see the department is HR and the salary has been updated to 50,000 so earlier the salary for the HR department was 2,000 now the salary has been updated to 50,000 so let's go to the second practice question write a query to update the name of an employee from ra a AJ to ra a so basically a employee name as I told that I have given my name as re but my actual name is RTI so I want to update that value in the same manner we have to update the name of an employee whose uh right now name is r a a to R A so for that what we will do we will give that update followed by the table name that is employee then I'll give the set which basically sets the value or set the updated value so I'll give name equal to Raj which is the updated value and now my database wants to know that where you want to set this updated value so I'll provide the condition where name is RA a so in this manner we can update the name from raag to R A so this is all about the update command in this particular video we will be learning about the delete and the select command in the next set of videos so the delete command in SQL is basically used to remove records from the table so it's not like that it removes a value or it removes a data from the table it entirely deletes the record which is present in the table so records here basically means the rows of a table so whenever we want to delete an entire row we use this delete command so the query for this is delete then we give from and then we provide the table name from which table we want to delete and then we give the condition that what we need to delete so consider that I want to delete all the records of a person whose name is RTI so what I'll do I'll just put this delete from table name and then in the where I'll provide the condition where name is equal to RTI so it will delete all the records of mine from the database so let's just see from the practice question and then we will go to myql workbench and execute the queries so the very first practice question is write a query to delete all the records from the employee table where department is HR so I want to delete all the records which is present into our table for the people who are from the HR department because I'm making a separate database for IT department separate database for HR department separate database for Consulting department and much more things so what I'll do I'll just give this query delete from and then I'll give the table name which is employee then in the condition I'll provide that from where I want to delete so I want to delete the department equal to HR now what it will do you consider that this is my table and this is the department and these are all the details consider the department here is it it is HR it is again it and it is again HR so it will find all the HR department which is present in my table and it will delete just all the Departments which is having the name as HR so it will delete all the department which is having the name as HR it's not like that it will only delete one row it will delete all the rows with the name HR so let's just go to myql workbench and see how the delete works so let's use so we'll give delete from and then we will give the table name that is employee and then we will provide the condition where Department equals to so now here we have only one HR department so let's use the IT department because here we are having two it departments so we will be seeing that how it is deleting all the records which is present into our table with the Department as it so I'll just give it and I'll just execute this particular query so this query is a success now let's just use this select star from employee to see all the records and here you can see that we can't see any of the record with the name Department name as it so now you can see that whenever we are deleting anything and if we are providing the department as it it will search in the entire table with the Departments and as ID and it will delete all the Records who are having the department name as ID it's not that it's only deleting one record it will delete all the records with the Department name as it now let's see the second practice question so we have to write a query to delete the record of an employee having the name as raj so here we are deleting the record of an employee who is having the name as raj so what query we will write we'll give delete from and then we will give the table name that is employee and then here in the condition we will provide where name and then we will provide the name as raj so let's just execute this query as well I'll just close this and I'll use delete from and then I'll give the table name as employee and I'll give where name equals to and I'll give Raj and I'll just so the Raj name is RJ and I'll just execute this so you can see that I've got a success again I'll just hit this particular query and here you can see that I can't find any person with the name Raj so whenever it will find any person with the name Raj it will delete all the records which is present into that particular table with the name Raj so in this way delete command works so whenever we want to retrieve data from our table we use this select command so select command is a dql command that is data query language command it is basically used to retrieve data from the database so whenever we want to get or we want to retrieve some data from the database we use the select command now we can provide specific columns from which we want to retrieve data either we can retrieve all the data which is present into our table so there are two queries which we can use first one is Select then we provide all the columns which we want to see or which data we want to see so we'll provide the the column name column one name column two name and then we will provide from and then we will provide the table name like the table name from which we want to retrieve the data so it will retrieve the data present in a specific column in a table then there is another query which is Select star from table name so this star basically means all the columns which is present into our table so the star basically means all so we whenever we want to see all the data which is present in our table we use the select star and then we provide the table name so it helps us to retrieve all the data which is present in our table so let's just see the example of Select so consider the first example where I want to only see the name and age of an employee from the employee table so I'll use select and then I'll provide the column names from which I want to see the data so first one is name second one is age and then I will provide the table name so the table name is employee and then I'll just execute this query so this is a success query and here you can see that I can only see the name and age so this employee table is having more columns but as of now I've told that I want to only retrieve the data from the name and age which is present in the employee table so basically it help us to retrieve data from some specific column if you want to retrieve the data like the entire data which is present in this particular table so we give select star which is basically pronounced as all and then we give from and then we provide the table name which is employee and whenever we execute this we can see the entire data which is present in all the columns so basically you have seen that in the earlier videos also we were using this particular command select start from which was helping us to see all the details or all the data which is present into the table so select command help us to retrieve all the data or some of the data which is present into the table so let's understand about wear Clause its importance how it help us to filter data and much more things so without any further Ado let's get started so whenever we want to filter the data we use this wear Clause now wear Clause helps us to filter the rows based on a specified condition now what does this means so consider that I want a detail of a person whose age is 25 or I want all the details of a student who are having marks greater than 90 so basically I'm giving a condition that the age should always be greater than or equal to 25 or the Mark should always be greater than or equal to 90 so whenever I'm providing any kind of condition to filter some of the data because consider that I'm saying that I want the details of a person so it will send me all the details or it will show me all the details of all the person who are present in that particular table but when I put up some condition like age should be 25 now what it will do it will go one by one and check all the records and wherever it will find age equal to 25 it will return that particular result and show me that particular result so I am somehow giving some condition to get some filtered set of data so in that way wear Clause helps us you have seen in the earlier videos as well that I was using the we condition along with update along with delete sometimes along with select also we use the we condition so we condition or wear Clause is oftenly used whenever we want to apply any condition to our data so here is a query on how we can use the wear Clause so consider that I'm am trying to fit some of the columns from a given table with a particular condition so what I'll do I'll provide the select command then I'll provide all the columns from which I'm fetching the data then I'll provide from I'll provide the table name from which I'm fetching the data and then I'll provide the where and then I'll provide the condition that what is the condition on basis of which I want all these columns to be filtered so here is an example so here I I am kind of fetching or filtering out all the data of a employee whose age is greater than 20 so what I'll do I'll just do a select star which will make sure that all the data is selected so basically till here I am having all the data which is present in my table from table employees so this is the table employee now here there is a condition where age is greater than 20 consider there is a age column in this particular table employee and in this age column we have ages such as 18 20 25 so now what will happen here whenever I'll give where age is greater than 20 it will go record by record and see here is the age greater than 18 no so discard this value it won't be shown in the final result now here is the age greater than 20 it is 20 but not greater than 20 so this will also be discarded here is the age greater than 20 yes so it will be shown in the final result so in this way we use the wear Clause let's see from an example as well so this is my my school workbench I have already created a table employee and I have already feeded some data in that particular employee table now here I'll be using this we condition to filter out all the employees whose age is greater than 25 so what I'll do I'll just give select star from and then I'll give the table name that is employee and then I'll provide the condition where age is greater than 20 25 so firstly I'll see that what all data is present in my current table so I'll just hit the select star from employee and after hitting I can see that all the data which is present in my table I have actually after the next set of videos I have feeded all the data again because we are seeing about the SQL queries and we need much more data to perform the queries so now I'll just execute this query and here you can see that there are only two people who are having age greater than 25 and I can see all the details of that particular person whose AG is greater than 25 so basically wear Clause is helping me to get the filter data like on the basis of condition I can get a filter data which would be really helpful for me to execute some of the complex queries so if you remember in the very start of the lectures we discussed about types of SQL commands so there we learned about five types of SQL command the very first one was dql the second one was DML the third one was ddl the fourth one was DCL and the fifth one was TCL now what is dql so dql basically stands for data query language command so whenever we want to make any query into our data or whenever we want to F the details from our database we use this dql command now the second one was DML command that is data manipulation language command now data manipulation language command is basically used whenever we want to manipulate some data like whenever we want to insert some data whenever we want to update some data whenever we want to delete some data basically doing manipulations on the data the third command was the ddl command that is data definition language command now data definition language command mostly deals with the definition or the schema of the data basically like creating the table creating the database uh doing some modification in the database doing some modification in the table so whenever we are dealing with the schema or the definition of the table we use this ddl command now the fourth one is DCL command that is basically data control language command now in this data control language command we set some controls on our database so in that case DCL command is used the fifth one is TCL command that is basically transaction control command so whenever we are doing some transaction and we need some control on that transaction we use this TCL command now in the dql command we have already learned about the select command in the DML command we have already learned about the insert update and delete command in the ddl command we have already learned about the create and drop command so in this particular video we would be learning about the alter command and then we would be learning about the trunk gate and the rename command now what is Alter command so alter is a ddl command that is used to modify or change existing database objects such as table indexes or constraints basically doing some modification in the schema so whenever we want to do any kind of modification into our database object into our definition or into our schema we use the alter command so consider that right now I am having a employee table in my employee database now in this particular employee table I I am having three columns but there comes a requirement where I need to add one more column to this employee database so this particular addition of column is done using the alter command consider that there is one more requirement which comes that you have to change the column name from employee ID to ID so this particular change is also done using the alter command so whenever we want to do any kind of modification or changes in our database table schemas we use this alter command so let's see all the things that alter command can help us do so mostly it is used to modify the schema so whenever we want to do some modification in the columns like addition of new column deletion of column modification of column and much more we use the alter command so let's see how the alter command is used the queries and then we will go to the MySQL workbench and execute all the queries so the very first use case is adding a column as I told that alter command basically help us in doing any modification in the schema so what is the schema so whenever we provide all the column names or the characteristics of our table we call this a schema so whenever we want to add a column basically doing some modification in the schema we use the alter command so the query for adding a column is Alter table then we provide the table name and then we provide this add and then we provide the column name which column we are adding then the data type of that particular column and if we have any constraint or not we provide this so whenever we used to create the table we used to provide all these values like the column name data type and constraint in the same way whenever we are adding a column we provide all the properties like column name data type and constraint and we provide this alter command followed by the table and then we provide the table name in which we want to alter the data so let's say from the my workbench how we can add a column in our particular table so here you can see that we already have a database with the name X1 Z and in that particular XY Z we have a table called as employee now in this particular employee table we would be adding one more field that is employee date of birth which is not existing as of now so what we will do is we will give this alter and then we will give the table provided by the table name that is employee now we'll add a column do so we'll give add and then we will give the column name that is do then we will give the data type that is Vare and let's give the character limit as 20 and then we will provide the con straint so if we execute the query just now what it will do that it will create a do column name but all the values at that do column name will be null so if you want any default value to be there you can give a default constraint so we can give default and here we can give the value as NP that is not present so if we run this particular query what it will do it will first go it will alter the table employee it will add a doob column and then it will give the default value as NP wherever null is present so let's just execute this query so once you execute this query you can see a success and when we will try to see all the details of this particular table you can see that a do is created with NP NP NP NP NP because all the values for now is null so uh it has taken the default value that is NP now let's see the Second Use case of alter command that is drop a column so whenever we want to drop or delete a column we use this alter command so here you can see we have given the query as alter and then we provide the table followed by the table name and then we provide the drop command then we give the column which we want to drop and then we provide the column name so let's go to my SQL workbench let's just execute this query so for now we have created this doob column let's just delete only this particular column so first I'll give alter and then I'll provide table and then I'll give the table name that is employee and then I will provide the drop command and then I will provide column saying that I want to drop the column and then I will provide the column name that is d o now let's just execute this query so you can see the query is successful let's see that that if it has been deleted from our particular table or not so we'll just execute this query and here you can see that we can't see any doob field so this particular column do is deleted whenever we use this alter command followed by the drop command now the third use case is modify the data type of an existing column so whenever we want to do some modification in the data type of a existing column which is present we use this alter command so for that we use this modify Clause so the modify Clause is oftenly used with an alter table statement in SQL it allow us to change the definition of the properties of an existing column in a table so whenever we want to change the definition or the properties of a column in table we use this alter command along with the modified Clause so here you can see the query so the query is Alter table then we give the table name like which table we want to do modification and then we provide this modify command and then we provide the column name like in which column we want to modify and then we provide the new data type like which new data type we want to set for that particular column so the our Command modifies the column name to a new data type so let's go to my MySQL bug bench and let's see how it works so for now let's just modify the data type for age let's make age as barcat so what we will do we will give alter and then we will provide table and then we will provide the table name that is employee and then we will provide this modify and then we will provide the column name that is age and then the new data type so the new data type for age is Vare three so let's just execute this query so you can see that we have got a success so for now the data type for this particular age column has been changed to Vare now the fourth use case is change the name of an existing column so whenever we want to change the name of an existing column like in earlier use case we saw that how we can change the data type of a column in this use case we can not that how we can change the name of that particular column so the change command is oftenly used with an alter table statement in SQL it help us to change the name or data type of a column within a table so whenever we want to change the name or change the data type of a column in a table we use this change along with the alter command so the query is Alter table followed by the table name and then we provide this change then we provide the old column name and then we provide the new column name like from old column name to the new column name like what is the new column name you want to give and then if there is any new data type for that particular column we provide in this way so the above command changes the old column name to a new column name and also its data type so the old column name is changed to new column name and the new column name has a new data type if the new column name doesn't have a new data type you can give the data type of that particular old column name only so let's go to myql workbench and see so let's just modify this age column name to employee age so let's see how we can do so we'll give this command alter table followed by the table name that is employee and then we will provide this change and then we will provide the old column name that is H and then we will provide the new column name that is employee age and if there is any new data type else we need to provide the data type of this age column only so that is Vare three and let's just execute this query so once you execute this query you can see a success so let's see if we are able to see this in our table or not so let's run this select star from employee and here you can see that the age column name has now been modified to employee age that is EMP age so in this way using the alter command we can change the column name as well so this was one of the way in which we can rename our column there is one more way in which we can rename either our table our column our constraints and much more that is using the rename command so the rename command is used to change the name of an existing database object such as a table so whenever we want to rename the table name column so whenever we want to rename the column name index or constraint whenever we want to rename the constraint name so the query for the same is Alter table then the table name and then we provide this rename and then we provide like which thing we want to rename like table column constraint anything and then we provide the old column name like here we are renaming the column so we will provide the old column name and then we provide this two like basically you want to rename the old column name to the new column name so we provide two and then we provide the new column name the above command renames the old column name to the new column name so let's see from the MySQL workbench so what we will do now we will revert this employee H to H so what we will do is we will give this alter table followed by the table name that is employee and then we provide the rename and then we provide what we want to rename that is our column so we will provide column and then we provide the old column name so that is EMP H and then we provide this two and then we provide the new column name so we will give this h so let's just execute this query so you can see that we have go a success and when we execute this command select start from employee to see all the data present in our table so you can see that now this EMP has now been renamed to H so in this way we can rename our column name table name or constraints so what is this rename command rename command is used to change the name of an existing database object such as a table column index or constraint so whenever we want to do any kind of changes in any of the database object object like table column index or constraint we use this rename command so as the name suggest rename so whenever we want to rename or whenever we want to give a new name to a table a column or a constraint in SQL we use this rename command rename command comes under the ddl command that is data definition language command so the data definition language command basically deals with the data definition the data Properties or we can say the database schema so whenever we are doing any changes in the database schema database definition or database properties so there are many use cases of the rename command like renaming a table renaming a column or renaming a database so let's see about all these one by one so the very first query is table renaming so whenever we want to rename a table what is the query to do so so first we will give this rename command and then we will provide what we want to rename basically we want to rename the table so we will give table and then we will provide the old table name and then we will provide this two and then we will provide the new table name basically this query means can rename the table from the old table name to the new table name so the above command renames the old table name to the new table name so let's see from the MySQL workbench that how it is happening so let's rename this employee table to the employees table so what we will do is we will give this rename and then we will provide what we want to rename so we will provide this table and then we will provide the old table name that is employee and then we will provide this two and then we will provide the new table name that is employees and we will just execute this query so you can see that we are getting a success but here we are still seeing this employee so we just need to do a refresh all in the schema tab so once you do a refresh all you can see that in this particular XYZ database we have a table with the name employees so if you try to uh see all the details of the employee table you won't be able to see because right now we have renamed the employee table to the employees table so whenever we want to see the detail of employee table if you run this particular query that is Select star from employee you will see a error because right now the employee table is not existing in this XYZ database because we have renamed the employee table to employees and whenever you give the new name that is employees and if you run this query here you can see that you can find all the details so so in this way we can rename any of the table now the Second Use case is when we want to rename a column so to rename a column since it comes under the schema so what is schema schema is basically all the properties or the attributes or the characteristics of table which is displayed by the column so whenever you want to do any kind of changes in the schema we use this alter command so we give this alter and then we provide the table and then we provide the table name in which we want to alter the data and then we provide this rename command then we provide what we want to rename that is column and then we provide this old column name and then we provide this two and then we provide this new column name like we want to go ahead we want to alter some data in that particular employee table and we want to rename a particular column to a new column name so let's see from the MySQL workbench so let's just rename this name column to employee name that is EMP name so we will give alter and then we will provide table and then we will provide the table name so for now we have modified the table from employee to employees so we will give employees and then we will provide reame and then we will provide what we are renaming that is column and then we will provide the older name that is name and then we will provide two and then we will provide the new name of the column that is EMP name just execute this query and here you can see that now the name has been modified to EMP name and here we are getting a success so whenever you will try to fetch all the details or see all the details of the table so here you can see now the name has been renamed to EMP name so in this way we can rename any of the column in our particular table now the third use case is whenever we want to rename our database so we give this rename then we give database and then we provide the old database name then we provide this to and then we provide this new database name now in this particular renaming of database there are many security risk involved because we can't go ahead and rename any of the database so there are some security requests and protocols which needs to be accepted before renaming any of the database from the old database to the new database so it mostly depends on the server to server that if the server allows renaming of database or not so what is trunade command this command is used to remove all the rowes from the given table leaving the table empty but preserving it structure so it basically means that whenever we have a table and there are some data which is feeded into our table a b c d e f g and whenever we give this drop table name command so drop table name command what it does it basically deletes the table from the database then we give this delete command so delete command basically deletes the data on a given condition then this truncate command comes into picture so what truncate command does it truncate command clears all the data which is present in our table but it preserves the structure of the table basically you can say that table is there that is a empty table all the data inside that particular table is cleared using this trunade command so let's see from the myql workbench how this trunade table works so here we already have a XYZ database we will create one more table in this particular XYZ database we will try to truncate or delete all the data which is present in our table and then we will see that if our table is preserved or not or if the structure of table is preserved or not so we will just create a table with the name salary details and in this particular table we will provide some columns so let's provide the First Column as salary int and second we will provide increment and let's just give this as a int so let's just execute this query so once you execute this query you can see a success and when we will go here we'll do a refresh all here you can see that two tables are created first one is employee table and the second one is the salary details which is having salary and increment let's just feed some data into this particular table so we will give insert into and then we will provide the table name that is salary details and then we will provide the manner in which we want to feed the data so first we will give salary and second we will give the increment and let's just provide the values and here we will start giving the values so let's just provide the first value as 1,200 and the increment is 6% and the next salary is 1,500 and the increment is 4% let's just execute this query so here you can see that we have got a success so let's see if all those details are feeded in our table or not so we'll give select star and then we will give from and then we will provide the table name that is salary details and let's just execute this query so here you can see that all the data which we give is feeded here so now let's see that how this truncate command is working so what we will do we will just truncate this particular table so whenever we truncate this particular table it says that all the data which is present inside the table would be deleted but the structure will remain preserved so we'll give truncate table and then we will give the table name that is salary details and let's just execute this query so here you can see that I've got a success if I go here and I do a refresh all I can still see the salary details table is here it means the data is only deleted the table is still there so let's see if all the data is deleted or not so here you can see that there is no data which is present in salary and increment so so in this way truncate table command works it basically deletes all the data which is present in our table but it preserves the structure or it preserves the table only the data is deleted so firstly let's start with the truncate command so truncate command is basically used to remove all the rows from a table what does this means so consider that there is a table employee and in this employee table we have some rows we have some columns so what truncate command will do truncate command will clear all the rows or all the datas which is present in our table which will make the table empty but will preserve the structure of the table so there would be a table that particular table would be empty there would be no rows in that particular table all the data would be deleted so it basically removes all the rows from the table the command for the trate is truncate table and then we provide the table name now the next is the delete command so the delete command is basically used to remove some specific rows from a table based on a given condition so whenever we want to delete a specific row on a given condition like delete or remove all the rows where the age is greater than 20 so whenever we are providing some specific condition it executes the delete operation and it deletes the entire row so the command for the same is delete from table name and then we provide where condition so it basically deletes some rows on the basis of condition but the trunet deletes the entire rows like all the rows which are present in our table the third one is drop command so the drop command is used to completely remove the table so it not only deletes the data it also deletes the entire table so it removes the existence of table if in a database there is a table and if we use the drop command for that particular table that table would be deleted there would be no existence of that particular table so the command for the same is drop table and then we give the table so if this is a table employee in this particular table if we are using the truncate command it will go ahead and delete all the particular data which is present in this particular table and it will delete all the rows which is there in the table but it will preserve the structure of the table basically the schema of the table would be preserved if we are using the delete command it sees that if this particular rows specify the condition if this particular row specify the condition it delete this particular row but if this row doesn't specify the condition it leaves this particular row and if this specifies the condition it deletes this row so it deletes the rows based on a specified condition the drop command entirely deletes the table so it doesn't only deletes the data which is present in the table it entirely deletes the table so this was the basic difference between trunet delete and drop command in SQL so what does this distinct keyword means distinct basically means unique so whenever we want any unique values we use this distinct keyword so distinct keyword is used with select statement to retrieve unique values from a column or a combination of columns so whenever we want to retrieve some unique values from a given column or a combination of columns we use this distinct keyword now let's see from an example consider that there is a table of employee which is having three columns first one is ID second one is name and the third one is City so let's just feed some data so ID is 1 name is Ram city is Pune ID is 2 name is Ram city is Mumbai ID is three name is Radha and the city is again Pune so we have made a table we have entered the detail of three employees and now we want to see that how this distinct keyword is working so consider that right now I want the distinct values from from the city column so what it will do it will go to the city column it will start fetching the values so the very first value is Pune now it has nothing to compare with because it is the very first value so it will print Pune in the output now Mumbai is not existing in row one so Mumbai is also unique value because it is not existing in the upper values so we will print Mumbai also in the output now coming to the third row that is Pune so Pune is already existing in row one not in row two but in row one so this value would be discarded so we would be only seeing Pune and Mumbai in the output so it gives us the distinct value for the city colum now consider that we want a distinct value in a combination of columns consider that we want to see distinct values in name and City so what we will do in the output first for Ram and Pune there are no any values to compare so it will give RAM and Pune in the output now coming to the second row it will see that is there any combination of RAM and Mumbai together present in any of the above rows so it can find the name as RAM but the city is Pune so there is no combination with the name RAM and Mumbai so it will print RAM and Mumbai now and now coming to the third column so it will search for the name as Radha and Citys Pune so it will see in row two and Row one is there any name of Radha existing along with the city Pune so there is no combination of Radha and Pune so it will print Radha and Pune as well so in this way we can either get the distinct values from the combination of column or from a single column so to get the value from a single column we use this query that is Select and then we provide this distinct keyword then we provide from which column we want the distinct value and then we give from and then we provide from which table we want this distinct value so select distinct then the column and from table name when we want to have a combination of of distinct values so we give this select distinct and then we provide all the columns from which we want the distinct value or the combination of columns and then we provide from and then from which table we want the distinct values so let's see from the MySQL workbench that how this distinct keyword is working so here let's just create a database with the name company let's just create a table with the name employee insert some details into that particular employee table and let's just use this distinct keyword so to save the time I have already written the query so we will just execute this create database followed by database name which will create a database of company in my schemas tab so here you can see a database with the name compan is created now I will execute this use company which will tell the server that all the operation now needs to be performed in this particular database now I will create a table employee in this particular company database so here you can see a success once I do a refresh all here I can see in table our employee table is already created now let's just fill some details into this employee table so we will execute this insert into command and here all the details have been feeded now let's see that if all the details are feeded correctly or not so here you can see that ID name age Department City salary all the details have been feeded for five of the employees now let's use the distinct command so I want to see the distinct value of Department in this particular employee table so I'll give the query as select distinct then I will give the column name that is department and then I will give from and then I will provide the table name that is employee so it will give me the distinct value of this particular department so let me just execute this this query so once I execute this query you can see that I'm getting all the unique Department names that is it HR marketing and finance so in this way we can see the distinct value from this particular column that is Department let's see some distinct value from a combination of columns so I want to see a distinct value select distinct and the column from which I want to see the distinct value together is age and department so I'll give department and then I'll give age and then I will provide from and then I'll give the table name that is employee so let's just execute this query so once you execute this query you can see that it HR it marketing and finance and with the it here is the age is 25 with the it here the age is 27 so you can see that in the department we can see that it is repeated twice but when we see the combination of department and age that is it and 25 it and 27 there are no any other combination existing with the same so in this way we get the combination of distinct value for two columns so what is operators in SQL so whenever we want to perform any operations on the data we use operators so consider that there is a table in that particular table there are many sets of data so whenever we want to perform any operation on that particular set of data we use the operators now operators are of various type let's see about each and every types of operator so the very first operator is arithmetic operator now in this arithmetic operator we have addition subtraction multiplication division and modulus now let's see an example of arithmetic operator consider that my table is not updated from the last one year and in this particular year there are some people who are about to retire so I'm writing a query in which I'm checking the people whose age + one is equal to 60 so here I have written select star from employee where H + 1 equals to 60 so it will give me all the details of a person whose age is equal to 60 so in this way we can use the arithmetic operator we can also use the subtraction we can also use the multiplication we can also use the division now here comes the modulus now what is modulus modulus basically gives us the result of the remainder so whenever we are dividing any two numbers like whenever we are dividing 2 by 4 so we get remainder as zero so this is the modulus now the second operator is the comparison operator In the comparison operator we get this equal to not equal to greater than less than greater than or equal to or less than and equal to so let's see from an example I want to see the details of all the employees whose age is greater than 20 so I'll use the select star from employee where age greater than 20 so here I used the comparision operator and here I'm getting the details of all the person whose age is greater than 20 I can also use this age equal to 20 if I want the details of all the person whose age is equal to 20 or I can also use age greater than or equal to 20 which will also include the 20-year-old employee now the third operator is The Logical operator now in The Logical operator we have three operators so the very first is and the second is or and the third is not now and operator basically combines two condition and return true if both of the condition are true so consider that we have given two conditions that age is is greater than 20 and city is equal to Pune so it will give the output only when it finds the age which is greater than 20 and the city which is equal to Pune for a particular employee so here you can see an example select all from employee where city is equal to Pune and H is greater than 80 so consider that there is a table having H and city now in ag we have some values as 18 20 25 29 and in city we have Pune Mumbai Pune and Pune so what it will do it will match for both the conditions so first it will see where the age is greater than 80 and city is pun so for the very first row is the age greater than 18 no so if one condition is discarded it won't see for the other condition now for the second row is age greater than 18 yes is City equal to Pune no so this one is also discarded now for the third row is 8 greater than 18 yes is City equal to Pune yes so it will show 25 Pune in output now for the fourth row is AG greater than 18 yes is City equal to Pune yes so it will show all the details of this particular employee as well so it will show all the details of this employee and this employee now the second operator is or operator so it combine two condition and return true if either is true so if age is greater than 80 but city is not equal to Pune it will return all the values if city is equal to Pune and age is not greater than 18 it will also return that values so consider in the same table so for the very first row is age greater than 18 no is c equal to Pune yes so it will show the details of this particular employee now is age greater than 18 yes so it will not check for for the second condition so it will show the details of this particular employee now is age greater than 18 yes so it will show the details of this particular employee as well is age greater than 18 yes so it will not see for the third value because the first value is getting corrected so age is greater than 18 the first condition is evaluating as true so it doesn't needs to see the second condition now for the not it reverses the result of a condition return true if condition is false so consider a condition where I want only the details of a person who are not in it or HR department the persons who are in other department I want only the details of that particular person so we can use the not operator there so here you can see a query select star which means all from and then we provide the table name that is employee and then we provide it here where and then we provide Department here we provide not and here we provide a in operator about which we would be discussing in further slide and here we have G given all the department in which we don't want the particular employee to be so if a employee is not in it or HR department give me all the details of that particular employee so it will give me all the details of that particular employee whose department is not in it or HR now what is the in operator so in operator basically checks a value matches a list of value or not so in this in operator we provide some list of values this list of values can either be in this particular Department column or can not be in this particular Department column so basically it checks that if in this particular Department column if these values are existing or not if these values are existing return the record of that particular employee if these values are not existing then don't return the uh record of that particular employee so it basically select star from employee where Department in it or HR so it returns all the employees details whose Department are in it or HR so let's see about all these operators from myol workbench so here we have a company database in that company database we have an employee table so let's see for The Logical operators so let's see for the and operator so for the and operator we will give select star from and then we provide the table name that is employee and we provide the condition where AG is greater than 20 and department is equal to it so give me the details of all the employees whose age is also greater than 20 as well as the department is ID so let's execute this query so once we execute this query we can see that we are getting the details of all the employees whose department is it and the age is also greater than 20 so in this way we can fetch all the details of a particular employee in which the age is greater than 20 and the department is also it now let's just do some manipulation in the same query so we will see for the or operator so here we will see the query for the or operator so we will be using the same query and in the place of and we will be using or so give me the details of all the employees whose age is greater than 20 or the department is it so it will search for all the employees whose age is greater than 20 either the department is it so let's just run this query so once we run this query we can see that we are seeing much more details this time like we are seeing the details of all the five emplo employes because for all the five employees the age is greater than 18 so it's not seeing for the second criteria that that is Department equal to it on the basis of age is greater than 18 it is giving me all the results now let's see for the not operator so for the not operator we will give select star from employee and then I want the details of all the employee where Department not in either it or HR so give me the detail of all the employees where department is not either it or HR so let's just execute this query so here you can see that I'm getting the details of all the employees whose department is neither it or HR we are getting the department for marketing and finance so it will basically give me the details of all the employees whose Department doesn't lies in this particular list so in operator basically checks that if in this particular list are there any Department which is existing here or not so if we are using in operator let's see for the in operator how it works so in operator so for the in operator what we do is we give this command select star from employee and then we want the details of all the employees whose department is it or HR so whose department is having value use either it or HR now you'll say that why are we even using this in operator we can use this or operator we can provide department is equal to it or department is equal to HR or department is equal to marketing yes we can provide it here but here it's very easy to provide because we can provide list of values we can also provide those values which are not present even in this department colum so uh it makes us very easy to compare between the list of items and the item which is present in our column so let's just execute this query so here you can see that we are getting the employee details for all the employees whose department is either it or HR or basically the department which lies in this particular list so whenever we give not in front of in it basically makes sure that give me details of all the employees whose department is not in it or HR so it basically reverses the result which we get in using an operator so now the next operator is is null is not null operator so basically is null operator checks for the null values is not null operator checks for the not null values so whenever we want to check for any null or not null values we can use this is null and is not null operator so here you can see a query where we are checking that uh give me the details of all the employe where department is not null so give me the details of all the employees where there is no null present in the department column so it will give me the details of all the employees so let's see for the not null operator or null operators so so here we will see about the not null is null and not null operators so give me the details of all the employes where department is not n so let's just execute this query and here you can see that we are getting the list of all the employees where department is not null for now there are no null values which is Pres in department but you can understand it in this way that if there are any null values for any particular record or any particular employee it will not show that particular result now let's see the next operator that is the bitwise operator so there are two operators in bitwise first one is and and second one is off so in bitwise operator what it does it it basically converts the integer value into bits and then perform any of the operation either and or on in this particular bits so uh for now bitwise operators is not something which is very concerning to us so for now we are skipping the query for this because it's not very used but you can understand that in bitwise operator we convert the integer into bits and then we perform any of the operation like and or or on the bits itself now the next operator is the like and the Wild Card operator now what is this like and wild card operator like operator is used to search for a specified pattern in a column so whenever we want to search for a specified column like give me the details of all the employees who are having double A in their name give me the detail of all the employees whose name start with it so whenever we are trying to search for a pattern we use this like or Wild Card operator it uses Wild Card operators for matching patterns so this like operator basically use the Wild Card operators for matching patterns now the very first Wild Card operator is the percent sign which basically matches for any sequence of zero or more characters the query is given as select star from employee where name like so here you can see the like operator is given and here we are provided a and percent so what does this mean so it basically means give me the detail of all the employees whose name starts with a and can have many more characters after their name so consider that a person is having a name as AB a person is having a name as Amar a person is having a name as aush so all these uh employee names we can see because these all employee names start with a and have zero or more set of characters after that so basically like search for a specified pattern and Returns the value whenever it matches any of the pattern which is given here so if I give R and percent so it will give me the details of all the employees whose name start with r and can have more characters in their name either it can be zero either it can be one either it can be two or either it can be many so reti will also qualify with for this Ram will also qualify for this Rahul will also qualify for this because the number of characters after R does not matters because it is given as percent so percent basically replaces all the characters and it will find that all the names start with r so these qualify for this particular query now for the second wild card we have underscore so it matches for any single character so here percentage matches for any set of characters but if we are giving underscore it means that there should be only a single character so here you can see a query where I'm getting all the details of employee where name like and we have given a single character and a so give me the details of all the employees whose second character in the name is having a so first character can be R can be a can be B can be C anything but the second character in the name should always be a so it basically matches for a single character now let's see from a myl workbench and understand that how it's working so let's use for the like operator so we will use the like operator when we are using the wild card as percent let's fetch all the details of employee whose name starts with a so we'll give select star from employee and then we will give where then we will provide name and then we will provide this like operator and inside the inverted comma we will provide the character for which we are searching and then if there can be any number of characters or not so we'll just execute this query and once we execute this we can see that we are getting the details of all the employees whose name is starting with a it doesn't matter that how long the name is it doesn't matter that how many characters are there after a but they are having the name as a in the very start now let's see for the like operator using the underscore wild card so we will give like operator when using a underscore wild card so let's get all the details of a person who is having the second letter or second character as a in their name so select star from employee and then we will give where and then we'll provide name and then we will give the like operator and here we will leave the first character first character can be anything and then we will give the second character as a and then we will give this percent sign that after the second character there can be many characters so we will just execute this query so once you execute this query you can see that we are G getting the details of two employees Rahul and Raj who are having a as the second character in their name it doesn't matter what is the first character it doesn't matter that how many more characters are there after a we are getting the details of all the employees who are having a as the second character enter in their name now the next operator is the between operator so between operator basically checks if the value is within a range of values so consider that we have given a range of values if a values lie between this range or not so here you can see that we are trying to fetch all the details of a person whose salary lies between 1200 or500 so select all details from employee where the salary lies between 1 12200 and 1500 so let's see from the MySQL workbench so we will see for the between operator so let's fetch the details of all the employees whose salary lies between 1 12200 to 1500 employee where salary between 12200 and 1,500 so we'll just execute this query so here you can see that we are getting the details of two employees whose salary is500 so B basically this between operator is an inclusive operator basically it means that it will search for an employee who is having 12200 salary as well and it will search for an employee who is having 15500 salary as well and then uh any salary which lies in the range so it includes this also and this also so what are clauses in SQL Clause basically means condition so Clauses are like tools or condition that help us to make queries more specific or decide what data we want to fetch so whenever we want to fetch some data which is specific to some of the condition or specific to some of the Clause we use the Clauses in SQL so here we have mentioned all the type of clause which are there in SQL so the very first one is where clause which we know that which is used to filter out data now the second Clause is the group by Clause the third Clause is the having Clause the fourth Clause is the order by clause and the fifth Clause is the limit clause for the group by and having Clause we will learn about this after agregate function because this works on a aggregated set of data but for where order by and limit we would be learning in this particular video only now the query for using a clause is we give select and then we provide if we want to give any kind of condition on a given row then we provide from then we provide the table name and then we provide the clause and then we provide the condition so whatever is the clause and whatever is the condition perform all these on these uh particular columns now the very first Clause is the we Clause now we Clause is basically used to filter the row based on the specified condition so the query for the same is Select column from table and where condition so let's uh assume an example where I want to see or Fitch all the details of a person whose age is greater than 20 so we are filtering out all the employees whose age is greater than 20 so we will give select start that is all from employee where age greater than 20 so it will give me the details of all the employee whose age is greater than 20 from a table employee where there could be multiple employees with the age 25 26 18 17 and much more now the second Clause is the limit Clause so the limit clause in SQL is used to restrict the number of rows returned by a query so consider that I'm am writing a query for giving me all the details of a person whose age is greater than 20 but I want only three of the employees whose age is greater than 20 or let's just understand in this way Ed that there is a school now in that particular school there are five students who have scored above 90 but I want the details of only top three people who have scored above 90 so what I'll do I'll just use this limit clause which will put a limit to the result which we have got so this query retrieves the first n rows from the table so whenever we provide a limit n it will just give me the N rows from the table consider we provide the limit for two rows so it will only return me the two rows or three rows then it will only give me the three rows so here n can be 1 2 3 anything according to your condition or according to your use case now the query for the same is Select column one column two or any of the column or if you want all the details you can use the star then from then table name and then here we provide limit and then we provide the number of rows like how many number of rows we want consider that we want to only see the details of two employees so what we can do is Select star from employee and we can provide limit and we can provide two so it will give me the details of only two employees from all the employees so let's see from the MySQL workbench so consider a condition where we want to only see the details of two employees so what we will do is we will give select star from employee and then we will give the Clause that is limit and then we will give the condition that is two so give me the details of only two employees so let me just run this query so here you can see that we have got the details of only two employees so in this way limit Clause works so here we can provide the value either 2 3 4 5 according to your use case basically limit sets the limit to The Returned results so consider that if I want to see the details of all the employee it will return me the details of five employees but in that particular five employees I want to put a condition that give me the details of only two employees so limit sets a limit on all the values which is returned now the next Clause is the order by Clause now the order by Clause is used to sort the results in either ascending or descending order so whenever we want our results to be sorted in either ascending or descending order consider I want to see the details of all the employee whose salary is highest from lowest so we can use this order by Clause Now by default it Returns the result in ascending order so if we haven't provided the order it will by default return the result in ascending order so this query retrieves the first end rows from the table now the query is Select and then we provide if there are any columns from which we want to see the data and then we provide from and then we provide the table name and then we provide this order by clause and then we provide the column and then we provide either ascending or descending so basically we provide the order by and we want the order by to be performed on this particular column and we want the results to be filtered in either ascending or descending order so here you can see an example select star which basically means all from the table name employee and then we we provide the Clause order by and then we provide the column in which we want the order by Clause to be executed that is salary and then we provide the manner or the fashion in which we want to see the result that is descending so it will basically give me all the employee details with the salary in the descending order so let's see from the myql workbench so here we will be seeing about the order by Clause so we will use this select star from employee we want to see the details of all the employee who is earning the salary from the highest to lowest so we will select start from employee which will give me the details of all the employees and then I will put a clause order by and then I'll provide from which column we are we want to order the details so we will give Sal salary and then we will provide that in which manner we want to see the salary that is in descending order so let's just execute this query so once I execute this query here you can see that we are seeing the salary in the descending order like the one who is earning the highest is at the very first and the one who is earning the lowest is at the very last if we don't give any manner like ascending or descending it will by default take the ascending so let's see without giving any order so here you can see that by default it is giving me the results in ascending order so this is all about the order by clause in SQL now let's do some practice question so the very first question is write a SQL query to fetch the details of employees having ID as one so we have to write a SQL query where we have to fetch the details of employee who is having ID as one so we will write select and then we will give all and then we will provide from and then we will provide the table name and then we will provide the wear clause and then we will provide ID and then we will provide a comparision operator and then we will provide one so give me the details of all the employees where ID is equal to one so here we are seeing the use of wear Clause now let's go to the next question so the next question is write a SQL query to fetch the details of all the employees who are having ID as one and city as Mumbai so give me the details of all the employees who is having ID as one and city as Mumbai so here we'll be using this query select star from employee where ID equal to 1 and because we are seeing that ID is also one and the city should also be Mumbai so both the condition should be true so ID equal to 1 n CT equal to Mumbai now the next question is write a SQL query to fetch the details of employees who are having salary greater than 12200 and the city as Mumbai so we want to fetch the details of all the employees who are having salary greater than 12200 and the city is Mumbai so what we will do is we'll give this query select star which basically means all from employee so it will fetch all the details of this employee table now on the all the details we have to perform some condition so where salary should be greater than 1200 and City should be equal to Mumbai so this is how we are writing this query for this particular practice question now the next practice question is write a SQL query to fetch the details of employees who are not from Mumbai so we want the details of all the employees who are not in Mumbai or not from Mumbai so we will give this select star from employee which will fetch me the details of all the employees then we will provide this wear condition and we will provide City not in so basically not in make sure that in this particular list whatever thing is given is not present in the city City column so if this particular data is not present here it will return me the details of that particular employee so City not in and here we provide Mumbai now the next practice question is write a SQL query to fetch the details of employees having the maximum salary so we have to write a query to fetch all the details of our employee who are having the maximum salary so we will give select star from employee so here we'll get the details of all the employees and then we will provide this order by clause which basically makes sure to give the results in a certain order and then we will provide which column we want to order that is the salary so we will give the salary column and here we want the maximum salary so we will provide the order as descending so in the descending order we'll get the maximum salary as the very first record now the next query is write a SQL query to fetch the detail of two employees who are having the maximum salary so here we have to break the problem is we have to fet the detail of only two employees who are having maximum salary so for the maximum salary we can use the order by Clause followed by the descending order on the column and for the two employees we can use the limit Clause so what we will do is we will write the query select star from employee and then we will try to fetch the maximum salary so we will give order by and then on which particular column you want to order that is salary and then in which manner you want to get the details of salary that is descending and then we will limit that particular result which we get from here to two employees so in this way we can get the details of two employees who are having the maximum salary so this was all about the practice question and Clauses in SQL we will learn about group by and having clause in next set of videos so what does this aggregate means aggregate basically means collated so all the functions or all the methods which is helping us to do some manipulations or do some calculations on a collated or collected set of data that is called as aggregated function so let's see the definition so aggregate function performs some operation on a set of rows you can say collection of rows and then returns a single value summarizing the data these are used with select statements to perform calculation now let's stand from an example consider that you have a employee table with you and now in this employee table you have some columns such as ID salary employee name now there are many employee data which are feeded inside the system for now consider that we have feeded three employee details employee E1 employee E2 and employee E3 now if we want any kind of manipulation or any kind of value from the given set of data or from the collated set of rows we uh use the aggregated function now what kind of value we would be Desiring so consider that I want to find that what is the maximum salary a person is getting from all the employees so we can use the max function which is present in agregate function if I want to know that what is the minimum salary our employee is getting uh in the company so we can use the minimum function what if I want to know the average salary company is giving to a employee so we can know the average salary by collating all the data which is present in the row and doing manipulation on all the salary which is present there in the same way we can know the uh total salary using the sum function also we can count how many employees are there using the count function so as you can see that this particular minimum function will first go to employee E1 it will see that what is the data present it will take the data consider the salary is 1200 now in the employee E2 it will go and see if the salary is less than 1200 if it's 1300 it will ignore this then it will go to E3 it will see if the salary is less than 1200 it's 11100 so now it will erase this 1200 and have 11100 in the output now it will go to the fourth column see if the salary is less than 1100 so it's 1,500 so it will ignore this so the final output we will get is 1100 so the minimum salary of a employee in this particular employee table or in a company is 1,100 in the same way it can calculate the maximum value when it wants to calculate the sum of entire salary it will just uh add the salaries of employee E1 E2 E3 E4 and it will get the total salary which the company is giving to the employees now there are many types of aggregated function as I told here min max average salary some so let's see about them so the first one is Count which basically help us to count all the rows which is present in our table the second one is sum which is basically used to sum all the numeric values which is present in our table or in our column the third one is average which gives us the average of a particular aggregate or collated set of rows the fourth one is minimum which gives us the minimum value in a collated set of rows the fifth one is maximum which gives us the maximum value in the coated set of rows and the sixth one is group concat which is basically used to concat two groups now let's see about each and every aggregated function one by one so the very first aggregated function is Count now what is count it counts the number of rows in a table or the number of non-m values in in a column so consider that in my table there are some columns and I want to count that how many people are there who are getting salary so the salary details for each and every employee is feeded consider it is a b and c here so it will count one 2 and three so it will result the value as three that three employees are there in the company who are getting a salary if there is a null value which is present here like employee has joined the company recently but it it hasn't been paid yet so for this it will ignore this value and it will only give the three values so it counts the number of rows in a table or the number of non values in a column so basically in a column if there are any non null values it counts the value and Returns the output so the query for the same is Select then we give the count and then we provide in which column we are providing this particular aggregate function and then we give from and then we provide the table name that is employee so this will tell us the number of employees in a company so we are uh giving a count on the name so basically it will count all the name of employees and it will tell me okay in your company there are X number of employees who are working so let's see from the MySQL workbench that how this count aggregate function is working so for now we will learn about the count function so now what count function will do is let's see that what all details are there in our employee table so we will just execute select start from employee to see all the details now here you can see that there is ID name age Department City and salary now I want to count the number of employees in my company so what I'll do is I'll give this command as select and then I'll provide the aggregate function that is count and then I'll provide that which particular column I want to count so I can get the count of employee using the ID name age Department City salary any of the columns but for now let's take the name column because name is something like all the employee would be having a name so let's calculate from the name column only so we'll give name select count name and then we will provide from and the table name from which we are trying to find the count employee and let's just execute this data so here you are seeing that we are getting the count as five so we have feeded the details for five of the employees and we are getting that in your company there are five employees who are existing now let's see the second agregate function that is sum so what is sum sum basically calculate the sum of all the values which is present in a numeric column so whenever there is a column which is having numeric values we can use the sum function consider salary so this adds up all the number which is present in the list so if in the list of all the rows which is present inside the column it adds up all the salary and gives us the desired salary or the total salary so here you can see we have provided a query where we are giving select and then we are providing the aggregate function and then we are providing the column on which we are taking the aggregate function that is salary and then we are providing from and then we are providing employee so this particular query will give me the total amount company is paying to its employee so it will tell me the total amount which the company is paying to its employee so that the company can make their budget so let's go to the MySQL workbench and see how the Su aggregate function is working so we will just do select and then we will give sum the aggregate function and on which particular column we want the sum so we will give salary and then we will give from and then we will give the table name that is employee so let's just execute this query so here you can see that we are getting the total sum of all the salaries which were present in the salary column so this works the same way on how we are trying to fetch the details from the table it's just that while fetching the details like while fetching any of the column we are providing an aggregate function to get a collated data or to get a collated result of all the rows which is present inside our column or all the records which is present in a single column now let's go ahead with the third aggregate function that is average now it computes the average of all the values in a numeric column again for average also we need a column to be numeric it can't hold any Vare or string values it needs to have a numeric value and whenever we want the average of all the numeric values we can use this average function now it finds the average or the middle number of the numbers in a list so consider that company wants to know that what is the average salary they are giving to the employees so they can use this average function which can tell you okay this is the average salary a company is giving to their employees or this is the average fees we are getting from the students you can take that example as well so here you can see the query where we are getting select and then we are giving the aggregate function that is average then we are providing the column on which we are doing this aggregate function that is salary and then we are giving from and then we are providing the table name that is employee now this query will tell the average amount company is paying to its employee so let's see the average function as well so we will see for the average function the average salary company is giving to its employees so we will give select average and then we will provide the column name that is salary so always make sure that these uh functions like salary sum it works only on the numeric columns so you can't use that in a column which is having Vare or string values so average salary and then we can give from and then we provide the table name that is employee so let's just execute this query so here you can see we are getting the average salary a company is paying to their employees so let's look at the fourth aggregate function that is minimum so minimum help us to find the smallest number in a list so whenever there is a list and we want to find the minimum value or the minimum salary uh company is giving to it employ we can use this minimum function in the same way we can also use a maximum function which tells us the maximum value in a particular column so this minimum function tell us the minimum value that is m n tell us the minimum value and MX that is maximum tell us the maximum value so here you can see the query we have given select and then we provide the aggregate function that is minimum and then the column on which we are providing this aggregate function that is salary and then we provide from and which table name that is employee so this will tell the minimum salary company is paying to its employee and in the maximum we do the same query it's just that minimum is replaced by maximum so we give select Max and then we provide the column name that is salary and then we provide from and then we provide the table name that is employee so this will tell the maximum salary company is paying to its employees so let's go to the mysl workbench and see how it's working so the next aggregate function is minimum so we will give the query as select minimum and then we will provide the column name that is salary and then we will provide from and then we will provide the table name that is employee so let's execute this query so once you execute you can see that you are getting the minimum salary as500 let's just verify 1,500 is the minimum or not so let's see all the details of this employee table so here you can see that the salar is500 2,000 2500 2400 and 1500 so500 is the minimum salary which is present in our employee table and in the same way we can find the maximum salary as well so we have to just replace minimum with maximum that is MX so we'll just replace minimum with maximum and we will just execute this query so once we execute we can see the maximum salary is 2500 let's just verify from our table details also that if the maximum salary is 2500 or not so if we run this query we can see that there is500 2,000 2500 2400 and 1500 so from here also we can verify that 2500 is the maximum salary which our employee is getting so while we were learning about Clauses in SQL I left these two Clauses Group by and having Clause so let's know that why I left both of that Clauses and let's see that how are they helping us so what is this group by Clause so whenever we want to group data we use the group by Clause so this Clause is used to group rows that have same values into together it helps to organize data into groups so that they can do calculations like finding totals averages for each group so in the last particular video of aggregated function we learned that if we want to perform any operation or any function on some cated set of data we use the aggregated function consider that there is a salary column in my employee table if I want to know the minimum salary among all the particular rows which are present in my table we can use the minimum function if I want to know the maximum maximum salary we can use the maximum function which will see in all the rows and give a single result on this collated set of rows now how this group by Clause help us so consider that for now we were finding the salary the minimum and maximum salary for all the employees but consider that there are some departments in the employee so one is the IT department one is the HR department one is the marketing department now what if I want to know the minimum salary in the IT department or the maximum salary people are getting in the HR department it we have two employees E1 and E2 in HR we have two emplo employes E3 and E4 in marketing we have three employees E5 E6 and E7 so earlier what it used to do in aggregate fun it used to see for all the employees E1 E2 E3 E4 E5 E6 E7 and used to provide us the minimum and the maximum salaries but now what will happen that it will see only in a group of data like only in the IT department there are two employees among the two employees give me the minimum salary or among the three employees in the marketing department give me the maximum salary so you can see that how we are working on a group of data so this can be achieved using the group by Clause now the query retrieves the first and rows from the table so let's see the query so the first is Select and then we provide the column name on basis of which we are grouping all the rows so basically here we are grouping the rows on the basis of department so we will provide department on like basically the column name on basis of which we are grouping all the things now then we will provide the aggregate function and then we will provide the column on which we are providing the aggregate function like I'm grouping all the fields based on department now in the department they are grouped into ITR and marketing and now in the department we are finding this minimum minimum or maximum using the salary so salary is basically the column on which we are using the aggregated function in which we are trying to get the collated data and then we are also grouping the uh all the values on basis of the department so basically we provide the aggregated function then we provide the column two that is salary and then we give from and then we provide table name and then we provide this group by clause and then we provide the column on basis of which we are grouping the elements that is column one so here you can see that an example is given here where I'm selecting department and then I'm giving the Agate function average and then I'm providing on which column I using the aggregate function that is salary and here you can see that I've given a as so basically what as does is it will calculate the average salary and it will create another column with the name average salary and it will show all the details which is present here and then we give from and then we provide employee and then we provide the group by clause and then we provide the column on basis of which we are grouping the elements this is how the group by Clause work if you are still not understanding that how the group by Clause work let's just understand it again so let me just clear all the data which is present here and we will then see that how this group by Clause is working so let's take an example consider that there is a table of employee now in this employee table we have department and salary for now I am only taking two columns just to make it a bit simpler and then here are the details of some of the employees so one of the employee is in IT department the next employee is also in IT department one is in HR one is in marketing let's take one more so that is also in HR and now the salaries are 11100 1 1200 1100 1500 1100 now what this particular query will do so what it will do it will select department now it will select the department column so it will select the salary column as well now what it will do it will Group by the department so what it will do it will make the group of departments so the very first group which will be present will be of it now it is having 1100 as salary and 1 12200 as salary for two of the employees then it will make a group of the HR department basically the similar value will be together so it it both are similar so that will be in one group now HR are we finding any HR so HR is also present here so we have two values for HR as well first is 1100 second one is also 1100 now the next one is marketing is there any group for marketing present no so there is only one employee in marketing that is500 so we have formed three groups it HR and marketing and we have G the respective salary of all these three groups now what it will do now it will perform this aggregate function which is average salary so what it will do it will find the average salary between these two employees and it will give a single result of the average salary for IT department then it will perform the aggregated function on these two groups and then it will provide the average salary for the HR department now it will do U like there is a single element so it won't do much of the thing so it will just provide the average salary of the marketing department which will be 1,500 only so in this way we can find the average salary per department so in this way we are trying to group the data and in this way we are trying to aggregate the data and perform some aggregated functions on the data so let's see from the MySQL workbench then it would be more clear from from there so let's go to the myl workbench so let's see that how Group by Clause is working so what I'll do is I'll give the command select and then I'll select Department because I want to group them on the basis of department and then I will give that what I want to do the aggregated function on so basically I want to do the aggregated function on salary I'll give this average salary and then I'll give from and then I'll provide the table name that is employee and then I'll provide the group by Law Group by and then I'll provide the column name on the basis of which we are grouping the element so we are providing as department now in the query if you remember I've provided this as and then I've provided a new name that is average salary so let's see that what it will do so I'll provide as and then I'll provide a average salary column like a new column name so let's just execute this query so here you can see that we are getting Department as it HR marketing finance and here you can see that a new column with the name average salaries it's having all the values of the average of it the average of HR department the average of marketing and the average of Finance so in this way this as function works so the next one is the having Clause so the having Clause is just like the wear Clause but the main difference is it works on aggregated data so we Clause can work on non-aggregated data but having Clause is something which only works on an aggregated data or collated set of data so it is used with the group by clause and it helps to filter groups based on a given condition so consider that if we want to give some condition during grouping of the elements we can use the having Clause earlier whenever we want to provide any condition we were using the we Clause but whenever we are providing any condition on a collated set of data or aggregated set of data we use the having Clause so here you can see the query so we give select and then we provide the column on basis of which we are grouping the data then we provide another column on basis of which if we want to group the data on basis of two columns so we provide both the columns and then we provide the aggregated function and then we provide the column three like the column on which we are aggregating the data and then we provide this from and then we provide the table name and then we provide this group by clause and then we provide like on which columns we are grouping so column one and column two and then we provide this having clause and here we provide the condition so whenever I want to provide any condition uh during Group by clause or in aggregated function we use this having Clause now here you can see that we have given an example where what we are doing is we are selecting the department and we are taking the average salary as salary so basically we are grouping all the Departments and we are taking the average salary from all the Departments so from here we give the table name that is employee here what we are doing is we are grouping all the rows which are present in our columns into a single coated groups like it is having one group HR is having one group Finance is having one group basically all the similar type of elements in one group and then here we are giving a having and average salary is greater than 1,500 so here we are providing a condition so what it will do it will first group the Departments so it will group the department into different departments like it HR and finance now for each and every Department it will find the aage salary average salary and average salary and at the last it will check that if the average salary is greater than 1500 or not if the average salary is greater than 1500 it will show this particular result in output if the average salary is not greater than 1500 it will not show the given result in output same goes with the HR department and same goes with the finance department so let's see from the my workbench that how this having Clause is working and how it is helping us to provide conditions so we will give having Clause so here what we are doing is we are cating all the given rows of the column Department into some single groups and in that particular groups we are trying to find the average salary after finding the average salary of each group we are checking that if the average salary is greater than 1500 or not so let's see how it works so we will give select and then we will give department and then we provide the aggregated function and then we provide the column name in which we want the aggregated function that is salary and then we provide this as average salary to show it in a different column then we provide from and then we provide employee and then we provide how we want to group the data so Group by and then we provide the column name that is department and then here we provide the Clause having Clause so having and then we provide the condition so here we have renamed the average salary as AJ s a l a r y so we will use this particular column name and we will just give average salary is greater than 1,500 and let's just execute this query so once you execute this query you can see that we are getting only the department of it HR and marketing with the average salary as 2, 2,000 and 2,400 so all the average salaries which are present in this particular column are greater than 1500 what if we we don't give this having clause and we see that what is the average salary per department so if you run this query so you can see that there is a finance department also which is having an average salary as500 but we are not able to see the finance department in this particular query because we have given a check that average salary or a condition that average salary should always be greater than 1500 what if I give it as greater than or equal to 1500 so let's see if we are able to see the finance department now or not so if I run this query here you can see that we are seeing the details of the finance department Also let's see all the Departments who is having average salary greater than 2,000 so we will be only seeing one result so let's see so here you can see that we are seeing only one Department that is marketing that is having average salary greater than 2,000 so this is how the group by and the having Clause work having Clause is mostly used with the aggregated function and it's just like the wear Clause we provide the condition in the having Clause Group by Clause is mostly used with the aggregated function whenever we want to collate all the rows into a particular group who are having the same values so consider in Department if there are five it Department we can group all the IT department into one single group like uh if in a school database there are many classes class one class 2 class 3 we can group class one into one group class two into one group class three into one group and then we can see that what is the average fees class one is giving what is the average free class 2 student are giving what is the average free class three student are giving now in the next set of video we would be seeing about some practice question which would be helping us to get oursel familiar with the group buy order buy having and limit Clauses so uh when I I was teaching about this having Clause many people had a doubt that why are we even knowing about this having Clause like what this having Clause is doing having Clause is basically helping us to filter out data based on a given condition so was the we Clause then what was the need of having Clause so what is the we Clause we Clause is a clause which is basically used to filter rows from the result based on a condition applied to a row before aggregation so whenever we want a filter data based on a given condition from a table we use the we Clause but we Clause is always used before aggregation now what is this aggregation so aggregation or you can say agregate functions are the functions which work on some collated or collected set of data and returns a single value based on some manipulations like if we want to find the maximum salary if we want to find the minimum salary among all the employees we can use the aggregate function so aggregate function mostly works on a collated or collected set of rules so whenever we want to work on some collected or colleted set of rows we use the aggregate function and here it is saying that wear Clause is a clause which should always be used before the aggregate functions it means that we should always be using it on a individual rows not some group of rows or collected rows what is having Clause so having Clause is a clause which is used to filter rows from the result based on a condition applied to a row after aggregation so whenever we have formed a group such as like there is a group of IT department people there is a group of HR department people there is a group of marketing department people now in this particular groups if we want to provide any condition to filter out some data we use the having Clause so wear Clause is mostly used before the aggregate functions and having Clause is mostly use with the aggregate function now we Clause is mostly used with the select update and delete SQL commands where whereas having Clause is mostly used with the group by clause and the aggregate function now what we do is we form some groups on that particular groups we perform some aggregate functions and this aggregate functions returns us a single value and on that particular value we perform any condition using the having Clause so having Clause is mostly used with the group by Clause along with aggregate functions now the query for the we Clause is Select and then we provide star which basically means all and then we provide from and then we provide the table name from which we are making the query and then we provide this where followed by the condition in having we most give select and then we provide the columns on which we are grouping the data then we provide the aggregate function and then the column on which we are performing the aggregate function then we give from and then we provide the table name on which we are performing the having clause and then we provide the group by and then the columns on which we are grouping the data that is column one and column two and then we provide this having and then we provide the condition so having Clause mostly works with the group by clause and the aggregate functions whereas we Clause mostly works with the select update delete commands we Clause is oftenly used whenever we want to filter out some data based on some condition before the gation happens whereas having Clause is mostly used to filter out data based on some given condition after the aggregation happens so this was the basic differences between where and having Clause so the very first practice question is write a query to find the total number of employees in each City so what we have to do is we have to find the total number of employees which are present in each City so let's just break the question and then we will see how the query works so first we have to find the total number of employees so to find the total number of employees here we can use the aggregate function so in the aggregate function we can use the count function which basically counts the number of employees or counts the number of rows which are present so this will help me to find the total number of employees now the second sub part is in each City so what I have to do is I have to find the total number of employee in each City so there could be multiple City like Mumbai Bangalore Hyderabad and much more now I have to find the total number of employees who are present in each City so there could be a possibility there are two or three employees who are living in the same city so what we will do is we will here use the group by Clause so basically this Clause will help me to group all the data which is present in Mumbai which is present in Bangalore which is present in Hyderabad and then in these group of employees we will count all the employees which are present in this particular cities so what we will do is we will give this select and then we will provide the column on basis of which we want to group the data that is City because here it is given in each city so we will give City and then we will provide the aggregate function count and then we have to provide the column name on which we want to count so we can either count on the basis of Name ID uh salary and much more things so for now we will use the name and then there is as and then there is a temporary column name or an alas name for this particular column so what it will do is this count name will provide me a result or a value and that particular value would be shown in this number of employee so it is kind of acting as an alas for a particular column name now then we will provide from and then we will provide the table name from which we want the specific results and then we will provide the group by clause and then we will provide the column name on basis of which we want to group the data so this will help me to find the count of employees and this will help me to group all the employees on a particular City so these both together will help me to find the count of employees who are in each City now let's see from the MySQL workbench that how this query is working so to understand all those query I've already created a company database inside that company database I've have already created an employee table and in this particular employee table we would be performing all the queries so let's just see what are all the details which are present in this employee table so we'll just execute this query and here you can see that I feeded the data of almost five employees with their name age Department City and salary now the very first practice question is we want to find the total number of employees in each City so for that we will give the query as select and then we'll provide the column name on basis of which we want to group the data that is City and then I'll provide the column name on which I want to perform the aggregate function basically count the total number of employees so I'll give name and then I'll provide an alas for this particular column name as number of employees and then I'll provide Group by and then I'll provide the table name so from employee and then I'll provide the group by clause which will help me to group the cities into some subgroups so I'll give Group by city so let's just execute this query so here you you can see that we have got the city and we have got the number of employees who are there in each City so for Mumbai there are two for Pune one for Surat 1 and for indor 1 so this particular query will help me to find the total number of employees who are present in each City now let's see the next practice question write a query to find the maximum salary of employees in each City in descending order so we have to find the maximum salary of employees in each City and then we have to order it in descending order so let's just break this particular question into some sub questions and then we will write the query so first what we have to do is we have to find the maximum salary of employee so to find the max maximum salary of employee we can use the aggregate function Max and here we can provide the column on basis of which we want to aggregate the data that is salary now the next set says that in each City we have to find the maximum salary of employee in each City so to get the group of cities we can use the group by Clause so here we'll use the group by clause on city which will help me to get all the subgroups of city or all the cities into some similar subgroup so let's see the query so here in the query we have provided select and then we have provided the column on basis of which we want to group the data data City and then we have provided an aggregate function Max on the column on which we want to get the aggregated data that is salary and then we have provided an alas for this column name as Max salary then we provide the from and then we provide the table name from which we want this particular data and then we provide this group by clause and then we provide the column name on which we are grouping the data dat a city and then we provide the order by Clause followed by the column name on which we want to order the data so I've missed it here so the column name would be Max salary because I have already created a Max salary column name which is having all the maximum salary from the particular group so we'll provide the column name as Max salary and then we will provide the manner in which we want our data that is descending so let's see from the MySQL workbench so here we want to find the maximum salary of employees in each City in descending order so what we will do is we'll give the query as select and then we'll provide the column name on basis of which we are grouping the data that is City and then I'll provide the aggregate function and then I'll provide the column on which we are aggregating the data that is salary and then I can provide an L for this that is as let's give it as Max salary and then I'll provide provide the table name that is from employee and then I'll provide the group by Clause so Group by and then I'll provide the column on which we are grouping the data dat a city and now we want to see all our result in descending order so we will be using this order by Clause so we will use order by and then we can use this particular column name because it has all the aggregated set of data for each city so we would be using Max salary and then we'll provide the manner in which I want to see my results so select then the column name on basis of which we are grouping the data then the aggregate function on the column name on which we want the aggregated data such as maximum salary and then we can provide an alas for that particular column then we'll provide the table name then we'll provide the group by Clause followed by the column name on basis of which we are grouping the data then we can use this order by Clause to get our particular result in descending order so here you can see that we are getting an error that the reason behind getting this error is in the earlier query we haven't ended the query so here we'll provide a semicolon and you can see the error is gone now now let's just execute this query so here you can see we are getting all the groups of city and here we are getting the maximum Sal in all the groups and the maximum salary is sorted in descending order so this is how we can group the data and get the result in some specific order so let's see the next query so the next query is write a query to display the department names alongside the total count of employees in each department sorting the results by the total number of employees in descending order so what we have to do is we have to display the department names so we have to display the department names which are present in our employee table so we'll use the group by Clause now alongside that we have to display the total number of employees in each department so we have to tell that if there are three Department it HR and marketing now in this particular Department how many employes are there so for that we can use the count aggregate function to get the count of all the employees who are present in each department and then we have to sort the result of total number of employees in descending order so we have to sort the result of this total number of employees in descending order so we can use the order by Clause so whatever result we get from this count aggregate function on some specific group of departments we have to order the result on basis of that so whatever is the result from this we have to order our results on basis of dat so we have to use the group by clause for the Department name then we have to use this count aggregate function to find the total number of employees and then we have to order our results based on the result we get from count for each particular department so very first we will provide the select command to make some query and then we will provide the column name on basis of which we want to group our data so basically it's Department names and then we'll provide the aggregate function and then we'll provide the column on basis of which we want to perform this aggregate function so here we want to find the total number of employees or total count of employees so we'll use the count aggregate function and then we'll provide a column name on which it will count all the total number of employees in each department and then we'll give an alas for this as total employees then we'll provide the table name that is employee and then we'll provide the group by Clause followed by the column name on basis of which we are grouping the data that is department and then we'll provide the order by clause and then we'll provide the particular column on which we want to order our data that is total number of employees and then we'll provide the manner in which we want to order our data that is descending order so let's see from the myl workbench we'll give the command as select and then we want to group Department into subgroups and then we will provide the aggregate function that is we want to count the total number of employees and then we'll provide the column name on basis of which we want to perform our aggregated function and then we'll provide an alas for this that is total employees and then we'll provide the table name on which we want to perform these operation that is employee and then we will provide the group by Clause followed by the column name on which we are grouping the data that is department and then we will provide the order by Clause followed by the column name on which we are ordering the data that is total number of employees so that is total EMP and then we will provide the manner in which we want our data that is descending so let's just execute this query so here you can see that we are getting all the department that is it HR marketing and finance and here we are getting the total employees in each department now here you can see that all the result has been sorted in descending order like it is having two employees so it is at the very first and then all other departments are having one one employees so they are sorted on basis of that let's see the next practice question write a query to list the Departments where average salary is greater than 12200 also display the department name and the average salary so we have to write a query to list all the Departments where average salary is greater than 1200 so firstly we have to list all the Departments so we'll be using the group by clause for the same and we'll be grouping the data on the basis of department so we have group the data we have list all the department then we have to find the average salary greater than 12200 so then we have to find the average salary for all the Departments so we can use this avj function from the aggregate function which will help me to find the average salary for each department so it it will give me the value of average salary for consider it HR marketing department now there is a condition that we have to find the details of employees who are having average salary greater than 12200 so from here we'll be getting a result and here we'll be using the having Clause as we are providing a condition to filter our data so we'll be using the having clause and with the having Clause we'll provide the average salary greater than 1200 that is result of average salary for each particular Department should be greater than 1500 so we have to display the department name as well as average salary so let's see the query so first we'll give the command to make a query and then we'll provide the column on which we are grouping the data that is department and then we'll provide the aggregate function and then we'll provide the column on which we want to aggregate our data that is salary so here you can see that we are uh doing some condition or performing some condition on the average salary so we have to find the average salary first and then we'll provide an alas followed by the column name for which we are providing an Alas and then we'll provide from and then the table name and then we'll provide the group by Clause followed by the column name on which we are grouping the data and then here we'll be using having Clause because having Clause is mostly used with the gated set of data so here we have already aggregated some set of data and here we want a condition that is average salary is greater than 12200 so we'll provide the having clause and then here we'll provide the average salary and here uh sorry it's by mistake return is 5,000 so the average salary should be greater than 12200 either here we can provide this avj salary or we can use the alas name that is average salary as well so in this way what it will do is it will group the department into some sub departments or subgroups that is it HR and marketing then it will find the average salary of all the employees which are present in it average salary and for HR and for marketing and when we have got the average salary for all the groups then we will perform the having Clause that is having and then we'll provide the condition that is average salary should be greater than 12200 sorry here also I have by mistakenly told that average salary should be greater than 1500 so it would be 1,200 so we have to find the list of departments where average salary is greater than 12200 so let's see from the myql workbench so we'll just write a query so we'll give select and then we will give the column name on basis of which we want to group the data that is department and then we'll provide the aggregate function so basically we want the average salary so we'll use average and then we'll provide salary and then we'll give an alas that is everage salary and then we will provide the table name so from employ and then we'll provide the group by Clause to group our departments so we'll provide Group by and then department so our department have been group now we want to provide some condition to the group data so we'll provide having and then we'll provide the column that is aage salary and then we'll provide the condition that is greater than 12200 so show me the department of all the employees who are having average salary is greater than 12200 so let's just execute this query so here you can see that you can see four departments it HR marketing and finance and here you can see the average salary that is greater than 1200 greater than 12200 greater than 1200 and greater than 1200 so this was all about the practice question in this particular video this practice questions are very important so try to practice this try to break the questions into sub question and try to make query from the sub question so here you can see that I have provided a table in which I have provided the rank in which we should be using all the particular commands and then we have provided the commands and then we have provided the use case for that particular command so it's not possible that you are providing a condition to any of the column or any of the set of rows before even telling the MySQL server that these are the columns on which I want to provide the condition so where can never happen before the select command so first command is the select command so select command is basically used to retrieve data from the database so the very first thing what we do is we first retrieve the data from the database then now the next is from command which help us to identify the table now in a particular database there could be multiple tables so I need to tell my database that from this particular database I want this particular table the third one is wear clause which help us to provide any condition or filter the rows based on some specific condition so we have retrieved the data from the database we have provided the table from which we are retrieving the data then we can provide the conditions on that particular data which we are retrieving then the fourth one is Group by clause which basically works on the aggregate function so if we want to perform any aggregate function we can use this group by Clause after wear why we are using this group by Clause after wear because we is mostly used before the aggregated function and having is mostly used after the aggregated function so using the group by Clause we can group the rows that have the same values based on some aggregate function and then we can use this having clause which help us to filter groups based on some condition so we Clause help us to filter rows based on some condition whereas having Clause help us to filter groups based on some condition and then at the sixth number we have the ordered by Clause so we have retrieved the data we have identified the table we have filtered some rows on the table we have grouped the rows we have filter some group on some basic condition and then we want to sort the result either in ascending or descending order so we can use the order by CL CL and at the very last is the limit we have retrieved the data we have filtered the rows then we have grouped the data then we have filtered the groups then we have sorted the result now I want to limit the number of rows which are result in our final result so this is the general order of SQL commands which we follow while making any of the queries in SQL so what is joints in SQL as the name suggest join so basically we are joining something to get a desired result so joints are used to combine rows from two or more tables based on a related or shared or common column between them so when I ever we have two or three tables who have a related or a common column between them like uh consider an example of ID so the ID column is present in the student table the course table and the course details table as well so that particular ID column is a shared or a common column between all those three tables so we can just join them and get all the related details we want from all these three tables there are commonly four types of joints so the very first one is inner joint then there is a outer joint which consist of left joint right joint and full joint and then there is a self joint and then there is a cross joint now in these particular tables you can see there is a student table and then there is a course table in the student table also we have an ID column in the course table also we have an ID column so since they both have a common or a shared or a related column we can perform join operations on them to get the details of name age course ID course name for a particular student now as I told that there is a shared or common column between these two tables so there would be a doubt which would be coming to your mind is can whenever there is a common column between two tables we establish a relationship using foreign keys so is foreign key important for performing joints so the answer is joint can be performed based on any column that establish a relationship between two tables not just foreign key constraint so it's not necessary so it's not necessary to have foreign key present in one of the table even if there is no foreign key but there is a column which is kind of present in another table as well we can perform the join operation so foreign key is not a must have if uh two tables are having a foreign key relationship we can perform join on them if there is no foreign key present in any of the table still we can perform join operation on them because uh we only need a shared or a common column between two tables now let's see on the typ of joint so the very first joint is the inner joint now as the name suggest inner joint so basically we are trying to fetch all the inner details from two tables so there is table one and table two that is a and b now in this particular table a we are calling it as left table the table B we are calling it as right table so whenever we perform inner join among any two tables A or B we get the common values between them in the inner join so basically the values which are present in left table as well as the vales which is present in right table we get the value as result whenever we perform the inner joint so here you can see that there are two TBL student and course so if we want to perform any inner joint among them what it will do is it will search for the common column so the common column is RW number now in that particular common column it will find the values which is common among both of the tables so one is there any value of one here so it would be discarded then uh two is there any value of two here yes so we will be printing two Hindi along with two Rahul whenever we perform an inner joint and then three there is a row with the value as three so we will be printing three REI along with the subject as English so in this way we get the common values which is present between left table as well as the right table now the second joint is the the left joint or we can also call it as left outer joint now in the left outer joint what happens is if we get all the values which is present in left table along with the values which is present in left and right both of the table so basically we get all the values which is present in left table so consider for now student is the left table and course is the right table so we will be getting all the values which is present in left table that is 1 2 and three and we will print the name for all the three and then we will come to this particular table so here we can't find the r number one so for now null would be assigned to that particular person RAM and then for two we can get Hindi and and then for three we can get English so mostly we will be first taking all the values of the left table and then we will be seeing that in this particular left table what are the values which are common in the right table and we will be taking that now the third one is right join or right outer joint so it is kind of similar with the left outer joint there is just one difference that in this particular join we take all the values from the right table along with the common values between the left and the right table so if this is the left table and this is the right table we will be taking all the values which is present in the right table and then we will find the common values which is present in the left table and then we will display all the ular details but in the right table you can see a r number four who has opted maths but here you can't find the r number four so for that particular column we will fill null in the name so mostly in the left and right outer joint whenever it doesn't find any values in the next column it just fill the null value now the fourth join is the full join or full outer joint in this particular joint we take all the values of left table right table along with the common values between them so all the values which is present in left table would be taken all the values which is present in right table would be taken and all the values which is common between them would be taken so if there is two tables left and right right so we will take all the values which is present in student table we will also take all the values which is present in course table now for the course table the values which is not present in student table we will fill as null and for the student table the values which is not present in the course table we will fill as null so here C name would be null for R number one and here name would be null for R number four now the fifth join is the self join or we can see that whenever we perform join on the same table that is called a self join so consider that there is a table student and if we want to perform a join on the same student table we can use the cell join for the cell join we would be learning more in the further videos for now you can understand that whenever we are performing any join operation on the same table we use the cell joint now the sixth one is the cross joint so in the cross joint what happens is can consider that there are two tables A and B so what happens here is if there is any Row in the a table it will go ahead and do a cartisian product with all the particular rows present in the B table then the second row of the a table would do the cartisian product with all the rows which is present in the second table and then the third role will will go ahead and do the cartian product with all the rows which are present in table B so what happens in Cross join is now R number one and RAM would form a pair with ro number two Hindi then with r number three English and then with ro number four maths then RO number two will go ahead and form a pair with ro number two Hindi RO number three English and R number four maths in the same way RO number three will go ahead and form the pair with r number two R number three and R number four so there is a cartisian product or there is a cross joint which is happening that one particular element of a given table is going ahead and doing a cross product with all the elements or all the rows which is present in table B so that is why it is called as a cross joint and in the the cross joint the number of rows in the final table is M into n so consider that in the student table there are M rows and in the course table there are n rows so the final table would be having M into n that is 3 into 3 n rows so what is inner joint inner joint help us in getting the rows that have matching values in both the tables according to the given joint condition so whenever we want the values which is matching on both the tables we use the inner joint so consider that there are two tables A and B whenever we want the values which is present between both the tables that is this particular value we use the inner joint now here you can see that there are two tables customer and Order and here there is one column which is common between both the tables that is ID so what we need to find is in both of these tables customer and Order give me the values which is present in customer as well as order table so let's see is 101 present in the order table no so for now this is discarded then 102 is 102 present in the order table yes so this is the value which would be returned in our final result then it will check for 103 is there any value with the 103 existing in the order table yes so we will be returning 103 as well so it will give me all the values which is matching between both of these tables so the query for the same is we give select and then we provide all the columns which we want to see the data among both the tables then we provide this prom and then here we provide the table one that is this particular table customer table and then we perform this inner joint and then we provide the table two name that is order and then we provide on and then we provide the condition on basis of which we are performing The Joint so the condition is table 1 do column name so this dot column name basically refers to a column which is present in table one so table 1 do column name should be equal to table 2 do column name so basically the column which is similar between both the tables perform the inner joint on that particular table now here you can see that at the first I have given the table one and in the second I have given the table two so can we reverse this order so for inner join we can reverse the order because ultimately we are focusing more on getting the values which is common between both the tables so even if table two is on the upper side and table one is on the lower side it doesn't affects our result but when we go to other type of Jo we have to maintain the order in which we want to fetch the data so let's see from an example so uh this is the query which Returns the rows where there is a matching ID in both the tables so what it will do it will give select and then it will provide star so it will get all the columns which is present in both of these tables and then we will provide from and then we will provide the table one name that is customer and then we will perform this inner join and then we'll provide the table two name that is order and then we'll provide on which particular columns these values needs to be in adjoined so for customer we are using the column as ID and for order we are using the column as ID so in both of these tables ID is the similar or a common or a shared column so on ID we are performing the inner join and we want to see all the details of uh particular customer as well as their orders so whenever we perform this particular query we will get the result as this so here you can see that among all the IDS which is present in customer and Order table the ID 102 and 103 are common among both the tables so we'll get the details for 102 and 103 then we'll get the name which is present in table one and then we'll get the ID which is again present in table two and then we'll get the order name that is fruit in the similar way we will get for 103 REI 103 is the ID which is for the second table and then the order name as ball so if we want to eliminate this ID which is being repeated twice we can provide the column name specifically from which we want to fish the data so here we can provide ID name and Order name but if we provide star it will fetch all the columns which is present in table one as well as table two so let's see from the MySQL workbench so here to perform the queries let's just create a e-commerce database in that particular database we would be creating two table one is the customer table and the second one is the order table so I've already written all the queries just to save time so but I'll be executing all the queries just now so here you can see we are executing this create database e-commerce so we'll just execute this query we have got a success here if we do a refresh all we can see a database with the name e-commerce is created which is right now having no tables so we'll then tell the MySQL server that we want to create all the tables inside this particular database so we'll just execute this query use Ecom and then we will create a table with the name customer which is having attributes such as ID and name then we will fill some data into this particular customer table so let's just fill the data and then we will see that if all the datas are filled or not so let's see so we have provided the details of five employees we have provided their name as well now let's create a audit for that again we will tell the myol server that in this particular database we want to create the table so we will execute this use followed by the database name then we will create the table for the orders so here we have got a success here if I do a refresh all so in the tables you can see that we have created two tables first is the customer and second one is the order so let's just fill some details in the the order table as well so we'll just execute this query so this is a success and then we will check that if all the details are filled in our order table or not so we'll just execute this query so here you can see that we have filled the details for three of the orders along with their ID now we want to perform a inner joint on both of the tables now both of the tables have a common column between them that is ID which is present in the customer table as well as the order table so let's perform the inner join basis on ID and then we will try to fetch all the particular details which are there in customer like ID name and then in order like ID order name for all the values which are common between both of the tables so let's just write the query select and then we will give star and then we will give from and then we'll get the table one name for now we can give any of the table but let's just take the customer table as table one and then we will give the inner join and then we will give the table name on which we want to perform the inner joint that is order and then we will provide the condition on which we are joining that is on customer do ID which basically tells that in this particular customer table we are fetching the ID column is equal to orders do ID because this is the shared column between customers as well as order so let's just execute this query so on executing you can see that we are getting the details of only three of the IDS that is 2 three and four which was common among both orders as well as customer now we are getting the name then again we are getting the ID from table two and then we are getting the order name if it doesn't want to see this replicated column so let's just keep the query here as customer do ID so this will give me the customer ID this particular dot is basically used to refer to a column which is present in this particular table then we will give orders do order name and then we will give this customer do name so what this will do is this will give me the ID from customer table name from customer table and Order name from the orders table so let's just execute this query so here you can see that we have removed that replicated column that was ID so here you can see that you are getting the ID you are getting the order name and you are getting the name so in this way we perform the joint we basically get all the details from both the tables using the common of the shared column between those table in inner joint we basically focus more on the common values which is present in both of the tables so left outer join is a part of outer join now it is used to fetch all the records from the left table along with the Matched records from the right table so consider that we are having two tables A and B and a is the left table and B is the right table so in the left order joint we get all the details of the left table along with the values which is common between A and B table so we get all the records from the left table along with the Matched records from the right table so we get this entire detail using the left outer joint now if there are no matching records in the right table null values are returned for The Columns of the right table so if there is no matching record which is found in the right table consider that in the left table there are records as 1 2 and three and in the right table there is only two and three so for the left table it will take all the records 1 2 and three but there is no one which is present in the right table so for that the values for the right table will be filled as null or the columns which is present in the right table will be filled as null so here you can see the query so we basically give select and then we provide all the columns which we want to show in the final result and then we provide from and then we provide table one so here table one is the left table we need to maintain this order because eventually we want all the details of the left table if we reverse the order we will get all the details of the right table so we need to maintain this order so we'll give from and then we will give the table one and then we will give the left join and then we will give the table two so basically we are performing a left joint on table one which is taking all the details of table one and then the match details between table one and table two and then we will provide the condition on which table 1. column name is equal to table 2 do column name so perform the left utter join on table 1 and table two on the basis of the common column which is present between table one as well as table two so what is the left table the table specified before the left join keyword is called as the left table that is table one and the table which is specified after the left join keyword this is the right table so table one is the left table and table two is the right table now let's see how it is happening so there are two tables customer and order so here customer is the left table and Order is the right table now in the left outer join what will happen it will take all the values of the left table and then the common values between the left as well as right table so firstly it will take all the values of the left table that is 1001 1002 and 1003 so it will take 1001 1002 and 103 then it will find the common values between these two tables so here is id101 present here no ID 10 01 is not present here so for now for order table we will fill the null values for id101 now is ID 102 present here so yes the ID 102 is present here so we will take the value as one2 and fruit so we'll take take the value as 102 and fruit now is the ID 103 present here so yes the ID 103 is present here so it will take the ID as 103 and the order name as ball so it will take ID 103 and Order name as ball so for the ID 101 it didn't had any of the entry in the table two so it fill null value for all the columns of the table two so let's see from the MySQL workbench that how it is happening so here we performed the inner joint now let's perform the left outer joint so we will just keep select we'll use the same tables customer and the order table so we'll provide select and then for now let's see all the details so we will provide star and then we will provide the table name from customer and then we will provide the join like type of join so we'll give left join and then we'll uh provide the right table name so the right table name here is orders and then we'll provide the condition so we'll give on customer. ID is equal to orders do ID so this is the condition on basis of which we are performing the left joint basically this particular column and this particular column is a shared column and they have the equal values so let's just execute this query so here you can see that we are getting the ID as one name as Rahul and here in the ID section for the right column we are getting null and null so basically the values which were not present in the right column we are getting as null and null then for the id2 there is a value which is present in right table so we are getting all the values for ID3 there was a value for id4 there was also a value for id5 there was value only in the left table but there was no value in the right table so it is null and null in this way left outer joint performs so the right join or right outer join is basically used to fetch all the records from the right table along with the Matched records or the common records which is present between the left and the right table so consider that there are two tables A and B A is the left table and B is the right table so in the right outer join we get all the details which is present in the right table along with all the common values or common records which is present between both the tables so we get all the details of the right table along with the common values which is present between the left as well as the right table now if there are no matching records in the left table null values would be returned for The Columns of the left table so consider in the right table we have IDs as 1 2 and 3 in the left table we have IDs as 2 and three so for the right outer joint it will take all the details of the right table but here you can see that one is not present in the left table so for the left table columns it will fill null values now let's see the query so the query is Select and then we provide the columns which we want to see in our result and then we provide from and then we provide the table one and then we provide which type of joint we are performing that is right joint and then we give the table two name and then we provide the condition on basis of which we are doing The Joint that is table one column name should be equal to table two column name so left table is the table which is given before the right joint and the right table is the table which is given after the right joint so table two is the right table and table one is the left table so let's understand that how this particular right joint is working so consider that there are two tables customer and the order table order is the right table and customer is the left table now in the right outer joint we get all the details of the right table along with the Matched values between left and right table so it will take all the values of the right table that is one2 one3 and one4 so it will take one2 one3 and one Z4 along with all the values such as fruit ball and utensils so here you can see fruit ball and utensils now it will find the common values between these two tables so is 102 present here yes it's present 102 and Rahul so it will go ahead and fill the details of 102 and rul is 103 present here yes it's present so we'll fill the details of 103 and REI is 104 present here so 104 is not present here so we'll fill the values as null and null now let's see from the MySQL workbench that how it is working so it works in a similar fashion of left outer joint it's just that we get the of right table rather than the left table so we'll give select and then we will provide star and then we will provide the first table name that is the left table name that is customer and then we will give the join type that is right join and then we will provide the right table name that is orders and then we will provide the condition on which we are performing The Joint so that is customer do ID is equal to orders do ID so let's just execute this query so here you can see that we are getting the ID 234 we are getting the name of SAR abhimanu adya now for the left table we are getting the ID as 234 and we are getting the order name as fruit ball and utensils all the details which were present in the right table were there in the left table so we are not seeing any of the null values so it is kind of giving me the common as well as all the values which are present in the right table so in the earlier videos we learned about left joint as well as right joint now what happens in left and right joint so consider that there are two tables so this is basically a when diagram so there are two tables A and B A is called as a left table B is called as a right table in the right join also let me just draw a v diagram A and B A is the left table and B is the right table now in the left joint we usually get all the details which is present in the left table as well as the common details which is present between the left as well as the right table so if we have want the details of the left table as well as the common details between left and right table we use the left joint now in the right join basically as the name suggest right so we get all the details of the right table along with the common details of the left and the right table so basically when I want the details of the left table along with the common details between left and right table I use the right joint and when I want the details of the left table along with the common details between left and right table I use the left joint now what is full joint so full joint basically Returns the matching rows of both left as well as the right table and also include all the rows from both the tables even if they don't have a matching rows so full joint basically is a combination of the left joint as well as the right join so in the left join we get this particular area in the right join we get this particular area so let's name the area as C so in the left join we get a plus c and in the right joint we get B+ C so basically in the full joint it is a combination of left joint as well as right joint so we will get a + C+ b + C now here I'll get all the details of a I'll get all the details of B and the common area between them that is C but here you can see that c is repeated twice so C is also occurring in the left joint C is also occurring in the right joint so is it like we will see the details of C twice so basically that doesn't happen I'll tell you the reason in couple of minutes but we usually get the details of a as well as b as well as C in the full outer joint now if there is no match null values are returned for the column of missing table so consider in the left table we have a column called as ID now in this ID we have one and two in the right table also we have a column ID but in this column we have only two and three so here you can see that for one there is no entry in the right table so if there is no match which is found we usually fill the null value now how we would achieve the full join in SQL so basically in the right join we were using the right join keyword in left join we were using the left join keyword so is it like in the full join we would be using the full join keyword let's understand so in MySQL the Syntax for a full join is different compared to other SQL databases like postgress SQL or SQL Server so in MySQL to make a full join the query is slight different from other SQL databases so what is the difference MySQL basically doesn't support the full joint keyword directly so we use a combination of left join right join and the union keyword to achieve the result so basically in MySQL we can't use the full join keyword so what we do basically the full join is a combination of left join as well as right join so we use the union keyword between them now the question which would be coming to your mind is what is Union and how it is helping us to achieve full outer joint so Union is basically a concept which comes in math wherein if there are two sets A and B and whenever we do a union between A and B it give me all all the values which is present in a along with all the values which is present in B and then the values which is present in a as well as B without any duplicates so it eliminates the duplicates so this is the answer for the last thing where we discussed that full join is basically a combination of left join as well as right join in left join we had a plus c in right join we had B plus C so in the final result we were not getting C twice so the reason behind not getting C or this particular area twice is because we are using Union and Union basically give us all the details of A and B eliminating the duplicates so full joint is basically a combination of left joint as well as right joint now here is the query for the same so first we'll write the query for the left joint and then we'll write the query for the right joint followed by a union between them that is this so first we give select and then we provide the columns which we want to see in the final result then we provide from and then we provide the left table name followed by this left join keyword and then we provide the right table name and then we provide a condition between which we are joining two tables so table 1 do column name is equal to table 2 do Colum name and then we provide this Union keyword and then we provide the right join that is Select followed by The Columns then from then the left table name followed by right join then the right table name and then the condition on which we are performing the right join so basically this is left join Union right join which will give me full joint so let's see from the MySQL workbench that how this query is working so here we have created a database Ecom in that particular database we have two tables customer and orders so we will be seeing about the full joint on these two tables only so here we have written some query for the left join which we learned in the last video as well as the right join now for the full join we need to provide a union between the left join query and the right join query so firstly let's see what all details are present in both the tables so first to see the customer table I'll be running this query select star from customer which will give me all the details all the columns which is present in the customer table so that is ID and name now let's see for the orders table so we'll run the query select star from orders so here we can see that we have ID and Order name so in the full outer join what will happen is first there will be a left join between the customers and the order table then there would be a right join between the customers and the orders table and then we'll provide a union in between them to perform the full outer join so let's write the query so firstly we will write the query for the left joint that is Select and then the columns so right now we'll see all the columns and then we will provide from and then we'll provide the table name that is the left table name and then we'll provide the left join followed by the right table name that is orders and then we will provide the joint condition so on customer do ID is equal to orders. ID now we will provide the union symbol so here we'll provide the union and then we will write the query for the right join so we'll give select and then here we'll provide star to see all the columns which is present in the right table then we will provide from and then the left table name that is customer for followed by the right join and then the right table name that is orders and then we'll provide the join condition so we will give on customer. ID is equal to orders do ID this should be orders so this is the final query which we have made first we have provided the left outer join query then we have given this Union keyword and then we have provided the write outter join query so let's just execute this query so here you can see that we are seeing all the details of the left table as well as the right table and the common thing between them so you can see that 2 3 and four these were common between left as well as right table so we are getting all the details uh ID name and Order name for the ones which were not common between the left and right table that is one and five for them we are getting ID as null and null order name as null and null because they were not present in the orders table so if there are no matching rows between two tables it provide the value as null there so this is the final result we get for the full outer join now as the name suggest cross joint so what we do in join we basically combine two tables so we combine two tables now what we do in Cross so cross is basically something we can say as a cross product so whenever we are performing any cross product between two tables that gives me a cross joint or that is the result of the cross joint now let's understand what is cross joint so basically in cross joint it combines each row of the first table with the every row of the second table so consider that the customer table is the first table the order table is the second table now according to definition each row of the first table is combined with each row of the second table so firstly we will get the result as 101 Ram with one fruit and two ball and then for the second row again it will combine with each row of the second table so it will be one2 Rahul with one fruit and one2 Rahul with two ball so basically there is a cross product which happens between these two table and what we get in the cross join is we get the result of the cross product so consider that in the customer table if there are M rows consider it is one and two and here also the number of rows are one and two so for now we are considering variables so consider that there are M rows in the customer table and N rows in the order table so the product or the result of the Cross join is M cross n that is for this particular table it would be two cross two that is four so let's verify so firstly first row of the customer table would be crossjoin with the first and second row of the order table so first result would be 101 Ram with one fruit and again 101 Ram with two ball then for the second row it would be 102 Rahul with the first row of this table that is one fruit and then again one2 Rahul with the second row of this particular table that is two ball so this would be the final result of the cross joint now here you can see that we are getting one 2 3 4 so here we are getting four rows and if we do M cross n then m is the number of rows for the first table and N is the number of rows for the second table so here 2 cross 2 gives us four so basically it results in a new table where the number of rows is equal to the product of number of rows in each table that is M cross n now let's see the query for the same so here you can see the query so first what we give is Select statement and then we provide the columns which we want to see in the final result so here we have provided star which basically means all so we want to see all the columns which is present in the first table as well as the second table because join happens between two tables only now then we will give from and then we will provide the table one name and then we will give the cross joint and then we'll provide the table two name so it will give me a product which would be the cross joint between two tables table one and table two which would be having number of rows as table one rows into table two rows that is M into one so 2 into 2 that is four so this would be the final result of the cross joint let's see from the myol workbench that how cross joint happens and if we are able to get this result or not so let's see how cross joint happens in the customer as well as the order table so firstly let's see what all details are there in the customer table so we'll just hit select star from customer which will give me all the details in the customer table so there are five IDs with the name so it is having five rows and then let's just execute the order table as well so here there are three IDs so basically there are three rows so we will get 5 into three that is 15 number of rows in the final result so let's just do a cross joint so for the cross joint let's just use the existing tables which are present here the customer and the orders table and then we will see that how the cross join is even happening so firstly we'll see all the details of the customer table so we'll hit the select star from customer which will basically give me all the details of the customer so here you can see that there are almost five IDs and there are name of that particular IDs and here you can see that there are five rows so the first table is having five rows now coming to the second table that is the orders table we'll run the query so here we can see that there are three IDs present so there are three rows so 5 into 3 is 15 that means the final product or the final the final result we get after the join would be having 15 rows so let's do the join so first we will give select and then we'll provide the columns which we want to show in our final result so for we want to see all the column so that we understand that how the join operation is even happening and then we will provide from and then we'll provide the table one name that is customer and then we will provide this cross joint keyword and then we'll provide the table two name that is orders so select star which will give me all the columns then I'm providing the table one name that is customer and then I'm providing cross join and then I'm providing the table two name so mostly it will have M cross n that is 5 into 3 15 number of rows so let's see from the final result if we are getting 15 rows or not so I'll just execute this query so here you can see that we have got a cross join of both of the tables and let's see that how many rows are there so let's count 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 so the final result is having 15 rows and here you can see that ID 1 1 one is repeated 222 is repeated because it is going and cross joining from the each and every row of the second table so basically whenever each row of the first table is cross joined with each row of the second table we get the result so that is M cross n number of rows that is 5 into 3 15 so as the name suggest join what is join basically whenever we want to join two tables we use joint now what does the self joint means so whenever we are performing join operation on itself it is called a self joint now that may sound confusing but let's understand that how self join works so a self join in SQL is a type of join where a table is joined with itself it is a type of inner joint now whenever a table consider that there is a table a which is having some data and the column is ID name AG so whenever this particular table a is joined with itself so again there is a table that is the same table a only with the same columns and same values so whenever we are joining the first table with itself it is called a self join so in this particular join what will happen table a will join with table table a only so there is a self join with will happen now the very next question which would come to your mind is why do we even need to join a table from itself only why do we even need that like join is mostly performed on two tables so why do we even need to join one table from itself only so let's see this example this will make a bit Clarity and this will give you the reason why we are joining one table with itself so here you can see that this is a student table which is having details of the student ID the name and this one is the mentor ID so basically there is a group of student now in that particular group of student there is is a mentor for each particular student and that particular Mentor is also a student so that is also provided the student ID so here you can see that for the very first row we have given the student ID as one for Ram and RAM is having no Mentor now for the second row the student ID is two for Rahul and Rahul is having a mentor who is having student ID as one so where the student ID is one it is for Ram so for Rahul Ram is the mentor now again coming to this third row here the student ID is three the name is RTI and she is also having a mentor as one one is Ram so Ram is the mentor for R now coming to id4 that is Ria and Ria is having the one who is having student ID as three as Mentor so RTI is having student ID as three so reti is the mentor for RIA so in this cases for now I have decoded it but if the table is too large if there is like very much of data or there is a huge data set in that case we can't go ahead and decode from the table itself that who is the mentor for which particular student so in that case what we do is we self jooin two tables and from the first table we fetch the student name and from the second table we can fetch the mentor name and can do it vice versa also so in this way we can know the student name as well as the mentor name who is assigned to the student where the student ID is always equal to the mentor ID because student ID is having all the details which Mentor is having so here you can see that I drawn a hierarchy chart so in the hierarchy chart the very first student is Ram now Ram is the mentor for Rahul as well as RTI so if you see here Rahul is having Ram as Mentor RTI is also having Ram as mentor and now for RIA RTI is the mentor so here you can see that there is a hierarchy which is formed between the mentors as well as the student so here the cell joint plays a picture now if we go here the query for the sell join is we give select and then we provide all the columns which we want to display in the final result then we provide from and then we provide the table name and then we provide an alas for the table name so why do we even need to provide an alas so join is basically performed on two tables so if we give the same table name before or after join it can result in error here you can see that I'm joining a with a only but if I provide an alternate name for both the table it won't result in an error and it can give me the result so that is why we provide an alas which provides an alternate name for the table so this is an alternate name it's not like it is creating a new table it's just an alternate name for the table so it will provide an alternate name as T1 for the first table and then we will give join so whenever we perform self join it's not like we give a keyword at self join we only provide the join keyword whenever we are doing the self join and then we will again provide the table name and then we will provide an alas for the table name that is T2 so there will be T1 and T2 which is having almost the similar details only because it is the same table it's just that we are joining it so we are making two tables and we are joining the same table with it itself only then we'll provide the condition so we have provided the condition on t1. column name equal to t2. column name so whenever you find t1. column name equal to t2. column name do a self join now here T1 and T2 are aliases for the table used to distinguish between the order of the rows so basically whenever we want to distinguish between two tables between their rows or something we can provide an alas now here you can see the query which I have WR to find the mentor name as well as the student name now here we are providing select and then here we are providing S1 so what is S1 so S1 is basically an alas which is provided for the student table only so whenever we provide an alas for any of the table we can use the columns or assess the columns using the dot so here we are accessing the column of S1 that is the student table only so S1 do name as Mentor name so we are providing an alas for this S1 do name that is the mentor name so first table would be having the mentor name and then we are providing s2. name as name so S2 is again an alas which is provided for the second table so for the second table s2. name is referred as name so so we will get a final result where we will get the mentor name and the name then we will provide from and then we will provide the table name then we'll provide an alias and then we'll provide an alternate name and then we'll provide the join keyword for the self join and then again we'll provide the table name on which we are joining and then we'll provide an alternate name for the same table name and then we will provide the condition so here the condition is where S1 dos ID so basically this one so whenever S1 dos ID is equal to s2. mnor idid so whenever S1 do S ID like one is equal to the mentor ID give me all the r so what it will do is it will check if one is equal to this no if one is equal to this yes so give me Ram if one is equal to this yes give me Ram if 1 is equal to three no don't give me RTI so in the same way it will perform for 2 three and four now let's see the final result so here in the final result we get the mentor name as RAM for RTI the mentor name as RAM for Rahul and the mentor name is RTI for RIA let's verify here so for RIA the mentor was RTI for RTI the mentor was RAM for Rahul the mentor was RAM and for Ram there is no Mentor so this is the final result which we get now if you're still getting confusion that how the cell join is even happening so let me just explain again so what is join join basically combines two table and give us the details now in the join what happens is there is a cross product which always happens and then we provide the condition on that cross product which gives us the final result so in join what happens we are combining two tables so whenever we are combining two tables there is a cross product which happens and then it eliminate all the pairs based on some condition so here we have a condition S1 S ID is equal to s2. Mentor ID so let me just refer it as mid so let's draw the table which we have so what we will do whenever we are performing cell joiners first we will find the cross product so to find the cross product we need to understand that what kind of join this is so this is a self join so it will get joined with itself only so there is one more table which is having exactly the same details as this table so this is the mentor ID and then they are having the same details 34 Ram Rahul RTI Ria and then it's null 1 one and three so let's just perform the cross product so in cross product what happens is each row of the first table is cross joined or co-joined with each row of the second table so basically there will be a pair which will be made which will be having the first row of the S1 and all the rows of S2 so the very first set which we'll get is one ram null which is joined with one ram null two Rahul 1 3 RTI 1 and four Ria three now again for the second row we will do the cross product so it will get joined with 1 2 3 and four so the second row is two Rahul and one which will be joined with one ram null two Rahul 1 3 re 1 4 Ria 3 now again for the third row it will be three Re 1 which will be again joined with 1 Ram null 2 RAM rul 1 3 RTI 1 4 Ria 3 now the final one would be four Ria 3 so it will be four Ria 3 with one ram null two Rahul 1 3 RTI 1 and four Ria 3 so these are the four set which we have got set a set B set C and set D so here in the cross product we have got four sets which is kind of each row of the first table is cross product with each row of the second table now cross product is done now we need to apply the condition so here the condition is s1s ID is equal to s2. M ID that is Mentor ID so S1 do S ID is this and s2. M ID is this so is 1 equal to null no rejected is 1 equal to 1 yes so this will appear in final result so this will be the one which will appear in the final result now is 1 equal to 1 yes so this will also be appeared in the final result so is 3 equal to 1 no so we'll just discard this so from here we have got 1 Ram null 2 Rahul 1 1 Ram null 3 RTI 1 now let's come to the second set so this is the S ID and this is the m ID so is 2 equal to null no is 2 equal to 1 no is 2 equal to 1 no is 2 equal to 3 no so from set B we have got none of the pair now let's go to the set C so is 3 equal to null no is 3 equal to 1 no is 3 equal to 1 no is 3 equal to 3 yes so B basically three is the student ID and here all these fields are the mentor ID so it is basically the S1 details and it is basically the S2 details so from here also we have got a set that is three Re 1 along with four R three now coming to the four set so here is four equal to null no is 4 equal to 1 no is 4 equal to 1 no is 4 equal to 3 no so from here also we have got no sets so here you can see that we have got 1 2 and three so we have got three rows in the final result and here also you can see that we have got the three rows in the final result so the final result we are showing S1 do name as the mentor name and s2. name as the name or the student name now let's figure it out so here S1 do name is Ram so the very first Mentor name is Ram who is the mentor of Rahul and RAM is again the mentor of RTI now the third set is three RTI 1 with four R 3 so RTI is the mentor of Ria so basically we are getting Ram the mentor of Rahul Ram the mentor of RTI and RTI the mentor of Ria let's let's go to the final result so Ram the mentor of RTI Ram the mentor of Rahul and RTI the mentor of Ria so in this way we get to the final result I know the video is extending too long but this is a very important concept and if you understand this you can solve any of the joint problem and you can understand that why this particular result is coming and how it is coming so basically whenever you do a cross product with along any condition you can get the result of the specific joint now let's go to the myl workbench and see how the cell joint is happening so for the cell join we will be making a school database inside that school database we will be making a student table and inside the student table we will be filling all the details of the student ID the mentor ID and the name so let's just create it so just to save time I have written all the commands so firstly we'll create the database so we have created the database let's just do a refresh all so here you can see a school database is created now I'll tell the SQL Server that all the commands needs to be executed in the school database so we'll use this use School command so here it is a success now we'll create a table student in the school database we'll be having student ID name and Mentor ID so here it is a success let's just do a refresh all so here you can see in the tables we are getting the student which is having column such as student ID name and Mentor ID now let's just insert the data into the student table so this is Success now let's just see that if all the data has been inserted correctly or not so here we have got one ram null two Rahul 1 three Re 1 and four Ria 3 now let's just apply the joint first we will give the select command and then we will give the column which we want to show so for now we want to only show the name so we will give it as name now we will give from and then we'll provide the first table name that is student and since we can't perform join on the same table name we will just use an alas for the first table name that is S1 and then we will give this join keyword for self join and then we'll provide the second table name that is student and then we will give as S2 and then we will provide the condition so the condition is where S1 dot S ID is equal to S2 do Mentor ID so wherever you find the student ID is equal to the mentor ID just do a self jooin so that we can get the details of the student as well as their Mentor so let's just run only these much query and see that what we are getting so here you can see that we are getting an error why we are getting an error so here since we have provided an alternate name for the tables so we can't just give it as name because it won't know that from which table you are using the name because name is present in S1 as well as S2 so for now let's just use S1 do name and s2. name now let's just execute this query and see so here we are getting name and name which is having ram ram reti and Rahul RTI and Ria so here we are getting all the mentors name and here we are getting all the student name so we just need to modify the query a bit because here also we are getting the name and here also we are getting the name so let's just provide an alias for this particular column and for this particular column so that we get the result in a desired format so let's just name it as s Mentor name and let's just provide an alternate name for this s student name or you can say name so let's just execute this query and now here you can see that we are getting Mentor name and the student name so the student name is Rahul and the mentor for Rahul is Ram the student name is RTI the mentor for RTI is Ram the student name is Ria and the mentor for RIA is RTI so in this way we can get the final result of the self join where we can get the details of the mentor as well as the student the most common example which is used for the self join is for the employee table where we find that the employee Remains the Same for the manager as well as their employees so in that case also we can use the self jooin now as the word suggest exclusive so exclusive basically means whenever we are excluding something and join basically means whenever we are combining two tables so whenever we are combining two tables if we are excluding something that is used in exclusive joints now what are these exclusive joints so exclusive joints are used whenever we want to retrieve data from two tables excluding the Matched rows between these two tables now let's go to the outer joints so in the outer joint I explained about three types of joint first one was left joint second one was right joint and third one was full joint now what happens in the left joint consider that if there are two tables A and B A is the left table B is the right table so in the left joint we used to get all the details which is present in a along with the common details which is present between A and B similarly with the right join if there are two tables A and B where a is the left table B is the right table we used to get all the details which is present in the right table along with the common rows which is present between right table and the left table in the full joint we used to get all the details which is present in the left table along with all the details which is present in the right table and the common rows between them but in the exclusive joints we basically exclude this area so we don't get this area we only want this particular area which is having the details of a only this particular area which is having the details of b or only this area which is having the details of a as well as the details of B so here also you can see that there are three types of joint the very first one is the left exclusive joint the second is the right exclusive joint and the third is the full exclusive joint so have the left exclusive joint is same as the left joint it's just that in the left joint we used to get the common or the Matched values between A and B but here we are excluding these values again in the right exclusive joint it is same as the right joint but in the right joint we used to get all the details which is present in the right table along with the common details which is present in right as well as left table but in the right exclusive joint we only get the details which is present in the right table we exclude the ones which is the Matched rows between a as well as b or left table as well as right table now in the full exclusive joint again it is similar with the full outer joint but in full outer join we used to get all the details of left table all the details of right table along with the details which is matching between left table and right table but here we are excluding this particular area so now let's learn about each and every type of joint and let's see the query which we are using for these exclusive joints so the very first one is the left exclusive joint so whenever we retrieve records from the left table excluding the ones matching in both left as well as right table so we are retrieving the records from both the table A and B where a is the left table B is the right table so we are getting all the details which is present in the left but we are excluding the ones which is present in both the tables or ones which is having the Matched rows so consider for now we are performing the left join only so how we'll perform it consider that this customer is the left table and the order is the right table so in the left join what happens is first it will return all the details which is present in the left table and then it will find any matching values so consider that join condition customer. ID is equal to order. ID so the condition is whenever customer. ID is equal to order. ID perform the join operation so the join table would be having all the values so the first one would be ID name and then it would be ID and Order name from the order table so let's go to the fair first row so uh since it is a left join we need to print all the details or all the information or all the rows which is present in the left table so 101 Ram would be printed now it will find that is id101 present here no id101 is not present here so we will fill null and null for it now we'll go to ID 102 so is ID 102 present here yes ID 102 is present here so we'll fill 102 Rahul and here we'll fill 102 with fruit now it will go to ID 103 so is ID 103 present here yes ID 103 is present here so it will print 103 re with 103 ball so this was the result we used to get in the left joint but in left exclusive joint what happens is we are excluding the ones which are matching between both of these T so what are the fields which are matching between both of these table that is this 102 and 103 so 102 and 103 are matching in between both of these table so we have to exclude this and we have to just print this in the final result so how we can get this particular row so here you can see that whenever there is no matching row which is present in the right table we get the value as null as there is no matching field which is present there so here what we will do is first we'll write the query for the left join so we will write select and then we'll provide the columns which we want to show in the final result then we'll provide from and then we'll provide the left table name then we will provide left join and then we'll provide the right table name then we'll provide the joint condition so table 1 do column name is equal to table two do column name and then again we will provide the condition to exclude the matching rows so the condition to exclude the matching rows can be where table 2. ID is equal to null or where table two. name is equal to null so we can provide the condition where table 2 do column name is null so whenever we provide is null it will only return me this row and it will eliminate all the matching rows because whenever there is a matching row there would wouldn't be any null value when it would be a null value whenever we don't find any matching row so that is why with the left join query we write a we condition which help us to remove the Matched rows between left table and the right table now the second one is the right exclusive joint so whenever we retrieve records from the right table excluding the ones which is matching both in the left as well as the right table now the query for the right exclusive joint Remains the Same as the right join it's just that we will again put a we condition and now this time it will be table 1 do column name is because in right join we print all the details which is present in the right table and the matching which is present in the left table so consider for 102 it find the matching data for 103 it will find the matching data but for 104 it won't find any matching data so it will print 04 utensil null and null so here table 1. ID would be null table 1. name would be null so that is why here we have provided a condition table 1. column name is null so the query is Select and then we provide columns then we provide from and then we provide the left table name then we provide the right join keyword then we provide the right table name then we provide the join condition on table 1 do column name equal to table 2. column name and then we provide this wear clause which will help me to eliminate the matching rows between these two tables now in the full exclusive joint whenever we retrieve records from the right table and the left table excluding the ones matching in both left and right table we get the full exclusive joint now in full outer joint what we used to do is we combine the left joint as well as the right join query using a union so why we use Union because in SQL there is no full outer joint or full joint so we use Union to combine the details of the left joint as well as right joint which will give me a full outer joint and this Union also makes sure that the Matched rows between the left table and the right table doesn't occurs twice because there could be a possibility that in the left joint we are getting all the details of the left table along with the common row in the right join we were getting all the detailss of the right table along with the commons one so if we are doing a union of left join with right join this particular area can occur twice but Union make sure that this particular area doesn't occur twice so first we'll provide the query for the left exclusive joint then we'll provide a union and then we'll provide the query for the right exclusive joint so in this way we can get the full exclusive joint so let's see from the myol workbench that how this is happened so we'll just work on the exclusive joints so let me just write it exclusive joins now there are three exclusive joins so the first one is left exclusive join the second one is write exclusive join and the third one is full exclusive join so let's see first for the left exclusive joint so the query for the same would be select and then we'll provide the columns name which we want to see so for now we want to see all the columns so we will provide star and then we'll provide from and then we'll provide the left table name that is customer and then we'll provide left join and then we'll provide the right table name that is orders and then we'll provide the condition on which we are joining so on customer. ID is equal to orders. ID so this is the query for the left join so let's see that what this query returns and then we'll see that how exclusive joint is making a difference so here we are getting getting all the details of the left table and for the right table the details which were not existing is marked as null and then we are getting the details of the values which are matching between the left table as well as the right table so wherever ID is matching between left table and right table we are getting that details as well and since it was a left joint we are getting all the details which were present in the left table now let's just add a condition so we have to add a condition where table two that is orders do ID is null so it will make sure that give me all the details where orders. ID is null so whenever there is no matching rows we can see that the ID is coming as null for the orders table so it will return me the details of that particular person who doesn't have a matching rows in the right table so let's just execute this query so here you can see that we are getting only two entries where ID is null for the orders or the right table so basically it excludes all the matching rows which is present in the left as well as the right table now for the right join the query would be select and then we want to see all the columns so select star and then we'll provide from and then we'll provide the left table name that is customer then we'll provide the right join and then we'll provide the right table name that is orders and then we will provide the join condition where customer. ID is equal to orders. ID now this is the query for the right joint so let's see that what all things are returned here and then we can see the difference between them so let me just execute this query so here you can see that we are getting 2 3 4 and here all the rows are matching in between both of the tables so here we are getting 234 and the entry for 234 is also existing in the order table so whenever we would be running the exclusive joint we won't be getting any data here all the IDS are matching in the right table so let's see for the right exclusive joint so we'll provide a condition where table one do column name is null and just remove this so let me just execute this query so as I told that we are not seeing any dat because all of the data were matching in the left table so since left table and right table both had all the common sets which were present in the right table we are not seeing any data now let's just execute full exclusive joint so for full exclusive joint first we will use the left joint and then we'll perform a union between them and then we'll provide the right join just remove this and let's just execute this query so here you can see that ultimately we are getting all the details of the left exclusive join only we didn't got any data so here we are getting one five Rahul Raj and here the idid is null and the order name is null so before moving to the union operator let's just re- revise some older Concepts where we were using the union operator so what happens in the left joint basically if there are two tables A and B if a is the left table B is the right table in left join we used to get all the details which is present in a along with the details which is common between A and B that is the common details between the left table and the right table so let's name this area as C so we used to get a plus c now in the right joint if there are two tables A and B where a is the left table and B is the right table in the right join we used to get all the details which is present in the right table along with the common details which is present between the left and right table so here it will be B+ C now in the full outer joint what used to happen we used to get all the details which is present in the left table all the details which is present in the right table along with the common details which is present between the left as well as the right table so here we used to get a plus b plus C now in SQL there is no full outer joint keyword there is a left joint keyword there is a right joint keyword but there is no full outer joint keyword so in that case we use the union operator so for full outer joint what we did was we combined the left joint and right joint together using a union between them so it combines all the result which is present in the left joint along with all the results which is present in the right joint so this and this both were combined to get this but if we perform a union between the left joint as well as the right joint so the left joint used to give us a plus c and the right joint used to give us B plus C so here we are getting a here we are getting B but but here you can see that we are getting C twice so that is what union is helpful for Union basically gives us all the values removing the duplicates or you can say without the duplicates so whenever we are performing Union between any of two queries it help us to remove the duplicates or it help us to eliminate the duplicates so it will only print C once so we get the result which we wanted for the full outter Jo so Union help us to achieve results or achieve the combination of results between any two or three queries and it help us to remove the duplicates so here if you can see Union operator in SQL is used to combine the result of two or more select queries into a single result set and give unique rows by removing the duplicate rows so as I said consider that if there are two queries q1 and Q2 which are the select queries so if we perform a union between these two queries it will help me to give a single data set and in that single data set there would be no duplicates so duplicates won't be there so there are some things which one should keep in mind while using the union operator so the very first one is each select command within the union must retrieve the same number of columns so consider that there are two queries q1 and Q2 and we are performing a union between them so if we are selecting some columns here to show in the final result the number of columns which we are putting here should be the same in query 2 as well so if we are giving one column here consider select ID here we should also give one column the number of column should always be same between the two select queries on which we are performing the union now the second is the data types of the column in corresponding positions across the select statement should match so consider in this select statement we are selecting ID and in this select statement also we are selecting ID so both of the ID should have the same data type there shouldn't be any mismatch of the data type like this ID is a Vare or this ID is a int we can't perform Union in that case so these columns which we are putting here to select or to see the result should always have the same data type the third one is column should always be listed in the same order across the select statements so since we have to maintain the data type we have to always maintain the order because if the order is not in sync we may get the inappropriate order a wrong result or we may get an error so we have to always make sure that we maintain the order we have to always make sure that the number of columns we are mentioning in the select queries on which we are performing Union should be same and we have to also make sure the data type of the column should also match with each other on the specific order now let's see that how this Union operator works so firstly we will give select and then we will provide all the columns which we want to see the details and then we will give from and then we will provide the table one name and then we will provide the union and then we will give select and then again we will give columns and then we'll provide from and then we will give the table two name so basically there are two select queries this is the first select queries S1 this is the second select query S2 and we are performing a union between them making sure that all the columns in S1 is equivalent to all the columns in S2 all the data types of the column matches from S1 to S2 so we are performing a union which will help me to give a single result set for these two select queries so consider that this is the table one and this is the table two and between them we are performing a union so table one is having a column such as ID table two is also having a column ID it is also holding integer values and this is also holding integer values for now so uh for the first query if we execute select ID from table one so what it will do it will give me all the IDS which is present in table one so it will print one so this is the final result so it will print one then it will print two and then it will print three now there is a union symbol so basically all the things which we have got from here or all the result which we have got from here needs to be combined with the second select query so the second select query says that we have to provide the column ID of the table two now let's go to table two so here in the table two you can see the first row is two like the ID is two but two is already present in the final list and what union does is Union removes the duplicates so this two won't be printed in the final result it would be discarded because we have applied a union between these two queries now coming to the second row three so three is also printed in the final result and we don't need any duplicated values so we will be discarding this as well now coming to four is four present in the final result no four is not present in the final result so we can print four so this is the result we get after applying Union on these two tables so let's see from the mys workbench that how it is happening so here we already have a Ecom database and in that Ecom database we have a customer table we have an orders table so let's just first select and see that what all IDs are present in the customer and the orders table and then we'll perform the union to see if duplicated values are being removed and if we are getting a combined data set so let's just first see the ID which is present in the customer table so we'll give select ID from customer and let's just execute this query so here you can see that we are getting the ID details so it is 1 2 3 4 and 5 so from the customer table we are getting the IDS as 1 2 3 4 and 5 let's see the IDS which we are getting from the orders table so we will write ID and then we will give from and then we'll provide the table name that is orders so let's just execute this query as well so here you can see that the IDS are 2 three and 4 so 2 three and 4 is something which is present in customers as well as orders table so let's see that if we are getting the duplicated value in the final result or a unique value in the final result so we'll just provide a union between them and we will execute the query so I just need to remove this so let's just execute this query and here you can see that we are getting only the ideas 1 2 3 4 and 5 so we are not getting any duplicates and we are getting the IDS which is present in the customer as well as the orders table so like the union operator we have a union all operator in SQL so let's just understand that how this Union all operator help us so Union all operator in SQL is used to combine the results of two or more select queries into a single result set and give all the rows by not removing the duplicate rows so in Union we used to combine the select queries and remove the duplicates but in Union all we only combine the query we don't remove any duplicates so we don't take into consideration of any duplicates or something so we just combine the query but in Union we combine the query as well as we remove the duplicates now let's see the query on how we can use the union all operator so firstly we'll give select columns from table one so this particular query will help me to fet some columns from the table one then we'll give this Union all operator then we will give select then the columns from table two now this particular query will help me to give all the columns which are mentioned here from table two and we are performing a union all operator between them so this query 1 and query two will give me a combined result but there would be duplicates since Union all doesn't take care of the duplicates so let's see from an example so consider that this is table one and this is table two and we are performing a union all operator between them so what will happen for now table one is having an ID column table two is also having an ID column so we can perform a union all operator so firstly it will execute the query one which is for table one and then it will Ex the query two followed by the union all operator so firstly the query for table one would be executed so we want to see all the IDS which is in table one so firstly one would be printed then two would be printed and then three would be printed then it will go to table two so the first ID in table two is two which is already present in the final result but as I told that Union all operator doesn't take sces about if there is something which is present here because it doesn't removes any duplicate so two will again be printed then there is three three is also present in the final result but it doesn't takes care of the duplicates it's just combine the results which is present in table one and table table two so three will also be printed and then there is four in table two so four will also be printed so we print the data which is present in table one column as well as the data which is present in table two column without even considering of removing the duplicates so duplicates can be there so let's see from the myql workbench that how this Union all operator is working so here we already have the query for the union so let's just copy the same and we will replace Union with Union all and let's see that what we are getting in the final result so here you can see that we are getting 1 2 3 4 5 and 2 3 4 is again coming even if it's like duplicate but since we are using Union all in Union all we can see the duplicate values so what is this SQL subquery inner query on nested query so SQL subquery is a query which is nested within another SQL statement so consider that there is a SQL statement q1 and inside this q1 there is one more query Q2 that is acting as a inner query we call this particular query a subquery which is helping me to perform operations on q1 based on the data which we are receiving from Q2 so whenever we want to retrieve data based on the result of another query we use the nested queries so consider that Q2 give me a result R2 and based on R2 we are doing some filteration on q1 so it is helping me as a subquery and it is helping me to give the details now why do we even need the subqueries so consider that you are working in a company XY Z Now companies told you that the average salary which we give to our employee is 1,200 now consider the next year company hire more 50 employees right so the average salary can either increase or decrease as well now now do we need to calculate the average salary each and every year whenever a new employee is on boarded or whenever a set of employees is on boarded we don't need to do that right so what we will do is we will write a query to find the average salary and then we can tell he you can use this particular uh query anywhere where you want to find all the employees who is earning more than average salary where you need to find all the employees name employee details you can use that particular subquery everywhere because that will give me the dynamic value or the value which is at present it will give me the dynamic value it won't take the value as 1200 as static value it will give me the dynamic value when whenever a new employees is unboarded the value would be updated so in the same way we use the subquery because it helps me to get the dynamic value and it helps to update the data at the real time so we don't need to update our query each and every time we write a self-sufficient query like select average salary from XYZ so what it will make sure is can whenever there is new employee which is added in our database it will update the salary accordingly the average salary consider if earlier it was 1200 now it can be 1250 so it will be updated accordingly now here you can see a block diagram where I have given an outer query and inside this there is a inner query so this inner query is Q2 this outer query is q1 the result which we are getting from Q2 is R2 and based on R2 we are performing some logic in q1 so in this way the nested query works now how we can use the subqueries so subquery can be used in multiple ways the very first way is subqueries can be used with Clauses such as select insert update or delete to perform complex data retrieval now here you can see that we can use it with the Clauses such as select insert update or delete so let's see that how we can use so here we have written the query so we keep select and then we provide columns and here we can provide a subquery which will help me to find another column in which there would be some manipulation which would be already done in the subquery and which I can show in the final result and then I can give from and then I have to provide the table name from which we are fetching the data now let's see the another way in which we can use the subqueries so subqueries can be used with we Clause to filter data based on the condition so we can use the wear clause and we can filter the data based on some condition so let's see the query so here you can see we are giving select and here star basically means all so it will give me all the columns which is present in the table then then we will give from and then we'll provide the table name then we'll give the we clause and here we provide the column name on which we are doing the manipulations or the filteration then we provide the operator like greater than less than equal to in operator or other operators and then we give the subquery so this is the query two which gives me some result and on based on this result we are performing some operation so we'll see the example one by one for each of these ways but for now I'm just explaining that how we are using this in each way now the Third Way is subqueries can be also used in the from Clause so we can also use subquery inside the from clause so let's see so let's see the query so here we are giving select and here we are giving star which basically selects all the column then we are providing from and inside this form we are using the subquery and then we are providing an alternate name for the result we are getting from the subquery as alternate name so let's see from examples that how we can use the subqueries inside the select from and wear Clauses now let's understand from example how we can use the subqueries using the wear Clause so the very first problem statement is find all the employees who have salary greater than the minimum salary so we have to find all the employees who is having salary which is greater than the the minimum salary which is present in our table so we have to break the problem into two steps first is we have to find the minimum salary and then we have to find all the employees who is having salary greater than the minimum salary so let's see first that how we can find the minimum salary so first we'll give select and then we'll give an aggregate function minimum which will take all the values which is present inside the column and we'll return the minimum value so we'll give the column name as salary and then we'll give from and then we'll provide the table name that is employee so this will give me one result that would be the minimum salary among all the employees now the second query is to find all the employees having salary greater than the minimum salary so this we have already calculated now we have to find all the employees who is having salary greater than the minimum salary so we'll give the query select and then we want to show the employee name as well so we'll give name and then we'll give salary and then we'll provide from and then we'll give employee and then we'll give the we condition where the salary which is given here is greater than the subquery which is this minimum salary so here we can replace the subquery with the query which we have written here and we can get the salary which is greater than the minimum salary or you can say R2 so in this way we can find all the employees who is having salary greater than the minimum salary so let's see from the myol workbench so we have to find all the employees who is having salary greater than minimum salary so we already have a company database and in that we have a employee table so let's first see that what all details are there in the employee table so here you can see we have ID name age Department City and employee salary so let's just find the employee salary which is greater than minimum salary so firstly we'll find the minimum salary so for that we'll give select and then we'll give the aggregate function Min and then we'll provide the column name that is salary and then we'll give the table name that is from employee so let's just execute this query and see that what it is giving so it is giving me 1,600 which is the minimum salary among all the salaries which is present in the table now let's find all the employees who is having salary greater than the minimum salary so what we'll do is we'll give select and then we want to show the employee name and and then the salary column and then we'll give the table Lan that is from employee and then we'll give the wear clause and we'll give the condition where salary is greater than and here we will replace it with this subquery so here we are getting the minimum salary as 1600 and here we'll replace it with this and we'll just execute this so here you can see that we are getting the name and the salary so is 2,000 greater than 1600 yes is 2500 greater than 1600 yes is 2400 greater than6 00 yes so we are getting all the employees name along with their salary who is having salary greater than the minimum salary so let's see another example find all the employees who is having the minimum age so we have to find the employees who is having the minimum age so first what we will do is we will find the minimum age which is present in our table and then we will compare that consider that if the minimum age is 18 is the employee having the age as 18 is the employee having the age as 18 is the employee having the age as 18 in the same we will see for all the rules and we will show the details of employee who is having age as the minimum age so firstly we will break the problem so first we'll find the minimum age and secondly we'll find the employee who is having the minimum age so how we can find that so first we need to find the minimum age so to find the minimum age we can give the query select Min age from employee so this will give me a minimum age consider R2 now I have to find all the employees who is having the minimum age so I'll give the query select name and I want to see the age as well so age from employee and here in the subquery I'll give where age is equal to the subquery so it will be replaced by this query because this is giving me the minimum age so it is giving me the result as R2 so it will be basically R2 and this subquery would be replaced by this in this way we can find all the employees who is having age as minimum age so let's see from the my schol workbench so we have to find all the employees who is having their age as minimum age so firstly we will find the minimum age so to find the minimum age we'll give the query a select Min and we'll give age and then we'll give the table name from employee so let's just execute this query so here you can see that we are getting the minimum age as 24 now let's find all the employees who is having age as 24 so we will then calculate all the employees who is having age as minimum age so we'll give the query as select name of the employee age from table name is employee and then we'll give the condition where age is equal to minimum age and basically this query is helping me to find the minimum age so I can replace the minimum age with this so we'll give this and we'll just execute this query so there is only one employee who is having age as the minimum age if there were two or three employees who were having the agees 24 that data would also be shown here so let's understand from example of using subqueries in the from Clause so the first question is find the employees who is having age greater than minimum age so earlier we were using the we Clause but here we will be using the subquery inside the from Clause so firstly we'll find the minimum age and then we'll find all the employees who is having age greater than minimum age so let's see how we can do that so to find the minimum age the query is Select minimum age and here we are providing an alas or an alternate name for the same that is min age and then we'll give from and then we'll give the table name as employees so in the second step we have to find the employee which is having age greater as minimum age so we'll give select and then here we have used EMP dotame so EMP is basically a short name we have provided to this employee table and we can use dot to select all the columns which is present here so we can use empname and then we can give from employee EMP and here we can replace it with the subquery that is the minimum age so we'll replace the subquery with this and we can give it as subquery and here we'll give where EMP do so basically EMP is the short name so employee. AG is greater than what we are getting from subquery so subquery do minage so here we are having minimum age so we'll use subquery do minage and here we are having age as the column so we will be using age so from here we'll get the result as minimum age and with a result consider R2 and here we'll use the result which we got from this query to do a filteration so let's see from the myql workbench so first we'll calculate the minimum age so we can use the query as select minimum and we can give it as age and then we can provide an alas to use that particular result somewhere else also so we'll give as and then let's provide it a name as Min age and then we have to give the table name so from employee so let's just execute this query and see what it is giving us so here you can see that we are getting a minimum age as 24 so here you can see see that it is replaced by the alternate name which we have given else it would show Min age so we have replaced it with an alternate name that is minimum age so let's find all the employees who is having age greater than the minimum age so firstly we will use select and then we'll give what we want to select so firstly we want to show the name and the age and then we'll use from and then we'll give the table name that is employee so for now we are giving a short name for the employee table so that we don't have any confusion so here we'll give a short name for employee that is EMP since we have provided a short name we have to access the column such as empname and EMP do and then here I'll replace the minimum age from the subquery so since I am also using this particular result in my from so I have to use the subquery also so I'll just use the subquery which will help me to find the minimum age so I can also provide an alas for this as Min age query so I have selected empname that is employee name EMP do AG that is is employee age from employee table and here I've provided a short name for it and we are also selecting minimum age so we are giving from employee table as well as this particular table and then I'll give the where condition so where EMP Doh is greater than this Min query dot Min minimum age query do Min age so let me just explain this so this particular would give me a result where there would be a minimum age and it would be the value which is the minimum among all the employees now this particular query select EMP do name Will select the name EMP do AG will select the name from the employee table only because EMP is the short name we have given to the employee table and then we also want to make query in this particular table so we'll give a comma and we'll give the query which will give me the minimum age of the employee and I'll give an alas for this so that we don't have any confusion so we'll provide an alas as minimum age query now we have given the condition where EMP do so basically this table in this table find all the age and see the other table like this particular query give me a table with the name Min age which is having one value so check if employee. AG is greater than minimum age query. minage so from this select the Min age and check that if the employe age is greater than M age or not so let's just execute this query so here you can see that we are getting the name and age of all the employees who is having age greater than the minimum age so the minimum age was 24 so everyone you can see is 25 26 27 25 so all are having age greater than the minimum age so let's understand from an example of using subqueries in the select statement so we have to print the employees with average age and the age of all the employees so we have to print the average age and age of all the employees so basically in the final result we'll be getting something like this where this would be replaced by the average age of this particular age column consider it's 23 and here we have to give all the age of employees like 24 25 and here it will be only 23 to compare that if the age is 25 what is the average age in the entire employee table so for this we'll again break it into two steps the first is find the average age the second is print the employees age and the average age so let's see how we can do that so firstly we'll find the average age that is Select average age and then we'll provide from and then we'll provide the table name so this will give me the average age of employee now we have to print the employee age along with the average age so we'll give select and then we will replace the subquery here because this is giving me the average age so we'll give an alas as average age and then we'll select age and then we'll give from and then we'll provide employee so in this way we can print the average age as well as age for the employee so firstly we'll find the average age so for that we'll use select average and then we can give a and then we can give the table name from and then we can give employee so let's just execute this query so here you can see that we are getting the average age as 25.4 so now let's see all the employees who are having age and average age in the result so we'll give select then we are selecting age then for average age we can replace it with this particular query I know this might sound weird that why are we even using this we can just give average age and we can provide an alas so I'm just explaining that how we can use the select query inside the Clauses and there might be more complex problem where you'll get the gist that why we are even using subqueries and how it is helping us to make the problem simpler so we'll select age and then for the average age we'll replace it with this query and we'll provide an alas for it as average Ag and then we'll give from and then we'll give the table name as employee so let me just execute this query so here we are getting age and here we are getting average age of all the employees so with the age we are getting the average age which is for the entire table so in this way the SQL subquery works you will see more complex problem where we are using the subquery concept and it will help to break down that particular complex problem into simpler problems now finding the N highest salary of a person in a given data set this question is like mostly asked in the interviews it can be asked in the interviews of Amazon Google Etc like this is the most asked question and this is like one of the most important question as well so let's find the steps that how we can find the nth highest salary and then we'll see the query for the same so here we have to find the highest salary in a given data set now n can be either 1 2 3 till till till any natural number n now if we are asked to calculate the first highest salary so that we can do very easily we can use the command as select and then we can give Max aggregate function and then we can give salary and then we can provide the table name from consider employee table name so this will give me the maximum salary or the first highest salary which is present in the employee table but consider that someone ask you to find the second highest salary in that case what you will do you'll just write the same query select then Max and then salary and then you can give from then the table name employee now this query will give you the first maximum salary or the first highest salary but I want to find the second highest salary so what I need to do is I need to eliminate the first highest salary then the most maximum salary will be the second highest salary so I'll just give a where condition where salary is not equal to so this particular operator basically means not equal to and then I can replace it with the first query so this first query gives me the maximum salary or you can say the first highest salary so give me the maximum salary which is not equal to the first highest salary so this will give me the second highest salary now consider you are being asked the third highest salary so the query will get complex and complex so we have found a query which can be very helpful to calculate the N highest salary of a person and that is a very simple query you don't need to do this complex operation or make many sub queries you can use that particular query and that will make your work easy so let's see the steps to find the N highest salary so the step one is select the column which you want to show in the final result that is salary so you have to first select the column which you want to show in the final result now step two is order the salary in descending order so you have to order the entire salary in the descending order so the first highest appears at the first position the second highest appears at the second position the third highest appears at the third position so that you can get the max at the first now step three is now the value of n could be anything 1 2 3 till any natural number n so we have to make the query in such a way so that whatever be the value of n it can provide the accurate or the correct result so the step four is so at the end of the query we will provide a limit so that on the data set which we have got after ordering this particular salary in descending order we can fetch the nth highest one so first what we have done is we have selected the salary column to show in the final result then we have ordered the salary in the descending order so the first highest comes at the first the second highest comes at the second the third highest comes at the third and then we will use this limit clause which will help me to give the first highest second highest or third highest so let's see how we can use this so firstly let's discuss about the limit CLA so the limit CLA is used to restrict the number of rows returned by a query so whenever we want to restrict the number of rows which is returned by a query we use the limit Clause consider that we only want to see the details of top three student in a college or in a school so we'll use the limit Clause there which will restrict it to only top three people so here we have two types of limit one is the variation of the limit law so first is limit and then we give n so it helps to retrieve a maximum n number of rows from the beginning of the result set so whenever we provide limit three so it will return the three rows from the beginning of the final result now there is one more limit MN so here M basically means the number of rows which we want to skip from the beginning and N is the number of rows we want to fetch after the skipping so consider if there are five rows 1 2 3 4 five so if I give the value of M as two and n as 1 so what it will do it will skip the two rows so it will not show one it will not show two and then n is the number of rows which we want to show in the final result so it will only show one row if the value of n would be two it would show three and four in the final result if the value of n would be three it will show three four and five in the fin final result so basically m is the number of rows we are skipping and N is the number of rows we are showing after the skipped ones so limit MN helps us to retrieve a specific range of rows where m is the number of rows to skip and N is the number of rows to fetch so basically it helps to give us a rows in the particular range so let's see the query for the same so firstly we'll give select and then here we'll provide the distinct keyword because there could be a possibility that there are two person who are having the same salary 1 1200 and 1200 so in that case that can give us incorrect result so we'll provide the distinct keyword which will make sure that we are getting only distinct salary and among that distinct salary or among that salaries which are unique we are getting the N highest salary so we'll give distinct and then we'll provide salary and then we'll give from and then we'll provide the table name then we'll provide the order by clause which will make sure to order all the salaries in the descending order so we'll give the first highest salary in the first second highest salary in the second third highest salary in the third and like this then we'll provide the limit clause and then here we'll provide mnn basically m is the number of rows which needs to be skipped from the beginning and N is the number of rows which we want to show after being skipped after being skipped so here the value of M is n minus one and the value of n is one so the value of n is one because we always want to get only one result or only the nth highest salary so the value of n would always be one the value of M is n minus 1 because consider that we want to find the first highest salary so in the first highest salary we don't need to skip any of the rows so here if we give 1 1 - 1 is zero so in that case we are not skipping any row and we are giving the first highest salary consider the value of n is 2 so here if we see M that is n minus 1 so it will be 2 - 1 that is 1 so it will skip the first row and then the value of n is 1 so it will give me the second row that is the second highest salary so let's see from the MySQL workbench that how we can find the nth highest salary so let's find the fourth highest salary so we'll find the fourth highest salary so for that we'll write the query as select and then we'll give distinct and then we'll give salary and then we will provide the table name that is from and then we'll provide employee and then we'll provide this order by Clause to order them then the column which we want to order that is salary and then the manner in which we want to order that is descending so firstly let's see that what is the result of this and then we will calculate the nth highest or the fourth highest salary so let me just execute this so here you can see that we are getting the salary as 2500 2400 2,000 and 1500 so we are getting all the distinct salary there is no duplicates and we are getting the salary in the descending order now let's just calculate the fourth highest salary so we will give limit so first is n minus 1 so 4 - 1 is 3 and then n is 1 so we'll give one and we will just execute this query so here you can see that we are getting the fourth highest salary as500 so in this way we can calculate the N highest salary you can replace the number n with any of the natural number you are being asked to and this is the most simple query which you can use and get the result now as the word suggest stored procedure so whenever we are storing some kind of a query in a procedure we we call it a store procedure so let's see these are the programs that can perform specific task based on the store query so you might have heard about functions and programming so how this functions were useful consider that if we want to find minimum age of a person we used to create a function give the function name and write all the logic inside that function and wherever in our code we require to find the minimum age we can reuse this particular function in the same way we create a stored procedure we give that store procedure a name and then inside that we write a query and wherever we want to use that query we can use this proced procedure name so it is basically a collection of pre-written SQL statements grouped together under a specific name so procedures can be created in two types one is when we are passing some params in the procedure and one when we are not passing any params in the procedure that is parameters are empty so let's see the query on how we can create a procedure so we give create and then we give the procedure keyword then we provide the procedure name and if there are any pars we can provide else we can leave it empty then we give this begin which tells that now the query is beginning and then we provide the query and then we provide this end which basically tells now the query has ended now the procedure with the name procedure name is created now whenever we need to call this we can use this particular query that is call and then we give the procedure name and then we terminate it so basically call can be used to call the procedure and create procedure can be used to create a procedure so let's see an example where we are using a stored procedure without parms so here we are trying to create a procedure where we get all the order details so we'll give create and then we'll give procedure and then we'll give the procedure name if there are any params we'll provide but since it is without parm so we'll leave it as empty then we'll give begin and then we'll provide the query that is Select start from orders which will give me the entire order details and then we'll provide end and then to call the procedure we will use this call and then we'll provide the procedure name followed by the termination so in this way we can call the procedure and in this way we can create a procedure so let's see from the MySQL workbench so first we will create a procedure to get all order details so let's create so we'll give create proceed procedure and then we'll give the procedure name get order details and since there are no parms we live it as it is then we'll give begin to tell the query is beginning then we'll provide the query that is Select star from orders and then we will give this end to tell the query has entered now here you can see that we are getting some errors so what could be the reason behind it so if you remember that whenever we write any SQL query if we want to terminate the query we give this particular symbol now here what it is happening is we have provided the query and we have terminated it here only so it is treating this particular thing as a query so this begin is not able to find end because it has been terminated here only so what we do in this case is we provide a delimeter so what delimeter does is whenever we provide delimeter with any symbol it considers that symbols as a form of termination and it will not consider this particular symbol as a termination so that will remove my error so let's use this delimeter d e l i m i t e r and then we'll provide a symbol as a delimeter for now I have provided this symbol as a delimeter so here you can see that the error has gone but since I provided this symbol AS delimeter it will not consider here also termination it will not consider here also termination so what I'll do is I'll just remove this termination here and I'll just provide this delimeter so for now it is treating this entire query as a single query now since we have changed the delimeter there could be a possibility that in the further queries we have to provide this only so we'll just change that delimeter back to normal once the query is done so we'll just give this as the delimeter so now the delimeter is Chang as back to normal so let's just execute this query so here you can see that we have got a success now we want to see that if that particular procedure is created and what all details we are getting so we'll just use call and then we'll give the procedure name and if there are any params we'll provide else we'll leave this as empty so let's just call this so here you can see that I'm getting the ID and the order name basically all the details which were present in the order table I'm getting here so in this way we can create a procedure and in this way we can call the procedure so let's see another example where we want to return the details of order by ID now this is an example of store procedure with params so the query for the same is we give create then we give procedure then we provide the procedure name and then we give the column name and then we provide the data type now we give begin then we provide the query select star from orders where ID is equal to the ID which is provided here and then we provide this end keyword and to call this we basically use this call and then we provide the procedure name and then we provide the ID for which we are searching so what is views in SQL a view is a virtual table in SQL so consider that there is an employee table now this employee table is having details such as employee ID employee password employee name employee address now there are some people of the company who is making ID card for each and every employee so should we give the access to that particular people to access this employee table because this is also having employee password so this is a data breach right so we can't provide the access for this employee table to the people who are creating the ID card so in this case what we do is we give a view of this particular table so in this view we provide ID and name along with address which is needed to create the ID card but password is something which is not needed to create the ID card and also it is a secure data so we can't provide access or authorization for this particular table what we do is we create a view and the people who are creating ID card can now use this particular table it is a virtual table so can use this particular table to fetch the information and create the ID card so it helps in providing a filtered view of data for security purpose so let's see how we can create a view so we give this create and then we give view then we provide the view name and then we provide an Alas and here we provide all the columns from the base table which we want to show in the view so it basically specify the columns which should be included in the view so it helps in data abstraction security and simplifying the complex queries so if we are having a view table if we don't need some of the columns so we can just have a view table and we can do any kind of manipulation on that particular view table it is also helping in data abstraction because it is hiding the password from the ID people and it is also helping in the security purpose so so since view is just like a virtual table so all the things which we perform on table can be performed on views so to see all the data in the view we give select star from view name and to delete the view we give drop View and then we check that if this exists or not and then we provide the view name so all the things which we are performing on a table we can perform on the views also so let's see from the myl workbench that how we can create a view and how it can be used so let's just create a view so we'll create View and we'll give the name as employee View and then we'll provide an alas so we'll provide as and then we'll give the details which we want to show in the view table so first is ID second is name and third is City and then we'll give from and then we'll give the table name that is employee so here you can see we are getting a success now the view is created now on this employee view we can perform any operation so consider that I want to see the details of employee ID so I'll use this employe view table so I'll give select ID and then I'll use from and then I'll use this table name that is employee view so let me just execute this query so here you can see that I'm getting the ID details so view has basically reduce the size of my table and also it has only the valid details which is needed for the ID card department to create that ID card now what is this case and if used for so whenever we want to perform any conditional logic in our queries and on on basis of that we want some values we use this case and if statement so let's see so case allows you to perform conditional logic within a query so whenever we want to perform a conditional logic in our query we use this case now it can be used with both select as well as update statement to evaluate the condition and return the specific values based on those condition so if there is a condition C1 it will return the value R1 if there is a condition C2 it will return the value R2 So based on some specific condition if we are getting some specific result we use the case in SQL now consider on the basis of day number you have to print the day if the day number is one you have to print Monday if day number is two you have to print Tuesday and so on so how you can use the case statement here so let's go to the query so we'll give case and then we provide this when and then we provide the conditions so here we can give the condition as day number is equal to 1 and then we provide this then and then we provide the results so when day number is one we provide it as Monday now coming to next statement so we will give when and then the condition two is day number is equal to two and then the result is Tuesday so in this manner we can provide for all the days but consider if someone provides the day number as nine so this is a invalid case because we have only seven days so we can provide it in lse statement that else if none of the day number matches then we can provide the result as invalid so we can provide the invalid here and then we can end our case so it just acts like a switch statement which is present in our programming so we can use the case like that now case can be used with select as well as update statement so let's see the use cases so the very first question is categorize the student on the basis of percentage to top pass and fail in a new column category so you have been provided with a student percent and then you have to categorize this percentage on the Bas B of top pass and fail so consider if a student achieves a percentage greater than 90 it lies in the Top If the percentage is between 89 to 34 it lies in the pass if the percentage is less than 33 then it lies in the field so we have to categorize the student we have to show all these values in a new column called as category so let's see that how we can do so we'll give the query as select and then all the columns which we want to show in the final result that is student ID student name and percentage and then we'll provide the case so first case is when the percentage is greater than 90 the student will be having top second is when the percentage is between 89 to 34 then the category will be pass and last case is when the student is having less than 33% so we can provide that in else block so we can give else fail and then we can end this case but now we want to show all these categories in a new column or you can say alternate column category so we'll provide an alias and we will provide here category so it will show all these results stop pass and fail in the category so and then we will provide from followed by the table name that is student so in this way we write the query for the case when we are using the select statement now let's see the use case of case with the update statement so consider that there are some student who have got some Grace marks now earlier the student grades were A+ a b B+ but now some student have got some Grace marks so update their grades where it's a update it to A+ and wherever it's B update to a so we have to update the grade of the student whenever we encounter a we have to update it to A+ whenever we encounter B we have to update it to a because they have got some Grace marks so let's see how we can use case here so we'll give update followed by the table name that is student then we provide this set that go ahead and set that particular value and then we'll provide in which column we want to set the value that is grade and then we will provide this particular case now when the grade is equal to B then go ahead and update it to a and when the grade is equal to a then go ahead and update it to A+ so this case will give me the values based on if the grade is a or if the grade is B go ahead and update it to A+ as well as a and then we can end the statement so it will go ahead and update this particular value for this particular column whenever we encounter a it will be updated to A+ whenever we encounter B it will be updated to a so let's see the use case of if so it is used to return one two values depending on whether a condition is true or false it is not supported in many DBS but it is supported in myos schol so the query is we provide if and then we provide the condition like consider day number equal to 1 now then we provide the True Value and if this is not true if this condition is not true then we provide the false value so if day number is One update or select this particular value if day number is not one go ahead and select or update this particular value so let's see its use cases so first is categorize the students on the basis of their percentage to top pass fail in a new column category it's the same question so here if the percentage is greater than 90 so it is a top student If the percentage is between 89 to 34 it is a past student and if the percentage is less than 33 so it is a fail student so now we have three categories or we have three condition but using if we can only provide one condition on basis so C1 either we can give the result as R1 or R2 but we have three condition here so how we can use this so we'll use nested if so we will use if inside if and using this we can make the query so let's see so first for these two cases we will give it an if and then we will cover the third case because if the percentage is greater than 9 90% it will not come into this block but if the percentage is not greater than 90% it will surely come to this block so let's see so first we will give the inner block where we will give if percentage is between 89 to 34 then give as pass else give as fail so if this particular condition is true provide the value as pass L provide the value as fail now this particular if block will take care of these two condition now coming to the final condition so what we can do it we'll give select Sid name percentage all the column which we want to see in the final result then we will provide if and then we'll provide percentage so if the percentage is greater than 90 go ahead and give the Top If this fails the percentage is not greater than 90 so it will lie in this particular range then execute this inner riff so what it will do is when the percentage is greater than 90 it will go ahead and give the value a stop if the percentage is not greater than 90 then it will go ahead and check in these particular two condition that it lies in 89 to 34 or if it is less than 33 and here it will check if it lies in 89 to 34 then it is pass if it does not lies in this as well as this then this is fail so in this way we use the if inside if or you can say nested if and then we provide as because we want to show it in a new column category so it will provide an alternate name and then it will create a category and then we can provide from and then we can provide the table name that is student now you may be thinking that case is very much easier than using IF but if you use the if the time complex would be lesser than case so in if the time complexity is very less so the queries run very faster but when you use the case the time complexity is a bit more than if so the queries take time to run now let's see the next one that is if with update statement so we have to swap all the F and M values that is change all the F values to M and visce versa so consider that there is a table where we have updated the wrong male and female so we have to swap the value of f with m and M values with f with a single update statement and no intermediate temporary tables so here we need to swap the values it's kind of updating the value into our table so let's see the query so first we'll give update and then we'll provide the table name that is employee so go ahead and update the employee table and then we'll provide the set set the value in the gender column and the condition is if gender is equal to M set the value as F and if the gender is not equal to M then set the value is M so this is the true when this particular condition satisfy this is the false value so if this particular condition satisfy then set the value as F if this particular condition does not satisfy then set the value as M so it will go ahead and find if m is there it will swap with f if f is there it will swap with M so consider if this is the gender column and in the gender column we have consider three rows where it is M F and M so first it will go to this row so it will come here set gender equal to if gender is equal to m is gender equal to M yes so we have to update the value to F so now it will give me F this particular conditional statement so it will go ahead and update the value as F here now it will again come to the second row it will check that if the gender is equal to M no the gender is not equal to M it's equal to F so it will come to the false value and it will update it to M so it will go ahead and update it to M now again it will come to this particular row and it will see if the gender is equal to M yes so it will go ahead and update it f it will give me the result as F so it would be updated as F so in this way this particular if conditional statement works now let's start with top SQL interview questions so the very first question is we have to write a SQL query first to create a database company second to create a table employee in it and third is we have to delete or drop the database so it's kind of a revision of how we create the database how we create a table in the database how we delete the database so let's see so first is create a database company so the command for it is first we give create and then we give database and then we provide the database name that is company now the second is create a table employee inside that particular company database now in the SQL Server there are multiple database consider this is DB1 this is db2 so we need to tell the SQL Server that I want to create a table in this DB1 so for that we use this particular command use and then we provide the database name so it tells the server to create the table inside this particular DB dat is company now let's see how we can create the table so we give create table followed by the table name and then we provide all the columns which would be present inside our table so these are the columns name after the column name we provide the data type of these particular columns like employee ID would be holding integer values first name will be holding vcat that is character values last name would be holding vcat that is character values now in the third place we provide the Integrity constraints if there are any so here we have provided that employee ID is acting as a primary key here we haven't provided anything and here also we haven't provided anything so we basically provide the column name the data type and then the Integrity constraint now the third is delete the database company now we have to delete or remove the database from our SQL Server so what we can do is we provide the command drop which basically means delete and then we provide database and then we provide the database name that is company so in this way we can delete the database from our SQL Server now let's see the next question so we have to write the SQL query to First create a table employee second insert data into the table employee third update the salary for all the people in HR department to 20,000 and fourth delete the data for employee having employee ID as one fifth delete the entire table so there are five things which we have to do as part of this question so let's start with the first so we have to create a table employee so again we'll give the command create table followed by the table name that is employee then we'll provide all the columns so here it is employee ID employee name employee department and employee salary then we'll provide the data type so employee ID will be holding integer values employee name would be holding string or character values department will be holding character values and salary would be holding integer values then we provide if there are any Integrity constraint so here we are saying that employee ID is a primary key which basically means that employee ID will always hold unique as well as non-null values so this is the way how we create a table now the second is we have to insert the data into the table so we have created a table now the next step is we have to insert the data into the table so let's see how we can insert data into the table employee so we give the command insert and then we provide into and then we provide the table name that is employee if you want the data to be inserted in the same order you don't need to provide the order in which you want the data to be stored but if there is a different order like first you want to store employee ID and then you want to store the value of Department followed by name then you need to provide the order so this is a optional thing if you want the entire data set to be stored in this particular manner you don't need to provide it but it's better to provide because eventually we would be knowing that if employee ID is at the first place so we have to give a integer value if name is at the second place we have to give a character value followed by department and salary so here we provide all the columns in which manner we want our data to be inserted so the First Data would be inserted in employee ID the second in name the third in department and the fourth in salary so again we provide values to provide the values which we need to insert in these particular columns and then we provide the values so now one is inserted in employee ID re is inserted in name it is inserted in department and 30,000 is inserted in salary in the same way we provide for the second value that is 2 Rahul HR and 15,000 so in this way we have inserted values in our table now the third is we have to update the salary for all the people in HR department to 20,000 now we have created a table we have inserted data into this particular table now we need to find a department having the name as HR and corresponding to this particular Department we have to find the salary column and we have to update the salary everywhere we find the department as HR so what we do is we provide this update command and then we provide the table name and then we give this set so set basically means go ahead and set this particular value so it will set the value and we have to set salary as 20,000 and then we provide the condition that where you want to set the salary as 20,000 so we provide where and then we provide the column name in which we want to set it and then we provide it as HR so update the employee table set the salary as 20,000 where department is equal to HR that is what our question was update salary for all people in HR department to 20,000 now the fourth is delete the data for employee having employee ID as one so we have to delete the data for our employee who is having employee ID as one so what we have to do is we have to give this delete command then we have to provide from and then we have to provide the table name that is employee and then we have to provide the condition like where you want to delete this data so where employee ID is equal to 1 if you only provide this it will go ahead and delete the entire set of data which is present in the employee table but when we provide the condition it will go ahead and find the employee ID one and it will go ahead and delete this particular Row from our table now the fifth query is we have to delete the entire table so for deleting the entire table again we use the drop command so we use drop table followed by the table name that is employee if we want to delete a database we use drop database followed by the database name now consider that you don't want to delete the table you just want to delete the entire set of data which is present in our table so for that you can use delete from employee which I told in the last slide as well that if you use only this particular command it will go ahead and delete the entire data set it won't delete the table but now your table won't be having any data now let's see the next question so we have to write a query to find the total number of employees working in the IT department so we have been provided with a table we have to find the total number of employees who are working in the IT department from here you can see that we can tell there are two employees who are working in IT department but in real life the database is very huge so we need to write a query to find the total number of employees who are working in the IT department now to find the number of employees or the total or you can say count we use a aggregate function that is count so count is a SQL aggregate function that Returns the total number of rows in a specified table or query so count what it does it it counts all the rows which is present in our table so if I do a count star it will go ahead and count the entire set of rows which is present in our table so it will tell me that there are five rows which are present in our table now it count all the row regardless of whether they contain null values or not even if there are any null values present in one more row which is having only n values it will go ahead and count that as well so it's not like it will ignore the null values it will also count the null values Now using this count star we can find the total number of employees who are working in IT department so let's see so what we will do is first we will select the table so we have given select now we need to provide countar which will go ahead and count the number of rows which is present in table so right now it is five so it will count five then we give from and then we provide the table name so this will give me the result as five so right now the count star from employee of this particular table gives me five rows now we need to find the number of employees who are working in only it Department here it is giving me the count of entire rows which is present in my table but I only want the row which is having Department as ID so that I'll provide in the condition where department is equal to it so whenever I provide this condition countstar will go and then see that which all department is having it and it will just count that so the count star will then return me two so here you can see that if I do just a count star for a given table it will return all the rows but if I have a specified condition consider that I want to know for HR department so I'll replace this department it with HR consider I want to know for marketing so I'll just replace it and it will give me the count of all the employees who are working in the HR department marketing department or it department now the next question is write a query to find all the employees that have their name starting from R so we have to find all the employees who are present in my table who have their name starting from R so here we can see that there are two people who are having names starting with her that is Rahul and Raj but in real life the databases are so huge and there are lot of set of data which is present so we oftenly write a query to fetch our given condition now here the condition is the name should start from R so do you remember about that like operator so like operator help us to return any pattern or any matching values so like it is used to search for a specified pattern in a column if you want a pattern like name starts with r but ends with t so for these particular type of patterns we use this like operator now like operator is oftenly used with percentage and underscore for searching patterns so let's see so here we have to find all the employees who have their name starting with r so so what we will do is first we will select the entire table then we will give from here Aster means select all the rows and then we provide the table name that is employed then we give where and then we provide this column name on which column we want to provide this like operator that is name and then we provide this like operator so that is R followed by percentage now what this query says is go ahead in this employee table fetch all the columns all the rows and there is a condition that go to the column name and find the name who is having r as the starting character but this percentage says that the rest of characters can be anything consider if you want to find people who are having r i in their first name so we'll give RI followed by percentage so it basically says that RI should be the first or second character and rest of the characters can be anything so basically it makes a pattern for us and we have to go in our table and find for this particular pattern where I get r i in the first name and it will go ahead and search in the entire table now let's see some scenarios where we can use the like operator so consider that I want to find the name which starts with a so I'll give like a and followed by percentage which means that after a there could be any set of characters can have any values then the next we have to find the name that contains ra inside it so we have given two character that should be contained in any name so at the first there could be any characters at the last also there could be any characters but the name should be having AR inside it so we will give like per which Maks that there should be n number of characters before R then percentage which says that should be n number of characters after R and then we give this array now here I have said that there could be n number of characters but what if I want only limited set of characters or what if I only say that my name has only five characters or search for a name who is having only five characters and having r at the start or r at the end so that type of question we can also deal using the like operator let's see the next pattern where we have to find the name which starts with with a and have exactly five characters in the name so there should be only five characters in the name and the name should start with a we have to find this particular pattern so for finding this we would be using this underscore which basically matches the number of pattern so am person says there could be n number of characters but this underscore says that there should be only one character which is present if I have given a underscore so I'll just give like a and then I'll provide 4 underscore because it says that the name should start with a and the name should only have five characters so in this way I can find the name so I guess there is a small typo here it should be a followed by 4core which matches the criteria that the name should start with a and have exactly five character so let's see the next pattern where name has a as the second character so I have to find the name of all the person or all the employees who have a as the second character in their name so let's see so if I just give a underscore it will consider one character so I can say underscore a so it will tell that go ahead and find all the names who is having first character as anything but second character as a and then there should be n number of character so it would be like Then followed by underscore for first character then a for the second character and uh percentage for the rest of the characters so let's see the next question we have to write a query to find the unique salaries in the employee table so we have to find all the unique or you can say distinct salaries in the employee table for this we would be using the distinct keyword so distinct keyword is used to retrieve unique records from a table and we have to find the unique salary so we'll give select and then we will give distinct followed by the column name on which we want the distinct value and then we will give from and then we'll provide the table name so this will give me distinct salary from this particular salary column now the next question is write a query to find the second highest salary in a table so we know the query to find the first highest salary date that is Select Max salary and then we give from and then we give the table name that is employee so here Max is an aggregate function which works on a column and gives the maximum value of that particular column or attribute now this particular select Max salary from employee will give me the maximum salary which is present here so let's see what is the maximum salary so that is 2500 but we need to find the second highest salary now the second highest salary here is 2400 not 2500 so how we will find the second highest Sal salary what we can do is we know the first highest salary from this particular query so we will again write a query and we'll say where Max salary is not equal to 2500 then it will give me 2400 so is it sounding confusing uh don't worry let's see the query first so what we will do is first we'll write select Max salary from employee where salary not equal to and then we have written a subquery so first this particular subquery would be executed so what is the subquery select Max salary from employee now what is the max salary here that is 2500 so this is our query after executing the subquery now we have to find the max salary from employee where salary this means not equal to so not equal to 2500 so we have to find the maximum salary here with salary is not equal to 2500 so let's discard this 2500 from here and let's find the maximum salary this is 2400 and 2400 is not equal to 500 so we can say the second highest salary is the one in which we exclude the first highest salary so in this way we can get the second highest salary so max gives us the aggregated max value from a column now let's see a query to find the nth highest salary in a given table so we know how to find the first highest salary we know how to find the second highest salary but we have to find the nth highest salary where n can be any natural number 1 2 3 4 any natural number till n now if we want to find the third highest salary we would be then finding the second highest salary the first highest salary and we would be excluding it from the third highest salary so that is not a suggested way so that is why we need to make a query where we can only give the value of N and we can get the nth highest salary consider if value of n is five we can get the fifth highest salary so for that what we will do is first let's discuss about order by and limit Clause so order by Clause is basically used to order the column either in descending or ascending order and limit Clause given by by m andn it helps to retrieve a specific range of rows so if we want a specific range of rows we use limit M comma n now here m is the number of rows which we need to skip from the beginning so consider if m is given as two so we need to skip two rows from the beginning and N is the number of rows we want to fetch after skipping so after skipping this two rows what are the number of rows which we want to fetch so consider I want to fetch three and four so I can give the value of MS2 and ns2 so it will skip two rows and it will give me 2725 now consider if I give the value of n as 1 so it will only give me 27 so in this way this mnn works now let's see the query so first what we do is we select the salary now here we have provided distinct because we need to find the fifth highest salary but there could be a possibility that 1 1200 is twice 1500 is twice so we need to find the distinct salary and among that distinct or you can say unique salary we need to find the n highest salary consider first second or third highest salary so we have used a distinct for this column salary so it will distinct the values or it will give me unique values of salary then we provide from and then we provide the table name sorry it would be employee here and then we give this order by clause and then we give the column name on which we want to order the value so order by basically orders the salary in ascending or descending order so we need to find the highest so we will be ordering it in descending order which basically means order the salary in sending order so what we will do is first we'll get the distinct salary so let's take the distinct salary that would be 1,500 2,000 2,500 2,400 and again, 1500 is repeated twice and we are taking the distinct salary so these would be the salaries now what we have to do is we have order by in descending order so what we will do is we will order this in descending order that would be 2500 2400 2,500 now what we need to do is consider that if I want this particular salary that is the second highest salary so for this if I want to put a limit what I'll do is I'll skip one row from the starting and then I'll get the first row after skipping so the value of M would be 1 and N would be one consider if I want the third highest salary so the value of M would be two because I need to skip two rows from the beginning and the value of n would be n so if you see the value of M is always nus 1 so that is 3 - 1 that is 2 so so whatever is the value of n we are just subtracting one from that so we can say the value of M would be n minus one and the value of n we always want only one row so that would be one so it will be limit n minus 1 that is the value of n N1 is the value of n so in this way we can get the nth highest salary you can like use this query for any of the highest salary 6 7 8 any of the nth highest salary now let's see the next question we have to write a query to find the top two highest salaries from a given table so we have to only find the top two highest salary so how we can do that first we have this salary column and in the last slide you learned that we can use this order by Clause to get the maximum salary at the first so we'll use the order by clause on this salary column it will order all the value according to the descending order consider 1 2 3 and now we need to fetch One and Two from this particular list so what we can do is we can give select salary and then we can provide the table name from employee and then we can order the salary in the descend order basically the column name and then the order in which we want to order and then here we can give limit m n n so m is the number of rows which we are skipping but here we want to find the top two so we are skipping nothing so we can give it zero or we can just ignore it and we need the value of n that after skipping what are the rows which you want so we want two rows so we can give limit two so in this way we can find the top two highest salary in a given table now let's see the next question so next question is write a query to calculate the total salary and average salary in a department so we learned about aggregate function and how it works on an aggregated set of value so we can use the aggregate function sum here and average here to find the total salary and the average salary so sum if applied on this particular salary column so it will just calculate 1500 + 2,000 + 2500 plus 2400 +500 and it will give me the sum or the total salary and if I do the average it will just perform a average here and it will give me the average value so sum and average both will be giving me only one value because it is working on an aggregated set of data so now here I want to find the Department's total salary and average salary and here you can see that there are multiple departments it Department HR department marketing and finance so we need to group these particular departments as well so let's see the query for the same so what we will do is we will select the department and we need to find the total and average salary so we'll be giving some salary and average salary and here we are using an Alia so alas is basically an alternate name so it will just do the total of salary and it will give a alternate column total salary where we would be having the result of this total salary consider X and in the same way it will provide an alternate column in the result and it will give me the average salary but these columns are not created it's just an alternate or you can say a temporary column so I'll get Department I'll get the average salary I'll get the total salary but now I want each department total and each department average so I'll be using this group by Clause Group by Will Group all the department accordingly so it will group it HR Finance marketing into subgroups and for that particular groups we'll get the average salary and we'll get the total salary again for finance we'll get the average salary and the total salary so consider if there is a column order in which we have kurkur dairy milk and Maggie and we want to know that what is the total amount of all the sales which has happened for Kuru for Maggie and for dairy milk so what we can do is we can group them accordingly and then we can find the total sales and then the average sales for them so in this way we find the total salary and average salary for a particular department so the next question is write a query to find the rows where a department has null values so if we don't provide any value for a department for a particular record or you can say for a particular data entry it fills a null value there if we don't provide a not null constraint so we need to find all the rows where a particular column or you can say department has null values so there is a operator called as isnull which we can use so we'll give select and then we need to find all the column so we'll give star from and then we provide the table name that is employee then we'll provide the condition where the column name here it is department and then we provide this isal so basically what it does it it goes in the department and it find if there is any null value present here or not if there is any null value found in any row it will go ahead and return that particular Row in the final result and all the details of that particular row so let's see the next question we have to write a query to find the duplicate rows in employee for the given column department so this is my employee table in this particular employee table I have to go to this particular column department and I have to see that which all department is having duplicacy so here if you see the department is it here and here as well so can we say that there is a duplicacy for Department call in these two IDs 1 and three yes we can say now coming to HR so HR is not getting duplicated anywhere marketing it's not Finance it's not but again it's a small table but there could be a huge table or huge data sets so for that we have to write a query now what we can do here is first we need to find all the Departments according to their group so we need to find that if there is any duplicacy in IT department in HR department in marketing department and in finance department so we need to find according to the Departments if there is any duplicacy or not so what we will do is we will apply a group by clause on our department column so that it groups the data accordingly now we need to find that if these particular groups are having the count greater than one if they are having the count greater than one it means that there are some duplicate values which are present if I say that it department is having only the count as one so it department is only present one time if I said if it department is having the count as two so it department is getting duplicated and that is what we have to find the duplicate rows so wherever count is greater than one we can say that there is a duplicacy now how can we find this particular count so we can use this count star Now using this count star it basically counts all the rows which is present in our table so right now count star for this particular table can give me the value as five but I only want the count for the department so consider if I give a condition where department is equal to it so it will only count the row who are having the department as it so if if I count it is one and two so then the count star will be giving me two but here I want for all the groups of department for it HR marketing and finance so what I'll do is I'll apply this count star on this particular group and then I'll check that whenever the group is having the count greater than one then we can say that there is a duplicacy so the query is Select then we need to select the department on which we are applying the group by then we give the count star and then we provide from and then the table name and then we provide the group by clause which is group the department according to HR marketing finance and it and then we provide a condition having so having we have used here because we have used the aggregated function so having count star greater than one so we'll just find the count star for each consider for HR it's one for marketing it's one for finance it's one and for it it's two the countstar is one one one and two for them and now I need to find that wherever count star is greater than one there is a duplicacy so we can say that it department has a duplicacy now if you're not understanding about all these things I'll really suggest you just go ahead and watch a comprehensive oneshot tutorial which is uploaded on my YouTube channel so that at least you get clear on these terms and then you can come to this video to practice some questions so now let's jump to some theoretical question so first question is what is SQL now SQL stands for standard query language it is a standard language which is used for managing and manipulating our databases so whenever we need to do any man like any crud operations in our database so what is crud operation crud operation is basically creating reading updating and deleting so whenever we need to perform any crud operations in our database we use SQL now the second question is what is the difference between delete and trunk it so delete removes the rows from the table based on a condition but truncate remove all the rows from a table so if we want to remove a specific Row from a table we use this delete command but if we want to remove the entire data set which is present in our table we use the trunet command now delete can be rolled back because it contains all the locks but trunet can't be rolled back because it doesn't lock the individual rows and it can't be roll backed now the next question is what is Union and Union all so Union combines the result of two queries and remove the duplicate rows so whenever we perform Union between two tables A and B so it will just remove the duplicate rows which is present and it will give me this particular data and this particular data whereas Union all combines the result of two queries and include all duplicates so if there are two queries A and B it will give me the result of a it will give me the result of B and it will also include the duplicacy which is present between them so Union combine the result of two queries and remove the duplicate rows whereas Union all combines the result of queries and give the duplicate rows as well now next question is what is store procedure so a store procedure is prepared SQL code that you can save and reuse so whenever we create a procedure we can use it anywhere in our SQL queries so that we don't need to type a same query again and again consider if I want to find the max salary of a person in many of the queries so I'll just create a store procedure and I'll be using that store procedure in number of queries so that we can save it and we can reuse it as well now coming to the next question what is the difference between care and V care so care is used whenever we have a data of fixed length so if I know that name would only be having five characters like all the names which is inserted in our employee table would be only having five characters then I can use car and I can give five but when I know that they should be having a variable length consider email email of a person can be having variable length some can have 50 characters in the email but some can have 100 characters also in the email so for that use case we use Vare which is used when we have data with variable length so even if I'm giving Vare and consider if I'm giving 20 if my email is is having 22 characters it will just extend itself so it's a dynamic way of storage and you can say that car is a static way of storage now coming to the next question that is explain the types of joints in SQL so the very first join is inner join so what inner join says that if there are two sets a and b or you can say two table A and B it returns all the records that have matching values in both the tables so the matching values lies here consider I'm naming it as C so inner joint returns me all the matching values which is present in a as well as B so it will return me c now coming to left outer joint so left outer joint returns all the records from the left table and the match records from the right table so it will return return all the records which is present in the left table that is a and it will return return the match records from the left as well as right table that is C now coming to right outer joint so it returns all the records from the right table and the Matched records from the left table so it will return all the records from the right table and then the mashed records of the left and right table so that is B+ C now coming to full outer joint so it returns all the records when there is a match either in left or in the right table so it will return all the records if there is any match between the left or the right table so it will give me records from this left table the right table and then the records which are matching between them that is a plus b plus C now coming to cross joints so it Returns the cartisian product of two tables so whenever we are performing a cross product between two tables that is all the elements of table one is getting cross product with all the elements of table two that is table B then we say it as cross joint and coming to self join so cell join is a join where a table is joined with itself so whenever we are performing join between two tables who are having the same data set we can say that this is a cell Jo now coming to next question what is null in SQL so null in SQL is basically used whenever we want to encounter or whenever we want to save any null values so it is used to handle null values in SQL now coming to next question what is a foreign key so foreign key is a key that helps in establishing a relationship between two tables so if there are two tables A and B so foreign key help us to establish relationship between two table and foreign key is a key which take reference from the primary key in the base table so you can say that foreign key help us to establish a relationship and foreign key also take reference from the primary key in the base table so it uniquely identifies a row of another table so foreign key is a key which takes reference from the base table so it is also called it as referencing table and the table from which it is taking reference is called as reference table or you can say base table and foreign key in a given table can also act as a primary key can also not act as a primary key so it is not important for a foreign key to act as a primary key for another table it just take references from primary key of table a and it establishes a relationship between two tables now what is primary key so a primary key is a unique identifi or you can say a unique key which uniquely identifies records or you can say rows in a given table so if we have different rows in a given table and if we want a unique identifier that can help me uniquely identify record in a table so that is a primary key so we can see a primary key is a unique identifier or key which uniquely identifies all records in a given table or in a given relation now there are two constraint for a key to be a primary key that it it should always be unique so there shouldn't be any duplicate values here and it should always have Nal values so there couldn't be any null values here so if we are declaring any attribute as primary key it should always be unique it should always be not null and it should uniquely identify all the records or all the rows in our table now the next question is what is the difference between where and having Clause so where is used to filter records before any groupings are made so consider if we are grouping anything if we are grouping the department into it HR and we want to know that for that particular groups what are the total employees what is the total salary so before grouping the data if you want to filter the data we use the wear Clause but if we are grouping the data and if we want to perform some filter or some condition we use the having Clause so having Clause is used to filter records after groupings are made or you can say basically when whenever we are using aggregate function like group by we can use this having Clause so having Clause is used after grouping the data and where Clause is used before grouping the data and both are used for filteration or you can say providing some condition now coming to next question what is views in SQL so views are are a kind of virtual table in SQL so whenever we are creating a virtual table for security purpose consider that there is a huge table of employee and I want to create ID card for these particular employees but do the people who are making ID card needs to know that what is the salary of this particular employee no so these are some data which needs to be remain with us only so we'll just provide a view of this particular table who would be having a new table or you can say a virtual table which would be only having employee name and employee ID which would required by the department who are making ID cards so we are just hiding some of the details which is unnecessary or which is like secure which doesn't needs to be known by the department who are making the ID cards so views are a virtual table in SQL now what is default constraint so whenever we want to provide any default value for a given column we use this default constraint so whenever we need to fill a column with default or you can say fixed values we use default like set the default salary as zero where age is null it should be salary is null so whenever I'm not entering any value for the salary column and wherever salary is getting as null we will set the default value as zero so salary won't be having any null values if there is any null values or if we are not entering data for that particular field or you can say that particular record we can set the value as zero for them now next question is what is an alas command in SQL so Alias are temporary names which are given to a table or column which is just a temporary change that is table name does not change in the original database consider if if I am having a salary column in my employee table which is having some records and I need to find the total salary of all the employees so for that we can use an alternate name while calculating the total salary so we can use sum of salary to calculate the total salary and then I can use an Alas and then I can provide it as total salary so if I use this in my final result I'll be getting only one table which would be having only one column that is total salary and it will be having the total salary which I have calculated from here consider X so this is just an alternate name there is no changes to the database no changes to the table name it's just an alternate name you can say a temporary name which we are giving for any calculation which we are providing in any of our columns or set of columns now first we'll start with how we can think on what SQL Clause operator function to choose in given scenarios or given condition so the very first scenario is when we want to have a data retrieval so whenever you want to retrieve some data from the database it is oftenly suggested to use the select statement because select statement is used for retrieving data from one or more tables so whenever you want to retrieve some attributes or some data from the database you can use this select statement now coming to the second scenario that is data filtering so whenever we want some data to be filtered consider based on some condition or consider based on some of the logic so we would be using all these so first is wear Clause so we Clause is used to filter records based on some specific condition so whenever there is a table and in that particular table table there are some attributes as well as tles and if you want to filter some data based on some condition we can use this wear Clause now coming to and or and not operators so these operators are oftenly used whenever we want to combine two or three condition consider that I want the data of all the person whose age is greater than 80 and gender is equal to male so whenever we want to Club two conditions or multiple conditions we use this and or not operator now coming to between so whenever we want to do a search based on some specific range consider that I want the details of all the employees whose age lies between 18 to 50 so for this particular range if I want to do a search I can use the between operator now coming to in so in checks whether a specified value matches any value in the subquery OR list so we have a specified value and it checks that if that particular value matches in the particular list which is present here or in the subquery which is present here now coming to like so so whenever we have any pattern matching problems consider that we want the employee details whose name start with a we want the employee details who have a as the second character in their name so for all those questions we use this like operator so it is used for pattern matching we use it with percent as well as underscore where underscore represents a single character and percent represent the before or after characters now coming to the next scenario that is aggregation on data so whenever we want a single value for multiple rows we use this aggregation so what are all these aggregations so first is average it Returns the average value of a numeric column so if there is a column in a given table and if we want the average of that particular column we use this average consider if there is a salary column and I want the average salary it will go ahead and find the average for the entire set of rows which is present here now coming to Min it Returns the minimum value in a column like consider minimum salary coming to Max it Returns the maximum value in a column so if we want the maximum salary we can use this coming to sum it Returns the total sum of the numeric column so it goes ahead and add all the records or all the data which is present in this salary table and it will give me the total sum now coming to the count so count counts the number of non-null values in a specified column so consider if there is a column salary now salary has some values a b c and consider one value is null because there is no value so count will go ahead and count the number of rows but it excludes the null value so it will give me the output as 1 2 and three so whenever I performing count on the salary column it will give me the output as three because it will go ahead and count the number of rows which are having nonnull values now coming to count star so count star counts the total number of rows in a table including the rows with null value so if I'm using count star it will go ahead and count all the rows like it will include null as well as nonnull value so it will give me four as the output so count will exclude the null value vales count star will also include the null values now coming to the next scenario that is grouping and filtering of groups so whenever we want to do some grouping and whenever we want to do some filtering based on that groups so we use this group by and having so what is this group by used for so whenever we want to group rows that have the same values in a specified columns we use the group by so consider here there is salary a b c and consider there is one more salary a now here we can see that a and a is repeated twice like for the salary column there are two A's which is present right so we can group them in a single group then we can Group B then we can Group C like in Department we use to group Department basis on it HR marketing so Group by is basically used that whenever we want to group some data which is present in some specified column now coming to having Clause so having is basically a condition which is applied on the group by clause or you can say which is always applied to an aggregated data so where is applied whenever we want to filter data based on some condition when the aggregation hasn't happened but when the aggregation has happened we use the having clause for filtering the data so having Clause filter the groups based on some specific condition so we have formed the groups using the group by Clause now we want to filter on the basis of some conditions so we will be using having Clause now coming to the next scenario of sorting of data so whenever we want to sort our data in ascending or descending order we use this order by so order by sorts the result set by one or more columns so if there is a column consider the salary and if there are some salaries present considered one rupees 2 rupes 3 rupees we can sort these salaries based on ascending and descending order using order by by default the order by uses the ascending order so if we have to give for descending order we have to say that the order should be descending so we have to give it explicitly now coming to the next scenario that is data retrieval from combination of two or more tables so consider that there are two tables student and student course details now I want some data from this table as well as this table so I have to join this table so that is why join is used so what happens we can join these tables to fet some data from this table as well as this table based on a specific column which is common between them so there are some joints inner joint left join right join full joint which combine rows from two or more tables based on related columns So based on some related columns it combines the rows and give me the result now coming to the next scenario that is conditional logic so in where we were filtering the data based on some condition but how we can create the condition so for creating the condition we use this case and if so whenever we want to create some condition we can use this case and if so case perform conditional logic within a query using when then and else and if Returns the value depending on whether a condition is true or false so if we are using this if it Returns the value based on some condition so if this condition is true it will return the first value if this condition is false it will return the second value so this is how we use use the if and case we oftenly use with when and then so we give when and then we provide the condition and then we give the result so it is then and the result and then we end it when it's done so this is the way we use the case and this is the way we use the if let's see that how we can solve SQL question or what is the approach we should follow so the very first step is understand what the question says so we need to understand that what the question exactly says like if the question is asking for some retrieval of data if it's asking for aggregated result or joining tables or performing some updates or deletes so we have to go through the question and we have to figure out that what specific condition it needs to be accommodated there now coming to step two check the data type constraints primary key foreign key and the relationship between the tables so if there are multiple tables we have to check the foreign key and the relationship between those table if there is a single table or consider if there is a table we need to check the data type of given columns or attributes the constraints if there are any present the primary key which is for that particular table so we have to check for all those things now coming to step three we have to use the appropriate SQL Clauses and functions so as discussed in the last set of slides that if there is any data retrieval we can use select if there is any filtering based on some condition we can use where if there is any grouping we can use Group by if we need to do filtering on the groups we can use having so in the same way we need to know what are the appropriate esql Clauses or function we can use here now coming to step four ensure appropriate indexes on the column in We join and order by Clauses so whenever we are using this We join and order by Clauses we have to make sure that we are performing the operations based on the indexed column only so indexing help us to have the results very fast and it increases the query time if there is no indexing present it will go ahead and scan the entire database so that will take a lot of time right so the query increases its time whenever there is no indexing present but if there is indexing present the data retrieval is very fast so these are the questions which we would be discussing I'll provide the links in the description so you can go ahead and watch out the questions and then go ahead and solve it once so first question is swap salary second is duplicate emails third is employee earning more than their managers fourth is not boring movies and fifth is class more than five students so let's start with swap salary so what is the question so we have to write a solution to swap all F and M values that is change all F values to M and vice versa with a single update statement and no intermediate temporary table so there is a salary table which is given which is having column such as ID name sex and salary and what we have to do is we have to change M to F whenever we found M and we have to change F to M whenever we found f so we have to basically do a swap for M to F and F to m in this particular salary table so take 2 minutes and think that how we can approach this this question and then we would be solving this problem so let's start with solving the problem so what is given here it is given that we have to swap these values M with f and f with M apart from this there is one more thing which is given that we have to do an update and it would only be a single update like there shouldn't be any multiple updates involved the third given thing is that we don't need or we shouldn't make any temporary tables so temporary tables is not allowed so here can you see that we are forming some kind of condition that whenever we are encountering M swap it with f whenever we are encountering F swap it with M so here we are forming some small kind of condition so can we use this if and case here since we are making a condition yes we can use so how we can use is we'll use if sex is equal to M go ahead and update the value as F and if the X is not equal to M go ahead and update the value to M so would this work let's see so it will come here is SE equal to M yes so go ahead and update it to F so it will go ahead and update it to F now coming to this is x equal to M no so go ahead and update it to M so it will go ahead and update it to M now coming to this is x equal to M yes so go ahead and update it to F so it will go ahead and update it to F now coming to the last row is sex equal to M no it's F so go ahead and update it to M so so it will go ahead and update it to him so here you can see that it has swapped and updated all the values so we can use this if for forming the condition and we have to update this particular table so we have to form the query in such a way that we have to update this table that is a salary table and what we have to do is we have to set the sex based on whatever value this condition is giving me so in this way we can form the query for this particular question we are going ahead we are updating the salary table we are setting the value of six based on a condition that if six is equal to M set it to F if it's not equal to M then go ahead and set it to M so in this way we can perform this particular query let's go ahead and solve it from lead code and let's see that if the solution is working or not so here we have to update and the table name here is salary so we'll just pick this so salary and then we have to set the value in the column six where if 6X is equal to M then go ahead and set the value as F if this condition is false then set the value as M so if the sex is M that is male then go ahead and set the value to F that is female if it's not male then go ahead and set the value as male so this is the final query which we have made so let's just execute this query and see if it's running or not so it has run successfully for the test case which was provided here so let's just submit the solution and we'll see that if it is getting accepted or not so it has accepted so this is how we can swap the salary so coming to the next question that is duplicate emails so this is the table person table which is having ID as well as email in the output we have to provide the email which is duplicated or which has more than one occurrence so write a solution to report all the duplicate emails note that it's guaranteed that the email field is not null so email field would not have any null values now we have to return the result table in any order so there could be a possibility that there are two emails which have more than one occurrence so we don't have any order in which we want to return the result like if B has two occurrence and if a has three occurrence we have to return a first or B first so there is no ordering logic involved here we have to just return the email in any order so you can take a two minute pause here and you can think that how we can approach this question then we will start solving it so let's solve it so what is given so it's given that we have to find the duplicate email so that is all the emails who have occurrence more than one time in the given table now it is also given that email wouldn't have any null values and the third thing which is given is we can return the result in any order so there is no ordering object involved now we have to find the occurrence of email right so here you can see that there are some emails which is getting repeated twice so why not to group the emails so what we can do is we can group the emails in multiple groups like according to the same values we can form the group like there could be a group of a there could be a group of B there could be a group of c and all these are emails so why not to create the group of those emails and then go ahead and count the occurrence of that email so we'll group all the emails and then we will go ahead and count the number of occurrence of that email so it will go ahead and count the number of rows which is present with the email as a with the email as B and with the email as C so would that work yes that would work so what we will do is first we'll go ahead and group the emails so on the basis of values it will be grouped into three or four or many subgroups right now after it has been grouped into subgroups what we will do is we will go out and count for an individual email that what is the occurrence of this email then what is the occurrence of this email based on the groups only we are counting so we only need to perform this count logic once so what we will do is first we will group the emails and then we will go Ahad and count that how many occurrences of a is present in this particular group how many occurrences of B is present in this group how many occurrences of C is present in this group so what we will do in the query is first we will select email which we have to show in the final result and then it would be from and then the table name is person then we'll perform a group by by on the email and after grouping the email I'll give a condition that whenever the count of the email which is present in this aggregated group is greater than one go ahead and print that particular email in the final result we'll go ahead and count the occurrences of all those emails in this particular group and it will provide me all the emails who is having count greater than one so if a is occurring once B is occurring twice and C is occurring Thrice so we would be seeing B and C in the final result so this is how we can solve this particular question so let's see from the lead code so we will be giving the query as select and then the column name is email so let me just copy from here select email and then we will give the table name that is from and the table name is person so person it would be from and then we will give the group by by so it will be group by and then we'll provide the column name on which we are grouping so that would be email so we have formed the email groups now from that email group we have to filter all those emails who are having their count as greater than 1 so this is how we can form the query so let's just execute this query okay so it is accepted and it has run all the test cases so let me just submit it so here also the solution is accepted so this is how we can find the duplicate emails in a given group of data so coming to the next question employees earning more than their managers so we have to write the solution to find the employees who are earning more than their managers so there is an employee table which is given in which we have ID employee name employee salary and manager ID so let me name it as mid so if you consider a scenario of a company so every employee would be having some employee ID like I would be also having some employee ID my manager would be also having some employee ID my director will also have some employee ID so all the employees would be having some ID so that is mentioned here all the employees names are mentioned here all the employees salaries are mentioned here and in this man ID we provide the manager ID for this particular employee so consider if the first employee is Joe the salary is this and the manager ID is three so we'll go ahead and see that which is three in this ID column so that is Sam so the manager for Joe is Sam now coming to two that is Henry the salary is given and the manager ID is four so what is four in this particular column that is Max so we'll give Max here so max is the manager of Henry and Sam is the manager of Joe and coming to Sam and Max there are no manager maners because they themselves are manager so here you can see that this is the way we can figure out that who is the manager for this particular employee right now what we have to do is we have to find the employees who are earning more than their managers so we know all the employees now we know their managers as well from the manager ID now we have to find out all the employees who are earning more than their managers so how we will find it so just take a 2 minute pause think on the approach which you can think and then we'll go ahead and solve this particular problem so let's start solving so what we will do is we are given with a table which is having employee ID employee name employee salary and manager ID so here you can see that the manager ID is given like 3 4 null and null so right now I don't know that for the employee consider Jo who is the manager like I'm going ahead and manually writing Sam but there could be a database which is having like huge set of data so for that data I won't be going at and manually seeing the name and writing it here right and again I need the manager salary as well so here I'll be needing Sam salary and here I'll be needing Max salary so what we will do is we will figure out a way in which this particular manager ID displays me all the manager details right so this particular manager ID displays me the manager name manager salary manager personal details as well so what I'll do is I'll perform a join operation here now how I'll perform a join operation here so here you can see that there is a hierarchy which is getting formed right so here Joe is having Sam as the manager Henry is having Max as the manager and Sam and Henry are the employees so there is some hierarchy which is getting formed so for all these type of questions where we can see that there is some hierarchy getting formed and some sort of data is dependent on other set of data we use the join and here we will be using the self join so why we would be using the self joint because here there is only one table and we have to somehow figure out the manager details from this manager ID itself so what we will be doing is we will be performing self join that is we will be joining this table from itself so that whenever this table gets joined with this table like itself only we will get the manager details so how we will get the manager detail so consider that there are two tables for now E1 and E2 although these tables have same set of data but consider that this is the employee table and this is the manager table now I need all the manager details so what I do is I'll join this table with this table and the condition of join would be that even do manager ID is equal to e2. ID so e2. ID is the manager ID which is acting in the manager table so what we have to do is we have to replace this manager ID which is present in E1 or we have to do a join condition based on a condition where e1. manager ID is equal to e2. ID so we can replace one with all the details and we can can replace for with all the details like replacing here doesn't mean that we are replacing any data but we will get all the details so we'll perform a join operation here so that we can get the manager details and then we can perform the operation that where E1 do salary that is employee salary is greater than E2 do salary that is manager salary so we'll perform a join operation here so how we will do it so we'll give select and then what we need in the final result is employee name so we will give even do name because right now we are performing a self join and in cell join we are performing it on the same table so we can't give the same table name right so we have to provide an alternate name for this particular table so we are giving e1. name and then we will give from employee E1 and then we'll give the self join and then I'll give employee E2 that is right now a manager and this is the employee table and then I'll give the condition on which I'm joining that is even do manager ID is equal to e2. ID so that if e1. manager ID is three here so we can go ahead and populate the details for three and if e1. manager ID is four here so we can go ahead and populate the detail for four so three is Sam and four is Max so we can populate their details here now what we have to do is the condition is where E1 do salary that is employee salary is greater than E2 do salary that is manager salary so we have to check for employee salary which is greater than manager salary so we are doing a sell join here because there is some kind of hierarchy and relationship formed here again we are doing a sell join because here we only know the manager ID but we need to know the manager details manager salary details name and everything so that is why we are self joining so that we can get the manager detail from the other table now here we are naming it as E1 and E2 because we are performing the self join on the same table we can't give the same name whenever we are performing the cell joint so we have given E1 and E2 now this is how we can perform the cell joint if you're getting confused here I have uploaded a tutorial on self jooin in my YouTube channel you can go ahead and have a look so that all the concepts of the self jooin is clear once you understand the cell join this question is a cew walk so let's just solve it from lead code so what we will do is first we will select even. name and then the table is from employee E1 and then we'll perform the join operation with employee E2 and then we will give the condition on E1 dot let me pick the column name from here manager ID is equal to e2. ID and then we'll give the condition where E1 dot salary that is employee salary is greater than E2 do salary that is manager salary so we'll give the select even. name we want name then from this employee table even and then we are joining it with the employee table only so we'll give E1 and E2 then we will uh perform a query based on e1. manager ID is equal to e2. ID and we have to fetch the salaries where the salary of employees is greater than manager salary so I guess the table name here is employee so let me just replace this with employee and let's just run this query okay so we are getting wrong answer okay so here you can see that we are getting the wrong answer the reason behind it is in the output we are getting the table name as name but expected output is we want the table name as employee so what we will do is we will just provide an alas so we'll provide as employee so it will give an alternate name to this e1. name or name so let's just run this again so here you can see that now it has run successfully so this is how we can go ahead and check our errors and then modify the query as it is so here the error was that it wanted the name for the table to be employee but it was displaying as name so that is why the error was coming so this is how we can solve the question of employee earning more than than their manages now coming to the next question that is not boring movies so here we have to write a solution to report the movies with an odd numbered ID and a description that is not boring so we have to get all the movies who are having odd numbered ID and then the second thing is they should be having a description which is not equal to boring so I want to fetch all the movies who are having the odd number ID and the description is not equal to boring so return the result table ordered by rating in descending order after that we have to return the table ordered by the rating in descending order so this is what is given in this particular question so again take a 2 minutes pause think that what we can use here and how we can approach this question and then we will be solving it so so let's solve this question first we need to think that how we can find the odd numbered ID so odd number ID here is 1 3 and five so how we can find this IDs so whenever we do a modulus of any number with two and if it gives me the remainder as one we call it a odd number so here we would be using the inbuilt mod function which is present in es schol where we can provide the column name on which we want to perform the modulus operation then we can give the value that is two that we want to perform modulus on two and then we can compare that if the remainder is equal to one or not so using this we can get the odd numbered IDs now coming to description so description should not equal to boring so we should go to this description column and we should check that if the description is not equal to boring or we can also use this operator that is not equal to now coming to the next part that is we should order the result by rating in descending order so let's see that how we can form the query for the same so we'll give select and Then star because we want all the details which is present in the input table then we will give from and then we'll give Cinema and then we will give the condition where so the first condition is mod of ID and 2 is equal to 1 and the second condition is and description is not equal to boring and then we have to order the result so we'll be using order by and then we'll give the column name that is rating and then we'll give the order that is descending let's go to the lead code and write this particular query and see if it is a accepting solution or not so first we will give select and then we will give Star since we want all the results in the output then we will give him from and then the table name so that is Cinema so let me just copy this Cinema and then we will give the condition where the first condition is mod of ID comma 2 is equal to 1 and the second condition is description let me pick it from here only so description is not equal to and then the value is boring we'll give boring and then we will order the results so we'll use order by and then we'll give the column name that is rating and then the order that is descent so let me just run this query so here you can see that the query is accepted and has run all the test cases so let me just submit it so here you can see that the query has been accepted so this is how we can find the not boring movies now coming to the last question that is classes more than five student so we have to write a solution to find all the classes that has at least five student at least means either greater than or equal to five so we have to find all the classes who are having at least greater than or equal to five student so this is the course table which is having student as well as class all the student names are given and all the classes given now we have to find the class which is having more than five students so take a 2 minute pause think that how we can approach this question and then we will go ahead and discuss the solution so this is kind of a same question which we solved in the duplicating email so what we have to do is first we have got the classes as well as students so what we will do is we will form the group of all the class so we'll group the class and after we have grouped the class we will count the number of students so once we have group the class we'll count the number of student and whenever the count is greater than or equal to file we'll print it in the final result so it was very easy what we have to do is first we'll group the class so we'll group the class according to the value so there will be a class maths there will be a group of class English biology in this way there will be multiple groups now in all those groups there would be a students who are enrolled in these particular classes and then we can count the number of students in this particular groups and we can see that wherever the count is greater than or equal to five we have to return it in final result so let's see how we can form the query so first what we would be doing is we will be selecting class and then we'll give from and then the table name is courses and then we will be group grouping Group by class so we have formed the group of the class then we have to give a condition having count of student count greater than or equal to five so this is how we can write the query for the same first we will be selecting class then we would be grouping these class and then we would be counting the number of students which is present in this class so if the count of student is greater than or equal to five we will be returning those classes in the final result so let's see from lead code how we can solve this so first what we will be doing is we will be selecting class and then the table name is from courses so let me just copy it from here from courses and then we'll be giving the group buy group buy and then we'll give the column name that is class so then we'll give the condition having then we will give count and then we'll provide the column name that is student greater than or equal to 5 so this is how we can form the query for the same select the class from the courses table group the classes and then count the number of student in those groups and if it's greater than or equal to five return it in the final result so let's just run this query so here you can see that it has accepted and run for the test case so let me just submit this this is how we can approach a SQL question if you want a part three go ahead and comment part three I'll be bringing up more questions which would be very helpful in interviews so this was all about this video I hope you like this video so if you like this video please hit the like button if you're someone who is new to my channel can go ahead and watch out the tech content first and if you find it useful can go ahead and subscribe also if you have not followed me on my social media handles you can go ahead and follow the links are in the description till then take care here keep learning keep growing keep smiling bye all