as we all know database management system is one of the most popular concept to go for uh like you know understanding your data and managing your data in that part we have a concept called ear diagram that is nothing but entity relationship diagram the diagram is basically going to help you to make your database structure so in this tutorial we are going to talk about what is your diagram and how can you implement this concept in your own database management system the companies like ola uber and maybe not even need to uh specify the company name all the company has their own database management system so as it's a very popular concept to keep that in our mind we came up with this tutorial but before start the tutorial let me introduce that great learning has come up with the idea that is great learning academy where you will get almost 80 plus free courses and after completing your course you can claim your certificate as well and if you want to do this courses in your mobile application that is also possible using great learning app so let's get start with the tutorial now we are going to talk about ear diagram in sql but what is your diagram let's have a look at what is here diagram and how we are going to use this concepts right so let's go to the next part so what is dr diagram your diagram is basically a integer relationship model which is in short known as er model it helps to describe the structure of a particular database with the help of a diagram yes it's like a diagram that is known as integer relationship diagram or in short ear diagram right so now we are going to talk about what is here diagram how this diagram is actually going to help us to make our databases right is it interesting i know it's an interesting part and if you have a good knowledge on this part yes database is all in your hand right now we are going to talk about how this ear diagram came into the picture basically the history of ear diagram so ear diagrams are a visual tool which is used to represent the ear model it was invented by peter chain in 1971 to create a uniform convention which can also be used for relational database and network he aimed to even air the model as a conceptual modeling approach so this is how ear diagram came into the picture in 1971 by peter chaney now we are going to talk about some facts of ear diagram so what are those facts let's have a look at that your model helps to draw database design obviously it will help you to draw your database it will help you to you know manage your database and have a blueprint of your database right it is an easy to display graphical tool for modeling data mostly used in database design it is a gui gui means graphical user interface representation of the logical structure of a database right it assists you to identify the entities that exist in a system and the relationship between those entities so these are the facts we get to know about your diagram right now we are going to talk about why your diagram is used right so it helps to define the terms related to entity relationship modeling but what is that actually stands for right we know some tables we make we need you know the attributes we have yes so stable name those attributes are the part of entity and attributes right it basically helps you to define a total database using those entity name and using those attributes in the later in the section we are going to talk about what are those entities so basically in the first part of this tutorial we have learnt about what is sql how you can use the sql why do we need p's what is relational database management systems and also we have talked about tables attributes now we are going to do the same thing using the term of ear diagram because if you have a good knowledge on your diagram then you can start making the blueprint of your database and then you can go for uh putting your data into the database right first you need to know what is database how you can make your first database how can you start using those tables then we come to the ear diagram in a late version right why because if you don't know what is stable if i start talking hey we are going to talk about entity do you understand no right so first as you know the stable names are basically the entities we are going to talk about that as well then the attributes is also there and how can you start making the relationship between attributes and tables and entities we will see that as well right so it's basically helps to describe entities attributes relationships obviously and ear diagrams are convertible into relational tables the tables we know right that allows to build a database easily so if you know how to make a ear diagram if you know how to make a relationship between your entities or attributes yes to make your database is very easy with your diagram your diagram are used as a blueprint for implementing data in specific software applications so basically we can say your diagrams are the blueprint of your database right now we are going to talk about what the components we have in ear diagram i told you that we already whatever we have learned so far we are going to use those techniques only right but in the case of uh er diagram we are going to use some concepts or some names right okay so now let's have a look at what are the basic terms and most used concepts we have in ear diagram we have entities attributes and relationships right so each of them we will look about this what is entities what is attributes and what is relationship as well i hope this tutorial is going to help you to understand a sql or a whole database system end to end right and please do let us know in the comment what you feel about this tutorial as well right now we are going to talk about what is entity so entity defines the object or real world objects like place person object even or a concept that stores data in the database right i mean i am very in confusion that what is entity right okay let me give you an example and define you what is entities suppose you are talking about a person employee student patient they are your entities if you talk about store uh sorry if you talk about places then store and buildings is your entity and if you talk about the object then machine product car bike will be your entity right for the case of event sale registration renewal will be your entity and the concepts like account course this will be your entities so your entity will be like a place person or an object right so when you make a student table and under that there will be lots of attributes so your table name will be your entity right i hope it clears your doubt what is entity now we are going to talk about what is weak entity so we have two types of entity one is strong entity one is weak entity but what is the difference between strong and big entity we are going to talk about that as well first let's have a look at what is weak entity so weak entity isn't one type of entity that will not have its key attributes right and also can be identified in uniquely by considering the primary key of another entity so for by the name itself it's gonna say hey i'm a weak entity right so it's not going to have a primary key or uh some strong key points right as it's a weak entity now we are going to talk about what is the difference between strong entity state versus weak entity state yes let's have a look at that so for strong entity you will always have a primary key so as we all know that for our table to reduce the rate redundancy of the data we try to use a primary key yes so for a strong entity you will always have a primary key for your table for your student table you will have a student id that will be your primary key right but in the case of weak entity it does not have enough attributes to have a primary key your weak entity will not have a primary key so strong entity we represented by a rectangle symbol right and weak entity we are represented by a double rectangle symbol right so in the case of strong entity it has a primary key represented by the underlying symbol okay in the case of weak entity it has a partial key which is represented by a dashed underlying symbol so these are the symbol we use in ear diagram to understand our entities and attributes as well so these are the syntaxes we have and we will look into that as well right the member of a strong entity state is known as dominant entity state as you can see the strong entity always will be a dominant entity set the member of a weak entity state is always known as a subordinate entity set as it's a weak entity you can say hey it's a subordinate entity set right the primary key is one of its attributes which helps to identify its member right and in the case of weak entity in a weak entity set it is a combination of primary key and partial key of the strong entity set right so these are the main difference we can see when we talk about strong entity and weak entity right i hope you understand the difference between strong entity and the weak entity and again if you have any doubt please do let us know in the comment section we will be glad to solve your doubts right now we are going to talk about what is attributes attributes is basically stand for single valued field or property of either an identity type or a relationship type wait what are you saying i don't get it let me just define you what is attributes so when we talk about a table called student table miles have different attributes we quite talk about these attributes right the student name student id and the student phone number and many more right the columns basically the column you will have in a table that is basically stands for attributes so attributes can stands for a single valued field obviously and property of either an entity type or a relationship type so this is how we define our attributes now we are going to talk about the types of attributes we have yes we have lots of type of attributes okay so there are four types of attributes are there simple attributes composite attributes derived attribute and multivalued attribute now so we are going to talk about the four types of attributes are there right what are those fourth attribute one is simple attribute second one is composite attribute third one is derived attribute and the fourth one is multivalued attribute now we will go and have a look at what are these types of attributes and how can you differentiate them right and with the example so let's start with simple attributes what is simple attributes simple attributes is basically do not divide it further how can i divide a attribute right okay let me give you an example so suppose we have a table called student table and from the student table we have different types of attributes student name student id and student phone number so if you look at it student phone number cannot be divided further obviously so in this case attribute student phone number will be the simple attributes so your attributes cannot be divided further right i hope you understand that like you know the concepts of simple attributes yes there are some attributes you when you actually define your attributes you have to keep that in mind what are the attributes i am defining i'm defining a simple attribute or some other type of attributes right now we are going to talk about what is composite attribute composite attributes from the name itself you can say it can be divided further right how can i divide attribute so i am going to say a student table if a student table might have a different attributes like student name student id and student phone number so from this attributes we can say student name can be divided further however student name can be divided further yes you can have first name middle name and last name right so you can have three types uh like three parts in your name so yeah you can divide your name to a you know first name middle name and last name so your attributes is a composite attribute right so this is the main difference between single um simple attributes and composite attributes so simple electric attributes cannot be divided further whereas the composite attributes can be divided further now we are going to talk about what is derived attributes derived attributes does not include in the physical database directly their values are derived from the other attributes present in the database i mean it's so confusing right no it's not uh let me give you an example on that suppose again we have a table called student table there we have some attributes which are the columns student name student id student phone number and student date of birth but i want the student age how can i get that from the date of card itself you can derive the age yes this is how the derived attributes comes so if you want to get the age of that particular student you can calculate it from the date of birth from that students yes so these are the three types of attributes we have looked so far now we are going to talk about the multivalued attributes multivalued attributes from its your name itself you can understand uh you know we can say the attributes can have multiple values but how can you handle the multiple like attribute with a multiple values wait let me just tell you how can you do that again the same table we have student name student id student phone number and student dob and can you say this phone number can be multiple right i also have a three numbers uh three contact number right anyone can more than one uh contact number right yes so your student contact number will be your multiple right and it will be a multi-valued attributes right a quick like the types of attributes we have simple attributes it's a simple it cannot divide it further composite attribute yes you can divide it for the maybe your name three parts in your name derive the attributes the proper attributes will not be there in your table you can derive it from some columns right next comes multivalued attributes multiple attributes is basically a attribute will can uh you know hold a multiple value for a single uh data right so this is the four types of attributes we have so i mean can you even think of uh from a table columns itself there are lots of types are there right where you know what are these columns what are the tables that time if i can say hey look at these things there are lots of types are there that time you can understand okay these are the types of attributes can be there okay but before we start with your diagram you will totally confuse and you will say hey i am not able to understand anything so always start with the simple understanding of sql understand what is stable what are columns how can you use the primary key foreign key right the key concepts we have and then go for understanding this er diagram again your diagram is the basic one when we go for the proper procedure of making a database you first need to have a blueprint you need to understand the ear diagram you need to say hey these are the relation i want to make in my database and then you will go and create your database right but we are doing it little late to understand these things quite properly okay now we will talk about cardinality what is cardinality so it helps to define the relationship between the entities okay what type of a relationship yes we are going to talk about that as well so types of cardinality we have one to one relationship one too many relationship basically we have four types of cardinality right many to one and many too many so we have some uh symbols as well by the symbols we can represent okay these are the types of quality we have from this to this entity right so let's have a look at one by one what are this cardinality and how these types of works now we are going to talk about what is one to one relationship so one entity from state a can be only associated with one entity of set b and vice versa right how this is gonna work so suppose we have two table okay one entity or we have two entities let's talk about this terms with the year diagram so we have two entity one student one is course right one student can go and register for different courses if you look at it a student can register at least i can register for five different courses but all those courses have a single line back to that one student right uh courses can be you know if your course one particular course right one particular course id okay for particularly one student okay so it cannot be uh say uh the same yeah same course can be taken by the student as well but just look at it this just a one course right and of course that particular slot of the course is taken by a student that cannot be taken by other students right so this is how this one-to-one relationship works okay right so your student can have like can go for registering multiple courses whereas one particular course is can be assigned to one particular student right now we are going to talk about what is one-to-many relationship from the name itself again you can understand one entity from uh entity state a can be only associated with multiple entities of entity set b but an entity from an entity set b can be associated with only one entity oh my god this is so confusing let me just figure it out with you so we have two entity called class and student right one class is consisting of multiple students right one two main relationship okay only one class class is one but student can be multiple so this is how a class is uh connected with student with multiple daily relationship okay so this is how one to many relationship works i know it is a bit confusing but when you start working with this you will start understanding how this one-to-one one-to-many relationship works and you will start making your entities with this relationship right now we are going to talk about what is many to one relationship okay just keep quiet and just try to understand what this uh definition wants to like you know define us so many to one relationship is basically the rivers are one too many so what we have just seen of one too many more than one entity from entity state a can be associated with only one entity of uh entity set b but an integer from entity set b may or may not be associated with more than one entity from entity set a i can understand this is confusing but let me just give you an example again so you have to entity student and class can if you just give a closer look at it you can say i just make these things reverse right so many students belongs to the same class right so many to one relationship there are lots of student but the class is one okay this is how many to one relationship works when you talk about one too many that then you have class and class have lots of students again so one too many and many to one right now we are going to talk about many too many relationship vice versa right it's a one-to-one and many too many it's quite uh you know simple than many too many many to one and one too many okay so one entity from entity set a can be associated with more than one entity of entity set b and vice versa right for both the cases they can have many relationship yes so student and teacher will be your entity a student as a group are associated with multiple teachers and also teacher can be associated with multiple students as simple so a bunch of students can go to a like lots of teacher a bunch of students like teachers can be associated with multiple students this is how many to many relationship works now we will gonna take a simple example of here diagram and i will try to make you understand how this ear diagram is working right how you can do that let's let's have a look at that so we have student we have student id we have student name student address then we have study we have university we have university id university name now just let's have that description of ear diagram student and university both are entities if you can look at this diagram student and universities are your entity now if you look at the relationship between student and university is many to one right if you look at the relationship between student and university right one student let's look at this as a university can have many students but a student cannot study in multiple university at the same time so this is how you are going to define the relationship between these two entities so you can say hey university can have lots of students obviously it's a university but a student a particular student cannot study in a multiple university at the same time right attributes for student student id student name student address it's attributes so you got your entity you got the relationship you have the attributes for the student like the entity you have right for now the entity of university you have university id and university name it's a very simple example of your diagram i can understand but yes this is how you need to start with your diagram so first we have looked at uh you know the tables the attributes the primary key those types of operators and some you know aggregated functions order by group by we have learnt everything but now you are saying hey why you are actually going for your diagram because will you have a proper idea about what are these uh like how can you manipulate your queries sub queries joints but uh you don't know how to make the relationship you just can start with uh just a random thoughts of uh tables and attributes and just writing your like database you cannot do that you need to have a proper planning everything needs a proper planning right your if you just try to make a building right that time also you need to make a blueprint we all do that so in the case of database when you are making a building for the database right it's like a building itself it's a base right so you need to have a proper planning and you need to have a proper blueprint right yes so this is how this er diagram is basically one of the most uh important part of database now we are going to talk about some components how we are going to uh symbolize them all right so when we use rectangle it's represent entity phase uh when we use ellipses it's a attributes if you use diamond it's a relationship set if you use lines they link attributes to entity safe and enter sets to relationship state now it comes double ellipses multi-valued attributes as we talk about multi-value attributes then dashed ellipses that is basically derived attributes then double rectangles that weak entity says yes i just want to say hey this is a weak entity then double lines total participation of an entity in a relationship state right your total entity in a relationship state okay so these are the components and these are the symbol we use now uh let's have a just quick look at the whole uh uh like diagram we just uh looked so far then entity there is two types with and strong entity attribute you have key composite multivalued derived right simple attributes and then we have relationship so relationship we have one to one obviously one to one uh one too many many to one and then to maybe right this is a quick look of whole year model right so we have understood about your model in this tutorial we have learned about what is entity relationship diagram in database management system and what are the concept you need to know uh for this particular er diagram and how can you implement them in your own database management system as well i think it this tutorial is going to help you and please do let us know in the comment section what do you think about this uh tutorial and also let me introduce that great planning has came up with the idea that is great learning academy where you will get almost 80 plus free courses and after complete your course you can clean your certificate as well and if you want to do this course in your mobile application that is also possible using great learning app thank you so much you