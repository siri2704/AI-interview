Hello friends welcome back to another session of dbms uh today I'm going to discuss how indexing Works in a dbms and demonstrate its impact on search performance indexing is a crucial technique used to speed up data retrieval reducing the need for table scans so we'll be comparing searches with and without indexing to understand how indexes optimize query execution so what is indexing index is a database optimization technique that improves the speed of data retrieval operations it works like an index in a book allowing Oracle to locate data quickly without scanning the entire table when a query searches for data the database can either perform a full table scan like which is checking each and every Row one after the other or use an index wherein it directly jumps to the required row so this is indexing so what are the various types of indexing in Oracle so the default indexing type in Oracle is B3 index and then we also have unique index Composite Index and bit map index function based index reverse key index and clustered index I'll be showing you B3 index today which is the default index in Oracle what are the advantages of indexing so faster query performance speeds up select queries and especially on the large tables so if efficient searching improves order by group buy and filtering conditions and optimized joints so through indexes you get optimized joints uh so wherein the performance of joints will be better and then reduced disk IO operations so the fetches data with fewer reads and so on so these are the advantages of indexing the disadvantages of indexing is like it slows down the right operations so the right operations make modifications to the table like the insert update and delete commands which take longer because indexes must be updated and then it consumes extra space because you need extra storage for storing the indexes and then not useful for the small tables because on the smaller tables like even if you perform the table scan or you perform the index scan it doesn't make much difference so the difference comes only when the data set is too big and over index can hurt performance like too many creations of the indexes will slow down the database instead of speeding it up so these are the disadvantages of indexing and when to use indexing so when searching large data sets frequently so we use indexing when filtering data using wear conditions often then we also use indexing and then when sorting using order buy and group Buy on the last tables we use indexing and indexing should be avoided on columns that change frequently time stamps Etc this is how we create index in Oracle so create index and then the name of the index on table name and then the column on which like we want to create the index so say for example I want to create index for s name column of the salor table so this is how I'll be doing it so I'll say create index and then the name of the index on sailor sailor table on S name okay right so if you want to create Composite Index which is like combination of two or three columns together so this this is how I create I say create index then rating age index on Sailor table and then the columns together that I want to create an index is on rating and age so this is how I create Composite Index so no need to create an index explicitly for primary keys because Oracle automatically creates an unique uh B3 index for them so primary Keys automatically become indexes for the table so you don't need to create explicit index like this like you say for example in the salor table Sid is the primary key you don't need to create create index um Sid name on salers which is Sid so you don't need to do that because Oracle implicitly itself will create indexes for the primary keys for the non- primary Keys only we'll be creating the indexes so this is your dbms experiment number 12 uh so create a table and perform the search operation on the table using indexing and non- indexing techniques uh so let me tell you how I'll be solving this uh for this like first I created the sales table and inserted data into it and then I'll show you how to search the table using primary key so which is indexed access and which is implicit indexing then I'll search without an index and we'll show you uh how it performs the search on or table without an index and create an explicit index on S name column of the sales table and we'll show you what type of scan will do on such type of index okay right this is your dbms lab experiment number 12 so to create a table and perform the search operation on the table using indexing and non- indexing techniques so I'll be showing you to create a salor table and insert data into it so this is the first thing I'll show you and then I'll show you how to search the table using primary key so I'll be making Sid of the salor table as the primary key and then we'll show you how it will scan the table on the primary key and this is like implicit indexing uh and it will be an indexed access because Sid is the primary key and as I already told you Oracle creates an implicit index for the primary key and then I'll demonstrate how to perform a search without an index so there won't be an implicit index and also an explicit index and I'll show you what type of scan it does on an on a table without an index and then we'll I'll also demonstrate EXP explicit index for you I'll create an explicit index on S name column of the salus table and we'll show you what type of scan it does on the table so the salus table has got Sid s name rating and age and I did not make Sid as the primary key so this is how I'll be demonstrating explicit index for you and then this is all are the tuples that uh the salus table has so let's get started with the demonstration so as I already told you this is how I created the table so Sid integer and primary key so Sid is the primary key here and then I inserted all this data into this particular sailor table okay right so after I have finished inserting so this is what I need to write so I need to say explain plan for Select Staff from Sailors where Sid is equal to 32 so I'm performing a scan on the table uh with the with Sid which is the primary key and also I need to say select St are from plan table so we'll be seeing what is there in the plan table now okay right so I'm running the query and we'll see the script output now so you can see that this is the script output and as you can make it out that uh so in the operations so this is the plan table so inside the plan table it is saying me that there is a table AIS and the table axis is performed on the index okay so it is an indexed to scan so and buy index uh which is some row ID and then it is a unique scan so that's what it is telling us that uh so by this what we understood is that Oracle has implicitly created an index for you and then it is performing the table scan on the index rather than doing the entire table scan it is doing an indexed scan okay now what I'll do is I'll drop the table because I want to um take off the primary key from the table so I have dropped the Sailor table and then I'm creating the Sailor table once again uh so but uh wherein I have removed the primary key over here so S ID integer and S name and then so on wherein I haven't made any column over here as the primary key so let let me insert the same data into the salor table so I have inserted the same data into the salor table but there is no primary key now on the salers table so let me uh write the same query so which is explain plan for Select Staff from Sailors where Sid is equal to 32 and Select Staff from plan table so let us see the plan table once again where there is no primary key uh so this is the plan table and you can see that inside the operations of the plan table so it is telling me that there is a table access and the table access is full in the previous case like it is telling me that the table access is on the row ID which is unique and which is on the index by this what we understood is that if there is a primary key Oracle implicitly creates an index and if there is no primary key then it will do a full table scan so uh I'll show you how to create an explicit index for you so I'll keep the same table and uh we'll create the index now so since there is no primary key I'm creating uh index for the s name so maybe s name is the frequently searched uh uh data from the Sailor table so I'm giving an index for s name so generally for what column will be creating an index is like whenever there are frequent queries coming up for for that particular column so we'll be creating an index for that particular column so say for example for the Sailor table s name is the most frequently queried column so that's why we are creating an index for that particular column so create index index sailor name so this is the name that I have chosen for the index on Sailor table for the s name column so let me hit on the Run button and see whether the index has been created so you can see index index Sor name has been created okay so now we'll run the same query but here I'll be saying instead of saying Sid is equal to 32 I'll say s name is equal to Brutus and make sure that the name here is exactly the name because this is case sensitive s name is case sensitive what whatever name that you have given there should exactly match with the case as well so I have given Brutus over there so with B capital and all that so I'm giving the same name here else it won't perform the operation so explain plan for Select Staff from Sailors where s name is equal to Brutus and Select Staff from plan table so let us look at the plan table now and understand whether Oracle is creating an index for s name or not so you can see that um Oracle has created an index and now it is saying that table access with the index in the previous case where there is no index created at all and neither the implicit index or explicit index in that case it is saying that table scan full but now since we have created an index it is saying that table scan index okay right so that's the difference that we get if you no longer need the index you can drop the index with this command which is drop index and then the name of the index just like the table how we delete so before dropping the index let me show you like what Oracle uses as the default indexing so for that I have written the query as select index name index type from users indexes so these are the user defined indexes will be kept in a table which is called as users indexes where table name is equal to salor so I want to know like what are all the indexes that have been put on salor table so for that I'll be using this particular query okay right so same like how we write the select query but on the users indexes uh so this is the users indexes table and I just wanted the index name and the index type so there is only one index on the Sailor table which is index sailor name and the type of the index is normal so what does it mean by normal normal means that the default index that Oracle uses and the default indexing type that Oracle uses is B3 so normal here means B trees okay right so let me drop the index okay so I have drop the index so with this command drop index index name so when I execute this query it is telling me that index index Sor name dropped okay so that's it friends so this is all about how to create explicit indexes in Oracle I have demonstrated what are implicit indexes and uh how Oracle performs a full table scan if there is neither implicit or explicit index and then I have shown you how to create an explicit index and also drop the index and what is the default indexing type that Oracle uses if you have found this video to be helpful like share and subscribe and also comment below thank you for watching