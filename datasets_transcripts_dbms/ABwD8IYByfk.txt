[Music] dito in the database is stored in terms of enormous quantity retrieving certain data will be a tedious task if the data is not organized correctly with the help of normalization we can organize this data and also reduce the redundant data hey guys this is predict from Ed Eureka and I welcome you all to this interesting session on normalization in SQL in this session I'll explain everything that is related to normalization with simple examples that are easy to remember firstly let's look at the agenda for today's session so we're going to start off with understanding normalization and moving further we shall look at various types of normalization and those are first normal form second normal form third normal form and boyce-codd normal form I hope you guys are clear with the agenda but before moving further if you haven't subscribed to a channel then do subscribe to never miss out an update with that being said let's get started the first topic in today's session is what is normalization database normalization is a technique of organizing the data in the database it is a systematic approach of decomposing tables to eliminate data redundancy it is a multi-step process that puts data into tabular form removing the duplicated data from its relational tables on the screen we just saw that the table is getting decomposed into two smaller table is it really necessary to normalize the table that is present on the database well every table in the database has to be in the normal form so normalization is used mainly for two purpose so the first one is it is used to eliminate repeated data having repeated data in the system not only makes the process flow but will cause trouble during the later part of transactions and second one is to ensure the data dependencies make some logical sense yes usually the data is stored in database with certain logic huge data sets without any purpose are completely waste it's like having an abundant resource without any application the data that we have should make some logical sense normalization came into existence because of the problems that occurred on data now let's look at those problems and these are known as data anomalies if a table is not properly normalized and has data redundancy then it will not only eat up the extra memory space but will also make it difficult to handle and update the data base let's look at the first anomaly that is insertion anomaly suppose for a new position in a company mr. Ratchett is selected but the department has not been allotted for him in that case if we want to update his information to the database we need to set the department information as null similarly if we have to insert data of thousand employees who are in similar situation then the department information will be repeated for all those thousand employees this scenario is a classical example of insertion anomalies the next one is update anomaly what if mr. Ratchett leaves the company or is in no longer the head of the marketing department in that case all the employee records will have to be updated and if by mistake we miss any record it will lead to data inconsistency this is nothing but updation anomaly and the final one is deletion anomaly in our employee table two different pieces of information are kept together that is employee information and Department information hence at the end of financial year if employee records are deleted we will also lose the department information this is nothing but deletion anomaly so these were some of the problems that occurred while managing the data to eliminate all these anomalies normalization came into existence there are many normal forms which are still under development but let's focus on the very basic and the essential ones only so we will be talking about first normal form second normal form third normal form and finally end this session with boyce-codd normal form so without wasting for the time let's proceed your first normal form in first normal form we tackle the problem of atomicity here at alma city means values in the table should not be further divided in simple terms a single cell cannot hold multiple values if a table contains a composite or multivalued attributes it violates the first normal form so the following functions will be performed in first normal form the first one is it removes repeating groups from the table and next it creates a separate table for each set of related data and finally it identifies each set of related data with the primary key to understand this in a better way let's look at the given table in the employee table we have employee ID employee name phone number and salary as columns we can clearly see that the phone number column has two values thus it violates the first normal form now if we apply the first normal form to the above table we get the following result in this table each and every row is listing that is no cell has multiple values the table has achieved a dhama city first normal form is simple and can be easily identified in the table we can clearly see there is no multiple values in each and every column thus the first normal form is achieved now let's move to the second normal form second normal form was originally defined by EF chord in 1971 a table is said to be in second normal form only when it fulfills the following condition the first condition is it has to be in first normal form and the second one is the table also should not contain partial dependency here partial dependency means the proper subset of a candidate key determines a non-prime attribute so what is a non-prime attribute let's understand this in a simple way attributes that form a candidate key in a table or called Prime attributes and the rest of the attributes of the relation are non prime for a table prime attributes can be like employee ID and Department ID and the non prime attributes can be like office location to understand second normal form let's consider this table this table has a composite primary key that is employee ID and department ID makes a primary key the non key attribute is office location in this case office location only depends on department ID which is only the power of primary key therefore this table does not satisfy the second normal form so what to do in such scenario the answer is simple split the table accordingly to bring this table to second normal form we need to break the table into two parts which will give the following tables the first table has employee ID and department ID as columns the second one has department ID and office location as columns as you can see we have removed the partial functional dependency that we initially had now in the table the column office location is fully dependent on the primary key of that table which is nothing but department ID I hope you understood second normal form now that we have learned first normal form and second normal form let's head to the next part of this normalization next topic is third normal form third normal form is a normal form that is used in normalizing the table to reduce the duplication of data and ensure referential integrity the following condition has to be met by the table to be in third normal form and the first condition is the table has to be in second normal form and the second condition is no non-prime attribute is transitively dependent on any non-prime attribute which depends on other non prime attributes I know it's bit confusing so let me make it simple for you it's like if C is dependent on B and in turn B is dependent on a then transitively C is dependent on a this should not happen in third normal form all the non prime attributes must depend only on the prime attributes these are the two necessary condition that needs to be attained so why was the normal form design firstly to eliminate undesirable data anomalies next one is to reduce the need for restructuring over time and finally to make the data model more informaiton since we have understood the third normal form let's look at the example table in the above table student ID determines subject ID and subject ID determine subject therefore student ID determines subject yr subject ID this implies that we have transitive functional dependency and this table does not satisfy the third normal form now in order to achieve the normal form we need to divide the table as shown below firstly let's divide the table and store student ID student name subject ID and address in it all the columns are referring to the primary key which is student ID let the second table have subject ID and subject column so subject is dependent only on subject ID and not on student ID as you can see from the above table all the non-key attributes are now fully functionally dependent only on the primary key in the first table column such as student name subject ID and address are only dependent on student ID in the second table subject is only dependent on subject ID with this being understood now we can proceed further to next normal form that is Boyce Codd normal form this is also known as 3.5 normal form it is the higher version of third normal form and was developed by Raymond F boys and Edgar F Codd to address certain types of anomalies which were not dealt with third normal form before proceeding to Boyce Codd normal form the table has to satisfy third normal form in Boyce Codd normal form if every functional dependency that is a implies B then a has to be the super key of that particular table so what is a super key a super key is a group of single or multiple keys which identifies rows in a table let's look at the table to clearly understand Boyce Codd normal form in the given table one student can enroll for multiple subjects there can be multiple professor teaching one subject and for each subject a professor is assigned to the student these are the necessary condition of the stable in this table all the normal forms are satisfied except boyce-codd normal form Y as you can see that student ID and subject form the primary key which means that the subject column is prime attribute but there is one more dependency that is professor is depending on subject and well subject is a prime attribute professor is a non-prime attribute which is not allowed by boyce-codd normal form now in order to satisfy the boyce-codd normal form we will be dividing the table into two parts the table at the top will hold student ID which already exists and we will create a new column that is professor ID and in the second table which is below we'll have the columns professor ID professor and subject columns why do we need to have a new column that is professor ID by doing this we are removing the non prime attributes functional dependency in the second table professor ID will be the super key of that table and remaining column will be functionally dependent on it by doing this we are satisfying boyce-codd normal form so this brings us to the end of this session I hope you have clearly understood the normalization and its different types if you have any queries or doubts regarding this session please let me know in the comment section and I'll get back to you with an answer thank you guys for watching this video and have a great day I hope you have enjoyed listening to this video please be kind enough to like it and you can comment any of your doubts and queries and we will reply them at the earliest do look out for more videos in our playlist and subscribe to any rekha channel to learn more happy learning