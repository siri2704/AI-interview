hi everyone welcome back to my YouTube channel I am reti and I'm back with another lecture in the dbms series so in the last lecture we learned about normalization in this particular video we would be learning about denormalization so without any further Ado let's get started so what is this denormalization this is the opposite of normalization so whatever things we do in normalization we just do the opposite in denormalization it involves intentionally introducing some Rudy into a well normalize database schema to improve query performance now in normalization what we used to do is we used to reduce the data rency which is present in our table consider that there is a table of employee which is having employee ID employee name employee age as well as this department details such as employee Department name Department ID Department salary now in this particular table we used to encounter some data rency or duplicacy because of rows as well as column so row level duplicacy was make sure introducing the concept of primary key we used to make a attribute such as ID as primary key and now there couldn't be any null or duplicate values which is present in our ID column so Ro level duplicacy was reduced now for column level duplicacy we encountered that there were some columns which are having the same details like the department manager and salary Whenever there is a IT department and whenever there is a HR department it used to remain same for the set of EMP employees who are having the same department now for that what we used to do is we used to normalize the table and we used to break the table into two subtables or more tables so that we can reduce the column level duplicacy which we were encountering but in denormalization what it says is we intentionally introduced some rud dency into a well normalized database schema to improve the query performance now in normalization we use to break the tables into subtables two or more tables so this was the earlier table which was present now there are subtables to reduce the data rency now this is a employee table this is the department table and this is the salary table consider I want the detail of a employee who is having ids2 and I want the details of its Department as well as salary so I want all the employee details I want all the department details I want all the salary details for a employee who is having idas to now for that I have to make query into this particular table table this particular table and this table as well and as the table increase the queries also increase now we have to make different type of joints to get some data from the Department as well as salary table so because of that our query is not very much optimized or it takes a lot of time to fetch from each and every table because there could be a possibility that the data is present at the very last of Department table the data is present at the very first of salary table and because of that we encounter some issues issues like the query is taking a lot of time now the query if it's being used in an API the API is taking a lot of time our slas is increase so because of that we can encounter them some time issues some speed issues and much more things so because of that we introduce the concept of denormalization that we are intentionally introducing redundency but if all the data is present into the same table the query time would be very less so consider if you wish to find the salary of Rahul so to find the salary of Rahul first we need to find the department of Rahul so first we have to make the query into the employee table to find the department and once we get the Department of Rahul that is it then again we have to make a query in this department table to fish the salary of Rahul so you can see that we are making multiple queries so multiple queries can increase the time can reduce the speed and our API can take a lot of time to provide us the result so what are the benefits of denormalization first one is faster queries so it can reduce the need for complex joints between tables during queries which can eventually improve the speed of retrieving the data and it can give the data very fast now the second benefit is the queries would be simpler because there are no joints which are being involved there are no three or four tables in which we are making queries so the queries would be very less complex it can simplify the queries by allowing them to be executed on a single table instead of requiring join points across multiple tables so in normalization we used to break a single table into multiple tables now we need to make queries into these tables so because of making queries into different tables the time also increases and the queries also get complex in denormalization we used to combine all the tables into a single table even if we know that the data rency can occur but still we are combining it into a single table and because we are combining it into a single table the time always reduces and the queries are also simple so there are not complex queries now with advantages there are always disadvantages so let's see the disadvantages so first disadvantage is increase data redundency as I told that we introduced the concept of normalization to decrease the data redundency but since in denormalization we are again combining all the table into a single table which is we are breaking the normalized table into a denormalized table so we can see it at the data redy has increased now the second is less data consistency because if we are combining everything in a single table consider that if I need to update the salary of a person who is working in IT department and if somehow I miss to update for any of the employee the salary would be different for both employees who are working in IT department so that would be a data inconsistency now the third is denormalization can make the database schema less flexible for future changes like adding modifying new data elements so we learned about the insertion updation and deletion anomalies so that can occur because of denormalization we can't go ahead and add any of the data of any of the new employee who has joined the company because right now I don't know the department manager and salary details of that particular employee or consider that there is a new Department supply chain which is introduced in our company for now there are no employees who are present in supply chain and since ID is a primary key we can't make it as null and we need to insert a data but right now we don't have have any data so these type of issues can happen whenever we denormalize the table but the only Advantage is it makes the queries faster and it simplifies the query so this was all about denormalization in this particular video I hope you like this video so if you like this video go ahead and hit the like button if you're someone who is new to my channel can go ahead and watch out the tech content first and if you find it useful for yourself you can go ahead and subscribe till then take care keep learning keep growing keep smiling bye all