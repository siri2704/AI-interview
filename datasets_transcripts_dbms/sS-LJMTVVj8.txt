Hello friends, welcome to Gate Smashers Today's question is from database management systems. & the topic I have chosen is the minimal cover. So the minimal cover or you can call it irreducible. means you have functional dependency is given. And you have to check or find. Irreducible sets As we have in this question For the Following Functional Dependencies, find the correct Minimal Cover Or irreducible sets of functional dependencies. And here we have four options. And these functional dependencies are given in which A determines B. C determines B D determines ABC AC combinedly determines D So this type of question, question of minimum cover if you are solving. So you have to solve it in three steps. In Step one, What do you have to do, on the right hand side means whatever is on the right hand side must be alone. Means there should be one,  it should be single. How? If we talk about, first of all, A goes to B. Or we also called A determine B. So it's already right hand side single. Then C goes to B. It is already single. This is the main point D goes to ABC. Means D is together determining  the three attributes AB&C. So the according to the decomposition property, we can write them separately.How? D Determines A. D determines B D determines C. This will make it a little easier for you to solve the questions that you have. AC goes to D. Write it as it is. yes, another point in it. Don't compose AC Goes to D, decompose, why? Because it means AC is composite key which is determing D. AC combinedly determining the D, So doing it alone or not, means A alone is able to do it or not It's not sure. So we cannot decompose it, we can simply decompose
right hand side & write. So this was the step one. It is very simple funda in step one. The main point is now from step two. What you have to do in step two? To remove redundant key or reduntant functional dependency. How? First of all, if we talk about, A goes to B. A goes to B, If you have to delete it or to check it, whether it is reduntant or not? So how do you check? Suppose that I remove A goes to B. So out of the rest, you have to take the closure of A. And you have to check, from the A's closure Whether B is coming or not. How? Look, How many are left? 1,2,3,4,5 So what will come if we take A's closure out of these five? From the A's closure. Alone A is coming which is reflexive. It alone can determine the A. It is a reflexive property. It is kind of Self-loop. It is self here. So A determine A. So, you have to put A goes to B. It's not a reduntant. Then Same for C goes to B. If you remove C goes to B So from the rest, who is the rest? By including it, these four 1,2,3,4 and 5th this one. So of we take the closure of C, from the closure of C, C will definitely come. See From the rest of the 1,2,3,4,5 what's comes with the closure of C. Nothing is coming from C's closure. So can't ignore it C goes to B You have to take it. Then D goes to A. Let's say, If you remove D goes to A, so from the rest 1,2,3,4,5. So out of these five, you have to check closure of D. so what is coming from D's closure, 
D is coming We have B from D's closure. C is also coming from D's closure. That's it. So DBC is coming from D. But A is not coming, if we remove it. That means you can't remove it. It is not reduntant. This is how you have to solve. It is very simple funda. Then, D goes to B. If you remove it. So who are the rest left? 1,2,3,4,5 So out of all the other five, you have to check, suppose that, it is not their. Now again take the closure of D.  D is coming from the closure of D. From D we have A, Look A is coming. B is also coming from A. Yes, B is also coming from A. C is also coming from D. Quite a lot has come. Yes, B is also coming from D. means Through A. or through anyone if we find So if we remove D goes to B Even then, D can determines B. So it is redundant This is what? Redundant. So do not include redundant here. Remove it. Simply. This is how you have to solve? Then D goes to C. Suppose, if you remove D goes to C. You have to check from the rest. Now from the rest, remember it that do not include it. This is already moved out of here, so 1,2,3,4. Out of these 4, 1,2,3,4 Because we have also suppose that it is not Now look,  what's comes from D's closure, D came from D. A came from D B came from A. C won't come here. So D goes to C you have to include.  C is not coming from anyone. If you want to get determine the C, then this is the only method D goes to C. So that's what you have to write. Then finally, A goes to AC goes to D. Let's Suppose, if you remove it. AC goes to D, then out of these four. Here also you can find out, if you don't remove it, then better that you can
do it directly from these four. So if we take the closure of AC, So from the closure of AC, AC will defintely come. Then, we have B from A and That's it. D won't come. So that means you have to include it. So here your step two is complete. Whatever the reduntant we had, We have to simply remove it. Nothing to do. We just simply Suppose that, it is not there. Find out the closure from the rest. Whether it is coming or not? If it's coming, remove it. Otherwise, You have to write that. So this is how you have to solve. Then step three. What do you have to do in step three? Now You have to take care left hand side. Means earlier the right hand side was done. Now have to do left hand side. Now the left means there
should have only one attribute. What do you have to do to create an attribute? A goes to B is already single. C goes to B is single. D goes to A, D goes to C is also single. From the left hand side all are single. Here you can do it. AC together, two attributes are formed. Can you write it alone A or alone c? But how? If you are writing AC goes to D. And let's suppose, you remove the A. You removed A After removing A, if you are taking the closure of C? and in the closure of C, if A comes. So you can remove A. Transitive property. That means if you write C alone instead of AC. and the closure of C has A So there is no need to rewrite A here, but look If A is coming in the closure of C. No. A is not coming in the closure of C. That means you can't remove A. Similarly if you remove C, if C comes in A's closure, then yes, you can remove it. But look, if there's C is coming in A's closure. B is coming in the closure of A. Only B is coming in A's Closure. So even you can't remove C here but if the C comes in the A's closure, then you could have been remove C. Or if A comes in the C's closure, then you could have been remove A, transitive property because when you find out, it automatically determine from there. So you can't reduce it further. So this how you have to solve. You have to to follow these three steps. According to that you have to match the option. So here your option D will match.  Here is written D goes to AC'. so you can do it In this way,  you can write C goes to B. D goes to AC In a way, we have union it. means we've decomposed it before. We the Write union as well. D goes to A Means, D is also being determined A. D also determined C. Both are being determinded. AC goes to D. so this is how you have to solve the Minimal cover. Yes, so option d is the correct one. So this is about minimal cover. So guys, if you liked the video, please like it. Share it and please subscribe my channel. Thank you.