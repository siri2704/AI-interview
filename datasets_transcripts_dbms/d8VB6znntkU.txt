hello hackers let's talk about how to choose a database for system or application that you're building usually in interviews or if you're given a task on what database to choose to build for your application you'll often see the databases split up into two different types SQL and no SQL types they each have their own strengths and weaknesses and they both should be considered based on their use case first let's define both SQL and nosql databases SQL stands for structured query language SQL databases are table based while no SQL databases can be document key value graph fight column tooles first one is documents stol no SQL databases that store data and flexible schema list documents commonly use formats like Json or Bon mongodb couch DB are some examples of document oriented databases that store data in flexible Json like documents next one is the key value store Key Value Store store data as simple key value pads ideal for fast retrieval and storage of unstructured data key Value Store data are redis Dynamo DB which are examples that allow you to store and retrieve database on unique Keys next one is the graph database no SQL database optimized for managing and quaring highly interconnected data such as social networks or recommendation systems Amazon Neptune are examples of graph databases that excel in managing highly interconnected data and Performing complex graph queries next one is the white column store no SQL datab bases designed for storing and quering large volumes of data with Dynamic keyb bars suitable for time ser series or sensor data Apache cassendra are examples of white column stores that are optimized for storing and quering large volumes of data with Dynamic schemas such as time series or sensor data SQL databases are vertically scalable while no SQL databases are horizontally scalable so what does it mean horizontal scalability means adding more machines or nodes to a system to handle increased load like adding more Lanes to a highway to accommodate more traffic whereas vertical scalability means increasing the power of existing machines CPU or Ram to handle increased load like updating a computer's processor to handle more tasks let's talk about the strengths of SQL databases SQL databases are relational databases which means that they allow easy quering on relationships between data among multiple tables table relationships are really important for effectively organizing and structuring a lot of different data secondly the data in SQL databases is well structured the room for potential error is therefore reduced this is because SQL schemas require the data model and format of the data to be known before storing anything thirdly SQL databases are asset compliant what does it mean this means that transactions are automic consistent isolation and durability automic means transactions are either fully completed or fully aborted ensuring data Integrity example in a banking system transferring money from one account to another either the entire transfer operation complete successfully detecting the money from one account and adding it to other or none of it happens if an error occurs next one is consistent transaction maintain the consistency of the database preserving its defined rules and constraints example in a database for a certain column must have contain unique values if a transaction attempts to insert a duplicate value the database will reject the transaction to maintain consistency next one is isolated transactions are executed independently of each other preventing interference between concurrent transactions example two users simultaneously updating the same back account balance each transaction is isolated from the other so even if they occur simultaneously one transaction will not interfere with the other's outcome next one is durable once a transaction is committed thechange are permanently saved and cannot be lost even in the event of system failure example after a successful purchase in an online store the transaction details are stored in the database even if the system crashes immediately after the purchase the transaction details will still be available and persisted in the database when the system is restored now let's talk about the weakness of SQL databases firstly structured data might mean fewer errors but it also means that columns and tables have to be created ahead of time SQL databases takes longer to set up compared to no SQL databases they're also not effective for storing and quering andru data where the format is unknown secondly SQL databases are difficult to scale horizontally because of their relation nature for read heavy systems it is straightforward to provision multiple readon replicas but for WR heavy systems usually the only option is to vertically scale the database up which is generally more expensive than provisioning additional servers now let's talk about the benefits of no SQL databases no SQL databases are more flexible and simple to set up because they do not support table relationships and data is usually stored in documents or key value paths they are better choice for storing unstructured data secondly because they are better at handling unstructured data they can also share this data across different data stores allowing for distributed databases this makes horizontal scaling much easier at many large amounts of data can be stored without having to purchase a single expensive server if you're watching this video right now or like to this video and subscription to the channel would really mean a lot now let's talk about the weaknesses of no SQL databases firstly there's a trade-off between strong database consistency and scalability databases are typically designed for distributed use cases and right heavy systems can be supported by having multiple right shards for the same data partition this is called peer-to-peer replication however the trade-off is a loss of strong consistency after write to a shard in a distributed no SQL Custer there's a a small delay before that update can be propagated to other replicas during this time reading from a replica can result in accessing stale data this weakness of the data eventually being up to date is called eventual consistency that's it for today's discussion on databases see you in the next video bye