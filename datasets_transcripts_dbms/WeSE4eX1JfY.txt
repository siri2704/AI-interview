If you think you can clear the online coding test without any effort, then please close this video right now and go chill. After solving more than 1000 questions and cracking companies like Microsoft and others, I can confidently say that the online test is tougher than coding interviews. If you can't clear the online test, you won't even reach the interview stage. The competition has increased tremendously, so mastering online assessments is crucial. In this video, I’ll share tips, tricks, free resources, and a complete strategy to prepare for online assessments. If you're a coding enthusiast aiming to crack a product-based or service-based company, this video is for you. Tighten your seatbelt and get ready, because your dreams are about to turn into reality. Today’s video is for all tech aspirants who want a job in big companies like MANG, FANG, or any remote or service-based company. I’ll walk you through a 7-step process, sharing amazing tips that me and my friends have used to succeed. This video will help you beat the competition in your online coding rounds. It’s a complete guide covering tips, tricks, strategies, types of questions, the difference between service-based and product-based companies, and free resources. The like target for this video is 7,000 likes, so hit the like button now! Hi, guys, I’m Nishant. Welcome back to the channel, and let’s start the video. First, let’s understand what an online assessment is. An online assessment is essentially a test conducted before the interview to screen candidates. When openings are announced, thousands of people apply, but companies can only interview a limited number of candidates. So, how do they shortlist them? Through online assessments. In coding interviews, companies test skills like data structures, algorithms, problem-solving ability, domain knowledge (like OS, DBMS, OOPS, and computer networks), and code optimization. Product-based companies such as Google, Amazon, and Microsoft focus on problem-solving and code optimization. They test your ability to think of and optimize solutions. Service-based companies like Infosys, TCS, and Wipro test implementation skills and provide training for specific roles.  Second is, what types of problems are asked in online assessments? As I mentioned earlier, there are two categories of companies: product-based and service-based. Product-based companies like Amazon, Google, and Microsoft tend to ask more challenging questions related to problem-solving and tougher DSA topics. These include dynamic programming, graph algorithms, binary search, and advanced problems in arrays and strings. They expect you to code the most optimized solution that passes all test cases. Service-based companies, on the other hand, include questions on aptitude, reasoning, and basic DSA topics like string manipulation, arrays, stacks, and queues. However, the difficulty level in service-based company assessments is also increasing, and they now sometimes include challenging questions on binary search and dynamic programming. If you are targeting service-based companies, I recommend improving your problem-solving skills. Before attempting recruitment tests, make sure to clear a basic checklist. This checklist includes implementation and debugging practice which you can practice on Code forces, CodeChef or HackerRank, learning string matching algorithms like KMP and Z, mastering binary search and sorting techniques, and understanding data structures such as linked lists, stacks, and queues. You should also familiarize yourself with segment trees and bit indexed trees, which are sometimes asked in advanced assessments. Fifth, we have dynamic programming, also known as DP. Most people are scared of this topic, and I must say that it is justified to feel that way. DP is challenging, and the questions can be very difficult. However, with the abundance of resources available today, you can practice and master it more easily. The key to succeeding in DP is recognizing patterns. DP problems often follow specific patterns, and once you understand these, solving them becomes much simpler. Next, we have binary search trees and binary trees. This is another crucial topic as it forms the foundation for understanding graphs. In many ways, your knowledge of graphs begins here, making it an essential area to focus on. Following that are graphs. When studying graphs, you must learn the basic algorithms such as Prim’s, Kruskal’s, and Dijkstra’s algorithms. Additionally, you should understand Breadth-First Search (BFS), Depth-First Search (DFS), and other related algorithms.  I have previously created a 90-day roadmap for mastering this topic, which you can check out for guidance. The eighth topic is greedy algorithms and backtracking. These problems are appearing more frequently and are highly important. You should not skip these topics under any circumstances. Next comes mathematics-related topics. This includes number theory, and other fundamental concepts. You should know how to implement and utilize these effectively. Lastly, we have bit masking and bit-masking-based dynamic programming. These are advanced topics often asked in high-level interviews, particularly for companies like Google, Amazon, and Microsoft. While these are not commonly part of basic assessments, they become essential once you’ve mastered the foundational topics. This topic list is comprehensive and more than sufficient. If you know and practice all these topics, you will be prepared to solve 90% of the questions you encounter. When it comes to resources for practice, there are both paid and free options available, and you should choose the one that suits you best. If you are exploring paid resources, consider checking out Algo Prep. This platform offers courses on various topics, including web development, DSA, and system design. With Algo Prep X, you gain access to all these courses in one place, along with over 450 DSA practice questions. The platform also provides practical questions aligned with the topics you study, covering areas such as LLD, DevOps, DBMS, OOPs, Computer Networks, and prompt engineering. Algo Prep also offers a 3-day free trial, which allows you to evaluate the teaching quality and content before enrolling. Additionally, the Algo Prep YouTube channel offers free lessons on DSA, which is a great starting point. Another excellent resource is the CS50 Harvard course, available for free on YouTube. The link will be in the description, so you can start learning right away. For coding practice, several platforms can help. LeetCode is ideal for practicing interview-level questions. You can sort questions by company, although a premium subscription is required for this feature. There’s also a “Top Interview Questions” section worth exploring. GeeksforGeeks is beginner-friendly and offers detailed solutions to various problems. HackerRank is another good platform to learn programming fundamentals. Once you’ve grasped the basics, CodeForces is excellent for competitive programming and advanced DSA practice. Mock interviews are a critical component of your preparation. They help you gauge your readiness and identify areas for improvement. Both mock interviews and contests are essential, especially if you are preparing for online assessments. You can participate in contests on platforms like LeetCode and CodeForces. Once you clear these contests and assessments, focus on mock interviews to further refine your skills. Platforms like InterviewBit, CodeChef, and Pramp offer excellent opportunities for mock interviews. Additionally, there are AI-driven mock interview tools that can provide valuable feedback. Don’t forget to join learning communities on platforms like Discord and Reddit. The "Learn Programming" community on Reddit and various Discord servers are excellent places to practice mock interviews and receive tips from peers. To perform well in your recruitment tests, focus on quality over quantity. Solving 100 well-curated questions that cover all topics is far more effective than solving 1,000 random questions. Consistency is key. Practicing regularly for six months to a year will yield significant improvements. When practicing, always set a timer for 30 minutes to solve any problem. This simulates the actual test environment, where you often have a limited time to solve each question. Analyze your mistakes carefully after solving a problem. Understand why you couldn’t solve it—whether it was due to a lack of knowledge of a particular data structure, topic, or an inability to devise a solution. Reviewing the community section for solutions can also help you learn multiple approaches to a problem. Mock interviews, as mentioned earlier, are crucial. Finally, don’t forget to relax. As your tests approach, take some time to meditate, chill, meet friends, or go for a walk. This will keep your mind fresh and help you perform at your best during assessments. Online assessments for tech interviews may seem intimidating, but with consistent practice and a structured approach, you can excel. By following these steps, practicing diligently, and avoiding unnecessary distractions, you will be well-prepared to tackle any challenge. But if you won’t get up on time. You won’t do your work. Getting up is one thing, but you won’t practice. Instead, you’ll randomly solve 500–600 questions of the same type, thinking it’s productive.  You have to clear the online assessment. If you don’t prepare properly, you’ll find yourself struggling and complaining that you’re not getting a job. If you liked this video, let me know in the comments section which part of your preparation journey is the most challenging for you. Don’t forget to share this video with your friends, like it, and subscribe to the channel if you haven’t done so already. Remember, for success, having perfect coding skills is not as important as having consistency and the right mindset. With these two qualities, you can conquer any challenge, take on any test, and crack any company. Thank you so much for watching. See you in the next video. Till then, bye!