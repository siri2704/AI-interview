hi guys welcome to my channel in this video I'll be covering what is normalization and then I will explain what is 1nf 2nf 3nf bcnf 4 NF and finf I will explain all these normal forms with examples guys we also call normalization as schema refinement so whenever you get schema refinement question in exam you can write this answer guys I have uploaded a complete dbms subject tutorials I will provide Link in description you can watch from there if you are watching this video for the first time don't forget to like share and subscribe to my channel let's get started at first I will explain what is normalization normalization is a process of organizing the data in the database it is performed to reduce the data redundancy in a database guys data resonance is nothing but duplicate values if you want to remove duplicate values in your database then you need to use normalization technique I'll give an example for example this is my college database in my college database there is to end table in the student table names I rule number 21 and section here repeated twice here this record is repeated twice this is known as data redundancy data redundancy is nothing but duplicate values if you want to remove duplicate values in your database then you need to use normalization technique data redundancy in dbms means having the same data at multiple places if you have same data at multiple places then we call it as data redundancy it is necessary to remove data redundancy because it causes anomalies anomalies mean errors if there are duplicate values in your database then your database will work abnormally and in every software company there is database administrator the main duty of database administrator is from Indian database if there is data redundance in your database then it will be very hard for database administrator to maintain database the main reason for normalizing the tables is to remove this anomalies if we perform normalization on tables then we can easily remove those errors if we don't eliminate this anomalies if our database grows then we need to face data redundancy problem and data integrative problem and some other problems data Integrity I mean data will be correct and complete in our database so definitely we need to eliminate anomalies we don't eliminate anomalies then we need to face so many problems like data redundancy data Integrity problem and some other problems if database grows normalization Progressive method to remove following anomalies from the database and bring database to consistent state that occurs because of data redundancy that is because of duplicate values these are three anomalies first one is incision anomalies incision anomalism we are not able to insert data in database because some columns may be missing at the time of incision I will give an example so that you can clearly understand what is the sensation anomalies for example I want to insert new record in this table so I want to insert name Raju rule number 21 section DN is 19. this is H in this table there is no age column in this table only there are three columns name rule number section but whenever I exude the statement it will not insert this record in this table because Edge column is missing in this table this is known as incision anomalies incision anomalies mean unable to insert data because some columns are missing at the time of incision here age column is missing so it will not insert this data in this table next I will explain what is updation anomalies updation anomalies occurs when the same data items are repeated with same values this is simple example of updation anomalies and last one is deletion anomalies deletion anomalies occurs when deleting one part of data deletes other necessary information from the database for example I want to delete this record name Shiva rule number 29 section B but whenever I delete this Shiva record it automatically deleted this Psy record and image record this is known as relation anomalies normalization Works through a series of stages called normal forms the normal form applied to your table is said to be in a particular normal form if it satisfies constraints guys constraints are nothing but rules we can perform normalization on particular table by using various normal forms these are various types of normal forms I will explain each of them by giving examples these are advantages of normalization First Advantage is it will remove duplicate values that is nothing but it will minimize data redundancy if we remove duplicate values automatically data will be correct in database data consistency mean correctness data will be correct in our database and third Advantage is integrity data integrity mean whatever the data that is present in our database all those data will be correct and complete there will not be any missing values this is meaning of data integrity these are advantages of normalization and next I will explain disadvantages of normalization first disadvantage is if you perform fourth normal form and fifth normal form of tables then performance decreases and next disadvantage is first normal form disallows the multi value attributes first normal form will not support multiple values for example for this person's eye I want to give multiple mobile numbers if you give multiple mobile numbers this fashion normal form will not accept these are two disadvantages of normalization at first I will explain what is 1nf 1nf stands for first normal form a relation will be in one and if if it contains an atomic values guys Atomic values means single values for example in table some columns contain multiple values if any columns contain multiple values then the table is not in one NF a table is said to be in 1 and if if the table contains only single values nothing but columns if any columns contain multiple values then the table is not in one NF so definitely first normal form must hold only single value attributes single value attributes mean attributes are nothing but columns if columns contain only single values then the table is in 1 and if for example this is showing table in this show and table name column contains single values rule number column contains single values and Branch column contains single values but here language known column contains multiple values so this table is not in one NF now we need to convert this table into one NF now we need to convert this multi value attribute into single value attribute after performing first normal form my table looks like this so it was a written names I rule number 21 Branch CAC and language not only Telugu and again I written names I rule number 21 brand CSC and language known English so I am creating two records and again Shiva 22 AML English Shiva 22 AML Hindi two times I created Shiva record and again raju24 DS English and Roger 24 DS Hindi so after performing fashionable form my table looks like this now if you see this table in this table each and every column contains single values there is no multi-valued attribute so this table is in one NF if each and every column contains only single values then the table is set to be in 1 NF a relation will be in second normal form if it is in first normal form and not contain any partial dependency simply we call it as no partial dependency if you want to say particular table is in second normal form there are two conditions first one is the table must be 1nf if You observe this table this table contains only single values there are no multi-valued attributes so first condition is satisfied and second condition is no partial dependency guys no partial dependency mean primary key should not contain duplicate values as well if You observe this table in this table we can set primary key for this rule number column but if you want to set primary key for this rule number column definitely that column must contain unique values there must not be any duplicate values in this rule number column there are duplicate values rule number 21 repeated twice rule number 22 repeated twice and Rule Number 24 repeated twice a table is said to be in second normal form if the table is set to be in first normal form and there is no partial dependency no partial dependency mean primary key column should not contain duplicate values but here there are duplicate values so here there is partial dependency now we need to remove this particle dependency here names I roll number 21 and Branch CSC repeated wise and similarly name Shiva rule number 22 and AML repeated wise and similarly name Raju rule number 24 and Branch d s repeated twice now I will select these three columns and I will create one separate table and I will remove these duplicate values that is I will convert the two records into single record I will remove duplicate values so here language node column is left so I will create one more table by selecting this rule number column and language known column total I need to create two tables one table contains name rule number and Branch column and next table contains rule number column and language known column this is my first table first table contains name column rule number column and Branch column repeated twice I will write that record only once now if You observe this rule number column in this rule number column all values are unique there are no duplicate values just there are unique values rule number 21 22 and 24. now we at your primary key this is separate table for no partial dependency and this is separatable for partial dependency here rule number 21 Telugu rule number 21 English and similarly 22 English 22 Hindi 24 English and 24 Hindi this is another table that contains partial dependency guys you should not consider this table we should consider only this table If You observe this table this table is in first normal form that means this table contains only single values and there is no partial dependency that means primary key column contains only unique values now this table is said to be in second normal form next I will explain what is star normal form shortly we call it as 3nf a table will be in 3 NF if it is into NF and there is no transitive dependency for non-prime attributes guys if you consider to NF to NF mean table must be in 1nf and there must not be any partial dependency no partial dependency mean primary key column should not contain any duplicate values all values must be unique in primary key column and whereas if you consider 3nf a table is said to be in 3 NF if the table is into NF and there is no transfer dependency for non-prime attributes I will give an example so that you can clearly understand what is this 3 and F this is simple student table example this table is into NF that means each and every column contains single values and there is no partial dependency that means this primary key column contains only unique values so there is no particle dependency so this condition is satisfied and X1 is no Transit dependency so table is said to be in 3 NF if it is in 2nf and there is no Transit dependency so this table is into NF but there is transfer dependency because if you consider this table this rule number column is primary key attribute attribute is nothing but column so we call this rule number column as primary key attribute whereas if you consider name column Branch column and free column these three columns are non-primary key columns so we call this name column Branch column and free column as non-prime attributes how can we consider fee based on branch for example for CSA phase is 30 000 for a AML phase is 20 000 for DS 10 000 and for EC 5000 so here phase column depends on Branch column because based on Branch phase is decided but this Branch column is non-primary key attribute and whereas this V column is non-primary key attribute here only rule number is primary key and whereas this branch and fear non-primary attributes here one non-primary key attribute depends on another non-primary key attribute if one non-pro American attribute depends on other non-primary key attribute then there is Transit dependency here there is transfer dependency between these two columns so this table is not in three NF but whereas in 3 NF the table must be into NF and there should not be transfer dependency But Here There Is transfer dependency now we need to remove this transfer dependency here there is transfer dependency between this branch and three columns so you need to remove any one column for example I am remembering this V column now I will select only these three columns and I will create one separate table after removing transfer dependency my table looks like this a rule number is primary key column and whereas this name and Branch are non-primary key columns now in this table there is no transfer dependency so now this table is in 3 NF your fee column is left now I will create one separate table for Transit dependency so I created separate table for transfer dependency whereas this is stable for transfer dependency and whereas this is stable for no transfer dependency here in this table we achieved 3nf this is known as third normal form Next Generation boys code normal form shortly we call it as bcnf bioscope normal form is an extension to third normal form we also call this boy's code normal form as 3.5 normal form this bcnf is Advanced version of third normal form and whatever the rows that this bcnf contains these rules are very strict when compared to third normal form these are various rules in parts for normal form under first rule is a table is said to be in BC and F if it is in 3nf and second rule is for example it is considered there are two columns one column is a and next column is B for example this B column depends on column A if B column depends on column A then definitely this column a must be a Super Key I'll give an example so that you can clearly understand what is this biasco normal form for example this is simple strand table the student table contains four columns rule number strain name Branch ID and Branch name for example this to n name column depends on rule number column for example this rule number is X column and the student name is y column I already said before if y column depends on column X definitely this column X must be a Super Key as we know we will identify Schwinn names based on rule numbers so this to n name column depends on this rule number column if student name column depends on Roll number column definitely this rule number column must be a Super Key just to end name column depends on rule number column definitely each and every student contains different rule numbers we cannot give same rule number for two different students so there are rule number one two three four all are different that mean all are unique so this rule number column is super key we will identify student name based on rule number similarly we will identify Brand's name based on Branch ID here if Brand's name column depends on Branch ID column definitely this Branch ID column must be a Super Key definitely Super Key must contain unique values so your first value is 121 next one is 122 next one is 123 and again there is 121 here this column contains duplicate values 121 and 121. so this Branch ID column is not a Super Key only if values are unique then it can be a Super Key but here there are duplicate values 121 and 121 so this Branch ID column is not a Super Key now this table is not in box score normal form because Branch ID column is not a super key there is high chance same branch now I will divide this table into two tables one table contains rule number and student name and next table contains Branch ID and Branch name whenever I create table for branch ID and Branch name I will remove these duplicate values there are no duplicate values all values are unique so this rule number column is a Super Key now this table is in bcnf this is Branch stable in this Branch table Branch name column depends on Branch ID column here in this main table 121 CSA repeated wise though 121 CSA repeated twice I will write it only once If You observe this Branch ID column in this Branch ID column all values are unique there are no duplicate values so this Branch ID column is also a Super Key now this table is also in bcnf next Direction what is fourth normal form shortly we call it as 4 NF a relation will be in 4 NF if it is in b c n f and has no multi value dependency for example if you consider this table this show end table is in bias code normal form that means for example this course column depends on student ID column and hobby column depends on student ID column if coarse column depends on student ID column the student ID column must be a Super Key all values are unique so this student ID column is a Super Key so now this table is in bias for normal form and next there should not be multi value dependency guess multi value dependency mean for example if two non-primary key column depends on single primary key column then there is multi value dependency column and again here hobby column is non-primary key column here this course column depends on student ID column and similarly hobby column also depends on student ID column so there is multi value dependency now we need to remove this multi value dependency no multi-value dependency mean only one non-primary key column must depends on one primary key column so I will create two tables these are two tables that this true entire is primary key column and course is non-primary key column here only one non-primary key column depends on one primary key column so this table is in 4 NF and similarly hobby column is left so I am creating another table the table contains 200 and hobby if you consider this table this hobby is non-primary key column and whereas this render is primary key column here only one non-primary key column depends on one primary key column so this table is also in 4 NF only if one non-primary key column depends on one primary key column then the table has no multi-value dependency and the table is in for NF so these two tables are in 4 NF acceleration what is fifth normal form shortly we call it as Phi NF we also call this fifth normal form as project joint normal form a relation is in fifth normal form if it is in fourth normal form and does not contain any joint dependency fifth normal form is satisfied when all the tables present in dbms are broken down into has many more tables to ensure there is no redundancy guys I will give an example so that you can clearly understand what is this fifth normal form for example this is simple faculty table in this faculty table there are three columns subject column faculty column and year column for example if you consider only subject column we cannot identify the subject column uniquely because there are duplicate values if there are duplicate values in particular column we cannot identify that particular column uniquely as similarly if you consider only here column we cannot identify here column uniquely because here one repeated face so we cannot identify ear column uniquely so that is why one column depends on another column so there is joint dependency that means one column depends on another columns but a table is said to be in Phi NF if the table is in 4 NF and there is no joint dependency But Here There is joint dependency now we need to remove this joint dependency just we need to break this large table into smaller subtables and if there are any duplicate values then we need to remove those duplicate values for example I will consider only subject column and faculty column and I will create one table and again I will create one table for faculty and here and again I will create one table for subject and year so there are three possibilities while creating subtables if there are any duplicate values you can remove those duplicate values so I will create a table for subject and faculty this is one table again another table for faculty and year so PSI 1 Shiva 1 Raju 2 and nagendra 3 create another table for subject and year here's C1 and again C1 next Java 2 and dbm S3 here subject to C and year one repeated twice so if any particular record repeated twice you need to write that record only once this is my thought table C1 Java 2 and dbm St these are three possible tables that's fine f is nothing but we need to break down last table into smaller subtables and if there are any duplicate records we need to write that record only once