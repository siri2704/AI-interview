hey guys welcome to Cafe iio in this video we will be talking about SQL and nosql databases let's get started databases are really really interesting when it comes to comparing them essentially we have two primary databases SQL versus non-sql SQL databases are our traditional relational databases these are in the form of rows and columns we access the data using a structured query language they are Aid compliant which really translates to having a good degree of guarantee about data and transaction control the full form of asset is atomicity consistency isolation and durability go back and refer to some of your database principles but this is really one of the key factors that differentiate relational and non-relational databases they have a fixed schema and they scale up and scaling up is really you know more like a vertical scaling when you look at no SQL databases they are very very different no SQL databases as it says are completely non-relational there is no declared language in terms of you know the structure of the data usually it's Json most of the times there is eventual consistency and it's very different from traditional rows versus columns and I said the schema is really really Dynamic it can be you know ever changing and they scale out now when it comes to comparing these databases a lot of times people want to start with simple no SQL database because you know they're easy a little bit fun easy to play with goes really well with the Json style and do when especially when you're building apis however this conversation is much more deeper than that you need to be really really aware about the nuances and the differences around which database to select and why should you select it for instance it might look easy when you're working with a data which is Json however if you want to guarantee transaction control and your systems require some sort of a specific pattern where it's guaranteed that the transaction occur things like banking systems and Mission critical systems you you might not be able to use nosql databases at least in the way you imagine it so in this video what I'm going to do is go a little deeper and look at top seven considerations which have been published by mongodb and you should consider these when you are evaluating new SQL databases let's get started so they have tried to uh talk about different aspects like consistency and transaction guarantees visualization and other capabilities and then some not so critical elements but we'll still get into that all right so here's the PDF you can go to the mongodb website and download it but let me just walk through that all right so the first consideration that we we'll go to the entire 18 Pages this could be a little long please bear with me if you're new to my channel I talk a lot about AI software architecture mlops and essentially these kind of conversations please do sub describe the first is really data model second is the query model third is consistency and transaction model fourth is interfaces mobile data data platform community support and you know really the freedom from lockin and all that so let's go and deep dive into each of them so the first parameter which is the data model essentially is the key differentiation factor differentiating factor which no SQL databases differ from relational databases so it's essentially the data model and you know you could think of how no key value is most primitive form of non-tabular B databases so you have tabular and then you have key value and that's how this is represented can obviously specialize into some or multiple different kinds like graphs and stuff like that the typical examples would be Amazon Dynamo DB redish hbas Cassandra etc etc there's multiple different kind of key value databases and data models available but essentially if your core data is tab or it's nicely represented in rows and columns do not go to no SQL databases at least you know not for the transaction Stu the next parameter is really the query model each application inherently has a different kind of query need uh you know sometimes you might just need to access basis a primary key and in most of those condition no SQL databases would be good however you might be storing data across multiple spaces schemas and you might require be required to join them and doing those sort of operations in SQL versus no SQL there's a significantly large different in terms of performance and time so this is another parameter to keep in check when you're building databases third is the consistency and transaction model as I was saying most nosql databases offer atomicity guarantee at the level of each record and atomicity is one of the four one the first one essentially right uh sorry atomicity and then you have the consistency you have isolation and durability and depending on the type of database you select it might offer isolation might offer durability but it's very unlikely that uh you will not be able to find that in a no SQL database which is completely guaranteeing aset there are some databases which offer aset like properties but to the best of my knowledge it doesn't exist but please do comment if you're aware of certain products DB uh really has multiple options around it it supports multi-document asset transactions Etc uh it's there there's still slight differences in the nuances while they do say asset but still slight differences in the nuances then comes the consistency and eventual consistency conversations uh um essentially translating to that if you have multiple servers data is eventually consistent which means the synchronization is eventually happening there might be a period of time when the data between two servers is not same so let's say you're sitting in India and you have a server closer to India and then the second server is in US depending on where you are served there might be a period that if your call one goes to Data Center a and call two goes to Data Center B you might get different answers so typically that's um something that we should keep in mind and essentially key value databases are mostly offering eventual consistency so different consistency modes essentially will provide different trade-off for applications depending on your availability requirement performance requirements there there is no one size fits all please do your assessment and please evaluate both options judiciously moving forward interfaces again uh to me this is not a decision point between SQL and no SQL uh because most SQL databases will provide different tons of gr interfaces different sorts of drivers and so would know SQL databases as well the only differentiation when we look at interfaces is SQL and again most nosql databases will also have SQL like languages so if you're familiar with SQL it's a very very easy uh compatibility however when this the the there is a specific case where I think this becomes really critical is when you are translating or moving data right in those scenarios you have to really pay very strong attention to the type of interface is supported uh CLI visualization and Reporting all of that is good uh mobile data is more of you know how can you get data closer to the users because that the interface and exchange is faster and typically for mobile devices there's very some some databases like sqlite and all which are popular within the Android ecosystem not familiar with what iOS uses but you do have some options on both the sides to be able to put a database on the app however these are not databases that are eventually used for storing large data so this is also I mean uh this should be an important requirement and in most cases you might want to have both specifically for mobile uh data platform is more of um you know how the whole data management the Privacy requirement the regulatory stuff the centralization of data the you know security consideration all of that is factored in traditionally speaking most if not all relational databases they would really support uh all kinds of security considerations be from an infrastructure perspective be from running an Enterprise application perspective be it with regulatory and compliance of governments and stuff like that uh I don't consider one or the other better in this case purely from a data perspective but again this is mongod DB's View and U I do think that most databases are now available readily on cloud and different Cloud providers are offering it really really quickly you have SQL databases from Azure AWS and all Cloud providers will have post they have some version of mongodb so really to me this is more of a uh you know preference that you end up with or driven largely by other kind of requirements last commercial support Community strength VOR lock in I think this is true for almost every product and everything that you evaluate not really just databases so you should have very strong commercial support if you're choosing a paid software there should be Community backing it up because a lot of times what happens is the answers are given faster and communities you know speaking from a Dev and day-to-day interaction perspective and then you should get some degree of vendor loock in freedom however that is really really unlikely the case with databases my personal opinion on database technology is that it's probably the last piece of software that's going to get ever migrated uh if it ever gets migrated I've seen people do lot of migrations of application stuff and all of that but this choose to stick with databases purely because of the fact that nobody wants to touch it and uh so typically with databases you do end up with vendor lockin uh and I think that's usually okay because specifically with modern database providers like mongodb SQL postgress these are all really mature products and crazy crazy optimal at what they so support and all isn't usually a problem all right so that's us discussing few points around why and when should you select no SQL versus no SQL this was more of a conversation if you have liked and want to see more of these kind of conversations please do put that in comment if you want some specific comparison in the tech space or want me to make videos on a topic drop that in the comment box again this is AA signing off bye-bye