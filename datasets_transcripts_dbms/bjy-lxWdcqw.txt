hello viewers in this video we are going to discuss see release ability concept specifically we are going to discuss conflict C realizability and view serialized Beauty techniques actually serializability it is the process used to find if the given non-serial schedule is a serializable schedule or non-serializable schedule usually we can classify the serial scheduled into two types serializable schedule and non-serializable schedule usually this serializable schedules provides consistent results that is its result is equivalent to the result of its transactions executed serially where is coming to non-serializable schedule it always gives inconsistent results that is its result is not equivalent to the result of its transactions executed serially so this non-serializable non-serial schedule since it produces inconsistent result this type of non-serializable schedule should not be permitted to execute that's why serializability concept is used to find out whether the given non-serial schedule is serializable or not we can check the given non-serial schedule as serializable or Not by using two serializability techniques one is conflict another one is View serializability now we are going to discuss about these two civilizability techniques with examples let's discuss conflict realizability conflict serializability it is one type of serializability technique which is easy to check whether a given non-serial schedule is conflict serializable or not it performs this process by converting the given non-serial schedule into serial schedule by swapping its non-conflicting operations let's check what are the conflict operations and non-conflict operations now here if two transactions are performing operations on the different data items then those operations are known as non-conflict operations because the transactions are doing operations are different data items right if nowhere violate the consistency property so operations which are performed on different data items are usually non-conflict operations if suppose the two transactions are performing operations on the same data item then there is a possibility for being conflict and non-confict okay so we can take either the operations which are performed on the same data item or conflict or non-conflict using four cases suppose two transactions are performing read and read operation on the same data item then these that is known as non-perfect operation that is any number of transaction and be permitted to do a read operation on the same data item at the same time even they are permitted also it never violated consistency property of transaction whereas if any one of the transaction performs right operation then that is known as conflict operation here you see here T2 is performing right operation and T1 is performing read since T2 is performing right operation it is known as conflict and here in this case also T1 is doing the right operation so it is a conflict operation and in the fourth case both transactions are doing a right operation on data item queue so this is also conflict operation so what are the non-conflict operation students if to if more than one transaction performs operations on the different data items then that is known as non-conflict operations similarly if more than one transaction performs a read operation on the same data item then that is also known as con non-conflict operation let us discuss conflict cerealizability with an example here this is what the given non-serial schedule S1 okay here this is non-serial schedule um how come it is known as non-serial solute here before the completion of T1 T2 is permissible to easy group right so that is why it is known as non-serial schedule so according to conflicts realizability to determine whether the given non-zerial schedule is conflicts serializable or not we have to swap the non-contract operation after swastik if we could able to make the serial equivalent of this then it is known as conflicts realizable schedule okay so let us try to swap the non-conflict operations in T1 and T2 here these two operations are non-conflict though these two or T1 and T2 are performing the read operation on different on same data item a they read and read never violate the consistency so it can be swapped so now after swapping this read operation comes up and this read operation goes down so now this is the intermediate result of this non-serial schedule then after this let us try to swap these two since T1 and T2 performs read operation on different data items it is also non-confect so it will be swapped successfully okay then after swapping you will get this the result of the schedule non-serial schedule will be like this then to get the serial equivalent of this one more step is required that is it has to come down and it has to go up right so either these are conflict or not let us check here both T1 and T2 are performing read and write operation on different data items okay so irrespective of any operation if transactions are performing operations on different diagram obviously they are non-contact fully swapped so after swapping we will get the serial schedule like this here this is serial schedule how come because all operations in tune are executed first and after the completion of it operations in T1 is permitted to execute that's why it is a Serial schedule so this is the serial equivalent of this non-serial schedule okay since this non-serial schedule S1 is converted to serial schedule yes to successfully by swapping its non-contact operations S1 is a conflict civilizable schedule that is this non-serial schedule S1 will not violate the consistency of database if permission to execute okay students I hope you understood what is conflict serializability and one more point uh non-serial schedule is known as conflict equivalent of Serial schedule if it can be successfully converted to serial schedule by swapping its non-perfect operation okay so in such case we can say the given non-serial schedule is the conflict equivalent of its serial schedule okay let us now discuss view C reliability with an example view serializability it is also one type of serializability technique which is use it to find out whether the given schedule is view serializable or not if scheduler is view equivalent to its serial schedule then let us View serializable let us now check what is view equivalent what are the conditions to be satisfied to determine whether the given schedule is view equivalent of its serial schedule or not let us now discuss two schedules two schedules non-serial and serial schedules are set to be view equivalent if they satisfy the following conditions that is if in both schedules S1 and es2 the transactions that perform initial read final write and update read operations on each data item or saved okay so you can understand this very clearly when we discuss with an example okay here this is what the given non-serial schedule now we are going to check whether the given non-serial schedule is due serializable or not so to determine either it is view serializable or not three conditions need to be satisfied what are the three conditions initial read final write and update read on each data item must be done in both the schedules by same set of transactions okay so that's what we are going to check now here what are the two data items are here uh A and B right so these two are the data items uh are used in this schedule okay here A A here b b b so uh totally there are two data items are used in this schedule okay let us check uh which transaction performs initial read final write and update read on these data items here on a who performs initial read T1 right initially who performs the read operation on a T1 then who performs the update read on a update read it means after the right operation who performs the read okay so after the write operation on a by T1 T2 reads its value so update read operation is performed by T2 there are two right operations but final write is performed by the teacher so accordingly if you check on data iPhone B initial read is done by T1 update read is done by T2 and final right on B is done by T2 so now we have to check either the same set of transaction performs these operations in serial schedule also on each data items okay this is the serial equivalent of this non-serial serial right so how how we got this simply we arranged all the operations in T1 first and followed by that all the operations in T2 must be written subsequently okay but there should not be any overlap between the operations of T1 and T2 then only it is known as serial schedule right okay let us now check initial read update read final write on EnV okay here who performs the initial read on a T1 okay update rerun a is performed by T2 right so after the write on a T2 performs the read operation then who performs the final write on a so there are two right operation on a so final right is performed by T2 so very similarly even in even on a b also T1 performs the initial read T2 performs the update read T2 performs the final right so here we got the set of operations okay here let us now check either the same set of operations performs initial read update read final write on a in both the cases yes if we check you can notice that T1 T2 T2 so same transaction performs all the three operations are a and this is applicable on B also okay since on each data item same set of transaction performs the all the three operations we can say that the given non-serial schedule is View serializable status the given non-serial schedule is the view equivalent of is serial schedule let us take one more example to discuss View serializability this is what the given non-serial schedule okay and in this serial schedule there are two transactions are there and both the transactions are performing operations on single data item okay on this we have to check which transactions are performing initial read update read and final write on you because there is only one data item right so on Queue only we have to check who performs initial read on Queue T1 right then update read um no transaction is doing because after right there is no read operation okay so that's why it is nailed then final write is performed by T1 okay there are two right operation but final right is performed by T1 so let us check the same thing on serial schedule okay now we made the serial schedule which is the serial schedule of this non-serial schedule how we got this simply we have to arrange all the operations in T1 followed by the operations in T2 and there should not be any overlap between the operations in T1 and T2 so if there is no overlap then it is known as serial schedule okay so we simply wrote the serial schedule on and after that we have to check either all the three operations are performed by the same set of transaction as done in non-serial schedule so when we checked it initial read is done by T1 no update read right so it is nil then final right on Q is performed by T2 okay so but here in non-serial schedule final write is done by T1 but here in t but here in this case T2 so since there is a mismatch in operations performed in non-serial and serial this S1 is not view equivalent of S2 so it is not View serializable students I hope you understand what is conflict cerealizability and view serializability thanks for watching