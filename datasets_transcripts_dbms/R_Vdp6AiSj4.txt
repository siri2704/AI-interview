we know that these entities are going to have attributes uh that is we already have seen it right like for example employee employee can have employee ID employee name and maybe salary is date of birth something like this right and we also know that U every entity like department will also have some attributes like department number Department name right so there is no no entity without any attributes we don't find any such entities at all similar to the entities even the Rel relationships can also have some attributes in this case let us say an employee is going to work for a department right now there is a relationship to this relationship I can add an attribute let us say the attribute added is see these ovs are nothing but the attributes and there are various types of attributes we shall discuss about uh what kind of notations we are going to give for each attribute like composite and simple multivalue like this let us say one simple attribute I want to attach to this works for relation which is start date start date which means I want to even record see this employee some particular employee is going to work for some particular Department then what is the day on which he started working for it that is called a start date now if I'm going to add that uh you know attribute to the relationship then I I'll really think about it as a designer as a schema designer schema designer means I'm going to design this right so as a designer I have to think about should I really attach an attribute to the relationship or can I avoid it which means can I attach this relation this attribute instead of this relationship to any of the I know entities it turns out that sometimes it is possible that even if a relationship is having an attribute we can happily shift this we can why happily because we don't want to attach any any more you know attributes to the relationship it is going to complicate many things later on I'll show you later when we go to the relational model what I mean to say is we want to have uh as less attributes to the relationship as possible right and we try to avoid it whenever you know it is possible so what I'm trying to do is I want to give this attribute start de instead of to this relationship I want to give it to either you know employee or the department got it now which way should I give it where should I give it which way will it be meaningful now you know it is one to n relationship is there it is n side and that is one side right generally it is convenient to give that relation to the attribute this whatever his attribute is present it is convenient if you can give this particular attribute to the inside the reason is in a many to one relationship what happens is every every employee will be having you know participation in there like this see what I mean to say is an employee will be participating see E1 E2 E3 E4 right therefore an employee may be participating like this right so many employees may be going to the same Department right now giving this attribute to the employee side is beneficial because every employee can have a starting date attached to that particular you know entity without any problem but if I have to put this starting date here you know it is going to be a multivalued attribute there which means uh for every employee I might have to add a add a start date and you know which employee which date it is going to be really confusing so here if I put it you know if I put the attribute this side it is going to be easy to identify it got it so in case of many to one relationship right which means like this and and and one it is better that whichever side you have n in your diagram you put the attribute that side it is easy and convenient that way what it so anyway whether you want to leave it here or you want to shift this attribute to the inside it is all up to you as a designer you have the freedom and if you if you ever want to change it if you ever want to move it you have to move it only to this side that side is not possible what it in case of 1 to n right in case of let us say an employee and then manages right this is manager right so in this one also if you want to have attribute like you know start date which means what is the date from which this employees started managing this particular Department right then also you can have uh this attribute and if you wish to move it onto one of them you can either move to this side or this side which means in case of one to one relationship the reason is like this you know if there is a department and if there is an employee you'll have only one to one relationship right therefore every employee will be having only one Department he is managing so either you put this start date here or you put this start de here you can derive the information easily right so in case of one to one now you know relationships it is better that you know you can you have the Liberty either you can choose it to choose to move it here or there if only you know if you have already decided to move it otherwise if you want to leave it there you can anywh leave it there right but many people will try to move it to the entities because entities having relationship you know attributes is Meaningful rather than this relationships having it okay and in case of this many to many which means this is many many many to many relationship isn't it an employee is working for a project right so in this case assume that there is a attribute and the attribute Is Us number of us a particular employee has worked on a particular project now such an attribute it is difficult to move either here or here the reason is you know you cannot record the information that way this particular attribute is actually depending on two values one is an employee as well as project simultaneously you cannot decide about the ask only depending on the employee or you cannot decide about the ask only depending on the project because what I wanted to write here is you know the number of USS an employee is working on a particular project and there are various uh various employees working on a project and for a project there will be various employees like this see what I mean to say is if there is employees here and there is projects here the problem is this there will be many to many relationship an employee may be working for many projects like this as well as a project might be having many employees right now what I wanted to record is is how many hours a particular employee has worked on a particular project now if I put that information here right it you know just that information is not one information is not going to be enough because this particular employee is working on you know many projects so I might have to put many number of fs and it is not possible there and moreover I cannot put number of FS on the project side because each project is having many employees so if I put some hours here it might correspond to employee one or employee or employee 3 what I wanted is for every employee for every project how many hours did this employee work on that project for every employee and project then it is going to be a difficult thing so I cannot reflect it either here or here because this particular attribute is depending on both employee and you know project so putting this either here or here is not an is not feasible at all so in this case definitely you you have to have attributes with the I know relationships here in these two cases you might avoid it somehow right see why is it why does it make sense to put the you know start dat this side is there is only one employee I mean employees participating in only one relationship therefore if you add that value definitely that indicates that this particular employee starting date is this you need not talk about you know this particular employe and this department this starting dat why for every employee there is only one Department therefore saying that this particular employee has started at this date is also saying that this particular employee has started at this date for that project for that department right and here also if you have a manager and then you know this employee and Department having either information this side or that side is Meaningful because you know every employee is managing only one Department therefore saying that he started at so and so time is enough right because that that that particular information is going to say which department he is working for he's managing because there is only one department but here if you try to move the number of hours this side then what happens is if you're saying that some particular employee is working for these many has worked for these many hours then it doesn't make sense because that particular employee is working for many projects then you might ask again yes you are saying the number of us which project is it we cannot derive that because each employee is working for many projects and now if you try to put that information in the employee the project side then what happens is you'll get get the information that this particular project has been worked on for these many hours but then you'll not get the information about who worked on this and you cannot derive it also because for a given project there are many employees you cannot say who who is that so this is a very peculiar case in which you have to definitely have the attribute attached to the relationship itself you cannot you know migrate it either to this side or that side understood this okay so this is how attributes are attached to the relationships as well okay