hi guys welcome to my channel In this video I'll be covering what are error correction methods in data link layer Guys I have uploaded complete computer network subject tutorials I will provide that link in description You can watch from there If you are watching this video for the first time don't forget to like share and subscribe to my channel Let's get started Error control mean whenever sender send data to receiver due to some noise or interference in network receiver may receive error in the data For example sender will send data to receiver like hello For example hello binary code is 1 0 1 01 But due to some noise or interference network last bit one is changed to zero So receiver may receive data like JL in place of which receiver will receive data like JL which is wrong message Now data link layer will identify this error and as well as data link layer will correct this error by using various error control methods Error control is the process of finding and fixing errors in the data transmission so that receiver gets the correct data It ensure that if any error caused by noise or interference in the network are corrected Okay So error correction methods are mainly classified into three types and the first one is retransmission method We also call this ret transmission method as ARQ method where ARQ stands for automatic repeat request method Whenever receiver receive error in the data receiver will correct that error just by saying sender to retransmit that same data again So receiver will ask the sender to send the same data again This is how receiver corrects error in the data ARQ methods are classified into two types and the first one is discrete ARQ and second one is continuous ARQ At first I will explain what is discrete ARQ Whenever sender send data to receiver receiver will give replay whether data is received correctly or not We call this replay message as acknowledgement If data is received correctly then receiver will give positive ACK and whenever receiver receives error in the data then receiver will give negative acknowledgement for sender If sender receives negative acknowledgement then sender will send that same data again So in discrete ARQ receiver will give replay to sender that is positive replay or negative replay We call that replay as acknowledgement that is ACK If sender receives negative then sender will again send that same data again The next one is continuous ARQ Whereas in continuous ARQ complete data is divided into parts and then each part is transferred to receiver For example let us say sender will send data like hello how are you hello is one part how is one part R is one part and you is one part So in continuous ARQ complete data is divided into various parts and all these parts are continuously transferred to receiver That is why we call this method as continuous ARQ If receiver receive data with error then receiver will again sender to send only that error occurred part For example receiver receives data like hello how are you but if you observe U in place of YU receiver will receive data like Y AU as only this part got error then receiver will ask sender only to send that error occurred part So sender will again send that you after receiver receiving error occurred part then receiver will reconstruct that message like hello how are you and then receiver reads this message This is all about continuously argue So first error correction method is retransmission method We also call it as automatic repeat request method that is ARQ method And whereas second one is symbol substitution method Name itself is symbol substitution Whenever receiver receive any characters with error this symbol substitution method will include some special symbols like question mark symbol If any characters are corrupted and there will be operator who will identify this question marks and then this operator will correct errors manually This method uses manual correction to fix errors If a character is corrupted it replaces with a special symbol like question mark A woman operator fix and correct data manually Okay this method is used in old telegraph systems This method is not commonly used today And whereas third method is forward error correction method Yes whereas in forward error correction method along with our data we'll add extra bits And by using that extra bits we can check error in the data For example let's say I'll send hello Binary bits of hello is 1 01 For example along with my data forward error correction method will add some extra bits like 1 1 0 These extra bits are used to check and as well as correct errors in the data Guys we use forward error correction in satellites and as well as in wireless networks One of the famous forward error correction method is hamming code method Guys I will explain hamming code method with example Next I'll explain what is hamming code method Yes whenever one computer send data to other computer this hamming code method is used to detect and as well as correct error in the data Errors can happen due to noise Whenever error occurs bit zero is changed to one and as well as one is changed to zero This hamming code method was invented by Richard Hamming That is why they give a name hamming code By using this hamming code method data will be transferred from one computer to other computer without any errors I will explain one simple problem By using hamming code there is seven bit code and data is 1101 Add parity bits Guys in question they given total there are seven bits Out of seven bits four data bits are given Four data bits are 1 1 0 1 And we need to find parity bits As we know out of seven four are data bits and remaining three are parity bits Now we need to find what are parity bits Guess hamming code contains both data bits and as well as parity bits Parity bits are nothing but parity bits are the extra bits added to our data These parity bits are used to detect and as well as correct errors in the data Total seven bits starting from bit one to bit seven At first we need to identify in which positions we need to place three par bits For that you need to remember formula that is two power n where n = 0a 1a 2a 3a so on This you need to remember formula that is 2^ n in order to identify positions of parity bits So n= 0 1 2 3 so on So at first I'll take 2^0 2^0 is nothing but 1 So in first position we can place parity bit So first parity bit is in position one Next in value is one So now two power 1 2^ 1 is nothing but two So second position is available So in second position we can place parity bit And next to 2Â² that is 2 into 2 that equal to 4 So fourth position is available So in fourth position we can place parity bit and next to 2 cube that is 2 into 2 into 2 2 are 4 4 2 8 But if you observe here eth position is not available as there are total seven bits only there are seven positions as we need to find three parity bits We got position of three parity bits They are P1 P2 and P4 So we can place parity bits in position 1 2 and 4 We got positions of parity bits Now we will place our data bits in remaining positions That is we need to place data bits 1 1 0 1 So 1 1 0 1 So in remaining positions we can fill data bits Now what are the bits we need to place in these positions we need to identify that at first we will find parity bit in position one just remember formula P1 mean take one and skip one as position will start from one we'll take position one and we'll skip one that is we will skip two and again take three and skip four and similarly take five and skip six and take seven and no other bits are available so you can leave So P1 mean take one skip one and start from one So we are starting from one take one skip two take three skip four take five skip 6 and take seven So positions are P1 3 5 7 that there is no value in P1 so leave it And whereas in position three value is 1 and whereas in position five value is zero and whereas in position 7 value is 1 So now values are 101 If you observe here there are two ones which is even number So if there are even ones then parity bit is zero and if there are odd number of ones then parity is one as there are two even ones then our parity will be zero So parity bit one value is zero So now we got parity bit value that is zero Next we will find p2 value So p2 mean take two skip two and start from two So we need to start from two take two values that is 2a 3 skip two values so we'll skip four 5 and again we'll take 6 7 after 7 there are no values we can stop so now we got positions of p2 that is 2 3 6 7 as there is no value in p2 position so you can leave and position three contains value that is one and similarly position 6 contain value 1 and position 7 contains value one so value of p2 is 31 guys whereas total there are three ones which is odd number If there are odd number of ones then parity value is one So now P2 value is one because there are odd number of ones Now we will find P4 value Guess P4 mean take four skip four and start from four So starting from four we'll take four values So P4 is equal to 4 5 6 7 and there are no values available to skip you can leave So P4 no values available you can leave And P5 value is zero P6 value is 1 and P7 value is 1 So now P4 values are 01 as there are even number of ones So parity value is zero So P4 value is zero Yes Now we got three parity bits They are 0 1 0 So along with our data we need to add parity bits to our data by using this parity bits Hamming code method will identify and correct errors So parity bits are P1 P2 and P4 and whereas data bits are D3 D5 D6 D7 This is how hamming code method will find parity bits when data bits are given This is one more example A 7 bit hamming code is received as 1 01 Assume even parity and state whether received code is correct or not Guys we got this code that is 1 01 01 This is 7 bit data which receiver got Now we need to identify whether this code contains errors or not At first we need to find parity bits So in order to find positions of parity bits formula is two power n where n= 0 1 2 3 so on So first we will take 2^0 2^0 is 1 So parity bit position is 1 and next two power 1 So parity bit position is 2 and x2 square that is 2 into 2 that equal to 4 So parity bit position is 4 and x2 cube that is 2 into 2 into 2 that is eight position is not available so we can ignore So now we got positions of parity bits they are p1 p2 and p4 Guess in question they given even parity Even parity is nothing but all parity bits must contain even number of funds If there are any odd number of ones in par bits then our data contains errors At first we will find value of position one as P1 mean take one skip one and start from one So I'll take one skip two take three skip four and take five skip six and take seven So P1 value is 1 P3 value is zero Position five contains value one and position 7 contains value one If you observe here 1 2 3 odd number of ones So we got er data and similarly we'll find P2 P2 mean take two skip two and start from two So starting from two we'll take two values that is 2a 3 and we'll skip 4A 5 and take 6A 7 So position two value is 1 Position three value is zero and whereas in position 6 value is zero and whereas in position 7 value is 1 So 1 0 0 1 as there are even number of ones So there is no error in P2 position The next one is P4 P4 mean take four skip four and start from four So starting from four we will take four values They are position 4 5 6 7 and there are no other values We can stop here So P4 value is 1 P5 value is one P6 is 0 and P7 is 1 As there are odd number of ones so parity 4 contains error data Guess in question they given even parity Even parity is nothing but all parity bits must contain even number of ones If there are any odd number of ones in parity bits then our data contains errors Guys if there are odd number of ones parity value is one And if there are even ones parity value is zero So P1 value is one P2 value is zero And whereas P4 contain odd number of ones So P4 value is one So now we'll identify in which position we got error So total parity values are 1 0 1 b 2 So 2 0 2 power 1 and 2 square 2 0 is 1 1 into 1 that is 1 and 2^ 1 is 2 into 0 So value is 0 + 2Â² that is 4 4 into 1 4 So 4 + 0 + 1 that equal to 5 So in position five data bit contain error So in position five we need to change 1 to zero This is how Hammond code will find errors in data