click the Bell icon to get latest videos from akira hello friends as we have discussed all the basic relational algebra operations as well as some additional operations to that today we will discuss about the extension of the relational algebra operation that is the generalized projection all of the outer joins like left outer join right outer join and full outer join and we will see on the examples that how to perform this operations and why it is useful for this operations on being handling a database in a real time constraint extension of the relational algebra operation has always been done on the basic and additional algebra operations like we will use the projection operation the selection operations the most the first type of operation that is extension as an algebra is the generalized projection the generalized projection is same as the projection operation but with the addition of aggregate function on any numeric value or a filt or attribute in a relation so now we will see what are the aggregate functions to use we will use the sum function which will actually add up all the values of a field and then produce a single result we can use the average or AVG that will take all the values of a field and give the average of that the max 1 which will give the maximum value of a field the minimum 1 for a mean and we can use a distinct or a count distinct keyword to use actually count the number of filled values but not repeating say for we are having a city filled which can be repeated names like Kolkata Delhi multiple times but at the time of counting the city names we will consider each of the name only once at unity so in this way we will use the aggregate functions on the projection and the projection becomes a generalized projection now we will use examples and relations to exemplify our operations here we are having a relation credit info which is gives us the information about the customer their credit card limitations and available balance so first we have the customer name then the credit they have already used and the maximum limit of their credit card so using the aggregate function on the projection we will calculate that how much available balance is there in their credit card so for that we will use the query [Music] so we are using a query that we are projecting the customer name and we are calculating the available balance so we are actually performing the subtraction aggregate operation that is the limit subtracting with the credit that the credit will be subtracted from the limit and it will be named as a Ville balance that is the available balance for the credit info of a customer and we can fetch it from the relation credit info so the generalized rejection is just like that we are using an aggregate function as well as a renaming on the projection part predicate so the resultant information relation will be you so it will be the operation result of the generalized projection now to enhance on a more relation we will increase first grouping so grouping can be done with the generalized projection and before that we can mention then on which field it is to be grouped the relation so for generalized projection now onwards we will see and use the capitalized XI without curve X so it will look like this so now the generalized projection will be this instead of the brick capital letter pi so we will see that how to use the grouping inside a relation you now we can use this beta Vox relation for rest of our examples so first we will see that how to calculate that what is the total salary of the part-time workers in a factory so here is the employee named branch name and salary of all the part-time workers so ma need to calculate what is the total expenditure on a part-time worker salary on a factory so we need to give a projection operation on the salary but by summing it up into a single result so we can use the generalized projection with aggregate function some on the third salary of the relation PT books so convey'd has seen the result of summing up all these values to the expenditure of the factories Platinum worker's salary now if we want to do that branch wise how to achieve that see I want the downtown the Perry and Austin departments expenditure on a part-time worker salary so first we need to group the relation according to the need here the need is branch name so first we need to group the relation according to the branch name and then perform the generalized projection on each of the branch name so to do that we need to just put the desired attribute on which the grouping is to be done before the generalized projection so on this PT works if we perform the query you so we are performing the grouping on the branch name on this relation after that we are performing the summing on the salaries on that particular branch name category so firstly what is the result of the grouped relation on PT walks are the part-time workers so this is a result of the group two relation PT works here I have grouped according to the branch name Perry downtown and Austin on the relation now I need to perform the some salary on the PT works and I want the CS name and also the salary of the summation into the account name so it will look like this as see we are having only the branch name and the salary as the projection so my resultant output will have only two column like the branch name and the salary so this is the output we will get by performing this query that we are having the branch name and the summation of the salaries or the per time workers on that branch now if I want to count what are the number of branches on the factory so here if we put on a count on this branch name then we will have a result of seven but actually we are having three bunches Perry downtown and Austin so to get the desired result we need to put a keyword count specified by a hyphen before any aggregate function that is using so the count - distinct will give us the duplicated value eliminated from the desired result so now we are using a query to count the number of branches in this output here we are using a query that you're using the keyword town distinct on the branch name so first we are making a unique branch name for each of the count and the result will be 3 for this query because there are three distinct ranch name on the relation PT works now we will do something interesting that with the composed of more than one aggregate function on this generalized projection that we will see on this Platinum workers on the factory we will fetch the department wise or branch wise total salary or expenditure as well as who is the highest earner on that branch so we will use two of the rigid function one is the sum another is the maxillary to find out who is the highest owner on that branch though the total resultant query will look like so here we are using the sum salary as the summation of the salary and the salary as the maximum salary that will name the highest earner on that branch we can put the customer name also in here to fit that who is the highest earner here we are fetching only the details that what is the maximum salary paid to a customer on that Factory on a part-time basis so the resultant will be so this gives us an extra column using the generalized projection that is a maximum salary earned in each of the department so that is the generalized projection on aggregate function now we will see that in terms of the definition how to define a generalized projection using a aggregate function we need to keep in mind two things that all tuples in all relations if they are coming from the same relation then they must be same in each of the generalized projection and if the tuples or the attributes are combined with different relation then they must be distinct while using and generalized projection so we can sum it up like this you so here we are using the first grouping of every grouping can be done this will be the primary grouping ordering next up in this grouping this GT will be grouped and like this two GN and for a generalized function first aggregate function f 1 then F 2 then F n it can be best on the same couple or a different couple like in the previous example we have made it on the same attribute and we can make it also in a different attribute and if it is coming for a single relation then they must be distinct and if it is coming from joining or a natural join or a Cartesian product of two relations then it can come from four different couples so now we will move to the next part of the extended relational algebra that is the most important part which is known as outer join outer join gives us the result of common relation having the attributes so whenever two relations have some common attributes and their attributes have some common values then we can fetch it in a single desired result of an outer join of two or more relations so now we will see that how to perform an outer join to exemplify the outer join we will see two relation and then outer join it together here we are having to relation when is EMP or the employee personal details such as employee name the street name and the city name and another is the box their work-related factory details like the employee name branch name and salary so now we will perform an outer join on these two relations so the resultant relation if we full outer join on this two relation will be now as I have mentioned that in outer join we will see all the attributes of two tables but not any duplicate values so the employee name is common in both the tables so I put it once here and other than that the street and city attributes of employ table and the factory works table the bo name and salary that is the branch name and salary accordingly now whatever it has the common value between this two we will put it in the outer join that is basically an intersection of this two relations so we will see what is the result Sequoia is common in here and here so we will put quiet next rabbit is also there Smith is in the employ table but it is not present in the factory box table so it will be not put in this resultant output of the outer join again gets us in the factory box table but not in the employ table so it will be discarded also next comes Shawn which is present in both the relations so we will put it in the resultant relation so that is the results of this outer join on EMP and have Devo now here we see that it is not commutative if we put factory box in left and EMP in right so the branch name and solid would have come first then sweet density so the result will always be the same but the Audrey is slightly different because of changing the left and right part of the outer join so that is the outer join now using these two tables we will enhance the outer join on left and right outer join so on left outer join we will have all the values of the left table or the left relation however if some values are not present on the attributes say for an example that Smith has got no information on its factory works so it will be kept in now on the left right outer join and in the right outer join same will happen but the right table will have all his information and along with this gates will be missing its treated city so it will be kept now so let us see that what will be the result of left outer join and writer doe join on this two relation see here I have put first all the names of the left relation and then the relation that is being not matched with the right relation so gets is only the right relation not in the left relation that is why I put in the inner last now for this for relation we can get all straight in city but what Smith we will not get the right relation so the result will be now in the left outer join they can see that the gauge has not got any result in the left relation so we have to eliminate it from the left outer join relation and only the relation that is present in only the left relation so the court Street is you so here I have used the value null for branch name and salary of Smith so it is the result of the left outer join which is represented like so the left word is kept open for EMB now as with the right outer join we can see that the right pot will be kept open so that we will have all the information on the right relation and if that is not present in the left relation so we will keep it blank or put the value now see all the attributes of the right one as put but we have kept this one now because cats Street and city information is missing now there is one more elaborative outer join that is known as full outer join as the name suggests in full outer join we will have all the values of left and right relation in our resultant relation and if the left relation is missing some of the attributes in the right then it will be kept now as well as the right relation values which some of the attribute is missing in left it will be also kept now so the full outer join on this relations will look like it will be named as now we will have all the values like we will put the left one values first and eliminated values from the left outer join that is gets will be also put here see it's a full outer join because the right relation is missing with the speed values and the left religion is missing with the gates values so that is all for the outer join and the extended relational algebra operations thank you for watching this video stay tuned with Akira and subscribe to Akira