hell everyone my name is sh and welcome to my YouTube channel today we are diving into a super important topic in database system transaction management and concurrency control introduction to transaction management if you ever wonder how data was handle multiple user trying to access to modify data with the same type of time with creating the CHS the video is for you will be break down to concept simple terms look some real world example and make sure you will walk away understanding why this stuff matters so grab a drink with like button jump into it what is transaction so what exactly transaction database terms think of trans action as a single unit of work you need to be completed fully or not at all it's like ordering food online either you are entire order goes through a payment process restor and Confirmation delivery is arranged for none of it happen in a data in a database uh language transaction is sequence of operation performed as a single logic unit of work for example when you are transfer money from One bank to another two main operation is aced deduct money from the first account add money from the second account understanding of transaction a transaction is a logical unit of work that execute sequence uh sequence of a operation as a single entity must be fully completed or not exed at all ensuring that the database remain in a constant state key character of transaction automatically all of or nothing has consistency maintaining database validity isolation transaction operate independently and durability commit committed changes isest of faure together these properties Safeguard data base Integrity during uh during F operation uh understand acid properties uh transaction follows uh what we call the acid proper isn't about chemistry is not accuracy stand for uh for automatic automatic transaction are all nothing either all operations in a transaction succeed for none of them if something fails halfway through the system roll back of things where before the transaction started consistency transaction always move the database from one valid state to another all rules constant and triggered must be satisfied isolation given when multiple transaction are running at the same time each transaction should be feel like it's the only one accessing the data no transaction should be C partial result another transaction uh durability one of transaction is committed its changes are permanent and surviv system failure crashes power outage these properties are what make database reliable even the chotic scenario with thousands of user concurrency control now here where things interesting what happen when multiple transaction try to access the uh access the update the same data at the time without proper control we could run into survival problem lost update one transaction one transaction uh override another transaction change without even realizing the T reads one transaction rate data that another transaction has modified but hasn't at modified the second transaction eventually roll back its changes non- repeatable reads a transaction reads the same data twice but gets different result because another transaction modified the data between reads Phantom sits a transaction executes a query fine new R and that where before because another transaction added them this problem can lead data inconsistency which is a big no no in database system concurrency control techniques so how database even prevent this issue through concurrency control locking the most common approach when transaction need to access a data in a place Lo on the data prevent another transaction from interfering the sh lock for reading and exclusive lock for writing locking based protocol locking based protocol is a two to it's a strict variant play Virtual role preventing a concurrency issue this protocol manage access of data andur transactions are isolated from another multi uh multi concurrency control the database multiple versions of data read don't block right vice versa post sqls of many modern use this approach isolation level isolation levels dedicated visibility of uncommit changes between transaction with level of raging from read un commitment low s highest understanding this Lael helps balancing performance data integation transaction example management a bank transfer let's see this conation with our bank transfer example imagine two transaction happening at the same time transaction one transfer 1,000 from account a to account B transaction two add 50 rupees interest to account a without concr control if the both transaction read account a balances 1,000 at the same time transaction a transaction one would be it uh 900 after deducting 100 transaction to would be update uh 1,50 after adding one adding 50 whichever transac completes last win that uh the order changes get lost with the pro proper concurrency control like locking transaction two would be wait until transaction one finish and then work with updated balance of 900 result is 950 the current amount example two Airline resolution imagine the last seat of flight and two customer trying to book simultaneously transaction One customer a check seat availability c one seat left transaction customer B also check seat availability seat one is left both decide to book a seat without concurrency control both might be get confirmed for the same seat with proper isolation throughout look M CC once customer a start booking process the seat would be temporarily locked forcing customer B to wait eventually see that seat is no longer e-commerce Inver one our last example e-commerce imagine a online store with Limited stock of proper items transaction one a customer place a order for last three units transaction two the store manager update the inventory count after finding two damage unit without proper coning to the customer might be order item that aren't actually available Le to proper customer experience with technique like two phase locking database would be ensure inventory update of consistence accurate recovery management recovery management essential for maintaining a data Integrity the event of failure techniques such as transaction L checkpoint and roll back operations ensure the database can be restored to cons State folling scat errors performance consideration and best practice balancing isolation level and performance with the critical transaction management optimizing transaction designing minimizing loog cont and selecting appropriate isolation level enhancing database throughout while maintaining relability and there are you have it we have covered essential transaction management and concurrency control to recap transaction and logical unit for work follow assd property concurrent access lead to data inconsistency problem and database system use various technique like locking and mvcc to prevent the issue I hope this help uh how database handle multiple user operation without failing apart if you found helpful please hit the like button and subscri for more database content drop your question and comment below and I will see you in next video thank you