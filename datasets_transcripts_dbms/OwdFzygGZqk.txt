good day everyone I hope you're all in good health so it will be a review video on how to transform er diagrams into relational schema I've discussed this with you many many weeks ago but some of you have requested for me to give you another discussion about this one so let's have review this is the first example in the exercises and solutions that was given to you this example has four entities car customer invoice and employee these entities are involved in relationships there are four relationships also shown in this diagram then each entity have different attributes some attributes are composed like this one some attributes are multi valued so those have implications when transforming into relational schemas all right so let's begin let's start with the car entity ok let's begin with the attributes first and then we'll move to the relationships where car is involved ok ok let me pull my word document ok here so I'll just write the schema here ok we begin with car so car has one two three attributes and the model attribute here is a composite attribute so we model car cause paralysis the schema so we begin with car underscore ID and then you have the serial underscore number all right so model here is a composite attribute so for composite attributes the rule is for you to transform only the component parts so you do not include model you only include model number color and year so you put here model number color and you have alright by the way this one is a primary key this one car ID is a primary key I'm just preparing the foreign key and primary key symbols here all right control V here here here there so a car ID is a primary key their car IDs a primary key all right so next let's look at the relationships where car is involved now car is involved in two relationships the first one is it has a relationship with customer across a car is owned or bought by a customer and a customer buys a car right now if you take a look at this first relationship here this is one too many again the relationship is one too many right one too many binary relationship alright so what do we do with that in a one-to-many binary relationship like this we put a foreign key on the many side though since customer is on the one side in this relationship and car is on the many side of this relationship therefore we put the foreign key in car so we add another foreign key here now the foreign key here is the primary key of the one side now the one side is customer right what is its primary key customer ID therefore we will put customer ID in car we will make customer ID of a foreign key of car so we'll put it there customer underscore ID there and this one is a foreign key right this would be a foreign key okay no that would be a foreign key now we're done with this with this relationship okay this one we're done with this relationship now let's proceed with this relationship now car here is involved also with another relationship with employee so the cardinality of the relationship is one to many again it's one to too many now which one is on the many side employee or car which one is on the many side employee or car it's car so what does this mean it means that car here we'll have another foreign key but this time the foreign key is based on the primary key of the one side now the primary key of the one side is M Phi D therefore we put an ID as a foreign key in car all right so we'll add another one here okay and that would be employee ID which is again another foreign key there all right any questions regarding this none no questions all right let's proceed with where do you want to go customer okay let's have customer now let's go to the relation customer put here I put here customer what was that what's that so I'll have a customer here let's see what's inside it first you look at the attributes we will transform the attributes first and then we'll go ahead with the relationship okay so attributes this is there are 1 2 3 4 5 6 attributes of customer and they are all simple attributes so this is not a problem no problem with this one you just simply copy the simple attributes so we begin with customer ID address country and then city ok so we're done with the attributes of customer now let's proceed with its relationships note that notice that in this notice that in the diagram again customer notice that in the diagram customer is involved in two relationships the first one is it has a relation with car and the second one is it has a relationship with an invoice entity now for for this one customer here is on the one side of this relationship so we do not put a foreign key in customer again the rule is you put the for if it is one-to-many binary relationship we put a foreign key on the many side okay and then the foreign key is based on the primary key of the one side now since this since customer is on the one side of this relationship there are no foreign key for the customer relation if we consider this relationship now let's proceed with the next relationship this is a relationship between between customer and an invoice so a customer has many invoices so it is a one-to-many relationship but then again but then again in this relationship customer is on the one side therefore we do not put a foreign key in customer we just leave it as is okay so we're done with customer no foreign keys here again no foreign keys because of these two relationships customer is on the one side here in car it's on the one side here in invoice it's on the one side so we do not put for increased customer okay all right let's see oh I forgot to put the primary key so yeah there you go primary key next let us proceed with let us proceed with employee okay let's have employee here let's go to the next one we have employee entity now let's transform the attributes first and then the relationships so employee ID has one two three four attributes and one attribute is a multivalued attribute and then when we transform multivalued attributes there is a rule to that one okay well let's begin with the simple attributes first you have m ID is the primary key you have name and then you have address all right you have address here address let's see but we do not code qualification here because qualification is a multivalued attribute and based on the rule if an attribute is a multivalued attribute then we will have to create a new relation create a new relation and then link that relation to the base entity okay so this is the base entity or the base relation which is employee okay so we'll create another relation so based on your notes the way we write the relation name is the base relationship first which is employee the original relationship which is employee underscore and then the name of the multivalued attribute so we have here qualification as the multivalued attribute so we put employee underscore qualification that would be the name of the new relation all right then in this new relation we will put as a foreign key the primary key of the original okay so the primary key of the original entity where qualification is from is employee ID therefore we need to put it also in here M ID and make it a primary key and since this amp ID here is from employee relation then it is also a foreign key alright also a foreign key next what about the qualification attribute that's the time we will not put it in here as as a feel okay so we will not put here so we will not put here qualification okay and then as a rule you also have to make it a primary key so therefore in this employee underscore qualification it is composed of two primary keys so it is a composite primary key no employee ID where qualification is based from or is originally from based on this er diagram here and then qualification attribute here you make it also a primary key okay very good any questions all right so we're done with the qualification multivalued attribute now let's go back to the original relation employee let's see and take a look at the relationships employee has two relationships it has a relationship with car in a relationship with invoice in this first relationship here it's one-to-many and employee is on the one side so what does this mean do we put a foreign key and employee if we consider this relationship yes or no no why because it's on the one side again in this relationship it's on the one side so we do not put a foreign key here in employee now let's consider this second relation an employee has an invoice now in this relation this is one what one too many now do you need to add a foreign key one too many yes or no no very good why because employee is under one side no need to add a foreign key here in employee so that's it employee will just be this okay all right now let's proceed to the last entity here now the last entity is invoice okay we're down to the last entity invoice now invoice here has two attributes and both attributes are simple attributes so we will just transform them put it right away invoice ID and you have date okay invoice ID here is a primary key okay so just copy this one this is a foreign key no no no sorry so this is the primary key invoice ID there all right invoice ID all right and then we have date now let's take a look at the relationships okay now invoice is involved in two relationships one is with employee and another one is with customer now if we take a look at this first relationship here between invoice and customer it's a one-to-many relationship and invoice is on the many side as you can see in here the crows foot yes invoice is on the many side so this means that invoice will have a foreign key and the foreign key here now is the primary key of customer of the one side what is the primary key of customer its customer ID so you put it there customer ID and this one would be a foreign key here you have here a foreign key alright that is for the relationship between customer and invoice now let's take a look at this relationship between invoice and employee again one-to-many invoice is on the many side thus but does this mean invoice will have another invoice will have another foreign key attribute and that would be the primary key of the one side which is an ID transfer this one here yeah there now let's take a look at the relational schema okay so for car here car is the entity this is the entity this is the primary key car underscore ID serial number a simple attribute and then since model is a composite attribute therefore we do not put model instead we put the component parts which is model number here color there and you have here and now since car is on the many side of to relationships notice it's one-to-many it's on the many side in this relationship therefore car here will have a foreign key and the foreign key is customer ID the primary key of the one side in this relationship now for this relationship between employee and car it's on the many side as well so we put another foreign key and another foreign key in car and this time it would be amp ID the primary key of the one side okay so it's my Dina now for customer here customer it is primary key is customer ID or the identifier here is customer ID we have your name phone number address country and then city and then we do not put foreign keys because in this relationship it's on the one side no no to put a foreign key also in this relationship it's on the one side so no foreign keys added all right now for employee here for employee you have M PI D employee ID is the primary key name address but qualification is a multivalued attribute so for multivalued attributes we will have to create or make a new relation so the new relation is employee underscore qualification based on our notes we will name it the original relation which is employee underscore and then the multivalued attribute which is qualification in the original so employee underscore qualification would be the name of the new relation now what would be its attributes or its fields its fields would include the primary key of the original relation which is employee and the primary key is M ID so you have here set as a primary key also since mid-40s in Bellaire so employee ID is reference to an ID of employee now qualification is the attribute the multivalued attribute so you put it in their qualification and you also make it part of the primary key since an employee has many qualifications so to ensure that all roles are unique then you need to include qualification as a primary key okay that's the rule alright so for employee here employee is involved in two relations one two in the cell relation between car and in this relation between invoice now notice that it is one to many so it's on the one side therefore we did not put a foreign key in employee and in this relationship it's also on the one side so no foreign keys added just that okay let's now go to invoice entity invoice here so for invoice it has two attributes and the attributes are invoice ID the primary key and then you have date okay so simple attributes now it is involved in two relationships in a one-to-many one-to-many relationship and in these two relationships notice that it's on the many side in the many side so since this is on the many side in this binary relationships then we put a foreign key so if we consider this relationship between customer you have customer ID as the foreign key so that we could link invoice with a certain customer and then employee ID here is a foreign key because it's on the many side of this relationship employee has an invoice okay so that's it for this first example of transforming er diagrams to relational schemas thank you