mongodb or any other nosql solution as the main database is it a design mistake long story short yep as the rule of T an nosql database is a bad idea for your project used pogress and peace will be with you I won't feed you all that  like it depends on the case and blah blah blah in reality SQL is good for 99% of projects versus one that may require no SQL when you face that 1% trust me you'll know it and only then you may have a reason to use nosql if you know what the cap term is and understand the Trad offs between different databases you've already experienced all the pain needed to avoid nosql as your primary database in almost all real world business cases your models are relational requ joints schema migrations and probably transactions with nosql you have the following options to solve this get a good psychologist or get a good psychologist seriously I don't know why you try to use nosql as if it were SQL I've seen this scenario many times people battle with engines that weren't designed for their business cases but wait why not just use SQL there are two main reasons for this mistake the first the product team showed a business model without relationships or you sold consistency wasn't required what can I say you've gained experience and maturity now don't trust products because changes will happen you can bet relationships will appear and you'll need consistency the second the hype that surrounded nosql especially mongodb around 2015 all those Mar stacks and other marketing it was a real aular Rebellion new Young developers at the beginning of their careers were told you don't need to learn SQL the hard way with Blood and Tears there is Happy pass with mongodb no scary schemas migrations transactions or joints just fun and unicorns and you know what in the end they had to add schemas migrations transactions and Joints at hoc to the engine that wasn't designed for that because let's repeat relationships are the nature of almost all real world business cases as Emmanuel Kant said use your brain and SQL