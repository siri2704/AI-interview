in this video we are going to discuss about converting er diagram to tables or this can also be called as reduction of er diagram to table so some er diagram will be given so here our target is we have to convert the tr diagram to tables so for this totally we have to follow 5 rules rule 1 is for converting strong entity set into tables so how to convert a strong entity set into table root is converting weak entity set into table rule 3 is converting a relationship into tables rule 4 is for binary relationship with cardinality ratio if you if your binary relationship has cardinality ratio like 1 2 1 one too many many to one many too many matrix then how we are going to translate that relationship into table and the last one is for binary relationship with coordinate ratio and participation constraints so by following these five rules we can convert any year diagram into tables let us see the first rule for converting strong entity set into the table we know what is strong entity set if an entity uses primary key if an entity uses key field then it is called as strong entity set let us see this example here we have student entity and these are the attributes of the student entity rule number name address address has a door number street city date of birth yes and mobile let us see how to convert this strong entity set the strong entity into table let us see the first rule entity becomes the table name here what is the name of the entity student so student will becomes the table name student will become the relationship name let us see the second property single valid single valued attributes are simple attributes becomes column names of the table we know what is single valued attribute if an attribute has only one value then it is called as single valued attribute other number a person can have only one other number par number a person can have only one part number so they are nothing but single value attributes are simple attributes so simple attribute means that attribute cannot be divided further so that is atomic if you take if you take this rule number we can't divide rule number into further okay if we take this name we can't divide that name into further okay if you take date of birth we can't divide that that data but into further okay so they are nothing but simple attributes so they will simply becomes the columns uh so if we take this diagram a rule number means this is some key field name is a simple attribute address is composite attribute date of birth is simple attribute yes is derived attribute mobile number is multivalued attribute so what are the simple attributes here here these will become the column names so name is the simple attribute so name will become the column name and next database the simple attribute so data but will become the column name okay so these are the simple attributes now let us see the next one ignore derived attributes we know what is derived attribute delivery attributes are not stored in the table derived attributes are derived from other attributes here this dashed ellipse derived attributes are always represented with the dashed ellipse yes is derived from the date of birth there is no need to consider there is no need to consider this derived attribute so no need to store is in the table okay so ignore derived attributes and the next one is simple attributes of the composite attributes are to be considered but ignore composite attribute what is composite attribute composite attribute is made up of several simple attributes if you want we can make this name as the composite attribute also but this name will become the composite attribute if it has attributes like first name last name middle name but here we don't have such scenario here if you consider address address is composite attribute why because address is made up of three simple attributes here there is no need to store this address in the table but we have to store simple attributes of this composite attribute in the table so what are the simple attributes of the address door number next street next city so let us store them in the table so we there is no need to store this address in the table why because this address is composite attribute now let us see the next condition multi-valued attributes are represented by separate table so if we have multi-valued attribute then we have to make use of another table we have to create another table here what is the multi-value attribute mobile number is the multi-valid attribute why because multi-valued attribute means if you take mobile number a person can have multiple values so multiple values are stored in the table but here we have to store in a column we have to store only one value so that's why we need to create one more table net name of the table is student underscore mobile student underscore mobile and the fields are the columns of this one are the primary key as well as mobile number in this diagram roll number is the primary key so this roll number now will become the foreign key this roll number will become foreign underscore mobile table and we have to store mobile here so whenever there is a multi-valued attribute now we need to create another table with the fields we have to take the primary key that primary key will become the foreign key of this table as well as that mobile number okay so this is about multi-valued attribute and the last one is key attribute key attribute becomes primary key of the table key attribute will become primary key of the table so here what is the key attribute roll number is the key attribute now this rule number will become the primary key of the table so in this way we can convert strong entity set into the table now let us see the rule 2 for converting weak entity set into table we know what is weak entity set weak entity set doesn't have any primary key but it uses partial key in this example we have employee entity employee has some key thing so employee will becomes the strong entity here dependent is enclosed within two rectangles so dependent will become the weak entity here the relationship between employee and dependent is policy so employee has some policy so dependent depends upon the policy so dependent means employee wife or employee children's okay here the attributes of strong entity are employee id which is some primary key employee name salary here this is policy this policy is relationship in order to show the association between this relation and depend weak entity we always use two lines or we can use in place of two lines we can use a solid line we can use a solid line and the arrow will be towards the relation okay here this is weak entity so that's why weak entity relationship is always represented by double uh diamond symbol or double rhombus okay here uh the participation is hundred percent why because dependent always depends upon the employee so here the participation is total participation total participation is hundred percent so how we are going to convert this weak entity set into the table so already we have seen about strong entity set so we need one table that is employee table employee table the first field is employee id that is key field so in table also employee id will become the primary key next these are some simple attributes so store employee name and sal so this is the first table and the second table is combination of these two we have to combine weak entity set with the relationship so the second table name is dependent underscore what is the name of the relation policy policy now dependent underscore policy contains the attributes of the dependent table here this is partial key partial key is always represented by some dashed line okay so department name this is partial key next we have one more attribute called relationship as well as it includes employee id it contains employee id but in this table employee id will become foreign key foreign key of department underscore policy table so in this way we can convert weak entity set into table until now we have seen two rules rule one is converting strong entity set into table rule 2 is converting weak entity set into table now let us see rule 3 rule 3 is converting a relationship set into the table here we have 2 entities two entities two strong entities they are employee and department the attributes of employee are employee id employee name sad here employee id is the primary key of this table here we have primary key so employee entity will becomes the strong entity next we have department table department entity the attributes of department entity are department id and department name department id is the primary key so department will become the strong entity so here we have two strong entities they are employee and department why because both these entities have some primary key next year the relationship is working so working is relationship between employee and department employee works in department since is attribute of this working works in relationship this attribute is called as descriptive attribute descriptive attribute okay now in order to convert this one into table we require three tables in order to convert this er diagram into table we require three tables the first two table is employee the second table is department the third table is works in so the first table is employee and the fields of employee are employee id which is primary key employee name next to salary and the second table is department table and the columns of department table are department id which is primary key department name and the next table is works in works in table works in table has here in employee table the primary key is employee id in department table department primary keys department id now those two keys will become the foreign key of the works in table okay so here the column names are employee id which is foreign key department id which is foreign key and works in has an attribute called synth scenes so these are the columns of the works in table so in this way we can convert a relationship set into the table now let us see rule 4 for binary relationship with cardinality ratio here cardinality means here we have several types of mappings are there many too many one too many many to one many too many one to one already we have seen all those mappings in the er diagram video now let us see about these mappings if the binary relationship has cardinality then how we are going to convert the tr diagram into the table let us see that first one is for binary relationship with cardinality ratio many too many represented by m is to n many too many so here uh we have two entity sets a and b attributes of a are a1 and a2 where a1 is the primary key the attributes of b are b1 and b2 where b1 is the primary key for many too many there is no arrow is needed in order to translate this one into tables here we require three tables name of the first two table is a name of the second table is b and name of the table is r so for space constraints here i am try i am writing only schema so the attributes of ar a1 and a2 where a1 is the primary key and a2 is the foreign key the attributes of here this is the table only so here we have a table a table has attributes a1 a2 a table has columns we can call these as attributes or columns or fields likewise b table has columns b1 and b2 where b1 is the primary key next b2 and this is the table the attributes of the third table are a1 and a2 why because it shows the association between these two entities so in in entity a what is the primary key a1 in entity b what is the primary key b1 now a1 and b1 will become the foreign key a1 and b1 key is nothing but foreign key of this relation so if we have many too many relationship then we require three tables now let us see the second one for binary relationship with cardinality ratio uh one too many so one too many means one is to n so same here also same diagram like the previous one but one means uh arrow will be towards the uh that one here a is one where he has b means many so one too many means one entity of this entity set a is mapped to many entities of this entity set b so one entity of entity set a is mapped to many entities of entity set b so that's why aro will be towards uh one means arrow will be two votes that entity only that entity set only okay so how many tables are required here one too many one too many means we require two tables the first table is a so many means we have to combine these two many means we have to combine the second entity as well as relationship so the second one is the second table is br so what are the attributes what are the columns of a table the columns of a table are a1 and a2 where a1 is the primary key so one too many so many means this b so we have to combine b with r so the attributes of b are are so b1 b1 is the primary key b2 and here we are combining these two relationship with the b table so that's why we have to consider we have to include this a1 also now a1 will become the foreign key of this table a1 will become foreign key of this table so two tables are required now let us see the third scenario the third scenario is many two one for binary relationship with cardinality ratio mini two one represented by n is to one okay let us observe this diagram same diagram many to one many to one so many entities of entity set a are mapped to one entity of entity set b so one means arrow will be two votes the tentative only the arrow will be two words that entity set only so how many tables are required here many to one so here we have many in the left hand side we have many so we have to combine a and r so ar is the one table b is the second table the attributes of ar are a1 a1 is the primary key a2 and the next attribute is here we are comparing a with r so we have to include b1 also b1 will become the foreign key of this table various b means b columns only so b1 b2 so here also two tables are required now let us see about for binary relationship with cardinality ratio one two one represented by one is to one so same diagram so one two one means arrow will be two votes entity set a and b only so one two one means one entity of entity set a is mapped to one entity of entity set b here we can use two approaches we can use two ways the first way is we can combine a with r so this is the first table second table is b the second way is the second way is we can combine b with r and a is as it is we can combine b with r so we can follow one of these two ways it is our choice so a r means here we are combining a with r a with r so what are the keys a1 a2 we are combining a with r so we have to include b1 also b1 will become foreign key and what are the columns of b same there is no difference b1 b2 b1 is the primary key and what is second approach way to a a is as it is so the columns are a1 a2 whereas what is b br so br means we have to combine these two we have to combine these two so the attributes are b1 this is primary key b2 b2 we are combining these two so we have to include a1 also a1 will become the primary key a1 will become the foreign key so in this way we can translate a binary relationship with cardinality ratio into the tables now let us see the last rule for binary relationship with cardinality ratio and participation constraints so here we have cardinality ratio as well as participation constraint also okay here we have two cases are there let us see case one binary relationship with cardinality ratio and total participation from only one side second case is binary relationship with cardinality ratio but total participation from both the sides let us see the first one same example like the previous one only here we have two entity sets a b a attributes are a1 a2 a1 is the primary key b attributes are b1 b2 b1 is the primary key here the cardinality ratio is arrow is towards a so the cardinality ratio is this is 1 to n one to many relationship and here we have this is what total participation total participation is available from only one side okay so already we have seen about what is one too many one too many means uh one entity of a is mapped to many entities of this b so we have to take two tables the first two table is a and the attributes of a are a1 and a2 the column names of a are a1 and a2 one to many so many means we have to combine these two we have to combine b with r and the attributes of br b1 is the primary key b1 is the column b2 is the second column a1 is the foreign key a1 is the foreign key of this table now let us see if participation is from both the sides here we are following one to one relationship one to one relationship why because the arrow is towards a as well as towards b one to one relationship but here the total participation is from both the sides why because here we have two lines from this side as well as from the side already we have seen about one to one mapping so simple approach so just here but here the problem is total participation is available in both the sites if total participation is available from both the sites then we have to combine everything so the new table name is arb and the columns are a1 a2 b1 b2 a1 and b1 will become the foreign key of this table okay why because total participation is available from the both the sides okay uh so this is about how we can convert er diagram into tables totally we have to follow 5 rules