so what we do is we combine this relationship table with this department entity table because because here you can see what is the minimum what is the maximum cardinality of Department that is one what is the maximum cardinality of Department that is one right and because it is having the maximum cardinality as one or you can say it is having the key constraint it is having the key constraint this is the reason why we can combine both of them and when we are going to combine them the main reason of combining them is because uh we want to have as minimum duplicate values as possible that means we want to reduce the Redundant values or you can say redundant records from the table so even if we combine both of them still we are not going to have a lot of redundant values because of this key constant okay because of this because uh the maximum particip maximum cardinality of Department is one okay and the maximum cardinality of employee is M so that is many so the relation is called as one to many here in this case okay so now let us take a few example here in this example I've uh created some relations and the top I wanted to ask you if you are going to convert these relations into uh this relationship this complete AR diagram into a relationship then how many tables you are going to require how many tables you are going to require so so so take the first example in this example if you're going to convert this as a table uh or relation then you're going to require the first table for this uh you're going to require one table for this or you can say one relation you're going to require one relation for this or you can say one table and for this relationship you are going to require one table one table but here you can see but here you can see it is having the key constraint it is having the key constraint all right because the maximum cardinality of B is 1 that is why you can combine this table for this relation and the table for B so you can combine these two tables so in minimum you are going to require two tables only two tables only one table is for this and second table is for this we are going to require two tables only okay so the attributes in these two tables will be like this in the table a the attributes will be A1 and A2 where A1 is a primary key or you can say uh A1 is a key attribute in the table B we are going to have the attribute as B1 and B2 and we are going to have the attribute as A1 and this A1 will be acting as a foreign key which is pointing to this A1 okay so we are going to have these two tables now if you check the next relation it is a many to one relationship and here you can see there's a key constant here there's a key constant here it is the same thing we are drawing the above table uh above one like this only I'm not showing any attributes so here can clearly see that we are going to require only two tables to convert this uh ER diagram into a relationship now in the next table you can see it is many to many uh many to many because here here uh it is many cardinality here it is a many or you can say cardinality is more than one maximum cardinality is more than one in both the sides in both the sides we are not having uh you know any key constants for this purposes because of a we have to create a table for a table for this entity a we have to create a table for this entity B and we have to create a table for this relation R so there there are at least three tables required because there are no any no key constraint there are no key constant but here in the next in the next diagram you can see that there's a key constant in both the sides that means the maximum cardinality is one in both the sides or you can say it is a one to one relationship it is a one to one relationship now in this one to one relationship we are going to require two tables we are going to require two tables number one the first table either you can combine A and R so first table can be combined made use you can make the first table by combining A and R and second table can be b or or you can do something like this the first table is only a and second table will be combining B and R so we are going to require only two tables two tables to convert the following relation uh relational uh ear diagram to the relation okay now let us take more examples uh after this let us take these example let us see how can you convert how many tables are minimum number of tables are required to convert these ER diagrams so take the first diagram here you can see that it is a one to many relationship because we are having a key constraint here and we have already done this kind of example so uh we already know that for this example we require two tables only and what are those tables in the first table we are going to combine uh we we are going to have a we are going to have a and because there's a key constant at this side so you can make it a A1 A2 we are going to have this one and because there's a key constant at this side uh so we are going to have okay so I did a small mistake here let me correct it out I did a small mistake sorry guys uh fine so here it should not be like this it should be like this because both the examples will be same sorry it should not be like this H right now it is representing a one to many relationship okay one to many because here you can see the maximum cardinality for B is one and the maximum cardinality of a is M so you generally write it like this so it is one to many uh one to many uh ear diagram or you can say one to many relationship here you can see we are going to require two tables and the tables will be like this the first table generally generally what happens is generally what happens is we make three tables one table is for a one table is for B but one table is for relation R but because it is a one toan relationship therefore for this one toan relationship we require only two tables all these information can be stored only with two tables the tables can be like this the first table will be a which will containing A1 and A2 where A1 is a key attribute and the second table will be for B and R for this combining B and R so it will be having B1 B2 and A1 where A1 is a foreign key and this B1 is a uh you know uh Prime attribute you can say it is a key attribute here now if you check the second diagram in the second diagram you can see it is a many to one relationship there's a difference between above one and this one so just the difference will will be there in while combining the relation and the entity so you can make a r as first table and it is having an attribute A1 A2 and B1 where B1 is acting as a foreign key and A1 is acting as a key attribute and the same way we are going to have the second table which is containing B1 and B2 and B1 is a key attribute right so this is uh this is you can how you can uh convert this ER diagram into relation if you check out the third diagram you can see we are having uh two A1 A and B these are two entities and this is a many to many relationship right it is a many to many relationship and cardinality maximum cardinality of a is many and maximum cardinality of B is also many so you can see for this a we can create a table that is A1 and A2 and for this B we can create a table that is B1 and B2 in a in the table a A1 is the uh you know it is the key attribute and in the B B1 is the key attribute okay and then for this relation because it's a many to many relationship we have to create a table for this relation and we'll be having A1 and B1 A1 and B1 as has the key attributes that is these are the foreign key to their respective relations right so if we have a many to many relation like this then we can use this okay now check out the next um diagram here they are saying this is having one to one uh one to one relationship in both the directions so if you have a one to one relationship then in this case we are only going to require two tables we don't require more than two tables and for these two tables either you can combine this a with the relation R so we can make a table a r which is having the attribute A1 A2 and B1 and the second will be the table B which is having B1 and B2 this is one way of creating the table or the second way of creating the table is instead of combining A and R you can combine the next table that is B and R so you can also make a table like this a which is having A1 and A2 and you can make the second table as uh BR which is having B1 B2 and A1 so where A1 is a foreign key so here B1 was the foreign key and B1 is there is a key attribute okay so this is how you can combine this one now if if see you generally get lot of questions related to this in uh in your examination so I'm going to take some previous year questions also and I'm I'm going to try to convert them okay so let us see if you have a relationship set relationship set with a key constraint and the participation constant the only thing which is differentiating Here Is the participation constraint that means here you can see in the diagram the department is having total participation department is having total participation when do we have a total participation when the minimum cardinality when the minimum cardinality for relation is greater than zero or it is one so we have already seen this in the previous video If you face any problem by with the terminologies in this video you can go through the previous videos and they will really help you out okay so you can see here each department department is required to have exactly one employee as a manager right so if this is the requirement so you can see if there is a key constraint merge the relationship set table with an entity set table if the entity set table is totally participating with the relationship set table then foreign key with not null constant we are going to use the foreign key with not null constant if you check this out let us see what we have done if you have a total participation here if you have a total participation here then you can see for employee for employee we can create a table for employee like this only but for the total participating side uh we are going to create this uh Department ID we are going to create the department name and because it is a total participating size site therefore we have to include a foreign key from this okay see guys there's a difference between if I am writing a relationship like this it is manages and it is like this there's a difference between this and if I show a relationship like this there's a difference between this okay and what is the difference is you can see from this side this entity is having the maximum cardinality as M and this entity is having the maximum cardinality as one right they're not discussing about the minimum cardinality or you can say participation participation is the minimum cardinality okay uh here not discussing about the minimum cardinality but here when I'm saying uh it is total participation that means the minimum cardinality or participation is one okay that is why this is like this only okay [Music]