hello and welcome to this video about how we can translate an ER diagram into the relational data model that we later on can use to implement in MySQL for instance we have this y ER diagram we got some employees we have departments we have projects and then we have some relations both one-to-many and many-to-many relations we have composite attributes like the address and the name we also have multivalued attributes and also derived attributes okay so how do we convert this into the relational data model first of all there is a conversion guide that contains steps to how you can translate each type from the ER diagram into the relational data model and this is basically what what we would use to do this so first of all I'm gonna take each of these entities and make a table first I'm gonna make some room for this diagram here first we take the employee we need to create a table for that go and select a table this is draw IO that I'm gonna use here because it's free and well suited to make er diagrams and also relational data models employee we call that it has a primary key of employee in 19 we can see we have a lot of attributes we have gender birth date and then we also have these two composite attributes and how do we convert them to the relational data model well we take only the simple part we cannot have any composite or multivalued attributes when we convert it so we will take the simple parts the street the postal code and the city so we will take Street and the city all right and if I can align this connection then we have the name which is also composite attribute and we follow the same procedure we will take this simple atomic part first name [Music] initials and last name all right okay so we have gender we have birthday we have streets postal code city first name Nationals last name and the primary key alright this is one of the first table let's get a new one we need one for Department and Department has a department ID we have a name and then we got this multivalued attribute called locations and how should we translate that well we need to create a new table we can just use this one here copy [Music] we will call this location we will make a primary key for it location ID and then the location and this we will later on connect to this department and in order to connect this we will make in here we will create a location and this will be a foreign key because it will relate to this primary key over here right so we have dealt with these then we need the project that's going copy this one and the project has project has a project ID also have a name and that is basically it alright so these are our four initial tables then we have some we have a couple of relations between them we have three one of many relations we have one many too many relation and if we start by if we start with the many many relation we can see here that an employee can work on multiple projects and a project can have multiple employees work on them so that's a many-to-many relation and we need to create a new table for this many-to-many relation in able to in order to store the data for this for this relationship so we will take a new table here and we will call it works on us this is what it is called and it will have combined primary key because we need both the primary key from employee and from the project we will take an e ID and any attributes connected to the relation will go on to the table as well so we have the hours how many hours an employee works on a project so we want our scene here alright so now we have this relation between employee and project this would be a line like this so we have this in between employee and project alright so now we get one-to-many relationship here and here and also between Department and project if we take one between Department and project let's see here Department controls one or more projects and a project can be controlled by only one department so we need to take the primary key from the one side from the department side I mean the department ID and we need to store that on the many side on the project so on the project we will add a new value called Department ID this is gonna be a foreign key this way we are able to see on each project what department is controlling it alright so now we have the two remaining one-to-many relationship here we have the works for and the managers son employee works for a department only one department and a department can have one or more employees working for them and we do the same thing here we take the primary key from the one side from Department and put it on the many side on play so we take department-id and put it on employee this won't become a foreign key that references department ID and the other way around we have an employee that can manage one or more departments and a department can only have one employee as a manager so we're going to take the employee ID and put it on the department because it is many side okay so we will take the employee ID put that on here employee and put it on as a foreign key all right so now we're able to see on the department which employee is managing it there is actually one thing we need to do still we got this start date let us attach to the managers and we need to put that on this this department here so we will make a new attribute from the start date and this is just a normal attribute I'm gonna just put the pin all right if we should put any if we should put some links to this then we can see here that the employee ID comes from employee and the project ID comes from project and we can see here that that purple ID references Department let's see if we can organize this a little bit better don't do it protein shake and we have our location that should be that is pointing here the foreign key location ID is pointing to the location there and we have our our employee and finally we have the Department ID that is pointing towards Department all right so now we have converted this ER diagram into a relational data model thank you for watching bye bye