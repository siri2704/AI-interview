[Music] hello dudes welcome to tor.com in this lecture we will brush up our concept of er model and uh we will try to determine how many tables are required for a given year diagram to store the data without any data loss so we will take a example and we will try to solve fine so here is the question will be solving and I have tried to incorporate all the possibilities so let's try to understand it well so the question is how many tables do we need to store the following model without any data loss okay so this is the model right I haven't written any attribute this is uh entity and this will be having a attribute and including key attribute this relationship has one attribute which I have shown you have to consider that just to keep the diagram neat I haven't included the attribute so obviously entities will have attribute okay fine so now let's start with counting number of tables here okay so first of all this is strong entity let's count strong entity this is strong entity instructor is strong entity and course is strong en entity well so we will have one for each one table for each strong entity okay so one table two and then three okay so we have three table for to store our strong entities now let's go to this weak entity okay so we know from this uh previous conceptual lecture that weak entity also requires one table to store okay so this weak entity will require one table okay now it comes to the little tricky part of this question okay so consider this relationship this relationship lectures here instructor lectures gives lecture on courses I mean offered courses okay this is courses offering entity courses and this is instructors so instructor G lecture on the courses offered okay so here whether we need to take a separate table for this or not we have to find out okay so if it is given that one instructor can give multiple lectures okay but every lecture will have only one instructor okay so the relationship if the given relationship is 1 is to n okay 1 is to n in that case we need not to take a separate table okay so for this as I have mentioned is it is 1 is to n we need not to take a separate table okay why we need not to take separate table because this n i mean this relationship maybe uh for example this relationship this relationship may have some attribute or uh some uh like lecture ID maybe lecture ID okay so this lecture ID will shift to the IDE as I explained in the previous uh lecture if you have confusion please revise that lecture so this the attribute of this lecture maybe lecture ID will uh will move to the N side okay so we can store this lecture without any data loss this information without any data law without taking a separate table for this lecture relationship now now let's go to this enroll enroll relationship I haven't mentioned here the kind of Association whether it is 1 is to n whether it is n is to n or 1 is to one okay so it's very simple again if it is 1 is to 1 we need not to if it is 1 is to 1 we need not to take a separate table okay but if it is 1 is to n tell me again we need not to take a separate table th this grade attribute will move to the N side okay this grade attribute will move to the N side okay so if students are taking multiple courses okay so this grade will move to the course site this grade will move to the course site uh I'll just show you small example if you consider we are storing this is our course offering course offering table okay so what we can do is to store this this enroll relationship what we can do in course offering we can take a attribute uh uh another column extra column which will uh store enrollment ID enroll M ID okay and if we want to this grade this grade separate grade what we can do is we can yes what we can do is for to separate this grade we can take another column for this grade grade okay so these two things enrollment ID and grade we can take in the courses table itself this course offering course offering table itself okay so we need not to take a another table to store this enroll relationship in which case if we have 1 is to n or n is to one but if we have n is to n relationship means multiple student can enroll for same course and S uh same course and uh one course uh no no no multiple students can enroll for uh same course and and and one student can take multiple course okay so it's uh very similar to our course uh which we do in our engineering or in our classes like we can take multiple courses okay and in a course in a course there are multiple students okay so basically this in general this relationship will be n is to n okay so in this case we need to have a separate table for this also okay so now how many table do we have we have this one will be fourth table why how we will store if you want a example we will have something like this table okay this will be enroll table enroll okay this will be enroll table and here we will have just the just to maintain the relationship one will be grade obviously g r a d great okay this is the attribute of relationship okay and the two things will be there one will be one will be this this key okay one will be key for this and here one will be key for this okay so well so this will be uh this will be like student for example if your student ID is one attribute so there will be S ID key from student side and this will be key from course side course ID okay so similarly we can store the relationship so this table will be for the relationship separately fine now if we consider this table this is basically we entity and this is its identifying relationship with course okay so in this case we need not to take for this identifying relationship it will be always once uh it will be if you remember that my last example that was for dependent and employee okay so I'll just write once again employee and dependent fine so we for one employee for one employe we may have multiple dependent okay for one employee me we may have multiple dependent similarly identifying relationship need to have some kind of 1 is to n relationship only okay so it cannot be n is to n for example if you say in this example only uh employee E1 have two dependent D1 and D2 right okay but but this D1 cannot be the dependent of two employee okay it's something like one father have multiple children but one children cannot have multiple father okay so ah nice example well so this is uh this is uh a example where we can understand that the identifying relationship will be always 1 is to n so we need not to store this into a separate table okay so now everything is clear now you tell me how many uh tables are required to store this entire relationship without any data loss okay so as it is clear we have uh four plus one this was like we need to we need five tables okay this is uh one for strong entity each so three then this is for enroll relationship we need need need uh one table so this is four and this is five okay so five table we need to store this entire relationship without any data loss so this was all about the example I hope you understand it uh if you have any doubt please go and ask the question in doubt section we will be answering as soon as possible I hope you enjoyed thanks for watching