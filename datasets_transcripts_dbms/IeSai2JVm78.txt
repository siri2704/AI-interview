Now the Third Normal Form. According to the EF Codd. What are the rules of Third normal form is? The First is, the table must be in second normal form. & there should be no
transitive dependency in the table. Means If I have any table, any relationship is given That relation must be in the Second normal form. If they are in the second normal form. Only after that you have to check  for the third normal form. Plus there should be no transitive dependency in the table. And guys, concentrate more on this, No Means tranaitive dependency Should not be there. Now what is transitive dependency? Transitive dependency is like If there are any non-prime
attributes in your table. Non-prime attribute, We have already discussed quite a few times. Those who are not participating in the making of the candidate key. So any non-prime attribute, if anyone is determining it. Either it is the prime attribute or the candidate key. means, a non-prime attribute cannot be determined bya non-prime attribute. We examine it more. Like there is a table, student table. In that we have the roll number, State & City. Now here, roll number is my candidate key Or we can also say,
primary key i.e. roll number. And apart from the roll number, we have been given here candidate key is   a Roll number. And the functional dependency is Function dependency has given, Roll number. Determines. State, Roll Number Data Mines. State and State. Determines City. If I know the roll number then I can determine the state of any student and if I know the state then I can determine the city of any student. Like see, here mohali mohali same values So means I am confused whether it belong from the same state or from two different states. So I went to the state there, what's in both the values, punjab. So means i'll find out that there is only These two values represent to One State. But if I have a confusion again now whether this Punjab, Is there only one student
whose data is written twice or are there two different students? So I went back to roll number 1 and 3. So I found out that there are two different students Who are belongs from Mohali in Punjab. But here what is the problem guys see, that the roll number which is a candidate key Determining. the state which is a non-prime attribute. Yes, maybe, it should be, if your candidate key is. Determining a non-prime. This is the need that every single non-prime attribute should be only determined by a candidate key,  but if you look at the second FD, then City Which is a non-prime attribute. It's  determined by again  a non prime attribute which is state Is it clear, guys? because here roll number is my candidate key. So means the prime attribute is my roll number. Non prime attribute are State & City. So here if my roll number is the  prime attribute means roll number is the candidate key & it is determining a non-prime attribute, this is valid. This is totally valid. But the Problem is Over there The state which is a non-prime attribute & that determining some  non-prime attribute ahead. & here, what's happening, because of that, that roll number too determining the city,  because of the transitive Property. That roll number determines State & State determines City. So you can say, roll number determining City. Now the roll numbers determining the city. But it's not gIven in the FD. It is derived by using the transitive dependency So because of the transitive, the roll number is determining the city. But guys, roll number determinating the city through state. And What is that state, again a non-prime attribute. So this is called the transitive dependency No let's see with the normal example, likes if i have a relation A B, C, D it has four attributes And FD is given like AB goes to C  and C goes to D. AB goes to C & C goes to D. Now what will be the candidate key over there As we know if you take closure of AB. Then It Will Determine C. And through C, I can determine D So AB is candidate key over there. So what are the prime attribute over there. Prime attributes are A and B Non-prime attribute are C and D. The non-prime attribute are C and D. Now check, AB is determining some C. Means AB is a candidate key here. & it is determining some non-prime attribute. Yes it's is posible. Because a non-prime attribute Is being determined through a candidate key. so this must be there. But C,  C to D Look over there, C to D D which is a non-prime attribute is being determined by
some non-prime attribute. This is a problem over there. And because of that AB is also determining D. If you check the closure of the AB. Then AB will come in it. C is coming from AB and D is coming from C, According to the Transitive Property which we have already discused many times. So closure of AB has D, Means AB is also determining D, but through whom? through C and what is C, Non-prime attributes. So that's the biggest flaw here that non-prime attribute is being determined by a non-prime attribute. This should not be there. Yes, if C was the prime attribute here. Then there is no problem. If C was the prime attribute here So there's no problem here. And if D was the prime attribute here Then also there is no problem. Because a prime attribute is being determimed by a non-prime attribute or another attribute is determining. That doesn't matter because itself is a prime attribute. That , itself a It could determine by itself, so means I have no problem for that. But if a non- prime attribute is being determined by a non-prime. this is the only case All you have to remember this case that a non-prime attribute is being determined by a non-prime. If a non-prime attribute is from the prime, No problem. If a prime attribute is being determined by a non-prime, No problem. Okay, so note down this question. Let's see, one more question. Like there is a relation ABCD And here functional dependencies are given AB goes to. CD, AB goes to CD And D goes to A. Its a very good example, you should note it once Function Dependencies are AB goes to CD. D goes to A. Now, Now note down. First of all candidate key, This table is in Second Normal Form Now you have to check Third Normal Form. What is the candidate key in this table? How do we determine the candidate key Same, First check which attributes are coming on the right hand side? CD and A is coming at the right hand side. No if we check the closure of AB. CD and A is coming on the right hand side, means B must be present in the candidate key Because ACD is on the right hand side But B is also coming on the right hand side. If B is on the left side Only then it can be determine
on the right hand side. so B will be defintely used here to generate the candidate key, but B alone is not the candidate key,  because if you take the closure of B, that will B only. so I checked the combined closure of A and B. With AB, you can determine AB, which is a reflexive property. and ahead of it You can also determine C and D, clearly mention there. Now determine from D to A It has already came, no need to rewrite again. Now check that whether AB is only candidate key in the table. If you are doing these questions  then you have to be very calm because Sometimes what is the biggest mistake in this that you miss the candidate key. Here AB came your candidate key. And you have started solving that question further. But you pay attention That if the candidate key AB is coming, is it only AB is coming  or someone else also coming? For that, we have already
discuss that methods,  if you found out that, yes here AB is my candidate key. You got to know a candidate key, Ab Now You check  that A or B. It is on the right hand side
of any functional dependency. A is present on someone's right hand side. Yes A is present on the right-hand side of D. So that means you can replace A with D You can replace A with D. So means B will come along with it Let's take the Closure of DB DB will defintely come from DB, because it is a reflexive. A is coming D and CD is coming from AB, so D has already came. So means, that is also a candidate key Is it clear? That is why if we see your candidate key here. So we have two candidate key. One is AB. And other one is DB. Now. What are the prime attributes? Primes attributes are Which helps in making the candidate key. So, Who are helping. A is helping, B is helping, and D is helping. So what are the non-prime attributes? Non prime attribute is C only. Now check, whether there is transitive dependency or not? First Check here AB goes to CD. AB goes to CD. Now for checking the transitive dependency. There is a very simple solution. very simple solution What do you have to do For each FD. You need to check. As we check in the second form, that's how we're going to check here. For each FD. For each FD. LHS must be a candidate key or super key. Or RHS is a Prime attribute. RHS is a Prime Attribute. LHS must be a candidate key or super key. Or right hand side is a prime attribute. Pay attention here. There is OR. In a second normal form, there is AND in the condition. LHS should be a proper
subset of candidate key. & right hand side is a non-prime attribute. Bue here is LHS must be a candidate key or super key. Or  right hand side is a prime attribute. So let's check here. LHS, check the LHS for each FD. picked up the first FD. AB  Weather left hand side is a candidate key? Yes. Left hand side is a candidate key. & candidate key can determine any attribute. There is never be a problem. So Yes, there is no problem. This is a valid FD. Now, check for the second FD. Weather left hand side is a candidate key. No, left-hand side is not a candidate key D is not a candidate key. But Check whether the right
hand side is the prime attribute. Our this condition is false. But here we have OR Right hand side this the prime attribute. YES Right hand side is a Prime attribute. See, A is a prime attribute. So means, If you look at it, there is a candidate key who is determining some C and D. And there is a primer attribute who is further determining
some other prime attribute I have already told that  you just need to check one point. that some non-prime attribute determining a non-prime attribute. That's the problem over there. Otherwise, There is no problem in any case. So here. A prime attribute Is
determining a prime attribute. This is valid. Because that is already prime. It is already helping to
make the candidate key. so that's already a key attribute. So there's never a problem with that. This is valid. So means, this FD is valid, it is also valid. So means. You can say that this table is in third normal form. So this table is in third Normal Form. So Summarize the third normal form. First of all, you have to check that  the table should not contain any transitive dependency. Transitive Dependency should not be there And what is transitive dependency? A non-prime attribute determining a non-prime attribute. Apart from this, any case is valid. It's valid for you. That's the only case you have to check. This is from the theoretical point of view. Form the theory point of view. If you see, from question point of view So here are the two questions we've discussed. You have to check only one condition. When will be the table in Third Normal Form? A Table will be in third normal form that table should not contain transitive dependency. But its better than that. That you remember this condition. When will be a table in third normal form, If. Left hand side If Left hand side. You please make a note of this. If left hand side Of all. Functional dependency. is candidate key or super key OR Right hand side. of all functional dependency is a Prime attribute. That means if see from
the question point of view, we already dicussed from
the theory point of view From the question point of view, how to solve these questions? So if a table will be in the third number form. one by one you have to
check all functional dependency.  And what you have to check? that left hand side of all functional dependency must be a candidate key or super key. Left hand side of the entire function dependency should be candidate key 
or super key. For this, you should take care that To find the candidate key from the  closure method, that we did. It is very important. You have to find all the candidate key. No one should be missed. So if left hand side. is the candidate key Then there is no problem. Means the table is in the Third normal form If in case, In any functional dependency Left hand side is not the candidate key or super key then no problem for you. There is another option. The right hand side should be a prime attribute. So you check the right hand side of the function dependency is it a prime attribute? If that is the prime attribute, then no problem. Still the table will be in Third Normal Form. That means this condition is direct. This condition is direct. To Check for the third normal form is there or not. This is the direct condition for that. Fine. So this is all about the Third Normal Form So thank you.