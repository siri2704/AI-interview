[Music] SQL or no SQL which database do use for my new system hey everyone I am gorov and welcome to my channel code with GD in this video I will tell you about SQL and nosql databases and I will give you pointers on when to use SQL database and when to use a nosql database and I will also give you examples on when you should use which type of database so by the end of the video you will have enough information to help you make an informed decision on which database to use for your upcoming project so let's Dive Right In first I will tell you about SQL database the data structure used in a SQL database is comprised of tables for example if I had to store employee information and the employee address I would do it like this I will create an employee table with all the employee information like employee ID the name name maybe the employees team and I will create another table called address table my address table will contain something called address ID then the country and maybe pin code I can also have City now this employee table will have a reference of this address table stored here all the tables in SQL will have something called a primary key which will be unique to that table for example here employee ID is unique to this employees table and address ID is unique to this address table now this address ID here is a foreign key because this refers to a foreign table and this address table will contain some addresses like address ID 1 will have maybe a country India City can be Bangalore and pin can be something like 247 now this address ID will be the same here so we know that a person named gorov has an address toored at this position which is address ID 1 then we look up the address table and we search for the address ID 1 and we get the address details of this particular employee now each table in SQL is called schema and since we have multiple tables in SQL we also call it relational database if I had to store the same information and no SQL type database I would do it something like this so I have an employee table and all data in a nosql database is stored in the form of documents by documents you can think of something like a Json object and it will have Fields like employee ID then name and then team and in place of address ID I can store the entire address here I don't need to reference it to a different document so I can store address details like country City and pin so this is my no SQL database now talking about differences think about a case where different countries have different attributes for storing their address for example in India we have a concept of PIN codes but in countries like us we have a concept of zip codes so this means if a person stays in the US now city is common to both India and us so so we could reuse the same attribute City let's say it is Chicago but the PIN code for us will be null since us doesn't have pin code but we also want to store ZIP codes for the people residing in us for that we will add a new column called zip code in my address table and this person staying in us can have that value but the zip will be null for a person staying in India so now you can see that how unflexible this design is because I didn't want zip for India but I still have to maintain that record as a null State whereas if I used no SQL to store the address I would do it something like this talking specifically about this I could have changed it to something like country us my city is Chicago and my zip is 140 I don't need to store pin in no SQL so schemas in no SQL are very flexible and they can change based on the user requirement or or the feature requirement so if you are unsure about what type of data you need to store you should definitely go for no SQL let's note it down whereas no SQL is flexible this is with respect to schema what this also means is the schema and SQL is fixed so when you are building your application on top of a SQL database you know exactly what type of data you need whereas in no SQL there has to be some kind of logic in your application layer to parse the no SQL data so this is not fixed at least the database doesn't restrict on what type of schema it should be another important point is consistency and availability now SQL guarantees some kind of asset properties what this means is if multiple people are performing operation on any data it will guarantee that that the data will be consistent there are no rise conditions so SQL is more consistent with the data which also means it will be less available now no SQL on the other hand does not guarantee consistency but it is highly available so if your application is something that doesn't doesn't care so much about consistency but it wants to be highly available you should go for no SQL database most of the banking applications since they need to maintain consistency in money transactions they choose SQL database to manage their wealth transactions in this equal database we have multiple tables and there's is relation between two tables and they can be connected with something known as joints if you had to insert some employe data in this SQL table you would have to insert it in the employees table and then go and insert it in the address table assume you need to fetch some employee information you need to search in the employees table fetch that information then look at the address ID and fetch the address for that address ID from the address table so you had to query both the tables to fetch all the employee information and join is a costly operation so retrievals and insertions are costly in a SQL database whereas in a no SQ database we are storing all the data in one big object and if we want to insert data all of this will be inserted together and if I want to query data I will get all of this data in just one query so I had to query once whereas in this I had to query two tables to get the same data insertions and retrievals are faster than no SQL imagine you had to filter all the employees belonging to a certain city now if you had to do this in SQL you can directly come to the address table and look at the city column and you can then filter addresses by the city and then use those address IDs to figure out which employees live in that City if you had to do the same thing in a no SQL database you you would have iterated to each employee gone to the address field and checked the city of that employee and if it did not match with what you wanted you will reject it we had to do lookups for each of the table in a no SQL whereas in a SQL we had to do lookup for only the employee we cared about that is a benefit of having joints or relation in a SQL table this means filtering IS F fter in a SQL table whereas here filtering is slower now SQL provides an implicit guarantee for foreign key concept for example this column can't have any value that doesn't exist in the address ID field SQL provides an implicit guarantee for relational whereas in no SQL we don't have any such guarantee we can have a different table maybe a teams table here and and and it can have different teams like Dev the application layer has to make sure that we stored value as Dev here and the teams table should have a value Dev whereas if we did the same thing in a SQL the database provides a guarantee that the team which has been entered is present so my next point is whereas a no SQL provides no such guarantee there is no one correct answer when it comes to choosing a SQL or a nosql database for your application in system design It's All About tradeoffs You could also choose to use a combination of both of MySQL and a nosql database most big companies use nosql database for only their analytics they store all the analytics in one place in a nosql table and no SQL also provides built-in systems for aggregations like average age or total number of employees so that way no SQL is beneficial for the parts of the system that require consistency you can choose a SQL database you could also base your decision on whether your system needs High availability if that is the case go for no SQL if consistency is more important to you for example you are building a financial application go for a SQL database if you know that the data structure and attributes you want to store in your database are going to change in future or they are temporary or your system needs it to be flexible go for a no SQL database whereas if you have Clarity in what your data structure and attributes would look like go for a SQL database while designing a system you need to weigh the pros and cons of using both SQL and no SQL database and both of them will have their own pros and cons it depends on the type of system you are building on what cons you are okay with with and what Pros are absolutely necessary based on that you need to choose your database and that's it for this video If you enjoyed this video or learned something new like this video and share it with your friends don't forget to subscribe to my channel code with GD till then Happy coding bye-bye [Music]