good morning everybody I am Runalini working as assistant professor in uh CMR Engineering College in the department of AML Um I am going to deal uh DBMS subject and the topic here is normalization In this video we discuss what is normalization and how normalization is used and why normalization is used Right here what what is normalization is a normalization is used to uh minim it is a process or a technique which is used to minimize the redundancy in a relation or a table So why normalization is used because u when there when there is a m same data stored multiple times there are some problems raised like update anomaly insertion anomaly and delete anomaly These are the problems raised due to redundancy Redundancy is nothing but storing the same data multiple times Right so here uh the update anomaly is when uh whenever we whenever the same data is stored multiple times when we want to make any updation to that data For example if an address is stored multiple times then that address if you if you make an updation uh to both uh wherever the um data stored multiple times that updation may done or may not be done So that is the problem uh of redundancy And the next is insertion anomaly in uh the nature of databases we cannot uh we we cannot insert uh some amount of data We have to insert the total amount of data at once So if you want to make a piece of a data to be uh inserted into a table that cannot be done in case of uh in uh if there is a redundancy that cannot be done And the next is delete anomaly Delete anomal is if the multiple data stored in mult uh same data stored in multiple times then if you make a deletion of one uh one record the total records of same data will be deleted For example if I want to delete uh the uh library details in library database if I want to delete a student uh uh details about the book If I delete the book details the total student details will be removed from the library database which should not be done which makes an inconsistent data Right so these are the problems raised due to redundancy That is why we are using normalization in order to reduce the redundancy So here um how the normalization is used normalization is used uh by splitting the larger tables into the smaller tables Okay Here that can be done with the help of this u nor normal forms In this normalization we have different types of normal forms like 1 NF 2NF 3 NF BCNF 4 NF and 5NF Right here the first normal form is uh the first normal form is uh in order a relation is set to be in a first normal form if it satisfies this rules Here uh the rules of first normal form is every attribute every every attribute should be having an automic values That means it should not have multiple values in a cell It should not have multiple values Here we have seen a table in in which it consist of all ticket number first name last name and phone number here in uh the student of alterate number five not one is having two numbers So instead uh so this should not be done in case of first normal form Why because it is it should maintain automic values in each and every cell So here if I not 1 and 5 not 3 is maintaining two two values in in that cell So what we have to do we have to normalize it instead of storing the uh in instead of storing two numbers in a single sing single column If you put an alter uh if you put another column as an alternate number what happens there if I put another column like this alter alternate number So one uh one phone number will present here and another phone number we can store it here But what happens here five not to uh the whole ticket number 52 is having only a single number So here we are storing null right So if the particular person is having multiple numbers then we have we cannot add multiple columns like this Right so if instead of doing like this if we add multiple rows of same same uh uh hall ticket number then what happens it is violating the rule of each record needs to identify by the primary key Okay So that is violating uh the uh when we insert multiple rows this condition is violating So we are not doing uh by adding a column or adding a rows Instead of doing that we are splitting the table larger table into the smaller tables Here this is a larger table and this larger table is splitted into two different tables in which it consist of hall ticket number first name last name as one table and hall ticket number mobile as another table So this is first normal form in which it has it has to satisfy the rules of every attribute should have automic values and each record needs to be identified by the primary key So here we are splitting the table into two different tables In by doing this we are satisfying this first normal form conditions Next we'll see uh second normal form second normal form Here a relation is set to be in a second normal form It should satisfy uh it should be in a first normal form And the second condition here is there should be a fully functionally dependent on key attribute Here the fully functionally dependency is uh if uh these are the key attribute and this is the non-key attribute Here PQR which determines A Here this is determinant and this is dependent Here A is a dependent and PQR are the determinant A is functionally PQ A is dependent on PQR So here fully functionally dependency is every non-key attribute is functionally dependent on key attribute which identifies uniquely Okay here uh this A is dependent on PQR totally all the three attributes are uniquely identifying the A So here in second normal form it can also say like there should not be any partial functional dependencies Here the partial functional dependency is this a is an attribute which is partially dependent uh dependent on a part of this key attribute That means it can be dependent on Q or it can be dependent on R It can be dependent on P any of the attribute if it is depending upon any of the attribute then it can be say as partial functional dependency So in second normal form this partial functional dependency should not be there There should be only a fully functional dependency So these are the two conditions to be satisfied for a relation to be in a second normal form So we can see an example here in u in this table we have alterate number name date of birth department number department name and location Okay here we can see uh this is the key attribute which uniquely identifies all the attributes Okay location department name department number date of birth name all these attributes are uniquely identified by the hall ticket number And here department name and department uh location is depending upon the department number also Here we can see that here department name and location is depending upon the department number Why because with the help of this department number only we can identify the department name and the location Right so here this is partially depending upon the department name and location are partially depending upon the high ticket number So which violates the rule the there should not be any fun uh there should be fun fully functionally dependent on key attribute There should not be partial functional dependency So in this table there is a partial functional dependency So we have to avoid that partial functional dependency In order to do that we are dividing this table into smaller tables Here all ticket number name date of birth and department number as one table and department number department name and location as another table So if we split this large table into the smaller small two tables then the uh the this uh rule is satisfied Now this table is satisfying it should be in one and f and there should not there should be fun fully functionally dependent on key attribute So this two tables are satisfying this condition Now this relation is set to be in a second normal form Thank you