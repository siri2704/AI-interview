hello everyone welcome to skills build training youtube channel today we are going to talk about sql versus nosql and mysql versus mongodb basically we're gonna do a comparison of relational and non-relational database and i'm gonna talk about how to choose the right database my name is talha and this channel is all about showing you how to become a highly paid it pro really really fast let's get started [Music] so first let's talk about relational database we're going to discuss what is relational database and what is its relation with sql or mysql relational database is a type of database where we have relations in our database which means that there will be some kind of connection among the data we have mysql which follows the rules of relational databases and in relational databases we store the data in the form of a table each table has some fields and each field will have some records or data in it here we have a table and in this table we have different fields like id name price description etc and as you can see that each field has some data which you can call as a record for example we have id which equals to 1 and name which is chair having a price of 150 and the description of it is rotating share in relational database we have to follow the schema of it you cannot do anything outside the schema for example if we want to add a new record in the table we have to follow the schema means we cannot add any other field or extra field that we might need later we can only add the data in the fields which are already declared we can also not leave the fields empty or null this is like a rule to use the relational database so you may say it is a limitation of relational database this was one table what if we have multiple tables or more than one tables well in that case true sense of relational database prevails let's say we have a table of customer having its id name and address and let's say we have another table of product and in that table we have fields such as product id price and model number now let's say we have another table named as orders in this table we will have the information about customer and products the idea here is that when a customer comes and buys a product we can have the information about the particular customer and the product which he bought at one place and we can use that information to process the order of the customer for payment and shipping purposes and hence we can use the information from the customer table and the product table and combine it and use it in the order table so what happened here is that we made a relation between different tables using the fields present in those tables in orders table we had the information from other two tables which are customer and products but as you can see we used only one attribute of each table that is the beauty of relational database in relational database we have different types of relationships like one to one we have one-to-many relationships and we have many to many relationships now let me explain to you each relationship separately first let's talk about one to one as the name suggests we will have a relation where one table of user has relation with contact table in user table we have user id its name and h and in contact table we have id phone number and passport number so here each user will have one contact information for example one person cannot have more than one passport number so this type of relationship is called one to one because one person would have only one passport number now let's talk about one-to-many relationship let's say we have a table of teacher having name age and email as its fields and we have another table named as subject it has subject name number of students and teacher name the thing here is that a subject can only have one teacher let's say that this is the data of a small school and where you know there are limited teachers the thing here is that a subject can have only one teacher who will teach the subject but a teacher can teach more than one subjects so for example a teacher teaches math and let's say science this type of relation is one-to-many because one teacher can teach multiple subjects let's talk about many to many relation let's say we have a table of products having id name price as its fields and we have another table of customer which has name email and phone number now here in this scenario a customer can buy more than one product and at the same time a product can be bought by more than one customer right so this type of relation is known as many-to-many relation i hope now you understand what relational database is and what do we mean by types of relationships so now let's understand what sql is and what relation it has with the relational database sql stands for structured query language sql is not a database in fact it's a language which is used to access retrieve edit delete or manipulate the data in relational database for example we have a query as select id name price from products in this query we have two things one is keyword and the other thing is the parameter keywords are like the syntax of sql which will retrieve the data from database and parameters are used to deal with the data present in the database for example here in the query we want id name and price to be retrieved from the products table and this query will exactly do that i hope that now we understand about sql enough let's talk about mysql database mysql is a type of database which uses sql or structured query language to maintain add edit or retrieve the data from the database it comes under the umbrella of relational database for example we have a big company and hundreds of employees are working there we want to keep and save the data of each employee in such a way that we can identify them individually so when we collect the data of all the employees and store it somewhere it is known as database now to manage edit add or retrieve that data we need some mechanism here comes the sql structured query language it will allow us to manipulate the data from the database for example i want to get the information about ali from finance department table to do that i will write a query something like this select id email phone number from finance department where name equals ali what this query will do is it will get the id name and email from the finance department where the employee name will be ali so it will fetch all the data of ali the id name and email and give it to me so that was my sql hope you understand it now let's move ahead and let's talk about the second type of database which is essentially non-relational database and let's see what relation it has with mongodb and nosql a non-relational database is the one which do not have relationships or it has very few relationships in them nosql and mongodb follows the rule and the structure of non-relational database the question is if it does not have any relationships in the database then how it stores and manages the data well in non-relational database we do not have tables but we do have collections and in those collections we have documents of data in them and they look like the rows in the tables in relational database the good thing here is that in non-relational database we do not have to follow any schema means we can have multiple documents in one collection and all those documents can have different fields in them which means that we do not have to follow different structure of each document and non-relational databases they solve this problem they allow us to have data without having any schema for example we have the freedom to add the data in any way we are not bound by the tables and their fields so as you can see that we have lots and lots of null values and in the last record we have more values than other records this is the freedom we get with non-relational database it is a super flexible solution this type of database is really helpful when you do not know what type and how much data you will be having in future for example we have a business and my products had only four fields and we are adding the information about product in database using those four fields now we have a new product or category of product which have like six fields let's say we want to add the information about our new product into the same database but now as my new product has six fields it would have been a problem if we were using the sql database or relational database but as we are using nosql here or non-relational database we have the freedom to add data with different number of fields this is because there is no schema implied here and when there is no schema there is no restriction you can add as many fields in any database against whatever product you want to add so the idea here is that non-relational database tries to keep all the data at one place for example we have a data of orders where we have information about user and products collectively and we use this information for order processing the other thing here is that we have two other collections named as user and product and in those collections we have detailed information about users and products we will use this information for order processing internally and the information or data which the order table needs it will go from these two tables for order processing and we are not following any schema here which means we are not making any relations and hence it will result in the fast processing of data but there is a disadvantage as well which is that we could have duplication of data as you can see that email addresses are repeating in the user table and order table as well so if email address changes at one place we have to change it at the other place as well now let's talk about mongodb and nosql mongodb uses the non-relational database approach and it is used for high volume of data storage in mongodb we use collections and documents instead of the tables and rows collections contains set of documents and functions which are equivalent of relational database tables one thing in here is very interesting each collection can have multiple document and each document can have varying number of fields it means that we do not have to follow any schema here so the question is that which database is best or which database we should be using the strict one or the one with the lot of flexibility well there is one thing which needs to be understood here and that is there is no clear winner because choice of database is completely dependent on the type of system application that we are building and kind of data that we are storing in some cases as the size of the application grows we need and try to use both relational and non-relational type of databases because we use different types of data as we grow bigger now let's talk about features of both types of databases like sql and mysql and nosql and mongodb schemas exist in mysql and schemas do not exist in nosql if we talk about relations then sql has relations while nosql does not have any relation if we talk about portability in case of sql portability exists while in the case of nosql there is no portability let's talk about support almost every database management system supports the sql and it is very easy to learn but nosql has a limited support let's talk about horizontal scaling horizontal scaling is not possible in sql because we cannot distribute the data in different places while in nosql horizontal and vertical scaling is possible let's talk about unstructured data in nosql or mongodb we have unstructured data which means that there is no uniformity in the data while in the case of sql we have structured data now let's talk about response in response when you try to delete or update or edit the data the response of sql is better and fast than nosql nosql works best and fast with read and write requests with updation deletion and other sort of requests nosql doesn't perform better than sql now let's talk about the conclusion and verdict so the question is which database is the best one to choose or which one is perfect among these the answer is we can build our system using both separately or even we can make our applications using the both types of database simultaneously so if we want to have relations schemas and fast response when updating or editing the data we must go for sql or mysql if we want to be flexible and we want to have freedom with data and we are not sure about what type of data is going to come in the future then we must go for nosql or mongodb because of their schema-less features the thing is that you can add any kind of data later on or unstructured data later on in the nosql and if we are working with the messy data then the non-relational database would be the best choice because in the messy data we have a lot of unstructured data and we need a flexible solution it is hard to set up the sql solution but eventually it pays off at the later run while the non-relational databases they are very easy to set up but when we talk about long-term support we need to be sure that we have reliable vendor and if we are working with the real-time data then no sql databases will provide us more flexibility and will save a lot of time on the input stage so the choice between relational and non-relational database depends on the nature of your project priority and skills of your team we have explained to you all the possible scenarios in which you could choose relational or non-relational databases depending upon your needs so the choice between sql mysql or nosql or mongodb it depends on your project priority it depends upon your the skills of your team and it also depends the kind of the project that you are doing you might need to use both or you might need to use sql or you might need to use only nosql so go ahead and decide on all these dependencies that we have explained and choose your database accordingly i hope i was able to clear all your doubts and we have done a comparison of sql versus nosql and mysql versus mongodb hope you have liked this video give it a thumbs up if you really liked it thanks so much for watching and do not forget to subscribe to our channel to help you advance your it career