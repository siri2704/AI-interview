[Music] hello friends welcome back to our channel so in today's session we'll discuss about one more concept in dbms that is joints so first let us see how many types of joints and then we'll see one by one with an example so these joints are classified into two categories one is a inner join inner join and another one is a outer join outer join right so in this inner join again it was classified into two categories one is theta join another one is natural join natural join and this outer join is classified into three categories left outer join right outer join full outer join so three categories so this is usually the join is represented as this symbol this is a joint representation and coming to the theta join so the representation will be like this and here we have to specify the condition condition and without condition if you apply the join that join we call it as a natural join natural joint right and left of the joint this is also similar so this is the left outer join representation next this is a right outer join and this is a full outer join this is a full outer join right so these are the representation these are the representation of this join operations right so coming to the venn diagrams if you consider the venn diagram so this is a natural join actually theta join will be represented as a cartesian product okay so in the previous session we have studied about the cartesian product so the same cartesian product we can consider as a theta joint right and see left or join if you consider so this will be the left outer join this will be the left outer join this will be the right outer join this will be the full outer join right so that means see coming to the natural join based upon the attribute attributes equal attributes the two relations will be get joined right so coming to the left or join so it will consider all the records of a left relation and a common relation from the right relation common tuples from the right relation similarly right outer join it will consider all the tuples of a right relation and common tuples from left relation and full of joint it will be having a both the tuples of both the relations okay both the relations so this is the overview of join operations in relational algebra of dbms now we will see one by one by taking an example starting with the theta join so here the two relations will be joined based upon the condition right so based upon the condition condition means so any operator any any relational operator we can give any relational operator and we can relate or we can compare two different attributes or one attribute with a value right any type of condition based upon any type of condition if you want to join two relations that will comes under this theta join and the two relations joined with respect to the common attribute so both the relation should have the common attribute so with the help of with respect to that common attribute if two tables or two relations is being joined that type of join we call it as a natural join or sometimes we can also called as equi join equi joint equi joint right so we will see one by one with a small example see let us take these two tables a car a model and a price and jeep model and a price g price and a car price okay so here you can see let us join so let it be the relation name is c and relation name is j relation name is j so we have to find c theta join theta join so c dot price let us take j dot price greater than c dot price of j so we have to apply the theta join with this condition j dot price greater than c dot price so let us take this one first let us consider the j dot price greater than c dot price consider the first one 6 000 which is greater than sorry 6 lakhs which is greater than 4 lakhs so there will be join with these terms see jeep one six lakhs car one four legs right so next six lakhs greater than five lakhs so j dot price greater than c dot price so six lakhs is greater than five lakhs so again there will be an uh join between g1 and car 2 so jeep one with six lakhs associated with a car two with five x and six lakhs greater than eight lakhs no it's not true so these two tuples will not be joined these two tuples will not be joined coming to the second one two ten lakhs greater than four legs yes so give to 10 lakhs associated with a car one with the 4 lakhs next 10 lakhs greater than 5 lakhs yes so jeep two ten lakhs car two with the five lakhs ten lakhs greater than eight lakhs two jeep two ten lakhs car three with eight legs so this is the relation the resultant relation after doing this inner join that is also a theta join right so this is jeep model and this is a price this one is a car model and this one is a price so this is the relation this one is a resultant relation after applying the theta joint so that means here the two relations will be get joined with respect to the condition not with respect to the attributes right so here the two attributes of differ i mean the attribute from different tables may not be equal but the data type must be equal okay so this is the theta joint theta joint so this is similar to our cartesian product or cross product okay so hope you understood this theta joint the next one is natural join natural join so for this natural join we will consider one example and will apply the natural join so let us take these two tables as an example a student table having the attributes the student id student name and the department id and coming to the second one second table there is a department table which consists of department id and the department name so let it be yes is a relation here and d is the name of the relation here student and department now natural join natural join so here we are not supposed to give any condition so based upon the similar attribute from the two tables the join will be appeared so relations relations will get joined with respect to with respect to common attribute common attribute so from this common attribute we'll get the join right so here yes join d a natural join is see let us take all the tables so s id s name department id dna so we need not write the common attribute multiple times okay the same attribute we need not write the multiple times because in student table there is a department id and in the department table there is a department id so we can combine both with respect to this department area so coming to this one zero one with the department one right so one zero one the name is raju and department id is one okay so let us take here okay let us take one more four okay so one not one some raju with the department id one which is csu okay next one zero two so 2 there is a 2 here so 1 0 2 ravi department id is 2 version 8 e c then 1 0 3 so 1 zero three with the department id one yes there is a department id one so one zero three some ramu department id one one and cse and 104 hurry with the department id 3 the branch is tripling so this is the join this is the natural join so the two relations will get joined with respect to the common attribute with respect to the common attribute right so here the common attributes with department id so with respect to this common attribute the relations or the relations will be get joined right so hope you understood this one so that is called a natural join the next one the next one outer joins will see the outer joins outer join so let us take an example yes consider the same examples so outer join and in that first we'll go with the left outer join left outer join so left outer join means yes this is the relation for left outer join this is the notation rotation for left outer join that means in the resultant we have to consider all the tuples of left relation that means yes and common tuples of d so if the result results relation will have all the tuples all the tuples or records or entities of yes and common tuples of d so first let us write here yes id yes name d department id and then department name right so write down all the values 1 0 1 1 0 2 1 0 3 1 104 so let us take a raju ramu sorry so department id so 1.1 1 2 1 3 and department name see one it's a csc two it is a ece three sorry again one it's a csc and three it's a tripoli so if there is a one more name some suresh with the department five let us think okay let us take this one so you have to consider one more one zero five some suresh with the department file but there is no details in the department table so here we have to give it as a num here we have to give it as a null so we have to consider all the tuples of relation yes and what are the common attributes so there are one two one three so one two three details are there so we have to consider only this one and we should not consider this four the last one right and for 105 it is associated with the department id 5 which is not available in department name so just pad it with null pad it with null so we are giving all the tuples of yes and a common tuples of d right so common tuples are 1 2 3 because there is no 4 and there is no 5 also so we have given as a null big but 5 is available in yes so we have to write all the tuples of yes so we have written one out five also right so this is called a left outer join so we have to consider all the tuples of the left hand side relation and we have to consider only the common tuples of right hand side relation and the next one the next one right outer join so left is completed right right outer join so for this we have to represent yes this one so for this we have to consider all the tuples of right right relation and common tuples of left relation so the resultant relation we have all the tuples of d and common tuples of yes common to pulls off yes so consider see yes right outer join d so you can consider s id yes name d dpt id and d name so consider all the values of d all the tuples of d so first write down one c s e two e c e three triple e four neck now consider department one so one zero one raju 2 1 0 2 ravi and again 1 right again 1 so consider 1 1 0 3 ramu right ramu and this is also csc next 3 1 0 4 3 1 zero sorry one zero four honey right what about a four there is no association with the four so there are no values for department id 4 in student id and student name right hope you understood so first write down the all the tuples of department table all the tuples of department table now write on the common tuples of yes right common tuples of yes so there is association with department one so write down this tuple there is association with the department two right on this tuple and there is again one more association with department one so add this one and there is association with department three right on so there is no association with file in department id so you need not consider this one because this is yes we have to write only the common tuples what are the common thing one two and three so here we are not having any association with the department for any students who associated with the department for so that's why student id and student name for department id 4 will be kept null will be padded with null so similarly we which we have done in the left outer join also left outer join right so here we have to consider all the tuples of right side relation and common tuples of left side relation right so this is how we have to apply the right outer join so hope you understood this one the next one is full outer join full outer join full outer join so this is represented in this way so we have to consider all the tuples of s and all the tuples of d so let us write here yes id yes name dapt id the name so item 101 raju 1 102 ravi 2 103 ramu 1 104 hurry three one zero five suresh five so write down this one d name one means c s c two means e c 3 means sorry again 1 so c s c 3 means repeat so is there any relation with the 5 no so kept it as a null kept it as a number right and there is no department id 4 so insert 4 with mechanical so there is no association with the students any one of the student so kept it as null here kept it as null here so this is this is the full outer join of these two relations s and d so this is nothing but the union operation of left outer join and the right outer join so up to here it is a left outer join and this one is a right outer join so we need to apply the union so we have seen the union operation in the previous session right so once you refer that one so the link will be in the description section so the union operation if you apply the union operation it will combine all the tuples of both the relation and automatically the duplicates will be get deleted right so we'll get the same thing so full outer join means all the tuples of relation yes and all the tuples of relation d and if there is no association simply pad with null values paired with null values so this is the full outer join right so hope you understood this join operations so two categories of joints inner join and outer join and in the inner join the theta join based upon the condition so uh the tuples will be joined with with respect to the condition given and the next one is a natural join so two relations will be joined with respect to the common attribute and the leftover the i mean the outer joins the left outer join we have to consider all the tuples of left left left side relation and common to pulls off right side relation and right out to the outer join we have to consider all the tuples of right or right relation and common to pull soft left side relation and coming to the full outer join we have to consider all the tuples of left side relation and and right side relation and also simply we can say the full outer join is a union operation between left outer join and right outer join right so hope you understood this joint concept in relational algebra of dbms so let's stop here and if you are having any doubts regarding these joints so feel free to post your doubts in the comment section definitely i will try to clarify all your doubts if you really enjoyed my session like my session share my session with your friends and don't forget to subscribe to our channel thanks for watching thank you very much