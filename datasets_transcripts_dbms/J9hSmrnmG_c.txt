good morning welcome to infosyntax today you will understand what is the difference between nosql and test skill database let's see these differences between or SQL or rdbms versus no square SQL support structured data and nosql is supported semi-structured what is mean this if you think about the SQL database you have the table like some specific columns in this screen we I draw the table for the employee and employee have some data like ID name Department ID okay in this table we have three columns ID name enter Department ID whenever I have inserted data into this table only I have to insert these three type of color on row basis now come to this semi-structured data there is no specific structure for document so data will be stored in keeper value like ID and it has some value and name and it has also some value the first time user one is came to nosql database and he entered the employee ID and name into the document the next another user came to know scale and he opened that collection he entered the employee document he enter the data suppose some value are there name of the employee and it has also some value then he also entered the address of that employee and he has entered in that same collection whatever the previous saves are entered the data ident name in the collection only he entered another new document but he has entered additional one column that is address at that time he will not get any error and the data is inserted in employee collection that's why you are telling no scale data best support semi structure the next point is a relation and no scale support object oriented what is your relation just you have discussed the employee employee has the ID for department and we have another table like Department employees record search Department ID and it refer to Department tables the primary key is ID so this relation is present inside SQL database but this will not contain in no SQL its support objective oriented now data will be consistent in SQL database but other hand the data eventually consistent if you think about no scale no scale is support horizontally cluster that means drawing this one so data replicated with each other and it presents in different different machine and someone is changed data in one node or some data on one machine that time it will the new data should be replicated with the other two system but it will take some time that's why we are telling eventually consist foreign flexible we will discuss on this point on next slide next point is mature and no scroll is emerging escalate stable but no square is scalable SQL maintenance cost is very high but no Square maintenance cost is very low this point we will discuss on next slide scaling uh dbms support vertical scaling the architecture design run well on single machine to handle large volume of operation each to upgrade the machine with faster process sir or more memory that means whenever we you are talking about scaling in rdbms side the database will be scaled like this user will request like this when you are upgrading the database so you need to upgrade your machine like such as processor or your Ram size if you want to perform your database very good so that time we need to improve your machines processor or Ram size but other hand no scale is support horizontal scaling noscale database are intended to run on clusters of comparatively low specification server to hand tell more data add more server to Cluster relatively cheaper approach to handle in creatures if we talk about this horizontal scaling so database will run on this cluster machine so if you see the database is clustered into three machine and each other handle different different type of request so here easy to maintain more number of requests and also very less cost of This Server next is data model rtbms support recreate data model but nosql support no schema or no data model the first point is a dbms required data in structured format a change managed is very big issue in SQL with strong dependency on primary and foreign key concept just before we have discussed the previous slide all these data in structured format and they have relational step of data like employee and Department if you are going to change any description of this data so it will be very big headache actually because it will change everything of your relational but other hand no scale database is schema-less so that data can inserted into database with easy even without any predefined schema the format or data model could be changes anytime without application disturbance so here data is inserted in document format and document is not following the schemas best so any type of data or any structure of data we can insert it in document [Music] maintenance our teammates maintenance cost is very high because maintaining a dbms system is expensive and a required trained person for database management just before we discussed unscaling if you upgrade the database so that time you are going to use first processor or memory so that time it's very high cost Edge compared to the lowest lower version of server and also the data are highly relational so without any trained person cannot manage the database or without knowledge nobody can change data inside the SQL so if you hire the trained person so it is also indirectly impact your cost on other hand low maintenance no skill database require minimal management and its support many features which make the needs for administration and tuning requirement becomes less because it follow the simpler data model now next slide we will discuss about model or database the RDP May support a seat model no skill support base model now come to this first one the A stand for Atomic City if any one element of transaction fail then the entire transaction fail with this main we will understand on this example I am transferring thousand rupees from my account to my friends account let's understand how it will be processed in transaction one the thousand rupees will be detected from my account let this account name is A1 and the second one is A2 the transaction one what will happen balance amount of account A1 minus thousand rupees okay Enter transaction true what we'll do here it will credit the same amount account A2 okay these two transactions are there in such a case it will process the first transaction then it come to the second line and this time it has some error actually suppose I have entered the account number wrong or IFC code is wrong actually so that time what happened does transaction 2 will be fair okay so here already this transaction is done that means 1000 rupees is debited from my account and the same amount is not credited into A2 account so this statement is telling if one transaction is failed then entire transaction should be 5 so here it is failed that means whatever the previous transaction has happened that should be also filled that means this thousand rupees credit to my account ever then only this case will be satisfied now say the next Point consistency transaction dot break consistency are not allowed and will fail every time the data should be consistency in database third point is isolation no transaction has access to any other transaction that is in an intermediate or unfinished State suppose the same example I am talking on here suppose A1 account currently it has balance 5000 rupees okay 5000 balance is there on account A1 and one transaction is happening suppose 500 rupees transaction one okay and I want to do another transaction 1000 rupees to my friend okay here isolation is telling if any transaction is going on the same time another canner be used that means it should not allow the second transaction it T2 once completed this transaction then only it should allow because what will happen if the this data is not detected A2 and T2 is processed fast that means it will come 4000 rupees okay four thousand rupees or or suppose the same time transaction is started suppose we will consider suppose consider both transactionals started at the same time okay same time so they have taken the balance amount of A1 it's 5000 rupees and transaction first it did to its T2 is taken 5000 and it is deducted thousand rupees okay and same time it is also process that means it took the balance amount with 5000 only entity deduct the 500 rupees but here T2 is processed first and it is updated 4000 rupees okay four thousand rupees is updated in my account A1 and you know both transactions are processed at the same time and once it is completed that means it will detect it from the 5000 rupees that means 4500 rupees will updated in the same account but the balance amount will come 4500 rupees because it is completed last okay so data inconsistency will happen yeah due to this region the isolation concept is key no transaction has access to any other transaction that is intermediary or unfinished that means if any transaction is going on that time the second transaction will not allow the last point is a durability in case of failure it is possible to restore the committed transaction okay suppose our database server in one system okay DB server is I am doing some transaction actually okay and the time my system got disconnected from the database server okay so that time what the transaction is happening that should be restored all the transactions should be restored now we will discuss about nosql best model basically available system does guarantee the availability of data as per cap theorem cap theorem is consistency availability and partition tolerance theorem now you will understand this theorem consistence means that node will have same copy of replicated data item visible for various transactions availability availability means that each read or write request of data item will be either be processed successfully or will receive message the operation cannot be completed every non-failing node returns response for all the read and write request in reasonable amount of time partition tolerance partition tolerance means that the system can continue operating even if the network connecting the node has fault that result in two or more partition where the node in each partition can only communicated among each other that means system continue to function and afford its consistency guarantee in quality of network partition now s stands for sub State data source does not have to be consistent all the time but here always consistency is maintained eventually consistence not immediately consistent but some point data will be consistent no guarantee above when this will occur data will consistent but it will depend upon the network so that's why you are calling eventual consistence so we have understand the depth sense between nosql and S we will meet on another video thank you please subscribe YouTube channel info syntax and for more details you can visit www dot infosyntax.com bye