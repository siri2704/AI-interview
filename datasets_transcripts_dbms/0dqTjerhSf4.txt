I [Music] okay while we wait for everyone to get in and settle down let me ask you a few questions to get a feel for the background of people here how many of you have used the sixth edition of my book or this particular schema in your courses several of you okay since many others haven't I think it's important I spend a little bit of time going over this schema because our exercises are going to be based on this schema so you need to understand what is in here so I will spend some time and if you have any questions about the schema please do us I am not in a hurry to run through this because unless you know this lab exercises will also be more difficult so let's start with the very top right part of this schema and this is the university schema it's a very simplified model of what kind of academic information university might need to maintain and if you look at the top right there is something all student this is a schema diagram this is not an ER diagram we will be coming back to ER diagrams later this is the actual relational schema with arrows being what what are the arrows foreign key dependencies and each box is a relation with the name of the relation at the top and if you see some of the attributes there or underline the underline attributes are the primary keys so that is fairly standard notation so if you look at the top right there is two days what are the attributes of student have an ID a name a department name a department name here is the foreign key which is referring to a department in real life probably you wouldn't use a name as a primary and foreign key you might have a department code a department ID but like I said this is simplified and then you have a some field called total credits which is supposed to reflect how many credits the student has cleared till now this is an example of it derived field basically because it is supposed to come from other information in here in the databases that sample databases that we use it does not actually match because these are parts of what could be a larger database okay now if you come down to the bottom right there are instructors we could have used faculty we could have used features or whatever we chose a neutral term instructor and these instructors have more or less the same fields except instead of four credits they have a salary now again this is not realistic you probably do not want to store salary as a field of instructor why in real life Salvi is lot more complicated if you are in Indian education system under ugc or in the government you have so many parts to your salary you cannot represent it by a single number but this is just a toy example and then you have courses so if you okay your departments in between student and instructor there you have departments again this is grossly simplified for our purposes a department has a name has a building which are again not very realistic our computer science department here lives in three buildings as of now it should reduce to two later on but here we are assuming there is a single building and there is a budget so now there is a department which we already saw and then there are a lot of things linking these things up but before we get to the relationships there are a couple more things which in the ER model would be entities so we have in any university we have people we have courses we have departments we have many more things this is just a small part of what is there at a university so courses in our model is again quite simplified it has a course ID title which is the name of the course of course usually belongs to a department so it has a department name and it has a number of credits how many hours a week or whatever else how much effort is required for that course that's a simplified view in reality courses change over time what is you know cs101 today its title may change next year okay so if you want to keep historical data the schema has to be more complicated this reflects the name of the course the title of the course as of now so again like I said it's simplified a real University schema would have to keep track of history we'll come back to this when we talk of database design so that courses now if you look over here there is something called section so what is the section of course databases is a course but it's offered every year or maybe twice a year or maybe in a single semester we may have two different sections of the same course the section captures all of these it could be called a particular offering of a course is called a section now in this schema that we are using a section has four fields which form its primary key what are they there is a course ID it's a section of a particular course there is a section ID which uniquely identifies the section within a particular semester end here so section ID does not have to be unique across time but it should be unique in a particular semester so section ABC in this year end this semester now again there are many alternatives to this design one of the alternatives we considered was to have a section have a section ID which is the primary key and nothing else in there and then the course ID section ID semester year would be foreign keys referencing other tables again there are design alternatives we picked on this particular design for simplicity so that is a section it is of course associated with the course so course ID here not only is it a primary key attribute but it is also foreign key referencing codes so that is a section now there is a relationship between section and student with this fix a student takes a course but the student actually does not take a course the student is itony a section of the course so the relationship of a student to the course is indirect here the student is taking a course so how do we represent that relationship there is it takes relation with an ID this student this is the idea of the student taking the course and these four attributes are the primary key of the section relation if you had chosen a single section idea to be unique across all sections there would be just a single field here and finally there is a grade now as grade is given at the end of a course so until then what is the value for this field null of course so run I'll value tentatively till the greatest known it is unknown during the semester okay now moving on we have a classroom which says that this section runs in this building and in this room number so we are in this particular lecture hall complex room number one hour and that itself is a foreign key into the classroom relation which also has a capacity we want to schedule classes you want to make sure that the room is beginner this room is big enough for this audience but the rooms which are in the cs building and not we don't have any room big enough for all of you sitting and then we have a relationship teaches between section and instructor so there is a corresponding relation which says that this particular instructor identified by ID teaches this section which is course ID section ID semester those are the fields which identify which section so these five fields together form the primary key of peaches which allows this particular instructor to teach multiple sections of the same course in the same year semester and here is one more relation which is called time slot now different universities organize their lectures in different ways but many have a notion of a slot iit-bombay has a notion of a slot we say that slot one meets on this time on mondays wednesdays and fridays lecture so our two might meet at this other time on tuesdays and thursday so different courses have different slots so a slot has a ID time slot ID it also has a day a start time and end any time actually this is a bit weird so if you look at the primary key of time slot you will see here its time slot ID day ends at time so what is this identify it's identifying not only the ID one but which particular class that same time slot one meets on mondays wednesdays and fridays now why is start time part of the primary key it allows what I'm jumping from SQL into database design here that's okay yeah on the same day it might need more than once so you want to identify it the start time also but anytime is not because with the particular start time it cannot end at two different times now again this could have been done differently this particular design we could have had a timeslot relation where the primary key is time slot ID and then we would have another relation which is when does this time slot meet again we did this partly for simplicity partly just to create a little bit of a complication to show certain things which would be a little harder to show otherwise to show what aspects of what what are the impact of certain design decisions we did this so you could split it into two tables a time slot master and then a time slot detail which is when this particular time slot meets we have two more relations here there is a prerequisite so the database scores in iit bombay as a prerequisite which is the data structures and algorithms groups now in certain places him and IIT Bombay did not bother to record the prerequisites very explicitly earlier on the notion was there bit was not widely used partly because we said that students go through this sequence of courses so they should have done previous course before the next course so when you have flexibility of when students can do what course that you don't have to do data structures in semester three databases in semester five you could flip it around well you can't flip it around so that prerequisite records these dependencies so it will record that this particular course ID which is databases has a prerequisite which is data structures so that's this relation and finally one last relation here advisor which says that this student has this instructor as their advisor a certain can have more than one advisor so in general but in this schema we have restricted it to a single advisor so that's summary of this schema any questions before we wan to example queries oh so now chapter 2 which I will cover in more detail in the main course is relational algebra I suspect most of you would already know about relations ebro anyone here who doesn't know about relation algebra which is not familiar with it nobody who admits to it at any rate so this was a quick reminder of the notation we have the Select operation Sigma which is not the same as the SQL keyword select which is actually the project operation and this example shows some relation and the result of select with a equal to B and D greater than 5 are so I equal to BR that couple that in that so three of these rows satisfy equal to B be greater than 5 is satisfied by these two but not that one so that the final reason so an SQL query uses the select operation internally the syntax is different but many times queries just pick out certain rows from a table then we have the project operator which selects particular columns not roles but columns and this is called select in SQL so this again you must be familiar with we have a table ABC and this project operation project AC on relation are initially would give this now there are actually two versions of the project operator in relation Libre in the standard relational algebra every relation is a set it cannot have duplicates so what you have to do is when you do this project if you see here there are no duplicates in this relation but when we do the projection on AC alpha one appears twice one because of this row and this room and in duplicate elimination is done on this to get only one copy of alpha one this is standard relational algebra project operation but SQL does not work that way for historical reason of efficiency in the past less important in these days but there is a history to these things SQL by default does not remove duplicates unless you say what is the syntax for it select this thing we can tell it to remove duplicates if you don't you get the duplicates oh there are some pop quiz questions which I am not using in this workshop but I may use some of these in the main workshop so if you see these questions there don't bother about them unless i explicitly ask and then the third major operation in SQL is the cartesian product again you are familiar with this so you have two relations rns and the cartesian product matches every row in this to every row here so alpha 1 is matched with all four rows so you get these first four rows and then beta 2 is match with all four rows so you get the next four rows you see this side CD these are the same thing as here you are familiar with that and in SQL where is the cartesian product come in if you use the from clause you say from RS implicitly there is a cartesian product and of course you know that practically speaking you don't want to do the cartesian product it will blow up the size already with two small relations you have a fairly large thing even if you have a thousand tuples in each the output is a million that's crazy so you do not want to do that you want to have a join with some conditions will come to that in a moment then there is the usual union said difference intersection imprudence keep that and let me come to the joint so there are two there are several ways of doing joints but the two primary ways are either using a condition which says which rose match which rose or one of the special ways of doing it is natural join so this is again supported in SQL and in relation gibran both versions are supported as a quick reminder forget the details but we'll just do it through example so we have this relation in this what are the common attributes B and D you see here ABCD b.d.b and the other common attributes so to topple from here matches it uphill from here if their BD values match and since they match we are going to keep only one copy of B and E so B and D come from both the trouble and they have to be the same value so in the natural join be occurs only once BFS only one in SQL if you do a cartesian product what happens bu locker twice d will occur twice so how do you distinguish these two you say r dot b r dot b s dot b s dot d so that's the SQL equivalent so that is a very brief overview of radiation algebra there are this is a very basic relationship but all of you know that SQL all size aggregate operations and humility we would know that the aggregation operation cannot be expressed using these basic operation in general there are some special cases where you can do it but in general you cannot do it using this so there is an extension to relationship bruh which includes what operator there is a G depending on which textbook you use with slide it won't have it here so we have used calligraphic the notation or this other notation is actually becoming a little more standard business which is what is that the Greek letter gamma so group I so we will probably eventually switch over more people are using that than the other one okay so what is that operator do it groups doubles we will see it a little bit later you are familiar with that okay so that's a brief overview of relational algebra [Music]