[Music] Hi guys So today we're talking about a fundamental topic for all those who want to get closer to software development and web applications, namely Rest APIs, we've been talking about them quite a bit for a long time and I actually want to start with this little video that's totally theoretical to understand a little bit about how they work. Why they are used. And what is the concept behind this type of structure. It's essential for us to understand it as best we can to understand how to implement it in any type of technology in odgs in Java in CSP or any eh using any framework obviously you want Then I will use Draw as usual to make a couple of drawings So technically we have two fundamental words One is called Rest and the other is called So technically what happens with these two types of acronym Ok they stand for representational representational state transfer or rather it is an architectural style that describes how web systems should communicate ok And obviously this type of architectural style obviously basically joins the concept of api or eh application programming interface or it is a programming interface of applications or rather an access point and it is a set of rules that allows different applications to communicate with each other Therefore using at most a common language or in any case a predefined protocol Ok In practice What does the rest of the bees mean Ok they allow different systems to exchange information through the internet of whatever nature they may be and see let's see later What are their characteristics And for what reason this type of communication system is extremely important to give a practical example that helps us to understand a little better how the rest of the bees work let's imagine we are in a restaurant Practically we we sit at the table and wait for the waiter to arrive so this here is us so this here is Giovanni so it is the customer who obviously sits at the table Ok just to give a small example so let's pretend that our dish is here So the first thing we have to do is wait for the waiter to arrive so eh the actual menu is the system that offers you the data Ok so basically what happens We go to look at the menu to understand eh What do we want to eat well technically when we have decided which are the data we want to exchange or when we have decided What is the our dish In practice we use In any case we talk to the waiter Ok the waiter is basically part of the restaurant Sorry I transport These elements directly from here and obviously it goes into communication with the kitchen Ok then This is the idea when we decided Eh What do we need practically we treat the waiter like a bee Ok that is I order I give some information or in any case I go to um exchange ok The information with the waiter therefore with my Ipi because I need food basically so what happens I ask the bees to give me a block of information What does it practically mean let's go step by step So when I order a dish ok I'm making a request to the waiter so a request All the more Ok the waiter what does he take the order and transport it in quotes to the kitchen the kitchen carries out my operations technically The kitchen will obviously be mine my Server ok So the business logic of the server then let's delve into a little more detail once he has completed this information so he has finished preparing the dish he returns it to the API and the API it obviously returns to me and so basically what happens we can define the waiter as a means of communication with the customer ok and the kitchen compared to an architecture composed exactly in this way well now it's fine a totally no code example like this which obviously serves those who are approaching the concept of Rest api for the first time we obviously try to transpose within a system of a client server architecture obviously what we have available we have the client which will be our browser ok And then we have the server which will be our Eh our system composed for example of a of a let's say a set of functions that allow us to place an order or have information relating to the weather and so on so basically the server could do any type of thing then the idea is basically exactly this then in our Rest Api how do we communicate between client and server Well obviously we use the http protocol What does this mean in practice let's define an architecture Ok which uses a protocol communication Obviously between the server and the client there is probably internet involved or in any case it is a network we use the http protocol and we define this as an http request Ok let's make a small animation to make it clear what it means so it goes from the client to the server precisely because this type of connection obviously is part of an architecture which obviously provides for a connection and the certainty that we have received our communication and the request must obviously have a purpose or purpose or request data We have another type of communication which must obviously be paired with every single http request which is called http Response And here it is so what we have defined we have defined a communication protocol and this is an extremely important thing for us we can say that for every single http request there is always a single http Response and this is fundamental for us now we have to try to understand a little What is the concept So in the Rest api Ok so what does it mean in this architectural typology we obviously there is something that interspersed with the exchange of information which will certainly be the internet or a network in general understood what the connection is well and we will understand shortly for which reason why the Rest approach is extremely important then and above all the Rest approach relating to the use of the API So what does it mean imagine a composed architecture Ok In this way I do a reversal so in a certain sense Look at the client I take it above the server I take it above below Follow my reasoning basically what happens imagine yourself in one of your applications We are going to develop an application which is also quite complex from this point of view you have a database that takes care of ok A dbms is a database Management System that takes care of the persistence of the data What does it mean that in practice we are going to save our orders the details of the students the details of the customers and so on in quotation marks well immediately above Practically we have another element which is usually called the business Logic or in practice it is everything with which we are actually going to communicate at the level of um in quotation marks of processing that is to say we approach within the business Logic what is my um the brain the fulcrum something that does the processing and which then once it has completed all its processing it goes to pour this data inside of the dbms in here there will be checks and security checks and so on. That is, I'm going to check if I can place the order, I know enough credit. Let's say that depending on the scenario to which you are obviously going to apply, you have this type of solution approach. At this point, what happens? Eh, imagine ok, having to go directly to communicate with the business Logic. Technically, the business Logic is just an engine basically, so imagine, like, the engine, let's see if we can bring it, let's take this one here which is perhaps a little more nice as an operating typology this here is the little symbol of the engine that we have in the machine well technically the actor or Mr. any any person Called Pino for example or Pino Pina as you want practically cannot communicate directly with the business Logic because because this is the engine Ok well technical what happens above the level of the business Logic is put a new level called user interface ok So what is this user interface Look if I'm looking for a sort of language let's make a browser let's see if it helps us Here it is practically all this part above so the part in yellow Ok it's something with which the user so Mr. Pino can communicate directly and this is fundamental for us because then the business logic is defined the blue part our engine the user interface is used to command the instructions or in any case to receive the instructions from the user interface and up to this point we can do nothing in particular define this type of architecture as two tier ok because this here is called tier this is the persistence tier Ok and this here It will obviously be the business logic as the user interface tier so basically I can eliminate these two these two elements we have a composite architecture In two um modes well problem number one So obviously imagine yourself going to develop your type of application especially on this type of interface Well you have to choose eh for example programming language I can choose for example to use as dbms my sequel Ok I can go and use the business logic in to create the business logic in Java ok And I can go and create my user interface in perfect HTML What is the current situation our client arrives the client who commissioned us for our application arrives and asks us Ok perfect We are ready to make a leap in quality we need an application therefore to create an application Ah well so basically what can we reuse from this Eh guys practically The only thing we can reuse from this type of approach is only the dbms ok Why Because the business Logic and the user interface are practically glued together In fact if you pay attention they are exactly A single block ok And in fact if we see what happens inside the servers this whole application is released on a server imagine that the communication and the dbms It could even be on another server divided by what If I look for example for an internet cloud Ok well this type of subdivision could be done exactly in this way So Paradoxically I could have the database in a place totally different from where my application resides and therefore this becomes a bit limiting well So at this point let's try to understand that there is another type of approach and it is Here the Rest architectural approach helps us and the use of the API to support this approach and therefore this problem that we want to solve practically what we do Let's go and redesign our scheme Look and zoom in a little because I will have to go to work A little more in detail Then the dbms will always serve us therefore the database Management System in this in this case we have chosen ok my sequel look at it I'll write it directly below Then the dbms will obviously be the database management system I remind you My sequel and the dbms in this case that we have designated then what happens So this here will be the first tier Ok So the database tier Ok we already make a good subdivision thanks to what we discovered before In any case we understood first what we do Well we necessarily need business Logic because we necessarily need business Logic because technically it is what goes to make the calculations ok So everything that has computational capacity and therefore is let's say we can take it with kid gloves Eh heat-reflecting but this element in here is the core of our application that is, what has that minimum intelligence to carry out the operation Attention It is not an intelligence it does not have a customer focus with artificial intelligence Ok well we could do this here for example in Java we said I will put the business Logic in bold so we have it as a reference So obviously I am going to make this double connection because data is exchanged Ok If I ask for information from the business Logic of the type Give me the patient who has the tax code PC gnn Ok I'll ask it from the database ok The database will have to answer me that's why there is the double the double arrow this one here obviously we call it this second tier we call it business Logic tier ok and it obviously takes its name from its type from the category of module we are using Perfect So at this point what happens Eh what we had done before was practically apply the user interface Ok so user interface in html in this case as we said before directly to this block But the idea is good imagine wanting to make another type of user interface which in practice is developed For example in cotlin for Android Ok let's pretend like this ok and in Look I actually want to make another one because there are two applications for example Swift for iOS I'm not dealing with the iOS world at the moment So this thing could already be deprecated you see There are a bit too many In fact these three technologies cannot therefore become Eh let's say incompatible with the business Logic developed in Java So what was the main concept of an architecture 3 tier on which obviously our Rest is based so the Rest architectural style I take These elements which are totally separate elements for what reason Well because the user interface in HTML is an access point on the web so as if it were a website and these two are practically applications for smartphones ok So you see These are three types of applications Look let's do it like this I can put it directly below exactly the same thing I can create it from this point of view Ok perfect So at this point the browser will also be this element here and I put the user interface in it HTML I like these little icons a little more so they are three totally different technologies You see well however the servers Ok that we have available are always one and two you see this this will certainly be found on another server on a web server Ok that is what we are going to develop then going further on but these are just totally devices they are not web servers so Look what happens Mr Pino who we talked about before basically what could he do Eh you can go Let's do Mrs Pina this time she can go and talk to the website but she can have for example his phone which will be an Android phone and therefore access in two ways or even in three ways for example his company phone is an Ios And so at this point what happens how do we connect all these elements with the business logic in Java well technically the Logic cannot speak directly with these three totally and formally very different technologies well We use Ok a word that we have already heard by now which is called api what does the api basically the epi is a communication mechanism so you remember the story of the of our waiter from before is a universal communication mechanism that interfaces with practically all these technologies so let's pretend that this is communication with this This is the one that goes into communication with this and this obviously goes into communication with my user interface So what have we created Well guys technically we have created a sort of communication mechanism that speaks a universal language in quotes Ok that allows us to switch or in any case to change technology when it serves us basically well So imagine having another type of application So I want to completely redo the website so I delete this type of application Ok I want to develop it with a very famous framework like for example the one called angular Ok Excuse me I'll do some alignments because it's quite nice well I want to develop it with a new framework called angular Look I'm going to develop my user interface using angular fine The only thing I have to do is simply go and communicate exactly as before ok with my api Ok so what do I have to provide to the developer I have to provide instructions on how the API speaks to allow communication for example with this new system and therefore Mrs. Pina will also be able to use this asset so this here we can call this last tier the user interface tier and here we have divided Look we have created an application called three tier because because there are three levels the database level the business Logic and then the user interface I hope it is clear enough this you know why it is extremely useful for us well because this type of architecture Ok in the meantime it makes communication universal guys This is bidirectional because communications are obviously done in everyone and in both ways we agree but the most important thing is this then a universal communication mechanism is defined with all the applications of the user interface tier Ok this format at least for what we will see We are called Jason Ok I use curly brackets for a very specific reason In fact I put it here Just to make you understand we will see it in a bit as a transfer method So every single communication both incoming and outgoing must be encoded in json and we will obviously use the http protocol This is a fundamental thing for us which, however, is very useful for us to understand is that this type of structure that I am obviously going to simplify on the other side because by now we have understood a little How it works Look also by simplifying it under this eh using Look at another element which will be for example the user interface made in HTML Ok I'll only take one because we have understood a little How it all works So communication with the pii allows me to do this then well what I find above is totally independent because I can change it I can change it in a cotlin application in an iOS application in flatter I can do I can use angular bla bla bla But the idea is this if a new development team arrives for my application usually the applications last from 2-5 years in terms of maintenance and it says okay what you wrote in Java um it was fine until now Ok now what do I want to do I want to change this block here the business Logic and I want to rewrite it what happens which is basically as if I put it aside I rewrite a new application that has the exact same information or the exact same data exchange as the API guys don't is that I reuse the part of but the important thing is that I know that it always communicates in the exact same way and I rewrite this here as business logic for example written in CSP ok and I have totally changed technology at this point I can eliminate my business logic in Java you see and I talk to the dbms exactly as before so what happens a 3 tier architecture ok allows my user interface to never notice Ok about that what happens practically behind I could change the database I could create a type database for example sequel Server ok So from Microsoft or other posts gr sequel or Mongo DB even a totally technological leap the important thing is that those who are obviously on the next level are totally independent and don't notice practically anything so already this type of application is fundamental for us to put it like that in quotes is a bit simplistic because because actually we're not just talking about technological independence because I return for a moment to the previous design where we had a to tier application well imagine something happens to our business Logic Because let's say we haven't been very good and perfect programmers a bug happens it happens to everyone basically our business Logic crashes well technically what happens obviously the server also crashes and therefore since both elements are on the same Crus server this module too So what does it mean that Mr. Pino basically can no longer carry out No communication because the application has crashed it is no longer reachable OK and so basically what happens that I practically see a blank page a 404 a 404 error or a 500 error Even so let's say it's a bit bad at an operational level well reporting this exact same example from here What happens if Mr. Pino goes to speak in quotation marks with our user interface ok and imagine that obviously our business tier Logic crashes What happens Mr. Pino manages However you see he can reach the user interface in HTML so basically he has At most a small alert which basically tells him attention our services are temporarily unavailable and therefore in a sort of courtesy page which helps us to understand that the service at this moment it is not reachable which is the attention equivalent of the exact same thing that Amazon does for example when the application doesn't work or it doesn't take your phone You see a sad dog that tells you something has gone wrong which is different from seeing a blank page and not knowing what is happening Ok so this level of isolation this process of isolation For us it is fundamental because it leads us exactly to also have this other type of value on the 3 tier architecture [Music]