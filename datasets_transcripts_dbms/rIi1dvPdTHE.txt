hi everyone welcome to another video tutorial on SQL by simply Loan in this video we will discuss an advanced SQL concept called triggers we will learn what triggers are and how they can be used to solve problems we look at how trigger queries are written on my SQL bug bench so let's get started first what triggers an SQL so a trigger is a userdefined SQL command that is invoked automatically when an event occurs an event can be related to inserting updating or deleting records in a table in MySQL triggers can be executed automatically by the Oracle server below is how the syntax of writing a trigger is so you write create trigger followed by the trigger name now the trigger name should be a valid SQL name then we have the trigger time the trigger event and then on the name of the table then we write for each row begin followed by the list of SQL statements and finally we write end now in the syntax the trigger time represents either before or after an event and a trigger event can be an insert update or delete operation now let me take you to my SQL workbench where we will learn how to create triggers and Explore More on how it works if getting your learning started is half the battle what if you could do that for free visit scaleup by simply learn click on the link in the description to know more so I am on my SQL workbench so first let me go ahead and create my connection I'll give my password all right now this will take you to my SQL editor okay so first and foremost let me create a new data Base called triggers so I'll write my SQL command as create database triggers let me run this okay so you can see here one row affected I have created my database that is triggers next I'm going to move inside this database so I'll write the command use triggers let's run this okay now inside this triggers database we'll be creating our different tables so let's check if we have any tables I'll use the command show tables now you see there are no tables in this database all right first let's see how before insert trigger works so for before insert trigger we'll create a table called called customers and verify the age of each customer so I'll give a comment before insert trigger so let me go ahead and create my customers table I'll write create table customers and I'll give my column names as custor ID which is customer ID this is going to be an integer then we have the age of the customer this is again an integer and we'll have the name of the customer the name of the customer will be of varart type I'll give the size as 30 all right let's create this table okay so we have successfully created our customers table now moving ahead I'm going to write my before insert trigger command so we'll start with a D limiter so a d limiter is a marker for the end of each command next I'll write my create trigger followed by the trigger name I'll give a valid trigger name such as _ verify I'll write before trigger it should would be before insert on my table name would be customers then I'll write for each row if new DOT each is less than zero then set new. AG equal to 0 which means while inserting your values to the age column in case the age value is negative we'll convert the age to zero I'll give a semicolon and then I'll write end if I'll give another semicolon and I'll close the delimer now let me run this okay so we have created our trigger now let's insert a few values onto customers so I'll write insert into customers values 101 which is the customer ID I'll give the age as 27 and let's say the name of the customer is James let's insert another record give the value as 102 and this time I'm purposely giving the age as minus 40 Which is less than zero so that you can see the output clearly I've given the customer name is Amy let's insert two more records the customer ID with 103 has an age of 32 and let's see the name is Ben I'll give another comma and finally we'll insert our fourth customer record the customer ID is 104 the age I'm giving as minus 39 Which is less than zero again and let's say the customer name is Angela all right now let me run this okay so we have successfully inserted four rows of information to our customer table now let's see the difference since we had created a age verifi trigger which would change the values of the each column in case the each value is less than zero so now that we have inserted four records to a customer so let's see what we have in the customers table now let me run it there you go so if you see this for those customers where the age was less than zero such as 102 and 103 you can see here our trigger has automatically converted those values to zero if you can see the trigger we had created we had set a new age to zero if the age was less than zero and this is the output we get so here we looked at how a before insert trigger works all right now moving ahead let's understand how and after insert trigger works so I'll give a comment here as after insert trigger now in this example we'll create two tables customers and message now the trigger will be fired if the birthday column has a null value in the customer table you will get a message to update your date of birth okay so first let me create my customers table now since we already have one customers table I'll name it as customers one and let me give the column names so the First Column would be the ID column this is going to be an integer and I'll use the autoincrement parameter and this will be my primary key as well next we'll have the name of the customer this is going to be of type varar and I'll use not null constraint next we have the email ID of the customer this is again going to be of varar type and the column we are interested in is the birthday column so I'll write birth date this is going to be of type date okay so let's create our table all right now we'll create our second table which is going to be message let's create the columns this will have ID int and I'll use the autoincrement operator next we'll have the message ID this is going to be of integer type we'll have a column called message this will be of VAR card type let's say 300 characters and not null and I'm going to set my primary Keys as ID and message ID let's create our second table then so we have some error here let's debug the error okay so I forgot to close the bracket here all right now let me run this table all right so we have created our message table as well next I'll write my after insert trigger command so I'll write delimiter next I'll use create trigger command so I'll write create trigger my trigger name would be check uncore nullcore date of birth after insert on customers one for each row begin if new DOT birth date is null then we are going to insert into our message table we give the columns as message ID and message values new. ID comma I'm going to use the concat function where I'll give my message let's say hi followed by the name followed by let's say please update your date of birth okay now I'll write end if I'll close the delimiter okay so let me go to the top and recheck if you have created a trigger correctly so I have my trigger name after insert on customers one for each row begin if our new birthday has a null value then we'll pass in a message saying hi the name of the customer then the message would be please update your date of birth all right so let's run the trick trigger okay now the next step is to insert a few records to customer table so my name of the table is customers 1 okay I'll give the column names as name email and birth okay we'll pass in a few values so our first customer name let's say is Nancy comma I'll give my email ID let's say Nancy atate abc.com now let's say I'm purposely passing the date of birth as null I'll give a comma my next customer let's say the name of the customer is Ronald and then I'll give the email ID such as Ronald at theate xyz.com and this time I'm going to pass in the date of birth let's say 1998 November and let's say 16th okay now we'll add another customer let's say chish we'll give the email ID of Chris so Chris at the rate xyz.com and let's say we'll give the date of birth as 1997 0 08 20 and finally We'll add one more record for another customer let's say Alish I'll give the email ID as Alish atate abc.com and this time I'll purposely pass the date of birth as null all right so let's run the insert query okay now let me display the message table for you so that you can see the output and how our after insert trigger works there you go so if you see this we had inserted four rows of information out of which the first customer ID and the fourth ID had null date of birth so for those two values you have the messages hi Nancy please update your date of birth and then you have high Alys please update your date of birth now you can give a space between High and the name of the customer all right now moving ahead let's understand how before update trigger works so I'll give a comment here as before update okay now to show you how before update works first we'll create a table called employes all right so let me create my table that is create table employees I'll give my column as employee ID this is going to be an integer type and it will be my primary key next we'll have the employee name this will be of varar type and let's say the size would be 25 comma then we'll have the age of the employee age will be of integer type and finally we'll have the salary of the employee salary will be of type float let's create this table all right now the next step is to insert a few records to our employees table okay so here on the notepad I have already written my insert query so I have inserted nearly seven records so let me paste it here all right I'll just go ahead and run this insert query so that we'll insert seven employees to our table okay next we'll write our before update trigger command so first and foremost I'll write my D limitter followed by the create trigger command I'll give my trigger name as update uncore trigger let's bring this to the top okay I'll use before update on my table that is employees for each row I'll write begin my condition would be if new DOT salary is equal to let's say $10,000 I'll write then set new do salary equal to $85,000 I'll give a semicolon then I'll use Els if new do salary is less than $10,000 then I'll set new DOT salary to let's say $72,000 I'll give a semicolon I'll end the if statement I'll close the delimiter by giving a semicolon okay so if you see the employees table we have the salary values here now in case while updating the table if the salary is equal to $10,000 we'll set the new salary to $85,000 else if the salary is less than $10,000 we'll set the salary column values to $72,000 so let's go ahead and run this trigger query all right now let me use my update command so I'll write update employees I'll write set salary is equal to let's say $88,000 now if you see our trigger query we are setting the salary to $8,000 which is clearly less than $10,000 so our new salary would be $72,000 so let me run this okay okay so you can see here six rows affected so I'll write now select star from employees let's run this okay if you see this we have converted our salary column to $72,000 since we updated the salary to $88,000 and according to our trigger query if it's less than $10,000 the salary should be $72 ,000 which you can see here all right now moving to our final demo this time we are going to explore how before delete trigger command works so in this example we'll create a table called salary we'll store the deleted record in a new table using the before delete trigger so first I'll give my comment as before trigger comments are always useful since they make your query more readable so let me now create my salary table so I'll write create table salary I'll give my column names as e ID which is employee ID and I'll set it as primary key comma I'll give another column let's say valid from which means the date from which this salary was effective this is going to be of type date and not null and then I'll have the amount amount will be of type float and again not null constraint let me run the create table command okay so we have created our salary table now the next thing is to insert a few values so I'll write insert into salary I'll give my column names as Eid comma valid from comma amount I'll write values my first employee ID would be 101 followed by a date let's say 2005 May and 01 which is 1st of May 2005 let's say the amount is $55,000 I'll give another row of information this time the employee ID is 102 and I'll give a valid from date let's say the amount is 68,000 I'll give another employee ID let's say 103 2006 0901 and let's say the amount is $75,000 okay let's run this all right you can verif also so I'll write select star from salary you can see here we have inserted three rows of information all right the next step is to create another table that will store the deleted rows so I'll write create table let's say the name of the table is create or let's say salary delete I'll write salary deel now this will have the ID the type would be integer and primary key I'll also use the autoincrement operator next we have the Eid which is of type integer I'll write valid from date and not null then I have the amount column which is of type float and not null my final column would be deleted at the data type will be timestamp I'll use the default constraint as now so this will return the time and the date at which the record was deleted all right let me create this table okay finally let me write my before delete trigger command so I'll first declare my delimiter let's say this time I'm using the dollar symbol I'll write create trigger my trigger name would be salary uncore delete before delete on my table that is salary for each row I'll write begin next let's insert into salary delete I'll give my columns as employee ID valid from and amount now we'll insert a few values I'll write values Old Dot Eid comma Old Dot valid from comma Old Dot amount I'm going to close with the delimiters all right so let's run our before delete trigger all right now let me go ahead and delete one of the records from the salary table so I'll write delete from salary where employee ID is let's say 103 let me run this query okay so you have successfully deleted one of the records in the table now if you see our other table that is salary delete you will find this information present in the salary delete column so we had deleted one row of information that is for employee ID 103 which you can find it here now the final column that is delete at shows the time at which the information was deleted or the row was deleted all right so let me go to the top and just give you a recap of what we did in this demo so first we created a database called triggers then we started with before insert trigger where we inserted customer table and then we verified the age of the customers so we saw if the age was less than zero then we set the a to zero we inserted a few records to the customers table and and purposely we inserted some negative age records and then we converted this age records to zero then we learned how an after insert trigger works so we created two tables customers 1 and message so wherever the customer's date of birth was missing we passed in a message saying hi the name of the customer please update your date of birth all right now moving ahead we saw how before update trigger works and finally we learned about before delete trigger all right so that brings us to the end of this video on triggers in SQL I hope you liked it if you have any questions then please feel free to put them in the comment section below thank you for watching and keep learning hi there if you like this video subscribe to the simply learn YouTube channel and click here to watch similar videos videos to nerd up and get certified click here