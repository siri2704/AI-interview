database relations are of mainly three types one-to-one many-to-many and one-to-many the relation which is shown my accrual egg-shaped it's called many in this example employee contact an employee account both are plain sided so one employee contact can have one employee account in many-to-many both side has shown microchip many writers can write many books one-to-many one-sided explain in other side it is shown by a crow leg shape one customer can have many orders nats one-to-many example one-to-many radition this is the most widely used among the three relation types in the database system we are looking at an example of customer and an order one customer row can be linked many orders but one order row can only be linked to a one customer that's one-to-many relation we will see in the example relationships in database means we will have more than one table there are two tables customer table and order table both with the primary key attributes of customer as a primary key of customer ID and order has a cram primary key of order ID we need to link them one way to link them is to add to the order table to know which order was made by which customer it can give the output the output of this data table will be write in a way but it is two problems it is violating normalization form of database which is a big no-no in database other thing is that it's data redundancy think there is already a customer table and that contains all properties so data redundancy slows down the process of database which is which is again a big no-no for database so what we can do in a one-to-many relationship and linking them we will make absolutely no change in the one side of one-to-many relation which is customer and we will add a column to the many side of the table which is order here taking primary key of the customer table and adding it to the order table which will act as a foreign key now foreign key just to remind you this primary key numbers cannot be repeated but foreign key numbers can be repeated that's all we will create the link between one-to-many table now the tables are linked by the virtue of foreign key foreign keen is the primary key of the customer table we can see from this table if we need to know how many orders were made by two zero one customer we can see from the order table it's three two one zero three two one six and three two one seven three orders were made by a customer two zero one and wise first we can find the details of the owner of the order in this table customer is the one side and order is the many side one customer can can have many orders but one order cannot be made by many customers like order number three two one zero cannot be made by many customers it can only be made by one customer another example customer 2:02 has two orders with the help of two tables we can find the order details of any customer or customer details of any order in this case and both tables are linked by foreign key many-to-many relationship we'll use the example of writer and a book a writer can write many books and one book can be written by many writers on both N side there's a many-to-many situation example we have a table of a writer and a book writer as a primary key of writer ID book as a primary key of book ID it cannot be linked with the foreign key because it will only consider one side as many and one side as one there's no chance of linking the table the other way of showing it many to many is that adding call adding values by separating them by comma which is a violation of first normal form which is a big no-no in database the way we join many too many tables is by linking table linking table is table which only contains primary keys of both the tables linked by many to many relationship like in this example 2:01 has written two books C 0 1 and C 0 3 it is shown in linked in table like YC 0 for the book is written by two writers 2 0 2 and 2 0 3 so that's how the many-to-many relationship is shown by a linking table there is no other way to show this table not even foreign keys so we do not have use of foreign key in many-to-many relationship unlike one-to-many one-to-one table that's the least used relationship in the database table but it is used so it is important that we go through it one-to-one relationship can be best explained by the example in this example there are two tables employ table and employ account in this example one employee can have only one bank account and one bank account can only be related to one employee and one employee only this is called one-to-one relationship like other example one student can have only one student ID and one student ID can only belong to one student that's another example of this that's one-to-one relationship although very rarely we find this mostly the situation when one-to-one situation occurs there is a tendency of merging the table that's the tendency that is that are used by database developers