[Music] hey everyone Stio here Uh welcome back to the channel where we uh break down data architecture and everything in between If you are into database and tech make sure to hit that subscribe button here below like this video and share with your uh data mates Today we are diving into the uh world of databases Uh but not just any databases Look at that There are so many types uh relational graph uh time series no help vector blockchain and more But what do they all mean and more importantly when should you use uh one over another stick around and we unpack all the different kind of databases explore real world use cases and help you to choose the right uh tool for your datadriven uh solution Let's go Here we are Now it's the time of hierarchical databases So what exactly is an hierarchical database well uh data is stored in a treel like structure Think of it like a family tree or an organizational chart where each record as a single parent or potentially many child records This one to many relationship uh makes uh it perfect for organizing data in a structured way As you can see in uh the tree diagram the parent node uh holds the main data and the child nodes store uh related data This hierarchy uh is especially useful when there is a a natural one to many relationship between uh uh pieces of information For example a company might have one parent node for the entire organization uh with child nodes representing different departments teams or employees Hierarchical database are commonly used in scenarios like organizational chart exactly where each department has a manager and every employees is part of the team uh they are um also ideal for file systems where files are stored in folders and subfolders in a clear hierarchy One of the most famous example of a hierarchical database is IBM information management system which has been used for tickets and uh in industry like banking and telecommunications uh to store uh large structured data in a three-ike format Another famous application that has historically use an hierarchical database is a line reservation system For instance in these systems flights are organized in a hierarchical structure I lines at the top of uh top level uh followed by the flights roots and then uh specific flights uh instances Each piece of information is linked in a parent and child relationship ensuring quick access and clear organizational flight data So to write it up uh hierarchical databases are great for storing data in a tree structure uh with one to many relationship uh they often used in organizational chart uh file system and legacy systems with a sample like IBM IMS and line reservation systems making the most of the hierarchical design All right moving on to the object oriented databases Uh so what exactly is an object oriented database well uh as the name suggest um these databases stores data as objects just like the objects in objectoriented programming If you are familiar with object oriented programming languages you know that an object is a collection of both data which is attributes and functions uh which are the methods that operate on the data In an object oriented database uh data is stored as a object that directly mapped to the application's code This is different from the normal uh datab relational databases where data is stored in in tables and you need to map it back to uh your objects Uh with object-oriented databases the structure in your database mirrors the structure of your code uh making the data retrieval much more straightforward Object-oriented databases are particularly useful for storing complex data structures like those used in simulation graphics and applications that need to work with uh rich interconnected data A famous example of an application that uses an object-oriented database is embedded systems In modern cars for instance systems like u navigations need it's to store complex data structures such as engine um states or GPS uh location An object oriented database allows these systems to map real world objects uh like vehicle parts or roots uh directly to the database simplifying development and uh improving efficiency So to summarize object-oriented databases store data as objects aligning perfectly with the uh object-oriented principles programming principles They are ideal for application requiring direct mapping between the database and application objects such as uh u in automotive embedded systems or simulations uh and the popular examples includes object DB DB4 uh and yeah others Good All right So let's go ahead to talk about the graph databases So what exactly is a graph database well as uh the name suggest um graph databases store data in uh the form of graphs Um but what does that mean uh in simple terms uh data is represented as nodes entities and edge um relationships These graphs make um make it easy to model and analyze compress uh relationships uh between different data points Imagine you are trying to model uh a social network Uh each person in the network is a note and the relationship between uh them like friendship or followers or connections are represented as h The power of uh these databases lies in their ability to quickly reverse these relationships allowing uh for very fast queries on complex data Graph databases are perfect for scenarios where relationship relationships between entities are crucial Uh this includes application exactly as we already said in social networks where you need to analyze connection between users or maybe also fraud detection uh where you need to identify suspicious relationship or behaviors and personalize recommendations where you analyze user preferences to suggest u products uh or content Some popular graphs databases includes Neforj uh Amazon Neptune and augmented DB These databases are built to efficiently store and uh query graph data A famous application uh that heavily relies on graph databases is linking LinkedIn is essentially a massive professional network and graph databases are perfect for modeling the complex relationships between uh users uh such as connection job recommendations group memberships and more LinkedIn use a graph database to help users discover connections recommend jobs for instance and uh even show people you may know uh based on existing uh network your existing network To summarize graphs databases are designed to store and analyze relationships between entities using uh nodes and edges Um they are ideal for use cases like social network uh fraud detection and personalized uh recommendations examples like Neo forj Amazon Neptune uh and LinkedIn shows um how powerful and versatile graph uh database can be And that's wrap on today dive into databases Uh I hope you find this breakdown helpful Uh if you enjoyed this video uh don't forget to hit the uh like button subscribe uh and turn on the notification bell Also let me know in the comment um section down below what's your favorite database Thanks for watching and I'll see you in the next one Stay curious keep learning