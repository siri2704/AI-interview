let us see if you have an uh ER diagram or entity relationship diagram then how can you convert this entity relationship diagram into a relation and when I'm saying a relation relation means we are going to convert it into a table so you know what is an entity set so first uh step is if you have an entity like this for example here employee is an entity and here employee number employee name and salary they are the attributes of this entity so you can say an entity set is mapped into a relation that means this entity is know mapped into a relation or you can say it is created as a table and the attributes of the relation including the attributes of an entity right for example here the attributes are employee number employee name and employee salary they will become the attributes inside this table and if there's a key attribute in an entity that key attribute becomes the primary key of this table so if you have a simple entity like this the simple entity can be converted to a table like this right so you can say for every entity in the ER model we have to get a relation in the relational model and this is also called as a relational model okay now let us check check out the next one now if you have a multivalued attribute in the previous case if you have a multivalued attribute then those multivalued attributes should uh be included in the table so we are not actually going to include them as it is we are just going to to in include the compositions of those uh sorry uh should not be included so that uh should not be included that should be there so we'll be dealing with the ulti Val attribute at later point of time so right now just assume that if we have a composite attributes composite attributes means the attributes which can be broken further for example you can see the salary can be broken into da basic da H Etc and the salary is representing a composite attribute so you can say if you have a composite attribute then you don't include that composite attribute you just include the compositions so you can say in relational model don't represent the composite attribute as it is just take the composition like here salary is a composite attribute but the compositions are da basic da and H these are the compositions of salary in the same way if sometimes we have a name and there are compositions of name are first name and last name then we are not going to include name in the relation or in this table we are going to include the compositions of name that is uh you know the first name and the last name and the attributes of relation includes the simple attributes for any entity okay for example here you can see this is a employee number was a simple attribute employee name was a simple attribute salary was a simple attribute in the same way here e e number is a simple attribute e name is a simple attribute but here this ta is a simple attribute salary is not a simple attribute because it is a composite attribute basic is a simple attribute ta is a simple attribute and H is a simple attribute so we are going to make this table the name of this table is employee right and in employee we are having employee number employee name basic ta da and H and you can see the primary key for this entity is employee number so that will become a primary key into this U here in this case also okay now check this out here saying that entity set with multivalued attribute if you have a multivalued attribute like we see uh sometimes it can happen then you are having multiple values for a student if I take an entity as student as an entity a student can have role number a student can have a name that can be further divided into first name and the last name a student can have a phone number now this role number should be included in the relation because this will become a primary key this first name should be included this last name should be included but we do not include the phone numbers why because phone number is a multivalued attribute multivalued means a student can have more than one phone numbers and we don't include multiple values because if you're are going to include multiple values then we are going to repeat lot of values for example if you can see if I have a student RAM and RAM is owning three phone numbers then what can happen this is role number this is Ram sorry this is first name this is last name and this is phone number so assuming rule number is one student name is Ram first last name is KR and the phone number is 9821 something again rule number one ram last name is KR phone number is 9560 something again phone number rule number is one ram KR again phone number is 9912 something right so here you can see if you're going to include multiple values and because of these multiple values you are going to have lot of duplicate attributes and because of these lot of duplicate attri duplicate values or you can say duplicate records we are going to waste lot of space in the relation or you can say the table so that is why we do not include the multi multi you know multivalued attributes in the relation we create a separate table for the multiv valed attributes therefore we so that we do not waste the space so here you can see the employee number is uh the primary key or you can say it is a key into this entity we have employee name and we have City now if we discuss about this particular city the city city is a multi attribute because an employee can live in more than one city so here we are going to create a separate table and into this separate table we are going to make this employee number as a foreign key that means uh uh this employee number will be referring to this employee number in the employee table because if if there's a value here if there's a value here then only we can insert a value here and this will save us from repeating lot of values or lot of attributes so we are going to make two tables because of this for this multi valed attribute we make a different table we do not include the multi Val attribute in the original table itself because that will lead us to lot of repeating values so if you have an employee create the use the simple attributes or the compositions and the primary key into this table if you have a multiv Val attribute for that multi attribute create a different table okay now let us see how to translate a relationship into a table like you have this is this complete is a big relationship into this relationship we have uh you know this is this is representing work scen is a relationship we have entities as employee we have entities as department and work in relationship is having an attribute since that means a employee is working in a particular department since what time okay so in this case a relation ship set is mapped into a relation and the attributes of the relation includes key attribute of the participating relations are declared as a foreign key to the respective relation descriptive attribute is if any and set of non-descriptive attributes is the primary key of the relation so what do I mean to say here by this is here you can see what is the relationship here Works in is the relationship we can easily create a table for this that we have created here we can easily create a table for for this that we have created here but here you can see the work scene is a relationship and this relationship is having an attribute for a relationship you have to create a separate table and this table will be containing a foreign key from both the t uh relations both the entities which are participating in the relation for example we have employee as an entity and the uh the key of this employe is employee number and we have Department as an entity and the key of the department is Department ID so we are going to include them as a foreign key here and we are going to add this attribute here so by this way you can easily convert this complete relationship into a relation right in the same way uh you can convert this entity as a Rel as a relation and you can convert this department as a relation see I'm repeatedly I'm using a term something called as relation and this is something called as relationship so both these terms are different when I'm saying relationship relationship is like this works in is a relationship and when I'm saying relation relation is this table so this relation is a formal term and table is an informal term in case of relational model okay now let us check this out here they are saying how to convert a relationship set with a key constant with a key constant you can see here in this case it is uh here this side is having the maximum cardinality as one and this side is having the maximum cardinality as many so here you can say this relation is as one to many relationship okay we have already done this kind of examples before now each department is required to have at most one employee as a manager so for this if you can easily create uh you know uh the relationship uh sets that means uh each department is having at most one employee at most one employee means maximum one employee is required right or less than one is also acceptable like zero is less than one so here for this employee you can easily create a table for this employee that we have created you can easily create a table for this department that we have created but here this manages relationship is not having any attribute not having any any attribute so if it is not having any attribute then we can what we generally do is we create uh a table for this employee we create a table for this department and we create a table for this relationship but because it is not having any attribute so there's no benefit of creating this table like this so what we do is we combine this relationship table with this department entity table because because here you can see what is the minimum what is the maximum cardinality of Department that is one what is the maximum cardinality of Department that is one right and because it is having the maximum cardinality as one or you can say it is having the key constraint it is having the key constraint this is the reason why we can combine both of them and when we are going to combine them the main reason of combining them is because uh we want to have as minimum duplicate values as possible that means we want to reduce the Redundant values or you can say redundant records from the table so even if we combine both of them still we are not going to have a lot of redundant values because of this key constraint okay because of this because uh the maximum particip maximum cardinality of department is one okay and the maximum cardinality of employee is m so that is many so the relation is called as one to many here in this case okay so now let us take a few example here in this example I've uh created some relations and the top I wanted to ask you if you are going to convert these relations into uh this relationship this complete AR diagram into a relationship then how many tables you are going to require how many tables you are going to require so so so take the first example in this example if you're going to convert this as a table uh or relation then you're going to require the first table for this uh you're going to require one table for this or you can say one relation you're going to require one relation for this or you can say one table and for this relationship you are going to require one table one table but here you can see but here you can see it is having the key constraint it is having the key constraint right because the maximum cardinality of B is one that is why you can combine this table for this relation and the table for B so you can combine these two tabl so in minimum you are going to require two tables only two tables only one table is for this and second table is for this you're going to require two tables only okay so the attributes in these two tables will be like this in the table a the attributes will be A1 and A2 where A1 is a primary key or you can say uh A1 is the key attribute in the table B we are going to have the attribute as B1 and B2 and we are going to have the attribute as A1 and this A1 will be acting as a foreign key which is pointing to this A1 okay so we are going to have these two tables now if you check the next relation it is a many to one relationship and here you can see there's a key constraint here there's a key constraint here it is the same thing we are drawing the above table uh above one like this only I'm not showing any attribute so here C can clearly see that we are going to require only two tables to convert this uh ER diagram into a relationship now in the next table you can see it is many too many uh many to many because here here uh it is many cardinality here it is many or you can say cardinality is more than one maximum cardinality is more than one in both the sides in both the sides we are not having uh you know any key constants for this purposes because of a we have to create a table for a table for this entity a we have to to create a table for this entity B and we have to create a table for this relation R so there are at least three tables required because there are no any no key constraint there are no key constraint but here in the next in the next diagram you can see that there's a key constant in both the sides that means the maximum cardinality is one in both the sides or you can say it is a one to one relationship it is a one to one relationship now in this one to one relationship we are going to require two tables we are going to require two tables number one uh the first first table either you can combine A and R so first table can be combined made use you can make the first table by combining A and R and second table can be b or or you can do something like this the first table is only a and second table will be combining B and R so we are going to require only two tables two tables to convert the following relation uh relational uh ear diagram to the relation okay now let us take more examples uh after this let us take these example let us see how can you convert how many tables are minimum number of tables are required to convert these ER diagrams so take the first diagram here you can see that it is a one to many relationship because we are having a key constraint here and we have already done this kind of example so uh we already know that for this example we require two tables only and what are those tables in the first table we are going to combine uh we are going to have a we are going to have a and and because there's a key concate at this side so you can make it a A1 A2 we are going to have this one and because there's a key ConEd at this side uh so we are going to have okay so I did a small mistake here let me correct it out I did a small mistake sorry guys uh fine so here it should not be like this it should be like this because both examples will be same sorry it should not be like this hm right now it is representing a one to many relationship okay one to many because here you can see the maximum cardinality for B is 1 and the maximum cardinality of a is M so you generally write it like this so it is one to many uh one to many uh ear diagram or you can say one to many relationship here you can see we are going to require two tables and the tables will be like this the first table generally generally what happens is generally what happens is we make three tables one table is is for a one table is for B but one table is for relation R but because it is a one to many relationship therefore for this one toan relationship we require only two tables all these information can be stored only with two tables the tables can be like this the first table will be a which will containing A1 and A2 where A1 is a key attribute and the second table will be for B and R for this combining B and R so it will be having B1 B2 and A1 where A1 is a foreign key and this B1 is a uh you know uh Prime attribute you can say it is a key attribute here now if you check the second diagram in the second diagram you can see it is a many to one relationship there's a difference between above one and this one so just the difference will will be there in while combining the relation and the entity so you can make a r as first table and it is having an attribute A1 A2 and B1 where B1 is acting as a foreign key and A1 is acting as a key attribute and the same we are going to have the second table which is containing B1 and B2 and B1 is a key attribute right so this is uh this is you can how you can uh convert this ER diagram into a relation if you check out the third diagram you can see we are having uh two A1 A and B these are two entities and this is a many to many relationship right it is a many to many relationship and cardinality maximum cardinality of a is many and maximum cardinality of B is also many so you can see for this a a we can create a table that is A1 and A2 and for this B we can create a table that is B1 and B2 in a in the table a A1 is the uh you know it is the key attribute and in the B B1 is the key attribute okay and then for this relation because there a many to many relationship we have to create a table for this relation and we'll be having A1 and B1 A1 and B1 as the key attributes that is these are the foreign key to their respective relations right so if we have a many to many uh relation like this then we can use this okay now check out the next um diagram here they are saying this is having one to one uh one to one relationship in both the directions so if you have a one to one relationship then in this case we are only going to require two tables we don't require more than two tables and for these two tables either you can combine this a with the relation R so we can make a table a r which is having the attribute A1 A2 and B1 and the second will be the table B which is having B1 and B2 this is one way of creating the table or the second way of creating the table is instead of combining A and R you can combine the next table that is B and R so you can also make a table like this a which is having A1 and A2 and you can make the second table as uh BR which is having B1 B2 and A1 so where A1 is a foreign key so here B1 was the foreign key and B1 is there as a key attribute okay so this is how you can combine this one now if if see you generally get lot of questions related to this in uh in your examination so I'm going to take some previous questions also and I'm going to try to convert them okay so let us see if we have a relationship set relationship set with a key constraint and the participation constant the only thing which is differentiating here is the participation constraint that means here you can see in the diagram the department is is having total participation department is having total participation when do we have a total participation when the minimum cardinality when the minimum cardinality for relation is greater than zero or it is one so we have already seen this in the previous video If you face any problem by with the terminologies in this video you can go through the previous videos and they will really help you out okay so you can see here each department is required to have exactly one employee as a manager right right so if this is the requirement so you can see if there is a key constraint merge the relationship set table with an entity set table if the entity set table is totally participating with the relationship set table then foreign key with not null constant we are going to use a foreign key with not null constant if you check this out let us see what we have done if you have a total participation here if you have a total participation here then you can see for employee for employee we can create a table for employee like this only but for the total participating site uh we are going to create this uh Department ID we are going to get create the department name and because it is a total participating size site therefore we have to include a foreign key from this okay see guys there's a difference between if I am writing a relationship like this it is manages and it is like this there's a difference between this and if I show a relationship like this there's a difference between this okay and what is the difference is you can see from this side this entity is having the maximum cardinality as M and this entity is having the maximum cardinality as one right they are not discussing about the minimum cardinality or you can say participation participation is the minimum cardinality okay uh here not discussing about the minimum cardinality but here when I'm saying uh it is total participation that means the minimum cardinality or participation is one okay that is why this is like this only okay now let us take the next example so you can see it is saying uh if you have uh if you have a relationship like this which is having uh the total participation in both the sides that is the minimum cardinality in the both the sides is one then uh for this table uh either you can create a table for this and you can create a table for this but that is going to waste lot of time for you but if you have a total participation in both the sides in such kind of examples what you can do is you can combine all the attributes in them and you can create one single table that means assuming that name of that new table is ARB and it is going to have A1 A2 B1 and B2 where A1 and uh B1 both combinely create the primary key of this okay so you can say if there's a key constraint from both the sides of an entity set with total participation then we represent that binary relationship using a single table so you can you know create a single table in both the sides okay fine so now let us take this example it is a previous year question now they're asking the in this question is find the minimum number of tables that are possible when you translate the above AR diagram into a relational model right so if you translate this how many tables are required okay so here for the answer is four tables are required why four tables are required if you can see these relationships uh between this relationship only okay uh fine so between for this relationship we require uh how many tables do we require for this relationship that is a uh uh this is the table A and B between A and B how many T tables do we require because it is a many to one relationship so we only require two tables here we only require two tables here okay and uh fine so there's a there's a table which is possible for B1 for B there's a table you can see for a it is participating in both the sides that is you can clearly see uh uh you know the maximum cardinality is one here so let me write it down like this for B you can create a table for this for B you can create a table you can create a table that is B1 and B2 which is having the prime attribute as B1 and for C you can create a table because you can clearly see in both the directions it is having many as the maximum cardinality so it is for C you can create a table which is having C1 and C2 now you can see for a there's a problem and there's a problem for a because a is having the maximum cardinality as M so sorry I'm so sorry U okay so because a is having the maximum cardinality as you know one in both the sides maximum cardinality is one in both the sides right right so because C and B were different but a is different okay and here what happens to this relation R3 for this relation R3 it is M2 n relationships therefore you have to create a table for this relation R3 for R3 you're going to create a relation which is having B1 and C1 as combined as a attribute where combined as a key where B1 and C both are foreign keys right but for this particular a for this a for this a you have to create one single table only and this a can be created by using combining R1 and by combining R2 so we are going to create a table which is A1 A2 C1 B1 where A1 C1 and B1 C1 B1 are foreign keys they are foreign keys and a was the key of this so here in this case we require only four tables we require only four tables we do not require more than four tables remember this thing okay let us take the next example so here they're asking what is the minimum number of tables which are required what is the minimum number of tables which are required okay and let us see how many tables are required so if you have this a now you can see for a a is having minimum cardinality as m in both the direction therefore we have to create a table for a that means there will be a table for a which is having A1 and A2 and this A1 is a key attribute here now you can check for this D D is having many in both the directions therefore we are going to create a table for D which is having D1 and D2 where D1 is a key attribute now now you can see this B is having you know uh B is having one as maximum cardinality here and one as maximum cardinality here maximum cardinality one in both the directions okay so for this B we can create a table but that table will be combining R1 R4 and R5 because here also it is maximum cardinality as one therefore we can create a table for B R1 R4 and R5 there's one single table which is required for them and it is having the attributes as B1 B2 D1 C1 A1 where D1 C1 and A1 they are the foreign keys and B1 is the current key attribute here okay so you can see for this complete B we just have to create one single table okay now if you discuss about this C this is something interesting with the c is that c is only having the maximum cardinality as one in this direction but with R2 it is not having the maximum cardinality as one therefore for this R2 because it is a many to many for this R2 we have to cre create a relation for R2 which is containing A1 and C1 both A1 and C1 are key attribute and and for this for this one for C we have to create a relation which is combining by C and R3 it is having C1 C2 and D1 as the key attribute so D1 and C1 will be there okay D1 and C1 will be there so this is how you can easily convert a ER diagram to a relationship model now you can see here I'm representing a vak entity with this diagram you can see the department is having a weak entity here maybe some problem with the diagram it is a weak uh so it is a partial key and it is a presenting dependent is a v entity so if we have a v entity here for this V entity we can create a table for them and uh it it will be containing the table will be containing employee number that sorry the table will be containing employee number Department uh dependent name and we have age right so what what is there if you have a weak entity for that weak entity you create a table and you have to this is the strong entity this is the strong entity and this is the weak entity this is the weak entity if you have a weak entity you want to create a table for weak entity why is okay before that first of all understand why is it a weak entity because this uh in this weak entity we don't have a key attribute can we could have a primary key with the help of this dependent name we'll not be able to identify each record uniquely therefore we need the help of some other uh uh some other attribute which is not available here therefore we have to take the help of the strong entity you have to take the key of the strong entity combined with this partial key so that we can differentiate between each dependent uniquely so in this case we are going to require two tables number one the first table is for employee this employee will be containing employee number employee name and salary and second one will be for this week entity which will be having employee number as foreign key employee number as foreign key and we have dependent name as uh you know partial Keys we we are going to combine both of them to make a key attribute and then we are going to add age also okay so we are require we require only two tables here okay now if you take the next example here uh find out what is the minimum number of tables which are required to draw this one so you can see the minimum number of tables here are three why do we require three is take this example take this side it is a many side and it is also a many side for both of them you can create a table for E1 you can create a table which is having A1 and A2 where A1 is the key attrib attribute for E3 you can create a table which is having C1 and C2 where C1 is the key attribute for this E2 for this E2 because in both the sides it is having maximum cardinality as one you can create a table for E2 the attributes which will be there is B1 B2 B3 A1 and C1 right A1 and C1 further because here you can see the B3 is a partial key it is not a you know it is not a key therefore we have to know uh uh create different tables here uh we can either further divide these tables but if we discuss about what is the minimum number of tables required that the minimum number of tables required in this scenario is only three in this scenario also we require only three minimum number of tables okay so whatever topics which we have studied let me write down in terms of steps let me write down in terms of steps so step one for every for every entity in ER diagram for every entity in ER model we have to get a relation we have to get relation in relational model relation in relational model okay do one thing write it down so I'm just not going to write them everything again and again you can pause the video and you can write down in Notebook the second is if you have a vak entity right and that weak entity is a is having a partial key is having a partial key for for uh in that scenario so we we'll be having a strong entity and we'll be having a weak entity you have to create a table for that strong entity and you have to create a table for that we weak entity and the T in the table of that weak entity we are going to no we are going to add a foreign key from the strong entity as and that partial key plus foreign key is going to make so partial key plus primary key that that is foreign key that that will make a Prime break in that okay now if you have a relationship so you can easily follow the steps for relation you have to see whether it is having a total participation or whether it is having what kind of relationship it is if it is having a total participation is one side now you can add attributes uh of that relationship into that side only and you can use it like this okay and you can this is this is a way you can convert one to many relationship one to one relationship many to one relationship and many to many relationship okay we have already discussed all of them okay and when we have the multivalued attributes we do not include the multivalued attributes in the uh in the table of that of that entity we create a separate table for that multivalued attributes which contains a primary key okay and if we have some NR relationship then we create tables for those nrr relationships also okay so this is uh it for this so let us look at the next topic now