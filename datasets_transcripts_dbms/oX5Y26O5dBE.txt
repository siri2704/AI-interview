hello and welcome back in today's session we are diving into the crucial role that SQL plays in managing and analyzing data to your surprise nearly all major companies like Netflix meta Uber Google Microsoft and many more rely on SQL and some capacity SQL has become essential for many roles whether you are python developer tester web developer or software developer as it helps you to connect databases to products if you're in data Focus role like a data analyst data engineer or data scientist SQL is an absolute must have skills for interacting with databases effectively with the increasing demand for skilled professional who can manage and analyze data understanding SQL is more important than ever a solid understanding of SQL will prepare you to navigate interviews and make a strong impression in this video I'll be walking you through 15 SQL interview questions that will help you get a better understanding of what to expect with that being said let's get started with the very first question so starting off with the very first question which is what is the difference between between dbms and rdbms firstly talking about dbms which is database management system as the name only suggests it is the basic way to store data in files data here is stored in the form of individual files with no connection between them for example consider you are in a class and teacher is storing your information like role number name address phone number into separate files and there is no linkage and to search about specific student you have to look through each file one by one which becomes very tedious and time consuming on the other hand rdbms or relational database management system have some sort of relation between the data for example MySQL you must have use for creating tables and storing values taking your same example of student here you can create a table which will have column of role number name and address which will be interconnected so when you want to search you can easily perform a query and data related to that particular student will come overall making it easy to create relationship between different pieces of data this allows faster data retrieval especially when you're dealing with large data set rdbms also reduces redundancy because there is only one record corresponding to a particular student and it is designed to support multiple users with high security plus it is optimized for larger amount of data moving on with our next question which is what is a primary key and a foreign key so each of us have been to colleges or schools right there we all used to have our role numbers or registration IDs which was unique for all the individual idual and no two individual used to have same RO number so we can say that RO number used to serve as a primary key to uniquely identify rows in a table it's used to make sure that each Rose is distinct and can't be duplicated and it also doesn't allow any empty or null values so have you ever seen anyone without a role number in your class no right which is again helpful for you to easily identify each students detail without any confusion now in class you study more than one subject for example you study Physics math maths science Etc so to connect a table of students detail like name address Etc and the course table which will cover the course he studying you will need something called as foreign key in our case we will use your role number to link between the two tables and will serve as the foreign key this foreign key points back to the primary key in the student table creating the link between two tables so in simple term the foreign key helps you connect data across table ensuring that records in one table can reference the related information to another moving on with question number three which is what are constraints and their types you all must have at least once filled a Google form so have you seen that there are certain fields which is mandatory field or some fields are optional which you can leave blank or certain field which only takes input in a given range so what are these These are called as constraint which in SQL is like rules you set up for data in your tables they help keep data accurate and reliable talking about constraint in SQL the first is not null as the name only suggest a column can't be empty for example if you're making a schema with a column named as role number not null and if you're trying to add a student without any role number the database won't allow it meaning it is must to add that certain field talking about the second constraint which is unique this makes sure that no two values in a column are same suppose you have an email column in your same student table each email has to be unique it's like saying that students should have distinct email IDs coming to our our third constraint which is primary key it combines Nal and unique constraint meaning there should be only one field which should uniquely identify records as I discussed in the previous question Your Role number serves as the prime key let's see our fourth constraint which is foreign key this one links stable together let's say you have another table listing courses a foreign key could connect the student table to the course table linking each student to their courses fifth check do you want to set a condition this one is for you for instance if in your table you have voting age column accepting ages over 18 only check can enforce that rule in age column and if you try to add someone younger the database will stop you last default this constraint plays an important role when you want to have your record take a default value when no values mentioned say you add default value as India for a country column in your table and if you don't specify a country it will automatically fill in India moving on with our next question which is explain ddl and DML commands in SQL okay so when we are working with database or creating table like an employee table what we are actually doing we are usually either setting up the database changing the employees data or updating the records of employee and that is where ddl or data definition language and DML or data manipulation language comes into play first ddl commands talking about ddl which is like the foundational tool of the database these commands help us Define the structure of the database by creating altering or deleting tables and other objects for example with create we can make new table like create table employee will help us create a new table employee with alter we can modify it later if we need to add a new column in our employee table even deleting a whole table is possible with drop so we can say that ddl command don't deal with the actual data but just with the database structure and what I mean by database structure is the overall table structure now moving to DML commands DML is all about working with the actual data once we have the table we use DML to insert update or delete data for example if you want to add a new row of data you would use insert to change data you would use update and to remove specific data delete is the way to go these commands help keep the data into the table up to date and manageable for example to add a new employee record you would write something like insert into employee then in bracket name and position then value like say example Joe and what position he's holding say manager so in short ddl commands are like setting up and organizing the house which in this case is structured and DML commands are like how we are going to manage everything inside the table the data itself moving ahead with our question number five which is what is the difference between delete drop and truncate statements so all of us used to have a bookshelf in our home to keep our academic books novels or even Comics books now consider your bookshelf as your database table and each book represents a row of data now if you want to clear out or delete data from this bookshelf you have three options delete drop and truncate here's how they are different first delete this is like removing a specific book from the Shelf based on certain condition like I want to remove all the red covered books or remove books from the top shelf so delete lets you choose what exactly you want to remove plus if you change your mind you can roll back or you can keep your red books again or undo the deletion in most cases second truncate this one quickly clears out the book from the Shelf leaving the Shelf empty but intact meaning it will remove the book from that particular shelf but it will not delete the Shelf it's fast and it doesn't allow you to roll back meaning once it is done it's done truncate is perfect when you don't need any of the data but you want to keep the structure for example in our case the shelf for the future use third drop drop is like taking down the entire shelf and removing it from the room all the books on the Shelf itself are gone and you're left with nothing but just the empty space drop is permanent and can't be un so you would only use it if you know you won't need a table or data again for the future use moving on with question number six which is differentiate between Group by and order by Clause imagine you have a table for example on the screen that is full of employee data like a list of employee in a company each with details like their department and salary now you have two task in your hand you want to group employees by Department to see how many people work in each department or what is the average salary in each department second you want to sort the employee list by salary either from the highest to lowest or vice versa these tasks require different Tools in SQL first group buy and second is order buy so group buy is like putting your data into buckets for example you are grouping all the employees of the same Department into one bucket so you can easily we see total or averages so Group by is typically used with aggregate functions like sum average count to calculate things like total salary of Department average salary in each department or count the total numbers of employee working in each department this way instead of looking at individual row you get a summarized view for each department for example when I say select Department average salary from table employee and then Group by Department this will group all the Departments like HR sales and it and then we'll display the average salary respectively secondly talking about order buy which is like sorting rows in a particular order it's like alphabetizing names in a list or ranking employees by salary so when you use order by you are sorting the entire table based on one or more columns such as salary from highest to lowest you can sort an ascending or descending order when I say select star from employees order by salary disc from an employee table containing names department and salary this way you get a neat grouped and sorted view of Department salary in short Group by is like grouping your data into meaningful summaries while order by arranges data in an order you want to view moving ahead with question number seven which is explain the difference between wear and having Clause wear Clause is like filtering before grouping think of the wear Clause like a Watchman at the society gate so before anyone gets inside in our case SQL before any data is grouped the Watchman checks the ID or the condition and only lets in those who belongs to that Society so when to use this we Clause you use wear Clause to filter individual roles based on specific condition like age or name for example if you want to find students who are 18 years old or older what you would do you would select the student name and age from the student table where age is greater than or equals to 18 what it does it filters of the student who don't meet the age requirement before any grouping occurs and having clause think of it like filtering after grouping now picture the having Clause as the judges in a talent show after the contestants have performed and have been grouped by their score the Judge review the group and decide which one meets their criteria so when to use you use having when you want to filter group created by Group by Clause based on aggregate result like count or sum for example if you want to see how many students are in each age group but also you want to display age groups with more than one student student what you would do in SQL you would write select age so you're selecting the age and then count role number as number of students and from the table student where you are grouping by age so Group by age and having count role number greater than one here you will see only details of that records are displayed for which number of students are greater than one moving on with question number eight which is what are aggregate function in SQL and can you provide example so imagine you have a big basket of root and you want to know something about them like how many you have the average weight the heaviest food or the lightest one SQL aggregate functions are like tools that help you perform these task on data in a database just like you would do with that fruit let's talk about this aggregate function by performing certain function on them you can see the table on the screen right talking about the count it counts the number of rows or the non null values in a column for example countstar gives you the total number of record which in our case is six as we have six employees working talking about sum it adds up all the value in numeric column for example when you're writing sum and salary in bracket it gives you total salary which is 3120 third average it calculates the average of a numeric column for example AVG in bracket salary is calculated as sum of the salaries divided by total number of employees fourth Min it finds the minimum value in numeric column for example Min in bracket salary gives you the lowest salary which is 43 fifth Max it finds the maximum value in numeric column for example Max salary Returns the highest salary which in our case is 82 that is all for the aggregate functions moving on with our question number nine which is explain indexing in SQL and what do you mean by clustered index let's say you have a book but without page number just think of the difficulty you will face while searching for a topic without knowing the index and the page number now in that similar manner think of the database like a huge unsorted stock of paper with out and index if you want to find a specific paper say for example in our case employee ID 1120 you would have to flip through every page one by one and that is very slow but with indexing it's like organizing this paper in specific manner all right think of cluster index as putting these papers in exact order like arranging them by employee ID from smallest to largest as you can see on the screen so instead of just labeling the sections we are actually organizing the paper themselves in order and the image you can see on the screen when we are searching for employee ID 1120 the database uses the clustered index to skip the larger section that don't match it quickly finds a range 1,1 and 1200 and jumps right to that folder this way indexing cuts down this larger step making the data retrieval fast and efficient moving ahead with question number 10 which is what is normalization and explain the different type of normal forms so normalization in database Works similarly by organizing data efficiently minimizing redundancy which here is duplicate information and preventing issues when inserting deleting or updating records so why is normalization important first it reduces duplication just like you will not want to have same copies of a book similarly in database normalization helps avoid storing the same information multiple times second it prevent anomalies it helps prevent error with adding removing or updating data now talking about type of normalization starting off with the first normal form or one and if so each table cell should contain a single value and each column must have a unique name this ensures that no duplicates values are present and it simplifies data retrieval for example if you have a table with student information each one of us have more than one Hobbies right then instead of listing hobbies in one row it should be in separate row rather than listed together like you can see on the screen second NF or second normal form all the non-key attribute must depend on the primary key in simple term each piece of data in the table should relate directly to the main identifier like a student ID and not to each other for example in a student table if you have a column for the student class and and other for their teacher the teacher's name should depend on the class not on the student ID third normal form or 3nf imagine you have organized your toys so that no toy categories overlap in a similar manner every non key attribute must be independent of the other non-key attributes this mean that no information in the table should rely on another piece of data if a student class is linked to a specific teacher that information should not be mixed with the student table but rather organized in a separate table lastly boycott normal form or bcnf so every determinant an attribute that can determine other attributes must be a candidate key this ensure that all the dependencies are based solely or unique identifier for example if you have both student ID and class as potential identifier each must uniquely Define the data in its column without overlap so that's all for the normalization form moving on with question number 11 which is what do you mean by unan and Union all operator okay so let's break down the union and Union all operator in SQL in a way that is very easy to understand using a simple example so think of SQL database like your friend list from two places list a which consists friends from school and in this we have Alice Bob and Charlie and list B in which you have friends from work Bob David and Eva now you throwing a party and you want to create a single list of the guests who are coming to your party so what does Union do the union operator combine both the list into one but here's the catch it removes any duplicate so if someone is present in both the list they will only appear once in the final list so final guest list will be Alice Bob Charlie David and Eva so in s SQL when you use Union it looks something like select name from school friends Table Union select name from work friend table so what does Union all do now let's say you want to include everyone on both the list duplicates and all this is where Union all operator comes into play it combines the two list but keeps every name even if they show up more than once so your final list will contain the duplicate value also for example Alice Bob Charlie then again Bob David and Eva so in s will it will look something like select name from school friends Table Union all select name from work friend table so that's all for Union and Union all moving on with question number 12 which is how can you find the second highest salary in a table so the SQL query to find the second highest salary and the employees who earn it operates through a structured flow involving nested subquery it start with the innermost query which retrieves the highest salary from the employee table using select Max salary from the employee for example if the highest salary is 1 lakh this value is used in The Next Step the second subquery filter out the salary that are less than the maximum by executing select Max salary from employee table where salaries less than the subquery which we just performed which is Select Max salary from the employee by applying Max to the remaining salary this subquery identify the second highest salary in this case it could be 90,000 finally the outer query comes into play which selects the name and salary of the employee who gave the second highest salary by executing select the name and salary from employee table where salary equals to select Max salary from employee and where salary is less than select Max salary from employee the subquery which we just discussed this means that if multiple employees earn the second highest salary the query will return each one overall the structured approach allows the query to efficiently determine and display the names and the salaries of employee with the second highest earning so that's all for this question moving ahead with question number 13 which is what are views in SQL so a view in SQL is like a virtual table that doesn't store data on the disk but allows you to see data from one or more table in a specific way what I mean by this is suppose you have a student database which stores student ID name address and someone wants to just see the student name and the address without looking their IDs or other information so in this case you can create a view say the name of the view is detail view to do this the query you will perform is create view then the name of the view which in our case is detail View and then select name address from the original table which is student detailed table and if you want to give certain conditions say you want only those record where ID is less than five so put a condition say ID less than five and from this a view will be created and to see a view you can just just perform a simple query select star from details view which is the name of our view and you can see on the screen The View with the name and address is there so you yourself can see that view allows you to limit the sensitive data and restrict user permission which is specially helpful when working with large table or when different users need access to different parts of data moving ahead with question number 14 which is how can you convert a text into date format consider text as 201122 to convert string to date format use string to date function write a query select string to date then in bracket the given date then mod D for day mod M for month and mod Y for year what it does SQL now reads 2710 2024 as the date October 27 2024 so moving ahead with question number 15 which is what are triggers in SQL so imagine you managing a library and every time someone's borrows a returns book you want to perform functions like update the available book count in the system so doing this manually for every transaction would be very tedious and of course will increase the chances of error here's where triggers in SQL comes in so triggers are like the reflect action which allows you to set up an automatic action that will run every time a certain event happens in your database like adding updating or deleting data in a table so when do trigger runs triggers are usually set up to run during one of three events insert when new data is inserted second update when existing data in table changes and third delete when data is removed from a table so let's say you have a table in your library database called books every time someone borrows a book you want to decrease the available stock for that book second log the transaction to keep track of the borrowed books so using a trigger you can make this happen automatically every time someone checks out for a book here's how you could set up the trigger for when a new book record is added to Borrowed Book Table so what is the query the query is create table update book stock what we are doing here is we are creating a trigger named as update book stop here it's named which reflect what the trigger does so it updates the stock of book then second we have after insert on borrowed books after insert on borrow books tells the trigger when to activate here it activates after the new record or row is added to the borrowed books table in other word every time the book is borrowed this trigger will run then for each row this is like a looping statement for each row this means that for every individual borrowed book entry new rows added to Borrowed book the trigger will apply then begin update book set available count equals to available count minus one where book ID equals to new. book ID then end and then what we are doing with these queries we are finally updating the books now this is where actual updation happen happens The Book Table is updated by reducing available count by one for borrowed book and the new do book ID here refers to the book ID of the borrowed book so putting it all together each time someone borrows a book this trigger automatically reduces the available count of that book by one in the books table this way our stock count in the books table stays up to date without needing any manual input so that's all for my side if you have likeed this video kindly subscribe to intell part's YouTube channel thank you and see you in next video video