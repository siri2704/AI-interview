that's the topic yeah okay but as you can see the topic has slightly changed in the last minute so last week I stumbled across a video I talked at was given by metra Bogardus one of the cofounders of the meteor development group and he was talking about meteor 1.3 and what happens after that which direction are trying to go what I are trying to accomplish in the future and I saw there's a good chance to put that in here as well and especially since it kind of relates a little bit to the discussion that I want to originally have do we really need relational databases and media applications on what kind of applications actually require us to use relational databases and obviously also what's the what is the actual difference between relational database in know SQL where do they differ and how does it affect my projects so at first meteor 1.3 so this is the I put that link on the website for the meetup as well a few things that are new in 1.3 so they removed magic Global's and the main cause of that while staff at some point bigger projects they just ran out of variable names and it got very very confusing and this same reason why do they actually introduce lazy loading as a default so now in the current in the currently tier 1 point2 you can basically put all the JavaScript files into your source code repository and will automatically load every single client but you can imagine if you have like 200 300 10 plays and a couple of libraries and 100 dependencies your web app will become very very large and that means that the client has to download more and from the beginning of meteor I think that was always a little bit of an issue where you have pages that users just visit once they've just a block or so and meteor is not really suitable for that because you always have to download the entire back-end code as well just to look at one article read it and never come back to the website so usually what we've seen most meteor apps that are apps that you use every day that help you in your workflow and yeah that kind of app so another big improvements es2015 it's fully supported now and this actually goes very very deep and has a lot of interesting implications so either 15 change JavaScript quite a lot and one of the major improvements was this new packaging system where you hand you have modules and you have a very nice way to load modules use them and only load what you need and that goes very nicely with the lazy loading we're now in 1.3 you will have to write a little bit more code because you have to write your import statements to import all the required templates or libraries but it gives you also more control over the load order and that's the interesting thing it is also compatible with the standard of JavaScript which makes it compatible with other technologies out there but more than that over the next points they additionally got heaps of questions all the time about our only do proper test integration and we think we touched it earlier in the first talk about packages so they were working on a better test integration in primarily they're using walker but he's up in this talk they will support other testing frameworks as well such as cucumber with jasmine or whatever is out there and yeah so that's got to help especially for more serious projects and not your typical you know I'm just playing around a little bit what you see at the same time they updated all the cordova and libraries to the latest which brings a lot of really really good improvements the first of all the WebKit got a little bit more performant so it's a lot quicker now and the i think one of the major changes is that this report which was working your meteor application inside the phone in the organized that was javascript and if you had a load error in your in your app and you're using hot code push you could potentially destroy that ad on the phone and have to reinstall it and i think we a year ago so we're here to talk about i think it was from some comment about this package that arose which kind of prevented these issues on mobile devices when you push corrupted code to the mobile device that it would automatically roll back now that's part of Cordova because they basically separated the wrapper of the application they've written that natively jaros with now and the JavaScript app inside is loaded and if it fails to note for some agencies on the result something else you will simply end up with the Cordoba rapper will just roll back to a stable version and you won't have that problem anymore so I said earlier that yes 2015 is a big change and it goes very very deep especially if you look at mpm which in the latest version also goes down that road of basically package shaped the packages of NPM on now year's 2015 or they want to go there today support year's 2015 modules there which basically means that it doesn't matter anymore if you have an atmosphere package or an NPM package it you can use both in both technology technologies because they're pretty much the same they all work on JavaScript so NPM or nodejs developers they can use atmosphere packages all the dependencies they're just normal JavaScript modules and the same goes the other way around so in the past we had to use wrapping packages for the standard libraries like moment Jas there's a specific package of atmosphere which just wraps the NPM module and that's kind of not that doesn't feel the right and in the future we will be able to use the standard NP and modules a little bit more effectively I mean you can already do that they improve that over the last one or two visiting since one point also it was acceptable to use NPM packages but it still always felt a little bit clunky and sometimes you had dependency issues that simply couldn't be resolved so the next section is they won they also improve the build tools because I realized larger apps actually took a lot longer to compile and to a point where it got in acceptable it just took too long so they're going to prove that as well not sure about the details in this section and the other big improvements documentation so I think everyone who already developed Nick your nose that the meet your website the development guide is a perfect as a very good source for information you usually find an answer there and in the future they want to even go further with that where they want to show hey this is what we recommend in terms of practice this is how you solve this problem do you see how you solve this problem and they're also taking away a lot of community feedback and packages that are commonly used throughout the community just to name one aldi schema collection schema schema collection which basically allows you to specify a schema for your mongrel collections and that is used in a lot of projects and what they're trying to do now is say okay if you want a schema use this package you like this so they want to introduce that part of the documentation to their own guide as well which makes the meteor words an even more of a Center where of this one sauce which has kind of information to everything you need then when he talked about front end I literally jumped up from the couch and raise my arms because is that basically we're going to have support for four different front-end engine so we have placed templates are still going to be supported there was a big discussion about displays dead and a lot of people said yes and obviously react came in with 1.2 and they're going to continue integrating that pedal and they also going to support angular 1 and 2 simply because it's very widely distributed furniture a lot of people are familiar with it and that's where meteors are always be going after the community we're trying to look what is the community doing and bringing that into our product and he said to justify why the still supporting place he brought up a very very interesting point which I think I fully agree with every one of those frameworks has really really good advantages but they all have disadvantages as well so for instance react as a reactant angular I think have a bigger learning curve with place took me a day or so and could do almost anything with it because it's very simple but also that limits the kind of use cases that awful that are covered by it and to fear if you have a small prototype application plays will be the quickest way to get there if you go by a react you have to find your components and you have a little bit more overhead in terms of describing those components with blaze you don't have that you just have a simple template some help or some events that's it and so the nice thing that he mentioned is also that they're gonna support those front-end frameworks in parallel very important because you can basically start as a POC little prototype you're just playing around a little bit on the weekend you compile something I'd say show it to someone say hey I've got an idea look at this and I think I hey that's a great idea let's student let's do a full blown application suddenly are singing oh god it's going to be a beacon for we have about 30 40 50 different templates going to be unmanageable this place you can seamlessly switch from plays to react and basically just create your new templates or new components in react and still keep the blaze templates fully functioning so you can run those different technologies in parallel we just I would recommend only to do that in a transition phase because otherwise it comes a bit chaotic at the end of the project yeah and the other thing that they try to quest was data and one thing they realize is that this kind of reactivity that meteor gives you that we all know and love that this is kind of something that is very very special and should be available to the to wider audience right now you kind of have to develop meteor it is not really a plug-and-play solution out there which you can use it any technology and that's what I'm trying to do with the Apollo data stack and I'll get to the hear the details in a little bit but first looking at the little bit of me tio database is three so obviously we have one would be be billed in which sometimes is an issue because you can already see it when as you are you using the different enterprise application mogu tebe is actually not fully free to use in an enterprise environment which basically means yeah you can start the value but then you eventually still have to pay license and also it's a document store which I mean when I started with meteor that was actually sourced no SQL database that it was using and yeah it takes you a while to kind of see the differences and figure out how to use that new technology and but a lot of people actually ask you still have SQL I mean I'm used to SQL have been developing a skill i've been doing it for 10 years and now i have to do a document based storage why just give me SQL so they started looking in the postgresql postgresql because they offer curl the technology which allows you to money to a data set and get this kind of reactivity same thing is soft mongodb you buy a block so in media 100 well as 1.3 and beyond so that's work in progress and so this is just what they have in mind right now and basically all they have they have a single apollo api which is just how you access your data it is irrelevant how you store your data that's handled by probably some configurations background underneath the API they have this graph your cash which basically produces your responses and then you can connect that with any back-end that you can sync off so you can have SQL backends you can add restful beckons you can have degree connections or no SQL databases and if any of those don't offer you reactive miss like some curls or technology or something like rest of the phases especially they will pull it on a regular interval which you can configure which is then fed into this graft your cash which offers you the reactive this widget push through to the API so that's definitely something to look forward to and the bills sort of salt the need for postgres with Chris because you can make me plug it in here the end but as I said it's not there yet but what I've seen is that the development of this post quest driver has kind of stalled and not much happening the git repositories quiet not many discussions about it and I think it was a few months ago when I heard that a few of the cord another was actually left project and I think with the Apollo's that coming and I think even if they just you know get some sort of beta out there they will have some SQL backend which you can use and you can then and the ideas that they then offer this public stag as a es2015 package module which basically can be used anywhere so you don't have to program it you'll to use follow standard no developers will be able to use it as well because it's just a standard package so that's one of the key benefits of meteor moving towards this more generalized technology what I want to do next is kind of look a little bit into relational databases good with no SQL and so this is kind of a little bit opinionated I agree and also just want to give a rough overview so basically relational database we know it is always structured data you have usually a table description who says okay just call up this type and then you have your key definition foreign keys and all that stuff looks fully structured where North gold alibi is usually a semi-structured now what the semi structure make it's basically when people talk about not structured they usually refer to data legs which is something that only exists as an idea has been implemented yet where you just store unstructured data but how do you create a structure data so you always need something structure in one would be B we have collections lenses and then we have fixed fields like the ID field and couch to be you would have a revision field for the document and an attachment field which contains the attachment metadata so that means semi-structured there's still some sort of arrangement and the format of the entries is usually defined as well in our case it's jason and so that that's the main difference here and also relational databases as they say stored it in our relation and relations which basically means you would usually have one and big to may not check the person and you would only have a one table which only contains some base properties about it and the rest life okay my friends my friends would be a separate database table which have foreign keys to other tables my stuff which basically means you split up this object person with all its relations in two separate tables that makes it very nice easily to manage them as kind of entities a relation itself friendship for instance but it also doesn't help really to heaven general overview okay what is this person actually looking like I have to make a very very complex query multiple queries to get all the information in one place which means we'll have some performance of following issues here where no SQL databases usually work object orientated which is how west end points usually work you get an item with a specific identifiers or list of items and are usually not just a little core posted the base of the object but it contains the relations as Jason a note attached to this object so and one of the key features however of relational database is the consistency or more generally the ethic compliant and it basically means that because you have foreign keys you can reference so you have one record here a buffer into another record here now you want to delete this record here the database will actually prevent you from doing so because it realizes hey this document I can't believe it because it's the reference and that is very very important for a lot of applications that work in the area where there's legal obligations to keep records of everything financial institutions insurance companies anywhere we have transaction they are like online cops because you need to be able to always have all the data because just losing one record might be a catastrophe which might cost you millions and on the other side where no SQL can be a little bit quicker than relational database simply because it usually doesn't care about that did you think about relations between different documents and mongodb usually end up the risk for one 1 to N relationship you just have a field with with an area of strings and each string represents document idea which one you reference now you can remove sorry you can remove those target documents that object that holds the reference must care the database doesn't care because there's no logic that checks or that even connects those data points your application does that the application sees that list of ID's interview this is that objectives that objects that and so but on the other hand you also have a lot of additional functionality in know SQL databases now moma deep freebie probably doesn't give you too much extra functionality but I've been working with couch p for quite a bit now and there's a lot of really really interesting stuff there so met with use probably a bit abstract and it took me a while to actually figure out problems that it actually can be applied to nicely or which are kind of in nature what is the nature of the problem that is perfect for meb reviews and there's other stuff like as i mentioned before country be as attachment handling which in one would it be it always become the Sun because they have to a 64 encoded string because no one would if you can only do one thing Jason can do that very well but only that and so another reason I think why people still asking for a relational database support in meteor is simply because well that's what they know that what they have been working when I first started working with me to my first question was playin for Maya scale as well because well that's what I was doing and that's what I knew and also you have to consider that those MySQL or Oracle databases or my in a sequel server or db2 they've been around for donkey years for decades so they they've matured over time and they basically offer you all the functionality everything is sort of stable there's only very few bucks in there and it's all optimized and well-documented you won't find a single code snippet that it's not that some point documented somewhere so that kind of makes very easy for newcomers to kind of get started with it where was mom would he be still have to go through that initial learning curve and then you start with another database and you have to start from scratch pretty much because they have completely different crazy language completely different way of structuring their data storing the data or even accessing it or managing and but as I said did the thing is that now let's go databases I think have the potential of being a lot more efficient for solving specific problems because there's just a map just there's the same amount of problems out there as there are data based solutions for those problem or four subsets of those problems and I think that's where it's kind of the engineers role to decide hey I've got this problem which database to a dick and of course if several considerations like licensing costs learning curves have a work with it do have resources what tribals are they all those sort of discussions are important for that and to just put it the liberals perspective of just this is not based on any data this is just something that I drew so it is basically just showing that so thank you okay let me explain how I came to that so I was watching a couple of talks that will talk about big data and relational database and no SQL databases and I found one where they try to define big data and I find that very very interesting because big day is usually just a bus relative managed to screw around to sound too interesting and at the end of the day what he what this the mostest architect who gave this talk basically what he said was big data that's where even a sharded relational database with about 200 notes just collapses under the under the workloads and we're not talking about gigabyte of data any relational database can handle that we talking about Taryn head up eyes and then so basically this graph shows that known as quoted by this paint to have a fairly linear scalability they actually read an article the other day complement but if it was aged face or highers sighs where they achieved or what I think 200 or 400 no it's a chief a super linear scalability so I think usually a lot will probably work this area where it doesn't matter but it has to be considered if your project in Chile grows you might have more day and especially for analytical application because they usually deal with a lot of data and then I found something else very interesting so I'll actually looking around not too long so i just found this it was a DB engine range and basically what they're doing is they give each databases score that's basically combination of the amount of job offerings that require specific knowledge with a specific database technologies we have a lot of job offerings that require you are an oracle certified database administrator and then there's also social networking activity here like three I'm using Twitter feeds icing for that and they also searched google and beans for each database name and then look how many results are coming up so this is kind of how the score is calculated obviously in a relational databases the three big ones in top Oracle MySQL am a sequel server in mysql being around for donkey years we find heaps of documentation everyone is sort of used it at some point in their history probably and then so that's why they're that high up and that's the same then make sure there's a lot of you have documentation out then that's why they are so popular and but in general what you see here is that this is 2013 who's 2016 it's kind of like it's not really improving much there's only a few like SAP HANA which kind of trending which get a little bit more attention these days now if you'd so and that's 17 out of the top 32 now no ice cream is obviously 15 or 32 but in general what we can see is a trend that goes more towards the top so most of the data is actually training which means that there's a lot of interest d size of that because there's a lot of applications where people just sing what kind of sick and tired of paying big license costs to this in that company why Cannot just use something open source okay well it's no SQL who cares my problem doesn't require as combined so let's student and I think that's why those are training but obviously you can see I mean the most popular one right now is manga which is it that the school of 200 where the big ones in the relation when they're sitting at over 1,000 to there's still a difference and meet the market share of relational databases probably still hired know as well um so at last by world like the view is gone Chuck put a couple passwords and things that you think about usually when you're working with no SQL relational databases and try to get a little bit into what are what kind of country constraints does each of those things put onto your storage and what kind of applications are suitable for that so in the relational database world usually we do begin was just finding your schema so you create your tables you create your columns but primarily tease foreign keys and all that sort of stuff and it's you look back say 10-15 years usually it work software development projects you're done using the water salt approach which means at the beginning you write your psionic page requirement document which included the data structure and usually there wasn't much change to a data structure after you initially created a document which meant relational databases will find that context where you define it at the beginning in the trick well documented this you just employed adamant database admin who actually and then in in today's world we have HR practices which kind of usually start out with data believe everything is all about that let's start with this and then s you go you kind of throw away objects you add you feel if you remain fields you split them up and you can reorganize everything and so if you do that in SQL you do the data model you will have a lot of extra effort manipulating and kind of keeping that consistent with your application it's data model leather and go into any tables which are very very nice especially to inspect relations and that's definitely one of the major benefits of relational databases although it has to be said that even in the new SQL area there's some things that can do even that better and they called graph databases which basically are a representation of nodes and those nodes have edges to other things and that's kind of the same as an interim relationship degree and one of the big advantage of racial database which I kind of Miss D state especially an uncle is the effective unesco youth kind of a really good support for SQL scripts of edge scripts for loops you could do data migrations so easily these days it usually I do it in the application and milk on the database level which means more my application actually is a little bit per unit this data migration code which normally I can just keep database and so that's definitely something that I sort of missed from nice crowd so the different kernel arity no I screw basically having objects stored I think that is something immensely useful it also part of the reason why especially document databases government based database are so quick and so useful for web applications because looking back a couple of years say soap was kind of the new is seen in the Java world and everyone is doing XML and everyone who you looked at an XML document knows it's very hard to read there's a lot of metal information your document your payload just becomes amends and someone saw hey actually one of Jews Jason's much smaller and that's when rest came and these days you won't find many self interfaces bars open silicosis actually done was West which is Jason which is the same as MongoDB your couch together so if i have a relational databases i usually have tabular data csv now i have to transform that tabular data into my json object and reach it with it with a couple of other queries to retrieve all the relations that just spoils the performance and I think that's where even with smaller data sets no SQL will always be quicker and also saying obviously you have those nice function like fuse may produce which keeping you away is the query data analyze data now SQL f has the language the poor cell as well you can do aggregation on that sort of stuff but no SQL database usually are made for that specific purpose which means they do it more efficiently and they have a better integration and it's kind of relatively easy to write a better this function actually compared with a complex SQL script which sort of would do the same thing and and that's why i said it's kind of problem oriented so for every problem there's a matching donor base solution now on the ODMs side i mentioned it before you have financial data transaction which kind of force you to the acid compliant and you will end up with an rdp i guess and at this point in the question it's just well do i use the other BMS for the rest of my data as well well you ooh I only use it for that data that is sensitive that I have to maintain but obviously you don't want to have to the separate database connection the same app so that's always a bit of a trade of a nothing it depended on the amount of data the structure of the data and the size of your application italy for the importance to be back and of course as I said before the licensing costs I mean mobile Domini also had licensing model but the rest of the new SQL database you can use most of them out of the box for any purpose and a lot of them are actually open source as well which makes a lot easier and cannot be found a test and in the relational world where you have your big manufacturers that just say well corporate product no source code is released economy inspected and so that brings me to kind of my conclusion for choosing know as well I'm not saying that there's no there's no need for relational databases anymore but from my experience what I experienced over the last year there wasn't a single problem that I couldn't solve no SQL database or actually couldn't solve better with a with a relational database and primarily that's convenient speaking about the you know you don't have to do manipulations for resting or fails on building a couple of web services and all I do is just my web service code it's pretty much just a proxy for the database so request comes in give me that document here it is I don't have to do anything call it the database to everything and that and the fact that my data structure is not fixed also it uses the cost of development because also have to maintain the data model and the SQL data structure all the time or even migrate my data expense that just increases the cost of development so it gives me a lot more flexibility especially in those early stages of the project and of course scalability although that only becomes really important if you go I'll see terabyte mark I think so yeah so that is my oh and to stopping them any questions can you expand on bra you know it is some Middle where they were yeah so so I don't know exactly I haven't looked into it in detail but will I understand it's the middleware here so you basically have the API to communicate that's your communication endpoint and underneath the graphical cash kind of keeps the data but independent from the underlying storage solution so doesn't matter I've you stored in tables and you store it in documents or even just this binary in some file system it doesn't matter anymore because the graphical cash sauce it's magic happening there and they haven't done it yet so it we have to wait a little bit to see where this is going sorry Raphael is something that already exists and they trying to lay with yeah exactly that's the idea yeah actually does it look like we're reading where you some sort of Devon disclaimer unless I haven't dug deeper into it I just looked at the facts and how it's supposed to work together and that was kind of now since making poor Huck rescue one yeah Wow govorit when all good uses same person it happens to be true saving and sometimes that is that politics boy um I wouldn't think so and that's so so if you look at performance graph another reason why no skill database are usually tend to be quicker than relational databases because they're optimistic so yeah you might lose records but that's kind of that's kind of the reason why I so much quicker if they wouldn't make sure that every single item is referent all that sort of stuff it would just be the same as relational database so that one saying if that is important to your application you cannot lose a record it would cost you a lot of legal trouble you might even go to prison for that then you have to use all the VMS esther to negative of course anyway of storage oh i think especially when you have this issue where say you wanted to lead an object and but you still have reference to that object right you don't detect that the moment it illegal say occasionally you could run in consistency checks as a background application obviously not within the database and I just go through the later and figure out are there any inconsistencies if there are inconsistencies well either try to fix it automatically or send an email to the system administrator forming hey someone deleted a record here I couldn't find that reference and then you might go back into the excess looks and try to figure out which curry deleted the record and may be reconstructed from and holder back up also so there are solutions out there but you really don't want to go through that so usually when you can't afford to lose records you would use something that has that gives you the guarantee that it's persistent and consistent well then we've got breaking balls with what is it legal imitating agreeing to be consummated our BOTS selection some people bacteria that's going to dial into trees which is not really available to a lock so regret ql as its shitty back towards the application so when you write to entitle to keep track of ethical norms so to quit the brett the question basically is is the the effort that the application was the effort in that craft ql some schema or some some sort of meta descriptions language you bet in talking about the mapping between the underlying storage structure and how you feed that into your craft girl cash so and then oh yeah i would think that it's bows or hang on no actually i would think it's only in the Apollo stack because basically it doesn't offer you directly I think it doesn't offer you directly to air interface but it has this API on top which handles your request in a uniform way that this isn't the same there's the same syntax and how it determines what you really want to do or what data you are trying to retrieve that depends on the internal definition which kind of dependable and young lion structure that's probably secondary sword sir no and I wouldn't down and I think that that's a that's the thing so please keep in mind hasn't been implemented right now right now there has a few ideas and nothing to have a few components here and there and the overall goal is to give this reactivity to wider audience supporting multiple different seconds and I mean anyone who's already developed though who used extra external web services will have faced that issue where you call the results ones you keep them in your template oh when do you up when you update them wholly refresh them so that's kind of the problems that the statistic is trying to resolve just just covered for those interested in development of a bottle and especially directly well there is a preliminary design on my D updating so just go into the racquet club with your by passing td's the deposit rate and from there you control discussions in us and it's actually a very good point and I almost forgot about it so in the video the target Matt gave he also mentioned that they're trying to become solid eight the current github repository which is just huge list of packages just very hard to find what the actually looking for and what they're trying to do is kind of split them up so all the account packages go into one subgroup auditory and they kind of try to also manage them a little bit more independently so you have people that are responsible for all the accounts package if you're looking for that you go there it makes it easier to collaborate it makes it easier to find your project easier for them to organize them by now huge amount of packages I mean I guess when they started a few years ago they just had about five but now it is more like 500 that's a hard to manage one thing so my example was occasionally user which is in two places can look back to using my yeah yeah that's it the end to end relationship these refugees yeah yeah that's how you do it exactly so so your objects are independent from each other and the only reference the only evidence of that n2m relationship between your place and a set of users or one user in a set of places it's basically this kind of field which holds all the ideas of the other objects that it is related to and it will require so that's the thing not having the acid compliance and that kind of relational model it will shift the responsibility to us a developer to make sure that is consistent and that's the danger when you're thinking financial data or insurance they are stuff like that because well you can't really rely on every developer be as careful with the data as yourself as you should be and and eventually you will end up with some develop who just said all unlike this item you know just delete it and well if you don't check in your app though equals to the trouble so yeah but the database just gives you a little bit of a guarantee yeah usually they're just whatever in 16 min 16 characters and numbers was not massive so it depends look at it really depends if you have an application that has that is primarily composed of those relations what don't use mumble user graph database or use a relational database you just how we describe this problem if this is your main interactions between people at places then obviously one body is not really great especially if say this list of references can get enormous so in that case you're better off with a different elements of so it always depends on you as the engineer to figure out what's the best way of storing my domain objects in some places on storage and how do I kind of want to know how what kind of management operations through I have on them if I just really it's in the same and a squirrel database if you do mostly reads Maya scale is very very good even for huge amount of data but it's very slow writing so if you have an application that there's a lot of transactions mysql is not ideal that offers postgres but for instance openstreetmap run this exquisitely on my own domestic sorry Maya square because well will they a bunch of notes daily with 20 40 notes also but it's so great to read that you get really really good performance so it depends on the problem then thank you