this video is sponsored by brilliant hey guys tawfiq here in this video let's talk about procedures in sql now i'm going to start this video by explaining you what a procedure is and then i'm going to tell you what is the purpose of using a procedure we'll then see how to create a procedure i'm going to explain you the syntax of creating a procedure we'll see how to create a procedure with parameters without parameters we'll see how to execute a procedure etc now the most important thing is that all of this explanation the creation of this procedure the sol the solution to the realistic use case that i'm going to be doing in this video i'm going to be using four different rdbms so all of these solutions i'm going to be providing and i'm going to be writing these scripts using oracle mysql microsoft sql server and postgresql because these are the four most popular rdbms as of today and i'm going to give you a solution and offer to create these procedures and what procedures are uh with respect to all of these four rdbms so no matter which rdbms you are using you should hopefully benefit from this video now before i can start i would like to thank the sponsor of today's video which is brilliant now brilliant is an online learning platform where you can find interactive courses related to math science computer science and so many others now i understand that most of you guys who are watching my video are interested in moving into the field of data science or data analytics you would want to become a data scientist or data analyst right now if you are one of them then couple of skills that would definitely benefit in your journey to become a data analyst or data scientist is to learn statistics and probability now on brilliant you can find some fantastic courses related to probability and statistics and the best part about these courses or for that matter any other courses that are available on brilliant is that these courses are designed to be interactive and visually appealing so you'll not just be learning some theoretical concepts but you will be interactively involved so you will need to solve puzzles related to the concept that you're learning and you will need to answer several different questions related to the concept that you're learning and i feel it's one of the best way to learn because you will be involved interactively in your learning now the best part about brilliant is that you can start learning on brilliant for free you can just use the link that i will be sharing in the description below to sign up for free and then start learning now the first 200 people who will be using my link will get a 20 off on your annual subscription so definitely check that out and thank you brilliant for sponsoring this video okay so let's start by understanding what is a procedure now procedure is a block of code which is given a name and is stored in the database okay now this block of code can include sql queries and it can also include several different sql commands like dml commands ddl commands dcl commands tcl commands etc okay now along with these a procedure can also include several other concepts such as collection types cursors loop statements if else statements variables exception handling and much more now procedures can not only be used to query data from tables but we can use procedures to build complex logics data validations data cleanup and much more and this is a reason why procedures are so powerful because we can do a lot more in a procedure than which was possible just by using sql queries okay so this was a simple explanation of what a procedure is now let's see what is the purpose of using a procedure now procedure was introduced to give more power to sql language that is procedures are generally used to do things which is not possible in sql queries okay now depending on your project requirement you may use procedure to just have multiple queries bundled together inside a procedure or you may build an entire software logic inside a procedure which may include validation checks data processing querying of data and much more now in the most simplest of terms we use procedures when we have a requirement which is not possible to achieve just by using sql queries okay so i hope you kind of get an understanding of what a procedure is and what is the purpose of using it now let's see the syntax of creating a procedure now i just want to say that all of the syntax that i'm going to show you and all the sample procedures that i'll be creating in this video i'm going to be using all the four rdbms so first i'll be doing it using postgresql then i will move to oracle then i will move to microsoft sql server and then finally i'll move to mysql okay now even if you're not working on all of these four rdbms i would highly recommend that you watch the entire video because by watching this you will kind of get an understanding of what is the difference in creating and using of these procedures in all of these four rdbms and you will come to know the difference between these four rdbms is actually not that major once you understand any one rdbms if you had to switch to some other rdbms it's actually pretty easy okay so now let's look at the syntax to create a procedure first i'm going to show it to you in postgresql that is i'm using the pg admin tool now i'm not going to spend much time here but when i'm going to be writing the real procedure that is when i will explain you all the different parts of that syntax but in general in order to create a procedure we just need to write something like create or replace then you just mention procedure and then you give a procedure name okay and if this procedure has parameters you need to provide it inside this parenthesis if there are no parameters then still you need to provide this open and close parenthesis this is specific to postgre sql okay now what parameters are and what are the different types of parameters i am going to talk about that in a short while okay so let's say for example i have couple of parameters here i can just say p name uh it's basically the parameter name and then i need to give the data type okay so i'll just say varchar and for the second parameter i can just separate it using a comma and here i can just tell let's say ph and i am just going to tell this is an integer okay now i'm just using p as a standard it basically stands for parameter okay now after this i just need to specify what is the language of this particular procedure okay now this is specific to postgresql in any of the other rdbms you don't need to specify the language but since in postgresql supports a procedure where you can write a procedure in several different programming languages like in you can write python you can write sql related stuff and you can write c related stuff etc it's important for postgresql to understand that the procedure that you're writing is written in which language okay now since most of the time we are writing a procedure to do any procedural kind of stuff right we generally give the language as pl pg sql this basically stands for procedural language postgresql okay now this is basically a standard you can just follow if you are only going to be writing sql queries inside your procedure then you can just give a name like sql okay now after this we need to give a clause like as and then we need to provide this double quoted dollar symbol i'm going to tell you what this is used for in a short while so this is a standard that you need to follow and after this we we can just provide the declare statement here basically this is where you need to provide all your variables this basically where you declare all your variables okay so after your variables are declared then you have the begin section and basically inside this is where the your procedure body comes so this is the procedure body that is uh all the logics are built here okay all logics and all your query writing all your all the different operation that you are planning to do inside your procedure you basically are going to do it within your begin statement okay and then you need to end your begin with this end command and then after this you can put a semicolon and then you just need to end the double quoted dollar symbol okay now this is the basic uh syntax of creating a procedure in postgresql now this dollar symbol that you see here right now the reason why we use it is it's basically if you had any single quotes that you had to mention inside your procedure then you would have to manually handle each single code so let's say if your procedure had hundreds of different single codes then for each single quotes you needed to add a escape character or you needed to add an additional single code okay now in order to explain this better so let us say i have a string that i want to display something like uh i i am tawfiq okay now since it's a string i always need to enclose a string within the single quote so i will need to enclose it like this and let's say if i execute it like this it's going to throw me an error okay because i have a single quotes inside this string right now in order to fix this i have two ways i can do that one way is i just not add another single quotes here and then if i execute it's going to work because since i added another single quotes sql or postgresql will treat it like a single single quote okay the second way of doing this is i just need to add an escape character so i need to add an e before my string and then i can just add a backslash here so that sql will treat any character that comes after this backslash to be like an escape character and it will basically print it as it is okay now if i execute you can see the output is shown how i wanted it okay now the this is okay if you just had one single quotes to replace but if you had multiple single quotes within your procedure then this would cause a problem and that is why the another way of doing that is i can remove this backslash i can remove this e and i can remove in fact this single quotes within the string as well and i can just put something like double dollar here and anything that is mentioned within the double dollar postgresql will print it as it is okay now here i can have one single quote multiple single quote or whatever it is whatever characters you have inside this double quote it will treat it as it is okay and that is the purpose of having this double quoted dollar symbol okay i hope you get some understanding now this is the basic syntax of creating a procedure in postgresql now if i go to oracle now i am using sql developer tool here and this is the oracle database now the syntax is almost similar the major differences here is this language that you mentioned in postgresql you don't need to provide it in any other rdbms so i can just remove that and i don't need to provide this dollar symbol here as well because oracle will handle it internally okay then other than this everything else is same one more difference is i don't need to specifically mention declare here because any variable that you want to declare you can just declare it before your begin in oracle okay and then how you specify your parameters how you basically specify your variables and all the language body most of the things are pretty common between oracle and postgresql okay now one thing i forgot to mention here is why am i using create or replace now i can also create a procedure just by using create procedure the reason why i'm using replace is once i create a procedure if i try to recreate it then it's going to throw me an error telling that the procedure already exists okay and that is where i can use a create or replace because this will basically if the procedure is already present it is going to replace that existing procedure okay so i hope this is clear now if i come to the third rdbms that is microsoft sql server and if i just copy that entire syntax here the syntax of microsoft sql server to create a procedure is slightly different not much but there are few major differences the first difference is that all the parameters that you provide in microsoft sql server the parameter name has to start with at symbol okay so every parameter name has to start with an add symbol and the same thing is for variable as well whatever variable that you declare right generally we declare a variable telling that let's say we underscore name and then i need to provide a data type let's say end right something like this now in my in oracle and postgresql we could declare a variable just like this but when it comes to microsoft sql server every variable name has to start with it okay so this is one special thing that we need to do and the next thing is i don't need to have this declare keyword here i can remove that but before i declare a variable i need to mention declare keyword for each variable now either i can do this for each variable i can have a declare keyword here and then i specify the variable name and the data type name or i can have a comma separated value here then i can provide the next variable so let us say this is something like we underscore h i can do this as well okay so if i want to have multiple variables declared then i can just have one declare keyword here then multiple variables just separated by a comma this one also will work or i can have separate declared keyword for each of the variables to declare a variable okay now again i don't need to have this language pl pg sql because this is specific to postgresql as well so in microsoft sql server i don't need to provide that and also i don't need to provide this dollar symbol so this dollar symbol and this language that was declared is only specific to postgresql okay now this is the syntax of how to create a procedure in microsoft sql server now there are a few other differences when it comes to some specific commands we'll look at that when we will be writing procedure okay but the basic syntax is just this now there's one major difference and that is uh i cannot use replace in microsoft sql server instead of replace we have something called as an alter okay so this create or replace will only work in oracle and in postgresql but in microsoft sql server if i had to do the same operation instead of replace i need to do alter okay so the functionality is the same just two different naming okay so in in oracle and postgresql we have replace and in microsoft sql server we have alter okay now let's come to mysql now i am using the mysql workbench here and if you are wondering which tool i am using for my microsoft sql server because i am using the mac os i am using the azure data studio okay so as you can see its azure data studio but its almost a similar to a sql server management studio okay now coming to mysql the syntax for mysql is again i don't need to provide this language i don't need to have this dollar symbol here okay and i don't need to have any at symbol in my parameter name or i don't need to have it symbol in my variable name okay so the syntax would be almost similar to oracle but there is one additional thing that we need to do here and that is we need to specify what is the delimiter for the statement to end what i mean by that is when you are using any mysql workbench or any other tool right for each session there will be a default delimiter which basically indicates uh to the database that this is the end of the statement okay by default the delimiter in mysql is semicolon this is the default character which tells mysql that it's the end of the statement okay but the problem here is inside our procedure we can have multiple statements and when i say statements every select query is a statement every if condition is a statement every loop is a statement every variable that you declare is a statement okay so inside a procedure you can have multiple statements and what mysql will do is as soon as it finds a semicolon it's going to treat it like a statement okay so inside my procedure as soon as i declare one variable and i put a semicolon it's just going to treat this much as the entire procedure okay in order to avoid this kind of things we want to change the default delimiter to something else and how we can do that is just by giving delimiter and some character okay generally we provide something like dollar dollar and then at the end after this end here right instead of giving a semicolon i'll just provide something like dollar dollar okay now what mysql will do is as soon as it finds a dollar dollar it's going to treat that as a complete statement and because of this it's going to treat from the create until this statement until this line it's going to treat it like one whole statement and that basically is our procedure so basically in order to handle multiple statements within our procedure we just specifically change the delimiter to something i'm just using dollar dollar you can use any other as well and we just need to use the same delimiter at the end of our procedure okay so that's major difference in the syntax when it comes to mysql other than that i think most of the things are pretty similar one thing is in the parameter name and in the variable name you don't need to provide symbol but when you are declaring a variable i need to provide this declare keyword okay i need to say declare and then i need to say a variable name okay and then i need to provide a data type okay and in this particular case if i'm declaring multiple variables i need to have multiple declare keywords used okay now all of this i am going to explain in detail when we look at some real procedures okay i hope the syntax you understand and you understand the difference between the syntax in these four rdbms okay now let's go ahead and create a simple procedure in order to do one particular operation okay so let's start by creating a simple uh procedure now in order to create this simple procedure let's say i have a requirement something like this now for this i have two different tables i have the products table as you can see i have just one record which basically has information about iphone 13 pro max its price how many quantities remaining and how many quantity of these phones have been sold okay and then i have the sales table which basically has details about what are the sales that has happened so for every sale there is one record that is present in this table so what is the total sales price how many quantity uh were sold etc right now let's say you have been given a requirement where for every iphone 13 pro max sale we need to update the database accordingly okay or modify the database accordingly so just by looking at this i can tell that every time there is an iphone 13 pro max being sold first i need to go into the sales table and a new record has to get inserted into this table because that is basically the sales order information that we need to store in the database and secondly we need to update the products table uh basically these two columns that is the quantity remaining and quantity sold because as soon as one iphone gets sold the quantity remaining should reduce by one and the quantity sold should get increased by one right so we need to do this kind of modification now in order to modify these two tables we cannot just be writing sql queries and this is where we will need to write a procedure okay now this is a very simple example i'm just trying to show you a simple procedure so let's go ahead and create a procedure here i'm using postgresql for now once i do write this procedure in this database i'm just going to move into the other database as well okay so in order to create a procedure i can just tell create or replace procedure and i'm going to give this name like let's say pr by underscore products and i don't think i need any parameter here because they've already mentioned the product name here so i'm just going to use this name in order to query the data and then do all these modifications okay now as part of the syntax i need to mention the language here and i'm just going to say pl and the s clause and then i need to mention the dollar quoted symbol and here maybe i will need a variable to declare so i'm just going to use this declare keyword here and then i'm just going to have begin end and finally the double dollar quoted symbol to end my procedure right so what's the first thing that i will need to do i need to go into the products table and for this iphone 13 pro max i need to find the price and its product code why product code because in my sales table i don't have the product name but i only have the product code so from this product name that is given to us in our query we need to find the product code and then based on this we will need to insert a record into the sales table okay so the very first thing that we will need to do is to query the data from the products table so i'm just going to say select from products right where i think it is product name and since we already know the product name i'm just going to hard code it here in realistic project you may not be doing this but this is just a simple example once i go to the next step in this video uh we will be probably changing this okay so for now let's keep it like this and i need to fetch two columns here so from the products table i need the product code so i'm just going to say product code and i need the price okay because this price i need to basically use it in my sales table later now here i have just written an sql query which will just query the data from the database right in this case from the products table and i'm fetching these two columns now what i want to do is i want to store these two column values into some variable okay because i'm going to reuse this later when i'm going to insert some data into the sales table and update the data in the products table okay so in order to store any value that is fetched from the select query into some variable what i can just do is i can use the into clause here and here i can provide a variable for each value okay so i'm just going to say something like v product code okay and then i'm just going to say v let's say price i'm just using this prefix here v underscore just to indicate that this is a variable okay now since i'm using these two variables here i will have to declare them in my declare section here so i'm just going to do that so i'm just going to say both these variable names and here i can just tell okay my product code i think is a webcast i'm just going to say where care of let's say 20 and then my price is an integer or maybe it's a float so i'm just going to tell that this is a float okay now i think we have declared the two variables we have assigned these variable values using our select query what next so when i execute this query what will happen is for this particular uh iphone that is this particular product i am going to get the product code and the price right now let's try to go ahead and insert the data into the sales table because that is one of the steps that i need to do insert into the sales table and i'm going to pass in all the column names here and then i'm going to use the values and here i'll pass in all the different values for each of this column so order date i'm just going to say current date this is basically the current system date that will get fetched using this particular function this is specific to i think postgresql and oracle okay and then i need the product code now product code i have already fetched it here in this particular variable i got it from the above query so i'm just going to pass it here the next thing that i will need is quantity now as per this requirement i am just going to be selling one product at a time so the quantity will be one always okay in this particular case and the last thing is price now the sale price is always quantity into the price of the product but in this case quantity is one and the sale price i have got it from this variable that is v price i'm just going to open a bracket here i'll put it this price into one in this case it's always going to be v price but just for complete completeness i'm just going to have this multiplied by one okay if the quantity would be something else then this price would differ okay so this is basically my insert statement i'm inserting a data into the sales table the next thing that i will need to do or in fact the last thing that i will need to do in this particular procedure is to update the product table and i hope you understand why i'm updating the products table because as soon as a product gets sold i need to tell that the quantity remaining has reduced and the quantity sold has increased right so i'm just going to say update and here i'm just going to say quantity remaining equal to so i'm just going to copy this whole thing i'll just open a parenthesis and i'll just say quantity remaining minus 1 okay why am i doing minus 1 because as per my current requirement i am just selling one product at a time so i can just hard code it to one in this particular case okay if you had parameters and if you are passing multiple uh for different quantities then you would have to use that parameter which we will see in the next step okay for now i'm just going to reduce the quantity by one and i have another column that is i think quantity sold and this one should basically increase by one right so for this i'm just going to copy this quantity sold this one and i'll say plus one okay and now i need to tell where am i updating this okay currently this product only has one record but it might have more record in the future so it's always when you're doing an update always try to have a where clause so you only update the required records right and for this i'm just going to say let's say product code equal to this particular product code that i have already fetched okay so i think this much is fine now there is one last thing that i want to do is after this procedure is executed i want it to display whether the product was sold or not right so for that i'm just going to have a print statement now if you're using if you have used python you know that we have something like print statement so something similar we can do in postgresql as well by using the command arrays okay and here i can just pass raise notice and here i can just tell something like product sold okay just like a success message okay something like this now i think that's all and now if i just execute this entire procedure so let's say i'm just going to execute it and i'm getting an error so let's try to fix it okay i forgot a semicolon here so i'm just going to execute it but before that i'll just remove all of this or maybe maybe i'll just comment out these select statements so i can run the entire procedure as it is okay now i have executed it and you can see it is successful okay now i have created the procedure but that's not enough right once the procedure is created we should be able to run it so how do we run a procedure now how do we run a procedure is what i'm just going to do is i'm just going to open a new window here and here let me execute the procedure so you just you need to call the procedure so just say the keyword call and then you just provide the procedure name now it does not have any parameter so you need to provide these parentheses open and close parenthesis okay now when i execute this procedure something should happen in these two tables right so i'm just going to copy these two tables here and i'm just going to see what happens i'm just going to remove this comments and run this okay first of all you can see in the products table if i just show you the data you can see quantity remaining is 5 and quantity sold is 195 okay and in the sales table you can see we have three records only now when i run this call procedure you can see that i'm getting a message telling that product sold it's a notice okay so this is basically my success message that i had defined the product has been sold now if i go to my products table you can see the quantity has reduced from 5 to 4 and quantity sold has been increased from 195 to 196 okay and in the sales table you can see there is one additional record loaded uh this particular record right so this is basically how we have written our procedure and executed the procedure and i can execute this procedure again and again so let's say i'll execute it again once and i will let's say i will execute it once more time okay so i have executed it twice so in the sales table there should be two new records you can see there are two new records and in the products table it should get updated uh twice so from four it got reduced to two because i executed it twice and from 198 196 it's increased the quantity sold to 198 okay i hope you understand this procedure now in this procedure i just showed you how to create a procedure and how it did multiple things so we used a select query to fetch the data from the table and then store it into couple of variables we then did an insert into a table and then we did an update into our table and finally we also printed some success message right so we did all of this in postgresql using procedure okay so i hope you are clear about this but let's say if we had to do the same thing in oracle how we how do we do that okay so what i'm just going to do is i'm just going to copy this same procedure that i created here i'm going to go into oracle okay i'll just paste it here and here let's say i'm going to open another window to just query the data okay so i'm just going to copy these two tables here okay i'm just going to put it here so i have created these two tables in oracle as well in fact i have created the same tables in all of the rdbms now before i can proceed i just want to update that every single script that i will be creating in this video all the data sets all the tables all the procedures i'm going to have them attached in my discord channel so if you want to download these data sets and these scripts for your practice you can download it for free from my discord i'll leave the link to my discord in the video description okay now let's see how to basically create the same procedure in oracle okay now this same procedure if i just execute it as it is it's not going to work because there are a few syntax different so first of all i need to remove this language and okay i'll remove that i need to remove this dollar symbol okay and i'm just going to remove this dollar symbol the next thing that i will need to change is in oracle if you do not have a parenthesis you don't need to provide this open and close parenthesis okay basically if you don't have parameters you don't need to provide the open and close parenthesis okay that's the second thing and other than that i don't need to mention this declare here i can remove that because by default whatever you mentioned before your begin is treated as you are declaring something it's a declare section okay and i think other than this probably everything else should work okay one other thing that will not work is this one that is the raise notice because in oracle we don't have this raise command but rather than that we have something called as dbms underscore output dot put underscore line okay so this basically does the same thing that a print would do in python or a raise notice would do in postgresql okay now i think that's all let me try to execute this command or this procedure and you can see the procedure is executed successfully okay so now let's see how to execute it in order to execute it i can just go to another tab here and i can just run the command so previously in postgresql we use the command call but here we just need to say exec and the procedure name i think is uh pr by products so i'm just going to place it here okay and i think that's all so but one thing before you execute this in oracle that you need to do is because here i have a dbms statement here to print something right if i just execute i will not be able to see it in order to see the output from your procedures what we need to do is we need to just open the dbms output window so i just need to go to i think not here i think you just need to go to i think i just need to go into weave and here i have something called as dbms output so if i click that you'll see something like this and here i just need to open a window for my current database that is demo okay so i need to have this dbms output window just so that i can see what is the basically the data that is returned from my dbms output statement from this procedure that i have given here okay so now let me execute this procedure the execution is just this single statement so i'll just execute it and you can see procedure is successful and you can see i'm getting the output product sold okay so now if i go into my products table previously it was five now it is four uh quantity remaining and quantity sold is 196 and in the sales table previously there were three records now the fourth record is inserted so let's say if i execute this again now you can see again it is product sold if i go to the sales table you can see now there are from four there are five records now and in the products table from the four remaining now it is reduced to three okay so the same thing that i did in postgre sql i was able to do it in oracle and the reason why i'm showing it in multiple different rdbms is so you can know what is the difference in the syntax of this rdbms so if you are working on one rdbms and tomorrow if you get a job where they're using some other rdbms you don't have to be worried whatever you learn it's going to be useful in any other rdbms here we did very few changes between postgresql and oracle and we were able to implement the same logic right i hope this is clear okay so now let's go to microsoft sql server and let's see how to do this so i'm just going to copy these two tables again to microsoft sql server and okay maybe not now so i'll just copy this entire procedure that i have created here okay so i'll just copy the procedure that i created in oracle i'll just paste it here and let's see what is the difference the first difference as you can see you're getting this message create a replace will not work we need to have alter so i'm replacing replace keyword with alter the next thing is every variable i told you needs to have an ed symbol at the beginning so i'm just going to have an add symbol in the beginning here then everything else is same okay of course one more thing is i need to use the declare keyword here as i mentioned previously so we need to mention the declare keyword then you mention the variable name and then you mention the data type right and since i have multiple data variables here i can just put a comma here and i can just include this multiple variables within my same declare statement okay so that's the first part the next change is everywhere where i was using this variable i need to have this replaced with the add right so i'm just going to have this at being prefixed in all of my variables and okay one more thing is in postgresql and oracle this into command worked but in microsoft sql server this will not work the syntax is slightly different we will not be able to use this into but what we need to do is for every variable we can just assign the value that is written from the select statement just by using a syntax like this so you just mention the variable name the equal to symbol and then your column name right and the same thing for your second variable as well okay these are just a few syntactical differences in these two rdbms but logically or basically functionally they do the exact same thing okay now similarly this current date will not work in microsoft sql server rather than that we can use a function called as get date now this get date i think also prints the timestamp i only want to fetch the date so i'm just going to cast this to fetch only the date value okay so that's one change and then here wherever i'm using this variable i need to use the at what is that symbol before the variable and yeah i'll just reply i'll just put this at everywhere where i'm using this variable so i'm using it here i think that's all okay and the last thing that i will need to do is this dbms output will not work in microsoft sql server rather print works okay so that's one good thing here we don't need to write such a big dbms output dot put a put line statement right we can just put print and hopefully this should work now let's try to execute this and see if it's going to work or if there are any errors no it's working absolutely fine so let's do one thing i'll open another window here to execute this so i'm just going to say and choose i'll connect to my database and yeah so i'll i'll use my demo database and let me get the two table names so i'm just going to copy it from here in fact i'll copy this entire thing here okay so the command to execute the procedure in microsoft sql server is also exactly the same so i'm just going to execute it but before that let me show you the data in products table you can see quantity is 5 and sales table there is 3 records now if i execute the procedure you can see that it is successful and it's giving a message telling that product sold right so if i go into my products table now it's reduced from five to four and in the sales table it should have increased from three to four records right that is what you can see here okay so this is what we have done in microsoft sql server almost the same syntax very few changes every variable needs to have an uh symbol in in the beginning and we the way how you fetch data from your select query into a variable is slightly different as you can see here and the print can be used to display any message right so this is how we have done it in microsoft sql server now let's see how to do the same thing in mysql okay okay so now let's go to uh mysql but before that i'm just going to copy this procedure from oracle because mysql code and my oracle code of procedure is almost similar so i'm just going to copy from oracle now one thing that you need to remember here is this create or replace does not work in mysql uh because in mysql if i have to basically rerun the procedure and i will need to first drop the procedure and then recreate it okay so this alter will not work actually alter is supported but alder cannot be used to change the body of the procedure it can be used to change the some characteristics or parameters of the procedure okay in order to change the body of the procedure we need to basically drop the procedure first so i'll just say drop procedure if exist then i just need to provide the procedure name here okay this if exist is basically a check if the procedure exists only then this statement will execute otherwise it will just keep this statement okay and then i just need to tell procedure create procedure procedure name here i can pass in the open and close parenthesis if there are no parameters and then i can i don't need to have this as clause in mysql so i'm just going to remove that okay other than that i think uh yeah so when i'm declaring this variables right i need to use the declare keyword and i need to declare it inside the begin using begin section so here i can just tell declare of this thing and i need to do the same for both the variables i think in mysql we cannot declare multiple variables in a single statement so i'm just going to do this and then i think everything else should probably work okay dbms output will probably not work in mysql rather what we can do is i can just use the select keyword or basically the select clause select and whatever i want to print it i can just mention it here okay so i think that's all and this should probably work let me execute this and see if it works i am getting an error so the error is okay because i need to give a delimiter right so that's one important thing so i'm just going to say delhi meter and my default delimiter is let's say double dollar okay and here at the end i'll just put this double dollar this just indicates mysql that this is the end of the statement so this whole thing will be treated like one statement okay now if i execute this yeah you can see that it's working fine now let's try to execute the procedure now before i execute the procedure let me show you the data in this table so i'm just going to copy it from oracle i'll go back to mysql let's i'll open another window here and i'll just query the products table okay so i'll just execute the products table you can see it's having just one record the quantity ordered is five and the sales table the quant you can see there are three records right in order to execute the procedure first of all let me copy the procedure name let me go here and i can just use the call keyword so i can just say call and the procedure name open the close open and close parenthesis and then i can just run this okay so as soon as i run it you can see i'm getting product sold and here also it is basically successful okay so if i go back to my sales table now it should have four records as you can see the fourth record was inserted due to this execution and the products table should have the quantity reduced from five to four okay so basically you have now seen how i have created this simple procedure in all of the four rdbms okay i hope this is clear now let's go to the next step that i want to cover in this video that is how do we create procedures which contains parameters okay again i'm going to follow the same flow i'll create first in postgresql then i'll move to oracle then i'll go to microsoft sql server and then i'll move to mysql okay so now let's go to the next part of this video where i'll be creating procedures with parameters and we'll see what can be a useful case where you might need to create a procedure with parameters and how to handle them okay now in order to explain this i have just modified the same two tables i have just added additional records now you can see in the products table i have four different product information and in the sales table you can see there are 10 different records these are the sales information or the sales order details about these four products okay now let's say you have been given a new requirement which looks something like this they are telling for every given product and the given quantity check if the product is available based on the required quantity and if it is available then modify the database tables accordingly so what they are telling is now you will be given the product and also you will be given how much quantity of that product is required to be sold as per that particular sales order and you need to first check in the database if so many products are actually available if it is available only then do the modification if it is not available then maybe return an meaningful message okay so let's try to write a procedure for this but of course i'm not going to be writing this procedure from scratch because we will be using the existing procedure that we just created earlier okay so this is a procedure that we created earlier now what is the first thing that we need to do as per our requirement they have told that they will be giving the product and the quantity information so i think there will be two new parameters the first parameter is going to be let's say p product name okay and this will be a varchar okay so for every product you need to mention what is its data type and you can also mention what type of parameter it is now we'll come to that in a short while but the next parameter that we are going to have is i think what was that it's a quantity right so it's going to be let's say p quant dt okay and this will be let's say an integer okay so these are the two details that we have got now the very first thing that we need to do is if i go into my products table and you can see here uh i'm not sure if you can see i'll just zoom it you can see that uh some of the products the remaining quantity is just 5 10 2 or 1 right so if someone asks for ipad air and if they're asking for let's say 5 ipod ipad airs but the available there is only one right so it should basically throw us an error telling that we do not have so many ipad aids as of now right so the first thing that we need to do is we need to check for the given required data is sufficient amount of product available in the database okay so let's try to write a query for that the first thing is we'll keep everything as it is the very first thing that we will do is i'm just going to say select okay something like let's say count of one or count of star whatever okay and i'm just going to say from the products table where i'm just going to say product let's say product so i think we are going to pass instead of yeah so product name right so i can just tell product name equal to this parameter name okay and then the quantity right so so how do we check for the quantity now in the products table uh i have this quantity remaining so i can just use this column right so i can just tell uh quantity quantity uh remaining okay it has to be either greater or equal to the quantity that the customer may be asking as of now right so this parameter here right what this basically means is now this by default if i if i have not mentioned in or out something right by default these parameters are called as input parameters meaning that these are the input that the user or from the ui or wherever this procedure is being called right this is the input that will be passed when the procedure is being called okay and this parameter this input parameter we can use it anywhere in our procedure okay to do any calculations or any logic right so what i am doing is in my products table for this particular product and for the given quantity i'm checking if there is sufficient data now i'm matching with the given product so let's say if the product was ipad air okay and if the quantity given was two now if i go to products table you can see i have ipad air but the quantity here is one so what will happen is this one is greater than or equal to two this will actually fail so this will return zero right when it returns zero i have to basically tell that insufficient uh quantity or something like that right so that's why i'm doing this kind of a check now again as i told you in postgresql in order to load any or basically retrieve the data from a query and to load it into a variable we can just use the n2 clause and here i'm just going to say let's say i'm going to create a variable v count so i'll just create it here we underscore count and this will be let's say integer okay so i'm just fetching the data for the given product for the given quantity i'm checking if the quantity that is available is greater than the required quantity passed in the input then this will return always something greater than zero right so if it's returning greater than zero then it it's an indication for us that the the products are available and we can proceed with the sale right so what i'm just going to do next is once i have fetched this information then i can put an if condition here now this if condition is similar if you have worked on sql queries and you might have used case statement right now case statement is something that we use in select queries if we want to use the same functionality in a pl sql block that is inside a procedure then we use if statement okay so i can just tell if this count that we have got from our previous query if it is greater than zero that means there were some data returned from this table that if that happens only then we can update the database right so if it is greater than zero then i am just going to say then okay then i will do something so what i am going to do uh will do it in a short while but what i am just going to do is we will basically do the same thing that is insert into sales table and update the products table right and then we'll tell the products also i'm just going to move this to the right okay and here i'll just put so this is basically everything that will happen if we are having the sufficient quantity and for that given product right but if if not what happens if the sufficient quantity is not met then i am going to put an else part here okay and after else i need to put an end if this is basically the syntax of how to use if statement if then you put an expression that should written either true or false if it is true then it will go inside the if part if it is false if this condition is false then it will go to the else part okay and this end f is just telling the if condition is coming to an end okay now here in the else part what i want to do is if that uh query above returned 0 that means the qua either the product itself is not present or the quantity that they asked for is exceeding the available quantity in the database then we want to print a notice telling that something like let's say in sufficient insufficient quantity okay something like this so this just means that the the number of quantity of item that the customer or the client has asked in the database we do not have so much when i say database it basically means in the store so much is not there so what actually happens is when you go to a store to buy a product they generally look into their system right how many products are available and everything and basically this is what happens from their system they kind of do a search or a submit and internally it might call a procedure which will basically do this kind of analysis and then it will return the result if the product is available then it will tell yes or else it might tell something like insufficient uh product available or something like that okay so we are basically trying to implement similar logic here okay now this is okay let's once look at this f part here i am just fetching uh product code so here i was hard coding the product name but now i have got the product name right so what i'm just going to do is i'm going to use this product name because we have more than one product in our table now right so for this product i'm fetching the product code and the price and by putting it into the same two variable that have already declared here right and then i'm inserting data into the sales table so order date and then the same product code and the quantity now i cannot hardcode the quantity as one because the quantity is already passed in my parameter right so my parameter i have basically given name like prefixed with p underscore so i can just put this way okay so generally when i am writing a code i try to make it very clear which is a variable and which is a parameter so anything that starts from p underscore is a parameter anything that starts from v underscore is a variable okay of course you can have your own naming convention this is just something that i follow to make it more neater for me uh so i have put the quantity here and then when it comes to sales price i need to multiply the quantity with the price that was returned here right so this basically what i am inserting into the sales table i hope this is clear once i have loaded the data into the sales table i need to update the products table right so i need to update the product table for the given okay i can either search it based on the product code or the product name they both are should be the same because uh i'm assuming that it's going to be the unique both product name and product code will be unique in this particular case okay so in this case instead of hard coding this one right i just need to use the quantity because quantity can be one or can be more than one and the same thing i need to do for quantity sold as well okay so this basically i have done my update here and i have done my else here and i think that's all we don't need to do anything else so i'm just going to execute this query sorry this procedure and you can see there are no errors here now let's go ahead and execute this procedure now when i am executing this procedure since this has two parameters it's going to be slightly different from what we did here okay so previously we just did we used the call basically command and then we put the procedure name and opened and close the parenthesis but here inside the parenthesis since there are parameters for this particular procedure i need to pass those parameters okay so what i'm going to do is first is product name and then it's a quantity so i will go and look into my products table i have ipad air right so i'm just going to pass my first product or basically my parameter as i pad here okay and i'll say quantity one okay i just want one okay now when i execute this ideally what should happen is this quantity remaining here it is one now it should become 0 because 1 of them got sold and this quantity sold should become from 9 to 10 okay and then in the sales table there are 10 records here as you can see now it should increase to 11 records because there will be a new cell that will be added at the end right so i'll just execute this and i have executed and you can see i'm getting the message product sold right if i go to my sales table you can see now there are the 11 records the one record that just got added now and in my products table you can see the product ipad air now it's telling remaining quantity is zero right so this means if i execute this procedure again with the same data and i'm asking for ipad air one ipad air it should basically return me that insufficient product right because now there are remaining ipad air is 0 and i'm asking for one ipad air basically there should be no ipad air to be sold right so let's see if that works and i'm just going to execute this procedure and you can see that the message that i'm getting is insufficient quantity right and then if i look at my products table nothing would have changed right and in my sales table also nothing would have changed okay and the reason why this happened was this particular case when i passed one as a quantity and product name as ipad air this query would return 0 okay because there are because this quantity remaining for ipad air is 0 0 is greater than or equal to 1 this condition will fail hence this query will return 0 hence my v count will be 0 okay since my v count is 0 this condition this expression will return false and since this will return false it will not go into the then part but it will go into the else part in my else part i am just printing this one in sufficient quantity and that's exactly what is happening okay i hope this is clear this is how using parameters we can basically make our procedure so much better and we can implement so much complex logics but with the help of parameters okay now this parameter that i have shown here is input parameter if you don't specify either in or out then they are by default called as input parameter now i can also mention this and i can execute this and you can see it will work absolutely fine and if i run this procedure also it's going to return the same output okay now this in that i mentioned before the parameter name here right this is an optional input parameter basically keyword if it's an out parameter then i need to specifically mention that if it was an in parameter then by default whether i mention it or don't mention it by default postgresql will treat it like an input parameter in fact all in all the rdbms if you don't mention if what type of parameter it is by default it is always input parameter okay so i hope this is clear now as always what i'm going to do is i'm going to copy this entire procedure i'm going to the next rdbms that is oracle in this case and i'm going to basically okay i'll not copy from here to here i already have the procedure written in oracle right so what i am just going to do is clear all this and here also i have modified the table to include the new data to satisfy our current condition so i have four products and in sales i have i think 10 sales data right now how do i modify this so i need two parameters what i'm just going to do is instead of typing everything i try to do a copy paste as much as possible in order to just save time because i hope you have already understood everything that i explained in postgresql so i don't need to mention this in clause here in keyword here i'm just going to remove that so i've added my two parameters i have this and my very first condition is i need to check the count right if the quantity is available so for that again i'll just copy the same query because the same query will work in oracle so i'll just move it here i need to create this variable so i'm just going to create this variable here and this will be an integer and i think or everything else should be fine okay so once i have got the value in my v count i need to put my if condition here and if this one is greater than zero then i will do the update into my database right so if it is not greater than 0 that means the quantity is not getting satisfied so many products are not available then i need to have an else part and inside my else part i just need to print a warning message telling that insufficient product right or insufficient quantity so i can just tell in sufficient quantity right so i think that's all we don't basically need to do any other change this is how simple it is when moving from postgresql to oracle because there are they are so so much similar okay so i'm just going to execute this let's see if there are any errors and i'm just going to move this up okay it looks like there are no errors it worked absolutely fine so now let's go ahead and execute this you already know that in my products table i have ipad air but now for now let's say i'm going to take this iphone 13 pro max okay so iphone 13 pro max i have five remaining products okay and let's call this procedure now i need to pass two parameters so i'm going to pass iphone 13 pro max and i'm going to say quantity as two okay so i want to buy two iphones now let me execute this and let's see what happens so executed it is telling it is successful here and it is linked product sold if i go to my products table now iphone 13 pro has not reduced by two it has only reduced by four and i think we missed some changes in the procedure and that was i think here we are still hard coding this quantity as one we did not use the parameter right so let's go back and modify our procedure here and what we need to do is everywhere where we are hard coding we should be using the proper parameter name right so this p product name is what we need to pass in our query here right and then yeah we need to change all of this so current date will still work and this quantity has to be okay i'm just going to copy this p quantity and even here we need to pass p quantity and here as well and here as well right and then this i think all this should be fine yeah i think now it's fine now let's execute the procedure again okay i'm just going to clear all of this and now i'm going back to uh yeah this place and okay so i think the data got already changed in this table right even though let's still try to use with the same table now you can see that iphone 13. there are four remaining right now let me go ahead and run this procedure it is executed successfully product sold now if i go back to my products table you can see that now iphone it's reduced by two okay the reason was i passed quantity as two right now let's say uh what i'm going to do is i'm going to pass let's say three okay the remaining iphones are only two but i'm telling i want to buy three iphones now if i run this it's going to tell me it's telling insufficient quantity okay it's not throwing an error it's just passing a warning message telling that it's uh we do not have so many products to be sold right so this is basically how we have implemented the same same procedure in oracle okay i hope this is clear okay so now let's move on to microsoft sql server and i'm going to basically do the same thing so i have already loaded the additional data in these two tables so if you see in the products table i have the four products in the sales table i have the 10 sales details now let's look at the procedure that we had already written for microsoft sql server the first thing is we need to have two parameters right let's try to add these two parameters now i'm just going to do one thing i'm just going to copy it from here since i don't want to type everything again i'll just paste it here but as i told you in microsoft sql server every parameter and every variable has to start with an at symbol right so i'm just going to add an edge symbol here and variable already has that and we are going to use this product name here right and this p quantity is something that we will use here wherever there is one hardcoded we will use the quantity that was passed from our input parameter right and yeah so one more thing that we need to do is we need to do this check if the quantity of that product is available for this sale to happen so i'm just going to paste it here and as i told you in microsoft sql server this into does not work instead of into i can just pass it here and i can just tell equal to that column value from the select class and since it's a variable i need to have a add symbol in the beginning so i'm just going to put this at v count equal to select count of one now i can have select count of one or count of star both will return the same value and next thing what i'm going to do is i'm again going to do the same if condition check but here the if condition syntax is slightly different from the other two rdbms and we'll see that so i'm just going to say if this count is greater than zero only then you need to basically do the update into the database right but in here in microsoft sql server we don't have this then clause okay we don't need to use that what we need to do is i just need to tell something like begin okay so inside if if i'm having more than one statement to execute then all of those statement i need to put it inside begin and end block okay so i'm just going to move everything to the right okay uh yes here and let's say here i'll just tell end okay and after that i can have my else part and for else also i can have begin and end if there are only one statement then i don't need to have begin and end okay for my if part here what you saw at the top here let me just okay this one you can see here i have multiple statements so this whole thing is one statement anything when you see it ends with a semicolon it sql will treat it like one statement okay so this is one statement this is the second statement this is the third statement this is the fourth statement since you have multiple statements inside my if i need to put it inside the begin and end okay and then when i come to my else part i just want to print something like insufficient um quantity right so i'm just going to say insufficient quantity right so i think that's all what i want to do here and probably this should work now let me execute this query or this procedure let's see if it is successful okay i'm getting some error let's try to fix the error first of all let's go to the first one it's telling line 6 this okay so we did not declare this vcount variable right so we need to declare that i'm just going to declare it here and this will be an integer right now let's execute the okay i'm getting another error and p product name at line 9 okay so this p product name is our parameter and it has an at symbol in the beginning right and the same thing for quantity as well now let's try to execute this and now you see it's working fine okay no errors so now let's try to execute this procedure so let's go back to this place and here i need to pass two parameters so i look at my products table let's say i'm going to pass uh airports pro okay so i'll pass airpods pro and i'll tell i need to uh maybe let's say i need five products okay i i need five of their parts pro to be purchased okay so if i execute this now uh i'm getting an error let's see what is the error airpods pro okay so the error here is because i cannot put this parenthesis so when i'm passing parameters or basically calling a procedure or executing a procedure in microsoft sql server which contain parameters then i don't provide parenthesis here so now if i execute this now you can see it's working absolutely fine and you're getting insufficient quantity error okay so we're getting insufficient quantity i think something is wrong because in the products table i can see i have 10 airpods pro and i'm just passing 5. let's look at our procedure what's happening here and okay so i think i understand what's happening because uh in microsoft sql server right in postgresql and in oracle we can just pass this data type like where care we do not need to provide the character size but in microsoft sql server if you just provide like this what it will do is it's only going to take the very first character of that parameter so even though i passed uh like airpods pro it only took a and for a it was trying to match in this table it was not getting any record it was passing zero hence it was telling insufficient this one okay so what i'm just going to do is i'm just going to make here i can either pass a character like let's say 40 50 or whatever or i can pass something like max okay and now i'm just going to execute this and i'll go back to this part and here i'll execute this and now you can see that it's working fine it's telling product is sold if i go into my products table you can see now from 10 it is reduced to 5 and in the sales table as well there it should be one record the 11th record is added now let's say if i execute this once again you can see the product is sold because there were five remaining but let's say if i execute this one more time it will tell insufficient because i already executed it i'm executing for the third time but only 10 were available right so i hope you understand what's happening here and you understand the concept i hope this is clear okay so now let's move on to mysql and here we already have the procedure that is written so let's modify this procedure to satisfy our current requirement so the very first thing is we need to have the two parameters so what i'm just going to do is i'm going to go to oracle because it's very similar the syntax of mysql is very similar to oracle some of the features are borrowed from microsoft sql server as well but let's do this so i have pulled in the two parameters and then i have declared the variables okay so the very first thing is i need to check for the count if i have sufficient quantity of that product or not so for that what i'll do is i'll just copy this entire select query here and i'll just put it here right so this variable i need to declare so i'm just going to say declare of this variable and this will be an integer right and then what next i need to do is i just need to have an if condition here the if condition is very similar to what we have in oracle it's not like microsoft sql server so i can just tell v count is greater than 0 then i do all of this right all of these inserts and updates and yeah and then okay even this cell product sold and then i need to have an else part here and i need to have an end if part here and inside my else part i just need to display insufficient quantity so i'm just going to say the same thing that is insufficient quantity right and i think everything else should work okay one thing that will not work is this one we need to use this parameter now because we are passing the parameter right so i'm just going to say product name i'm going to replace this parameter here and my p quantity i'm just going to replace it here and here and here and here right i think that's all everything else should be fine so i'm just going to execute this i'm getting an error let's try to fix the error so let's see what the error is okay so i think the error is with this current date this current date does not work if this was a function that is supported only in oracle and postgresql so here we can in order to fetch the current date i can just use the now function and i think it will return date time date stamp as well so i just want to fetch the date so i'm just going to say as date and i think that's all let me execute this now i'm still getting an error let's see what's the next error okay so i think the error again it's the same thing what we had in microsoft sql server so i just need to pass in the character size here and now let me execute this and you can see it's working fine so the error is fixed here and let's go ahead and execute this procedure so i need to pass in the two values so let me look at the products table and yeah so let me look at the products table i have these data uh let's say i just want to purchase uh maybe let's again go for this airpods pro okay i'll just pass airports pro i'll pass in 5 as my required quantity and i will execute this and i'm getting product sold if i go to my products table it if i execute my products table it's now telling remaining airports is only 5 and the sales table would definitely have one record inserted here that is eleventh record and then let's go ahead and execute this procedure let's say two more times okay the first time it should work because there are still five uh products remaining five airports remaining so you're getting product sold but if i execute again it should return insufficient uh quantity and exactly that's what's happening okay i hope you understood this and i hope how we have used parameters to build this kind of a simple logic okay you