hello everyone welcome back in this presentation we will focus on instances and schemas these two are the important terminologies as far as database management systems is concerned in order to understand things let's see an analogy we know basically any software is developed using some programming languages so obviously software programs are written who writes the software program the programmer let's assume a software programmer is defining a variable a so this variable is obviously going to hold some value in it now who is giving value to this variable the software program that he has written right and the value for this variable will be existing within the scope of the software program let's assume this software program is modifying this variable a as 20 now and it doesn't mean that this 20 is always fixed to this variable it may be changing according to the situation so the variable a now it is containing 20 the value of the variable will be varying and that's why it is named as variable and what i mean to say here is a software variable may contain any value in it but what about the type of value it is storing it is actually storing integer type in this example so if you note here the variable a is declared as integer type and let's assume this program is written in c language and let this variable be integer type so when it is declared as integer in c language the size of that variable is going to be 2 bytes in other words 16 bits so what i mean to say here is the value will be changed but the structure and the memory that is assigned to this variable a is fixed which is of 2 bytes in nature so with this analogy let's step into the topic of the day please be noted that the value of the variable may change but not the structure or the size of the variable that is fixed here so with this knowledge let's step into seeing the definition of schemas what is actually a schema it is actually the overall design of the database what is a database it is a collection of tables what is a table it is a data structure where the data is organized in the form of rows and columns so when we have a table and when we have collection of tables we refer that as database and the overall design or the structure of the database is actually referred as schema the overall design may involve multiple tables say for example if we consider a banking database it's not only one table will be there in the banking database tables like customer accounts loan assets and many more should be maintained in their banking database any database we take we will have multiple tables so the overall design or the structure of the database is referred as schema and how this is related to the analogy that we have seen so here the database schema is actually referred as the variable declaration in the analogy we have seen we have defined the variable as integer which is of two bytes when it is declared in c language so the data type is integer and the size of the data type is of two bytes because we have declared it as integer in c language so the variable declaration is fixed it may not be modified frequently it's like the database schema so the database schema is also like the variable declaration where the schema is not frequently changed but the data present in the table may change but we are talking about schemas so this schema is like the variable declaration so this is like the type definitions we make in any programming languages that's what we have seen in the analogy and what about the changes or updations in the schema will it be frequently done or not at all or occasionally done once the schema is fixed it's not frequently changed and sometimes it's not at all changed because the schema is actually developed based on the requirement once the schema is fixed it's not frequently changed or even it is not at all changed but there will be scope for changing and that's why i related schema with the variable declaration once a variable is declared the size is fixed and it will not be changed but there are some dynamic memory allocation techniques in any programming language to change the data type but not frequently done anyway if there is a requirement to change the schema of course the database administrator can change the schema i'll show you an example type definition which will help us to understand about schemas so we are going to define a record type of student here the record type that i am creating is student and what are all the fields that the student record is going to contain the first one the first field is the role number which is of numeric type and the maximum size is 5 the second field is the name of the student which is of care type and the maximum size of the student name is 25 characters and the last field is the class in which the student is studying and this class field is also off camera type and the maximum size is 10 and we are ending this if you note here this is the structure that we have created this is the student record which contains three fields roll number name and class so this structure is not frequently changed and that's why i told you schemas are like the structure or the overall design of the database now i will correlate this with the real time example let's take university as an example in a university the department record or table will contain columns or fields like the department name the department building the budget the name of the head of the department and other fields courses will contain fields like course id title department name credits and so on and the student record of student table will contain fields or columns like the roll number or the id name department name total credits etc at the physical level these tables or records can be described as a block of some consecutive storage locations and obviously the system or the compiler will hide all these level of details from the programmers and that's what we call as data abstraction it hides the complexity because programmer doesn't need all those internal details so the database systems hides many of the storage level details from the database programmers on the other hand database administrators will be aware of certain additional details about the physical organization of the database because he is the database administrator he has the complete control about the database and he has additional responsibilities so we are done with the schemas let's now move on to the next definition instances and where we are going to talk about this instances obviously in the databases what is a database it's a collection of interrelated data when we say that it is a collection of interrelated data and the collection of the information stored in the database at that particular moment is called as an instance say for example databases can change over time the data may be added or the data may be deleted so the database is the same but the data present in the database is not the same in all the instances i mean it's not the same throughout isn't it so the data present in the database may change and that's why i said the collection of information stored in the database at a particular moment is referred as an instance we know the structure of the database will not be changed frequently but the data present in the database will be changed frequently let's assume i'm maintaining a university database at this particular time let's assume i have 1000 records maybe if 100 students are admitted tomorrow then the database size will be changed the data present in the database will also be changed but the structure is not changed frequently isn't it so the collection of information at that particular moment is called as an instance and how this is related to the analogy we have seen we have seen the variable definition or the type definition is equivalent to the schema the value present in the variable is equivalent to the instance so the database instance means it's equivalent to the value of the variable that we have seen in the analogy because the value of the variable keeps on changing as per the need and obviously databases can grow and shrink i hope now you are clear with what is an instance what are the three levels of abstraction we have seen the view level logical level and physical level likewise when we talk about the schema and instances we should be knowing that there exists subscribers at the view level there exist multiple views isn't it and then we have the logical schema at the logical level and then we have one more schema at the bottom most level what's that it's actually the physical schema where the database actually reside it's actually the database where the data are actually stored in the physical medium data how they are stored it is in the physical schema how they are organized in the application or in the language it is done in the logical schema how it is presented to the user and how many views are there that is dealt in the sub schema i hope now you can understand what are schemas and instances i'll see you in the next presentation and thank you for watching [Music] [Applause] [Music]